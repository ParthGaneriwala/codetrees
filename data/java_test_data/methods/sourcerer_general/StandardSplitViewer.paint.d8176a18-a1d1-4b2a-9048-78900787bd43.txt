@Override
public void paint(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
    Dimension d = getSize();
    g2.setPaint(Color.WHITE);
    g2.fillRect(0, 0, d.width, d.height);
    FontMetrics fM = g2.getFontMetrics();
    otst = fM.stringWidth("-000:00") + 5;
    int width = d.width - otst;
    // -heightStr-2;
    int height = d.height;
    AthleteIcon[] athletes = (AthleteIcon[]) (aModel.getSelectedValues());
    int[] spl = aModel.getViewingSplits();
    Distance dist = aModel.getDistance();
    int size = athletes.length;
    if ((spl != null) && (size > 0)) {
        // Calculating CP's x coordinates
        xCoord = new int[spl.length];
        if (dist != null) {
            int totDist = Tools.calculateTotalLength(dist, spl);
            int curDist = otst;
            for (int i = 0; i < spl.length; i++) {
                xCoord[i] = curDist + (int) ((dist.getLengthOfDist(spl[i]) / (double) totDist) * width);
                curDist = xCoord[i];
            }
        } else {
            int sizeLap = width / spl.length;
            for (int i = 0; i < spl.length; i++) xCoord[i] = sizeLap * (i + 1);
        }
        // Draw vertical black line for each viewing CP
        g2.setPaint(Color.BLACK);
        for (int i = 0; i < spl.length; i++) {
            g2.drawLine(xCoord[i], 0, xCoord[i], height);
        }
        // Calculate and draw horizontal lines with time
        int yMax = athletes[size - 1].getTotalTime().getTimeInSeconds();
        int hTime = fM.getHeight();
        double stepTime = 30.0;
        int nT = (int) (yMax / stepTime);
        while ((height / nT) < (hTime + 10)) {
            stepTime *= 2;
            nT = (int) (yMax / stepTime);
        }
        Time tmp = new Time(0, 2);
        String s = tmp.getTimeString();
        g2.setPaint(Color.BLACK);
        g2.drawString(s, otst - fM.stringWidth(s), height - 1);
        float[] dash1 = { 10.0f };
        BasicStroke dashed = new BasicStroke(1.0f, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f);
        g2.setStroke(dashed);
        for (int i = 1; i < nT; i++) {
            int timeCur = Math.abs((int) (stepTime * i));
            tmp.setTimeInSeconds(timeCur);
            s = tmp.getTimeString();
            int yH = height - (int) ((stepTime * i / yMax) * height);
            g2.setPaint(Color.BLACK);
            g2.drawString(s, otst - fM.stringWidth(s), yH);
            g2.setPaint(Color.LIGHT_GRAY);
            g2.drawLine(otst, yH, otst + width, yH);
        }
        tmp.setTimeInSeconds((int) (stepTime * nT));
        s = tmp.getTimeString();
        g2.setPaint(Color.BLACK);
        g2.drawString(s, otst - fM.stringWidth(s), hTime + 1);
        int yH = height - (int) ((stepTime * nT / yMax) * height);
        g2.setPaint(Color.LIGHT_GRAY);
        g2.drawLine(otst, yH, otst + width, yH);
        // Draw charts
        g2.setStroke(new BasicStroke(1.0f));
        for (int j = 0; j < size; j++) {
            g2.setPaint(athletes[j].getColor());
            Athlete tmpA = athletes[j].getAthlete();
            int x = xCoord[0];
            int y = height - (int) ((tmpA.getLap(spl[0]).getTimeInSeconds() / (double) yMax) * height);
            int totTime = tmpA.getLap(spl[0]).getTimeInSeconds();
            g2.drawLine(otst, height, x, y);
            for (int i = 1; i < spl.length; i++) {
                int x1 = xCoord[i];
                if (tmpA.getLap(spl[i]).getTimeInSeconds() == 0)
                    break;
                totTime += tmpA.getLap(spl[i]).getTimeInSeconds();
                int y1 = height - (int) ((totTime / (double) yMax) * height);
                g2.drawLine(x, y, x1, y1);
                x = x1;
                y = y1;
            }
        }
    } else {
        xCoord = null;
    }
    // Notify listeners about changing of x coordinates
    for (XCoordinatesListener e : listeners) {
        e.xCoordinatesChanged(this);
    }
}
