public static float findMaxSeparation(int[] edgeIndex, final BBPolygonShape poly1, final BBTransform xf1, final BBPolygonShape poly2, final BBTransform xf2) {
    int count1 = poly1.m_vertexCount;
    final BBVec2[] normals1 = poly1.m_normals;
    // Vector pointing from the centroid of poly1 to the centroid of poly2.
    BBVec2 d = mul(xf2, sub(poly2.m_centroid, mul(xf1, poly1.m_centroid)));
    BBVec2 dLocal1 = mulT(xf1.R, d);
    // Find edge normal on poly1 that has the largest projection onto d.
    int edge = 0;
    float maxDot = -FLT_MAX;
    for (int i = 0; i < count1; ++i) {
        float dot = dot(normals1[i], dLocal1);
        if (dot > maxDot) {
            maxDot = dot;
            edge = i;
        }
    }
    // Get the separation for the edge normal.
    float s = edgeSeparation(poly1, xf1, edge, poly2, xf2);
    // Check the separation for the previous edge normal.
    int prevEdge = edge - 1 >= 0 ? edge - 1 : count1 - 1;
    float sPrev = edgeSeparation(poly1, xf1, prevEdge, poly2, xf2);
    // Check the separation for the next edge normal.
    int nextEdge = edge + 1 < count1 ? edge + 1 : 0;
    float sNext = edgeSeparation(poly1, xf1, nextEdge, poly2, xf2);
    // Find the best edge and the search direction.
    int bestEdge;
    float bestSeparation;
    int increment;
    if (sPrev > s & sPrev > sNext) {
        increment = -1;
        bestEdge = prevEdge;
        bestSeparation = sPrev;
    } else if (sNext > s) {
        increment = 1;
        bestEdge = nextEdge;
        bestSeparation = sNext;
    } else {
        edgeIndex[0] = edge;
        return s;
    }
    // Perform a local search for the best edge normal.
    for (; ; ) {
        if (increment == -1)
            edge = bestEdge - 1 >= 0 ? bestEdge - 1 : count1 - 1;
        else
            edge = bestEdge + 1 < count1 ? bestEdge + 1 : 0;
        s = edgeSeparation(poly1, xf1, edge, poly2, xf2);
        if (s > bestSeparation) {
            bestEdge = edge;
            bestSeparation = s;
        } else {
            break;
        }
    }
    edgeIndex[0] = bestEdge;
    return bestSeparation;
}
