public void generateCode() {
    FileWriter fw = null;
    for (Function func : this.funcList) {
        // �������к���
        // �浱ǰ��������Ϊ���淽�������л������
        this.func = func;
        // �������������Ҫ�ı�������С����Ϊspace
        int space = (this.func.getVmap().size() + 4) * 4;
        // д���ຯ��ͷ
        output.add("@f" + func.getName() + ":");
        output.add("push ebp");
        output.add("mov ebp,esp");
        output.add("sub esp," + space);
        for (Quaternion quater : func.getQuaterList()) {
            // �����ú�����������Ԫʽ
            switch(quater.getOperator()) {
                // ������Ԫʽ�Ĳ�����op��ת����Ӧ�ķ���ȥ��Ӷ�Ӧ�Ļ�����
                case Yacc.ADD:
                    add(quater);
                    break;
                case Yacc.SUB:
                    sub(quater);
                    break;
                case Yacc.MUL:
                    mul(quater);
                    break;
                case Yacc.DIV:
                    div(quater);
                    break;
                case Yacc.MOV:
                    mov(quater);
                    break;
                case Yacc.CALL:
                    call(quater);
                    break;
                case Yacc.CMP:
                    cmp(quater);
                    break;
                case Yacc.CONDITION:
                    condition(quater);
                    break;
                case Yacc.J:
                    j(quater);
                    break;
                case Yacc.JFALSE:
                    jfalse(quater);
                    break;
                case Yacc.PRINTF:
                    print(quater);
                    break;
                case Yacc.PUSHPARA:
                    pushpara(quater);
                    break;
                case Yacc.RETURN:
                    ret(quater);
                    break;
                case Yacc.SCANF:
                    scan(quater);
                    break;
                case Yacc.STAMP:
                    stamp(quater);
                    break;
                default:
                    break;
            }
        }
        if (func.getQuaterList().getLast().getOperator() != Yacc.RETURN) {
            // ����Ƿ��з�����䣬��û���Զ���ӣ������û���������
            warn = "Warning:Return Missing!";
            output.add("mov esp,ebp");
            output.add("pop ebp");
            output.add("ret");
        }
    }
    if (!"main".equals(funcList.getLast().getName())) {
        warn = "Warning: �Ҳ���main����!";
    } else if (funcList.getLast().getRetype() == -1) {
        warn = "Warning: main�����ķ�������û�ж��壡";
    }
    // �������ļ�
    File ofile = new File(outputpath);
    try {
        ofile.createNewFile();
    } catch (IOException e) {
        e.printStackTrace();
    }
    try {
        fw = new FileWriter(ofile);
        fw.write(".386\n");
        fw.write(".MODEL FLAT\n");
        fw.write("include \\masm32\\include\\msvcrt.inc\n");
        fw.write("includelib \\masm32\\lib\\msvcrt.lib\n");
        fw.write("puts proto C\n");
        fw.write("printf proto C\n");
        fw.write("scanf proto C\n");
        fw.write(".STACK 4096\n");
        fw.write(".DATA\n");
        for (String s : this.global_var) {
            fw.write("$" + s + " DWORD 0\n");
        }
        for (String s : strlist) {
            fw.write(s + '\n');
        }
        fw.write(".CODE\n");
        for (String s : output) {
            fw.write(s + '\n');
        }
        fw.write("_main:\n");
        fw.write("jmp near ptr @fmain\n");
        fw.write("end _main\n");
        fw.flush();
        fw.close();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
