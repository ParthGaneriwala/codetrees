private StringBuffer printSymbolTree(int linebreakpos, boolean preserveAllSemiColons) throws IOException {
    offset = 0;
    braceNesting = 0;
    scopes.clear();
    String symbol;
    JavaScriptToken token;
    ScriptOrFnScope currentScope;
    JavaScriptIdentifier identifier;
    int length = tokens.size();
    StringBuffer result = new StringBuffer();
    int linestartpos = 0;
    enterScope(globalScope);
    while (offset < length) {
        token = consumeToken();
        symbol = token.getValue();
        currentScope = getCurrentScope();
        switch(token.getType()) {
            case Token.NAME:
                if (offset >= 2 && getToken(-2).getType() == Token.DOT || getToken(0).getType() == Token.OBJECTLIT) {
                    result.append(symbol);
                } else {
                    identifier = getIdentifier(symbol, currentScope);
                    if (identifier != null) {
                        if (identifier.getMungedValue() != null) {
                            result.append(identifier.getMungedValue());
                        } else {
                            result.append(symbol);
                        }
                        if (currentScope != globalScope && identifier.getRefcount() == 0) {
                            warn("[WARNING] The symbol " + symbol + " is declared but is apparently never used.\nThis code can probably be written in a more efficient way.", true);
                        }
                    } else {
                        result.append(symbol);
                    }
                }
                break;
            case Token.REGEXP:
            case Token.NUMBER:
            case Token.STRING:
                result.append(symbol);
                break;
            case Token.ADD:
            case Token.SUB:
                result.append((String) literals.get(new Integer(token.getType())));
                if (offset < length) {
                    token = getToken(0);
                    if (token.getType() == Token.INC || token.getType() == Token.DEC || token.getType() == Token.ADD || token.getType() == Token.DEC) {
                        // Handle the case x +/- ++/-- y
                        // We must keep a white space here. Otherwise, x +++ y would be
                        // interpreted as x ++ + y by the compiler, which is a bug (due
                        // to the implicit assignment being done on the wrong variable)
                        result.append(" ");
                    } else if (token.getType() == Token.POS && getToken(-1).getType() == Token.ADD || token.getType() == Token.NEG && getToken(-1).getType() == Token.SUB) {
                        // Handle the case x + + y and x - - y
                        result.append(" ");
                    }
                }
                break;
            case Token.FUNCTION:
                result.append("function");
                token = consumeToken();
                if (token.getType() == Token.NAME) {
                    result.append(" ");
                    symbol = token.getValue();
                    identifier = getIdentifier(symbol, currentScope);
                    assert identifier != null;
                    if (identifier.getMungedValue() != null) {
                        result.append(identifier.getMungedValue());
                    } else {
                        result.append(symbol);
                    }
                    if (currentScope != globalScope && identifier.getRefcount() == 0) {
                        warn("[WARNING] The symbol " + symbol + " is declared but is apparently never used.\nThis code can probably be written in a more efficient way.", true);
                    }
                    token = consumeToken();
                }
                assert token.getType() == Token.LP;
                result.append("(");
                currentScope = (ScriptOrFnScope) indexedScopes.get(new Integer(offset));
                enterScope(currentScope);
                while ((token = consumeToken()).getType() != Token.RP) {
                    assert token.getType() == Token.NAME || token.getType() == Token.COMMA;
                    if (token.getType() == Token.NAME) {
                        symbol = token.getValue();
                        identifier = getIdentifier(symbol, currentScope);
                        assert identifier != null;
                        if (identifier.getMungedValue() != null) {
                            result.append(identifier.getMungedValue());
                        } else {
                            result.append(symbol);
                        }
                    } else if (token.getType() == Token.COMMA) {
                        result.append(",");
                    }
                }
                result.append(")");
                token = consumeToken();
                assert token.getType() == Token.LC;
                result.append("{");
                braceNesting++;
                token = getToken(0);
                if (token.getType() == Token.STRING) {
                    // This is a hint. Skip it!
                    consumeToken();
                    token = getToken(0);
                    assert token.getType() == Token.SEMI;
                    consumeToken();
                }
                break;
            case Token.RETURN:
                result.append("return");
                // by '(', '[', '{', a string or a regexp.
                if (offset < length) {
                    token = getToken(0);
                    if (token.getType() != Token.LP && token.getType() != Token.LB && token.getType() != Token.LC && token.getType() != Token.STRING && token.getType() != Token.REGEXP) {
                        result.append(" ");
                    }
                }
                break;
            case Token.CASE:
                result.append("case");
                // White-space needed after 'case' when not followed by a string.
                if (offset < length && getToken(0).getType() != Token.STRING) {
                    result.append(" ");
                }
                break;
            case Token.THROW:
                // White-space needed after 'throw' when not followed by a string.
                result.append("throw");
                if (offset < length && getToken(0).getType() != Token.STRING) {
                    result.append(" ");
                }
                break;
            case Token.BREAK:
                result.append("break");
                if (offset < length && getToken(0).getType() != Token.SEMI) {
                    // If 'break' is not followed by a semi-colon, it must be
                    // followed by a label, hence the need for a white space.
                    result.append(" ");
                }
                break;
            case Token.CONTINUE:
                result.append("continue");
                if (offset < length && getToken(0).getType() != Token.SEMI) {
                    // If 'continue' is not followed by a semi-colon, it must be
                    // followed by a label, hence the need for a white space.
                    result.append(" ");
                }
                break;
            case Token.LC:
                result.append("{");
                braceNesting++;
                break;
            case Token.RC:
                result.append("}");
                braceNesting--;
                assert braceNesting >= currentScope.getBraceNesting();
                if (braceNesting == currentScope.getBraceNesting()) {
                    leaveCurrentScope();
                }
                break;
            case Token.SEMI:
                // No need to output a semi-colon if the next character is a right-curly...
                if (preserveAllSemiColons || offset < length && getToken(0).getType() != Token.RC)
                    result.append(";");
                if (linebreakpos >= 0 && result.length() - linestartpos > linebreakpos) {
                    // Some source control tools don't like it when files containing lines longer
                    // than, say 8000 characters, are checked in. The linebreak option is used in
                    // that case to split long lines after a specific column.
                    result.append("\n");
                    linestartpos = result.length();
                }
                break;
            case Token.IECC:
                result.append("/*");
                result.append(symbol);
                result.append("*/");
                break;
            default:
                String literal = (String) literals.get(new Integer(token.getType()));
                if (literal != null) {
                    result.append(literal);
                } else {
                    warn("[WARNING] This symbol cannot be printed: " + symbol, true);
                }
                break;
        }
    }
    return result;
}
