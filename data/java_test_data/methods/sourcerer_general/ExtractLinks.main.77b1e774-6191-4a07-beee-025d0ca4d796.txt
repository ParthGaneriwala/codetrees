public static void main(String[] args) throws IOException {
    // String path = "G:\\ClueWeb09B\\ClueWeb09_English_1\\";
    // String path = "/Volumes/My Book/ClueWeb09_English_2/"; // -- 1
    // String path = "/Volumes/My Book/ClueWeb09_English_3/";
    // String path = "/Volumes/My Book/ClueWeb09_English_4/";
    // String path = "/Volumes/My Book/ClueWeb09_English_5/";
    String path = "/Volumes/apple/ClueWeb09_English_6/";
    // String path = "/Volumes/apple/ClueWeb09_English_7/";
    // String path = "/Volumes/apple/ClueWeb09_English_8/";
    // String path = "/Volumes/apple/ClueWeb09_English_9/";
    // String path = "/Volumes/data/ClueWeb09_English_10/";
    // String path = "/Users/qil14/Desktop/ClueWeb09B/idlinks/";
    // String opath = "G:\\ClueWeb09B\\idlinks\\";
    String opath = "/Users/qil14/Desktop/ClueWeb09/idlink";
    // String log = "/Users/qil14/Desktop/ClueWeb09/log9";
    // HashMap<String, String>  logs = readLog(log);
    File ens = new File(path);
    String[] files = ens.list();
    for (int i = 0; i < files.length; i++) {
        String dir = path + files[i];
        if (dir.contains(".DS_Store"))
            continue;
        if (dir.contains("DocnoWikiidLink"))
            continue;
        System.out.println("===" + dir);
        File dirs = new File(dir);
        String[] dirss = dirs.list();
        String outputfile = opath + "/" + files[i] + "1.idlinks";
        File o = new File(outputfile);
        for (int j = 0; j < dirss.length; j++) {
            String warc = path + files[i] + "/" + dirss[j];
            // if (logs.containsKey(files[i] + "/" +dirss [j])) continue;
            if (!warc.contains("en0072/15"))
                continue;
            System.out.println(warc + "\t" + outputfile);
            // try {
            // FileReader sw=new FileReader(warc);
            // BufferedReader swRead= new BufferedReader(sw);
            // 
            // String st;
            // while ((st=swRead.readLine())!=null)
            // Utils.writeToFile(outputfile, st, true, true);
            // swRead.close();
            // sw.close();
            // }
            // catch(Exception e)
            // {
            // e.printStackTrace();
            // }
            // open our gzip input stream
            GZIPInputStream gzInputStream = new GZIPInputStream(new FileInputStream(warc));
            // String links = "";
            int count = 0;
            // cast to a data input stream
            DataInputStream inStream = new DataInputStream(gzInputStream);
            // iterate through our stream
            WarcRecord thisWarcRecord;
            while ((thisWarcRecord = WarcRecord.readNextWarcRecord(inStream)) != null) {
                // see if it's a response record
                if (thisWarcRecord.getHeaderRecordType().equals("response")) {
                    // it is - create a WarcHTML record
                    WarcHTMLResponseRecord htmlRecord = new WarcHTMLResponseRecord(thisWarcRecord);
                    // get our TREC ID and target URI
                    String thisTRECID = htmlRecord.getTargetTrecID();
                    String thisTargetURI = htmlRecord.getTargetURI();
                    // get the content of the file, HTML page
                    // WarcRecord raw = htmlRecord.getRawRecord();
                    // String content = raw.getContentUTF8();
                    // print our data
                    String link = thisTRECID + "\t" + thisTargetURI;
                    count = count + 1;
                    // System.out.println(count +"\t"+ link);
                    Utils.writeToFile(outputfile, link, true, true);
                }
            }
            inStream.close();
        // Utils.writeToFile(log, files[i] + "/" +dirss [j]+"\t"+count, true, true);
        }
    }
}
