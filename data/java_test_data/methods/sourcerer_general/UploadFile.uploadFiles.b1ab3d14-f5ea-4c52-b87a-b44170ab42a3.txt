public // Uploads Files
void uploadFiles(// Uploads Files
String path, // Uploads Files
String From, // Uploads Files
int totalNmberOfFiles, // Uploads Files
long downloadStartTime) {
    System.out.println("fileindex" + fileIndex + "  " + Thread.currentThread().getName());
    String username = SettingsXml.getUser().replace("@", ".");
    if (!From.equals("Manual")) {
        restore.setVisible(true);
    }
    MainDialog.UpDownProgressBar.setVisible(true);
    MainDialog.UpDownProgressBar.setValue(0);
    String email = SettingsXml.getUser();
    // Object[] filesToStore = map.keySet().toArray();
    String filesToStore = "";
    java.sql.Timestamp t = null;
    java.sql.Timestamp t1 = null;
    long duration = 0;
    try {
        while (MultithreadingUpload.getQueueSize() > 0 && uploadContinue) {
            Object[] obj = null;
            synchronized (this) {
                obj = MultithreadingUpload.getFileNameFromQueue();
                filesToStore = obj[0].toString();
                System.out.println("Thread  " + Thread.currentThread().getName() + " Getting " + filesToStore);
            }
            t1 = null;
            if (obj[1].toString().equals("false")) {
                String directoryName = filesToStore.substring(0, filesToStore.replace("\\", "/").lastIndexOf("/"));
                String filename = filesToStore.substring(filesToStore.replace("\\", "/").lastIndexOf("/") + 1);
                boolean dirExistOnTheHashMap = false;
                S3Bucket s3bucket = null;
                synchronized (this) {
                    dirExistOnTheHashMap = fileIndex.containsKey(directoryName.toLowerCase().trim().replace("\\", "/"));
                    if (!dirExistOnTheHashMap) {
                        String uniqukey = generateUniqeKey();
                        s3bucket = amazons3S3Utility.CreateBucket(username + "." + uniqukey);
                        fileIndex.put(directoryName.toLowerCase().trim().replace("\\", "/"), username + "." + uniqukey);
                    }
                }
                String s333 = fileIndex.get(directoryName.toLowerCase().trim().replace("\\", "/")).toString();
                System.out.println(s333);
                if (!databaseHelper.checkFileExist(email, directoryName + "/" + filename)) {
                    t = new java.sql.Timestamp(new java.util.Date().getTime());
                    amazons3S3Utility.UploadFile(filesToStore, s333);
                    filesTransfer++;
                    sizeTransfer += new File(directoryName + "/" + filename).length();
                    t1 = new java.sql.Timestamp(new java.util.Date().getTime());
                    createXMLFile.changeXmlStatusNode(path, filesToStore, true);
                    System.out.println("Uploading of " + filename + "  is completed");
                    // uploadMainIndexFile(username);
                    if (From.equals("Manual")) {
                        MainDialog.UpDownProgressBar.setValue((100 * (totalFilesUploaded + 1) / totalNmberOfFiles));
                    } else {
                        RestoreProgressBar.RestoreProgressBar.setValue((100 * (totalFilesUploaded + 1) / totalNmberOfFiles));
                    }
                    totalFilesUploaded++;
                    databaseHelper.insertIntoBackupDetailTb(email, downloadStartTime, filesToStore, (t1.getTime() - t.getTime()), "");
                } else {
                    databaseHelper.insertIntoBackupDetailTb(email, downloadStartTime, filesToStore, 0, "File Allready Exist On the Server");
                }
            // if (t1 == null) {
            // databaseHelper.insertIntoBackupDetailTb(email, startTime, filesToStore, 0, "File Allready Exist On the Server");
            // } else {
            // databaseHelper.insertIntoBackupDetailTb(email, startTime, filesToStore, (t1.getTime() - t.getTime()), "");
            // duration += (t1.getTime() - t.getTime());
            // }
            }
        // }
        // if (From.equals("Manual")) {
        // MainDialog.UpDownProgressBar.setVisible(false);
        // MainDialog.ProgressLevel.setVisible(false);
        // MainDialog.but_start.setText("Start Backup");
        // } else {
        // RestoreProgressBar.RestoreProgressBar.setVisible(false);
        // RestoreProgressBar.RestoreProgressLabel.setText("Uploading Completed");
        // restore.setVisible(false);
        // }
        // 
        // int totalfiles = 0;
        // long selectedFilesSize = 0;
        // if (MainForm.getSelectionButton().equals("filesystemButton")) {
        // if (TestFileTree.getSelectedNodes() != null) {
        // totalfiles = TestFileTree.getSelectedNodes().size();
        // }
        // selectedFilesSize = TestFileTree.getSelectedFilesSize();
        // } else {
        // totalfiles = MainForm.getBackupSetSelectedFiles();
        // selectedFilesSize = MainForm.getBackupSetSelectedFiles();
        // }
        // if (uploadContinue) {
        // if (totalNmberOfFiles != 0) {
        // if (From.equals("Manual")) {
        // databaseHelper.insertIntoBackupTb(email, MachineName, MacId, IPAddress, startTime, type, duration, "Sucessful", totalNmberOfFiles, sizeTransfer, filesTransfer, sizeTransfer);
        // } else {
        // databaseHelper.insertIntoBackupTb(email, MachineName, MacId, IPAddress, startTime, "Automatic", duration, "Sucessful", totalNmberOfFiles, sizeTransfer, filesTransfer, sizeTransfer);
        // }
        // }
        // } else {
        // if (totalNmberOfFiles != 0) {
        // if (From.equals("Manual")) {
        // databaseHelper.insertIntoBackupTb(email, MachineName, MacId, IPAddress, startTime, type, duration, "Cancle", totalNmberOfFiles, selectedFilesSize, filesTransfer, sizeTransfer);
        // } else {
        // databaseHelper.insertIntoBackupTb(email, MachineName, MacId, IPAddress, startTime, "Automatic", duration, "Cancle", totalNmberOfFiles, Config_3_backup.usedSize, filesTransfer, sizeTransfer);
        // }
        // }
        // }
        }
    // AmazonS3Utility.setFileTransfer(0);
    // AmazonS3Utility.setSizeTransfer(0);
    } catch (Exception ex) {
    // ex.printStackTrace();
    } finally {
    }
}
