public InternalPortletPreference[] getStoredPreferences(PortletWindow portletWindow, PortletRequest request) throws PortletContainerException {
    String key = getFormattedKey(portletWindow);
    if (key.startsWith("T")) {
        // This is a temporary portlet so use the portlet defaults
        try {
            DashboardPortlet portlet = (DashboardPortlet) request.getAttribute("dashboardPortlet");
            LOG.debug("read-------------------------------------");
            LOG.debug("portlet page name: " + portlet.getPageName());
            LOG.debug("portlet key: " + portlet.getWindowConfigId());
            LOG.debug("portlet formatted key: " + key);
            LOG.debug("-----------------------------------------");
            // Internal Store for temporary prefs
            InternalPortletPreference[] preferences = storage.get(portlet.getPageName() + key);
            if (preferences == null) {
                preferences = new InternalPortletPreference[0];
            }
            // Default Preferences
            InternalPortletPreference[] prefs = new InternalPortletPreference[portlet.getDefaultPreferences().size() + preferences.length];
            int count = -1;
            for (DashboardPortletPrefs thisProperty : portlet.getDefaultPreferences().values()) {
                String name = thisProperty.getName();
                // Exclude sending portal preferences
                if ("portlet-events".equals(name) || "portlet-rules".equals(name)) {
                    continue;
                }
                String[] values = thisProperty.getValues();
                for (int i = 0; i < values.length; i++) {
                    String value = values[i];
                    // check for variables
                    if (value.contains("${")) {
                        Template template = new Template();
                        template.setText(value);
                        ArrayList templateVariables = template.getVariables();
                        // replace the variables with the appropriate object's value
                        for (Object o : templateVariables) {
                            String templateVariable = (String) o;
                            String[] variable = templateVariable.split("\\.");
                            Object object = null;
                            if ("project".equals(variable[0])) {
                                object = PortalUtils.getProject(request);
                            } else if ("main-profile".equals(variable[0])) {
                                object = ProjectUtils.loadProject(PortalUtils.getApplicationPrefs(request).get(ApplicationPrefs.MAIN_PROFILE));
                            } else if ("user".equals(variable[0])) {
                                object = PortalUtils.getUser(request);
                            } else if ("system".equals(variable[0])) {
                                object = PortalUtils.getApplicationPrefs(request);
                            } else {
                                object = request.getAttribute(variable[0]);
                            }
                            if (object != null) {
                                StringBuffer thisVariable = new StringBuffer();
                                String encodeMethod = null;
                                for (int splitCount = 1; splitCount < variable.length; splitCount++) {
                                    if (thisVariable.length() > 0) {
                                        thisVariable.append(".");
                                    }
                                    // Add the variable and determine if encoded
                                    if (variable[splitCount].contains(":")) {
                                        String[] encoded = variable[splitCount].split("[:]");
                                        thisVariable.append(encoded[0]);
                                        encodeMethod = encoded[1];
                                    } else if (variable[splitCount].contains("?")) {
                                        String[] encoded = variable[splitCount].split("[?]");
                                        thisVariable.append(encoded[0]);
                                        encodeMethod = encoded[1];
                                    } else {
                                        thisVariable.append(variable[splitCount]);
                                    }
                                }
                                // Retrieve the object's value
                                String newValue = null;
                                if (variable.length == 1) {
                                    newValue = (String) object;
                                } else if ("system".equals(variable[0])) {
                                    Method method = object.getClass().getMethod("get", new Class[] { String.class });
                                    newValue = (String) method.invoke(object, new Object[] { thisVariable.toString() });
                                } else {
                                    newValue = ObjectUtils.getParam(object, thisVariable.toString());
                                }
                                if (encodeMethod == null) {
                                    // Output as-is
                                    template.addParseElement("${" + templateVariable + "}", newValue);
                                } else if ("xml".equals(encodeMethod)) {
                                    template.addParseElement("${" + templateVariable + "}", XMLUtils.toXMLValue(newValue));
                                } else {
                                    // Default encoding to html
                                    template.addParseElement("${" + templateVariable + "}", StringUtils.toHtml(newValue));
                                }
                                values[i] = template.getParsedText();
                            }
                        }
                    }
                }
                ++count;
                InternalPortletPreference thisPref = new PortletPreferenceImpl(name, values);
                prefs[count] = thisPref;
            }
            // Merge the default prefs with any stored prefs
            for (InternalPortletPreference thisPref : preferences) {
                LOG.debug("Temporary pref: " + thisPref.getName() + " - " + thisPref.getValues());
                ++count;
                prefs[count] = thisPref;
            }
            return prefs;
        } catch (Exception se) {
            throw new PortletContainerException("PortletPreferencesServiceImpl-> Error: " + se.getMessage());
        }
    } else {
        InternalPortletPreference[] preferences = storage.get(key);
        if (preferences != null) {
            return clonePreferences(preferences);
        }
        Connection db = (Connection) request.getAttribute("connection");
        if (db != null) {
            try {
                DashboardPortletPrefsList propertyMap = new DashboardPortletPrefsList();
                propertyMap.setPortletId(key);
                propertyMap.buildList(db);
                InternalPortletPreference[] prefs = new InternalPortletPreference[propertyMap.size()];
                Iterator i = propertyMap.iterator();
                int count = -1;
                while (i.hasNext()) {
                    DashboardPortletPrefs thisProperty = (DashboardPortletPrefs) i.next();
                    String name = thisProperty.getName();
                    String[] values = thisProperty.getValues();
                    ++count;
                    InternalPortletPreference thisPref = new PortletPreferenceImpl(name, values);
                    prefs[count] = thisPref;
                }
                storage.put(key, prefs);
                return prefs;
            } catch (Exception se) {
                throw new PortletContainerException("PortletPreferencesServiceImpl-> Error: " + se.getMessage());
            }
        }
    }
    if (System.getProperty("DEBUG") != null) {
        LOG.warn("Returning empty prefs because database connection is null");
    }
    return new InternalPortletPreference[0];
}
