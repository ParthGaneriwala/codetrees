public SecaoPaginaGrupoVO GetHomeByPortal(int porId, int preview) {
    SecaoPaginaGrupoVO secaoPaginaGrupoVO = new SecaoPaginaGrupoVO();
    secaoPaginaGrupoVO.setGrupoVO(new ArrayList());
    int secId = UtilsDAO.C_NAO_LOCALIZADO;
    try {
        // Obtém o ID da seção HOME
        if (preview != UtilsDAO.C_STATUS_PENDENTE_APROVACAO) {
            String hqlSelect = "select tbsecao from TbSecao as tbsecao" + " where tbsecao.tbPortal.porId = :porid" + // seção HOME
            " and tbsecao.secIdPai = -25" + " and tbsecao.secTpStatus > 1";
            List resultList1 = em.createQuery(hqlSelect).setParameter("porid", porId).getResultList();
            Iterator iter1 = resultList1.iterator();
            if (iter1.hasNext()) {
                secId = ((TbSecao) iter1.next()).getSecId().intValue();
            }
        } else {
            String hqlSelect = "select tbsecao from TbSecao as tbsecao" + " where tbsecao.tbPortal.porId = :porid" + // seção HOME
            " and tbsecao.secIdPai = -25";
            List resultList2 = em.createQuery(hqlSelect).setParameter("porid", porId).getResultList();
            Iterator iter1 = resultList2.iterator();
            if (iter1.hasNext()) {
                secId = ((TbSecao) iter1.next()).getSecId().intValue();
            }
        }
        if (secId != UtilsDAO.C_NAO_LOCALIZADO) {
            // Retorna os dados da seção e a página associada a seção HOME
            // 
            String hqlSelect = "select tbsecao from TbSecao as tbsecao" + // evita lazy loading - pre load do sub-objeto
            " inner join fetch tbsecao.tbPagina" + " where tbsecao.secId = :secid";
            List resultList3 = em.createQuery(hqlSelect).setParameter("secid", secId).getResultList();
            TbSecao elementTbSecao = null;
            elementTbSecao = (TbSecao) resultList3.iterator().next();
            // Copia dados para o SecaoVO
            SecaoVO itemSecaoVO = new SecaoVO();
            itemSecaoVO.setSecId(new Integer(secId));
            try {
                BeanUtils.copyProperties(itemSecaoVO, elementTbSecao);
            } catch (Exception e) {
                e.printStackTrace();
            }
            secaoPaginaGrupoVO.setSecaoVO(itemSecaoVO);
            // Copia dados para o PaginaVO
            PaginaVO itemPaginaVO = new PaginaVO();
            try {
                BeanUtils.copyProperties(itemPaginaVO, elementTbSecao.getTbPagina());
            } catch (Exception e) {
                e.printStackTrace();
            }
            secaoPaginaGrupoVO.setPaginaVO(itemPaginaVO);
            // Retorna todos os grupos de usuários relacionados com a seção HOME
            // 
            hqlSelect = "select tbrelgruposecao from TbRelGrupoSecao as tbrelgruposecao" + // + " left outer join fetch tbrelgruposecao.tbGrupo"
            " where tbrelgruposecao.tbSecao.secId = :secid";
            List resultList4 = em.createQuery(hqlSelect).setParameter("secid", secId).getResultList();
            // Copia dados para o VO
            for (Iterator iter = resultList4.iterator(); iter.hasNext(); ) {
                TbRelGrupoSecao element = (TbRelGrupoSecao) iter.next();
                GrupoVO item = new GrupoVO();
                if (element.getRgsGruIdGrupo() == UtilsDAO.C_GRUPO_TODOS) {
                    // Grupo TODOS: repassa a camada de view de forma transparente
                    item.setGruId(new Integer(UtilsDAO.C_GRUPO_TODOS));
                    item.setGruNmGrupo(UtilsDAO.C_DS_GRUPO_TODOS);
                    item.setGruDsGrupo(UtilsDAO.C_DS_GRUPO_TODOS);
                } else {
                    try {
                        BeanUtils.copyProperties(item, element.getTbGrupo());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                secaoPaginaGrupoVO.getGrupoVO().add(item);
            }
        }
    } catch (Exception e) {
        throw new EJBException(e);
    }
    return secaoPaginaGrupoVO;
}
