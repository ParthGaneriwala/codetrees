public Point3f calcHeight(Point3f p) {
    // sanity check, whoo
    float bounds = QUAD_SIZE * TERRAINS;
    if (p.x < 0 || p.z < 0 || p.x > bounds || p.z > bounds) {
        return new Point3f(p.x, 0, p.z);
    }
    if (p.x > QUAD_SIZE)
        p.x = p.x % QUAD_SIZE;
    if (p.z > QUAD_SIZE)
        p.z = p.z % QUAD_SIZE;
    int x = Math.round(p.x / PLOT_SIZE);
    int z = Math.round(p.z / PLOT_SIZE);
    if (DEBUG)
        blurb("At cell: " + x + "," + z);
    int[][] matrix = engine.getMatrix();
    int hodgeDim = engine.getMatrixSize();
    float maxState = (float) engine.getMaxCellState();
    float plotHalf = PLOT_SIZE / 2f;
    Point3f[] hodgePts = new Point3f[9];
    int pts = 0;
    for (int nx = x - 1; nx <= x + 1; nx++) for (int nz = z - 1; nz <= z + 1; nz++) {
        int nx2 = nx, nz2 = nz;
        if (nx2 < 0)
            nx2 = hodgeDim - 1;
        if (nx2 >= hodgeDim)
            nx2 = 0;
        if (nz2 < 0)
            nz2 = hodgeDim - 1;
        if (nz2 >= hodgeDim)
            nz2 = 0;
        hodgePts[pts++] = new Point3f((nx * PLOT_SIZE) + plotHalf, matrix[nx2][nz2], (nz * PLOT_SIZE) + plotHalf);
    }
    float maxDist = (float) Math.sqrt(PLOT_SIZE * 2);
    float w = 0;
    double sum = 0;
    for (int n = 0; n < 9; n++) {
        double d = maxDist - // x,z,
        Point.distance(// x,z,
        p.x, // x,z,
        p.z, hodgePts[n].x, hodgePts[n].z);
        if (d > 0) {
            double weight = d * maxDist;
            w += weight;
            sum += (hodgePts[n].y * weight);
        }
    }
    float avgHeight = (float) sum / w;
    float h = (avgHeight / maxState) * HODGE_HEIGHT;
    Point3f newPt = new Point3f(p.x, h + 1f, p.z);
    return newPt;
}
