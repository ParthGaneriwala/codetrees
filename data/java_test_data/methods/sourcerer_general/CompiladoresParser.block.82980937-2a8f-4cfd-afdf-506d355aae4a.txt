// $ANTLR start "block"
public final CompiladoresParser.block_return block() throws RecognitionException {
    CompiladoresParser.block_return retval = new CompiladoresParser.block_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token EOL16 = null;
    CompiladoresParser.statement_return statement15 = null;
    CommonTree EOL16_tree = null;
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
    try {
        dbg.enterRule(getGrammarFileName(), "block");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(88, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:88:8: ( ( statement ( EOL )+ )* -> ^( STATEMENT ( statement )* ) )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:88:10: ( statement ( EOL )+ )*
            {
                dbg.location(88, 10);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:88:10: ( statement ( EOL )+ )*
                try {
                    dbg.enterSubRule(8);
                    loop8: do {
                        int alt8 = 2;
                        try {
                            dbg.enterDecision(8);
                            int LA8_0 = input.LA(1);
                            if (((LA8_0 >= PRINT && LA8_0 <= IF) || LA8_0 == FOR || LA8_0 == EXIT || LA8_0 == DO || LA8_0 == ID)) {
                                alt8 = 1;
                            }
                        } finally {
                            dbg.exitDecision(8);
                        }
                        switch(alt8) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:88:11: statement ( EOL )+
                                {
                                    dbg.location(88, 11);
                                    pushFollow(FOLLOW_statement_in_block558);
                                    statement15 = statement();
                                    state._fsp--;
                                    stream_statement.add(statement15.getTree());
                                    dbg.location(88, 21);
                                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:88:21: ( EOL )+
                                    int cnt7 = 0;
                                    try {
                                        dbg.enterSubRule(7);
                                        loop7: do {
                                            int alt7 = 2;
                                            try {
                                                dbg.enterDecision(7);
                                                int LA7_0 = input.LA(1);
                                                if ((LA7_0 == EOL)) {
                                                    alt7 = 1;
                                                }
                                            } finally {
                                                dbg.exitDecision(7);
                                            }
                                            switch(alt7) {
                                                case 1:
                                                    dbg.enterAlt(1);
                                                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:88:21: EOL
                                                    {
                                                        dbg.location(88, 21);
                                                        EOL16 = (Token) match(input, EOL, FOLLOW_EOL_in_block560);
                                                        stream_EOL.add(EOL16);
                                                    }
                                                    break;
                                                default:
                                                    if (cnt7 >= 1)
                                                        break loop7;
                                                    EarlyExitException eee = new EarlyExitException(7, input);
                                                    dbg.recognitionException(eee);
                                                    throw eee;
                                            }
                                            cnt7++;
                                        } while (true);
                                    } finally {
                                        dbg.exitSubRule(7);
                                    }
                                }
                                break;
                            default:
                                break loop8;
                        }
                    } while (true);
                } finally {
                    dbg.exitSubRule(8);
                }
                // AST REWRITE
                // elements: statement
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 89:4: -> ^( STATEMENT ( statement )* )
                {
                    dbg.location(89, 7);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:89:7: ^( STATEMENT ( statement )* )
                    {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        dbg.location(89, 9);
                        root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(STATEMENT, "STATEMENT"), root_1);
                        dbg.location(89, 19);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:89:19: ( statement )*
                        while (stream_statement.hasNext()) {
                            dbg.location(89, 19);
                            adaptor.addChild(root_1, stream_statement.nextTree());
                        }
                        stream_statement.reset();
                        adaptor.addChild(root_0, root_1);
                    }
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(90, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "block");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
