public double getFitness(double... variables) {
    double result = 0;
    double x, y;
    // double x, y, p;
    // int pos;
    LayoutMachine machine1, machine2;
    // Updating the position of all machines
    for (int i = 0; i < qtyMachines; i++) {
        x = variables[((i * 2) + 0)];
        y = variables[((i * 2) + 1)];
        // p = variables[ ((i*3)+2) ];
        // pos = convertPosition(p);
        machine1 = machines.get(i);
        machine1.updatePosition(x, y);
    }
    double x1, x2, y1, y2, w, h;
    // int posSaida, posEntrada;
    for (LayoutLink machineLink : machinesLinks) {
        x1 = 0.0;
        x2 = 0.0;
        y1 = 0.0;
        y2 = 0.0;
        machine1 = machines.get(machineLink.getSourceIndex());
        machine2 = machines.get(machineLink.getDestIndex());
        // Get the current position of the machines
        double value;
        /*
			posSaida = (machine1.getPosition() + machineLink.getSourceSide()) % 4;
			posEntrada = (machine2.getPosition() + machineLink.getDestSide()) % 4;
			
			switch (posSaida) {
				case LayoutMachine.TOP :
					x1 = ((machine1.getX2() - machine1.getX1()) / 2.0) + machine1.getX1();
					y1 = machine1.getY1();
					break;
				case LayoutMachine.BOTTOM :
					x1 = ((machine1.getX2() - machine1.getX1()) / 2.0) + machine1.getX1();
					y1 = machine1.getY2();
					break;
				case LayoutMachine.LEFT :
					x1 = machine1.getX1();
					y1 = ((machine1.getY2() - machine1.getY1()) / 2.0) + machine1.getY1();
					break;
				case LayoutMachine.RIGHT :
					x1 = machine1.getX2();
					y1 = ((machine1.getY2() - machine1.getY1()) / 2.0) + machine1.getY1();
					break;
			}
			switch (posEntrada) {
				case LayoutMachine.TOP :
					x2 = ((machine2.getX2() - machine2.getX1()) / 2.0) + machine2.getX1();
					y2 = machine2.getY1();
					break;
				case LayoutMachine.BOTTOM :
					x2 = ((machine2.getX2() - machine2.getX1()) / 2.0) + machine2.getX1();
					y2 = machine2.getY2();
					break;
				case LayoutMachine.LEFT :
					x2 = machine2.getX1();
					y2 = ((machine2.getY2() - machine2.getY1()) / 2.0) + machine2.getY1();
					break;
				case LayoutMachine.RIGHT :
					x2 = machine2.getX2();
					y2 = ((machine2.getY2() - machine2.getY1()) / 2.0) + machine2.getY1();
					break;
			}
			*/
        x1 = ((machine1.getX2() - machine1.getX1()) / 2.0) + machine1.getX1();
        y1 = ((machine1.getY2() - machine1.getY1()) / 2.0) + machine1.getY1();
        x2 = ((machine2.getX2() - machine2.getX1()) / 2.0) + machine2.getX1();
        y2 = ((machine2.getY2() - machine2.getY1()) / 2.0) + machine2.getY1();
        w = Math.abs(x2 - x1);
        h = Math.abs(y2 - y1);
        value = (w * w) + (h * h);
        result += (value * value);
    }
    return Math.sqrt(result);
}
