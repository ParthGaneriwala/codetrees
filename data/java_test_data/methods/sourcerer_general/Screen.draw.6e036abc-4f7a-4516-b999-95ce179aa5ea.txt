public void draw() {
    try {
        // setting screensize variables
        topLeftX = (int) (0 - Xoffset) - 10;
        topLeftY = (int) (0 - Yoffset) - 10;
        bottomRightX = (int) ((width / zoomLevel) - Xoffset) + 10;
        bottomRightY = (int) ((height / zoomLevel) - Yoffset) + 10;
        // setting the background color
        background(BACK_R, BACK_G, BACK_B);
        // pushing the current matrix onto the stack
        pushMatrix();
        // scale up to the current zoomLevel
        scale((float) zoomLevel);
        // move to the current offsets
        translate((float) Xoffset, (float) Yoffset);
        // if placing a new node, draw the ghost node around tte mouse
        if (followPointerWithNode) {
            stroke(0, 0, 0, 20);
            fill(0, 0, 0, 20);
            int x = (int) ((mouseX / zoomLevel) - Xoffset);
            int y = (int) ((mouseY / zoomLevel) - Yoffset);
            textFont(fontA, 28);
            ellipse(x, y, 20, 20);
            text(wordToFollowPointer, x, y);
        }
        // if drawing edges, draw lines to represent them
        if (drawEdges) {
            stroke(0, 0, 0, 20);
            for (int a = 0; a < physics.getSprings().size(); a++) {
                WordLink wl = (WordLink) physics.getSprings().get(a);
                if (isOnScreen(wl)) {
                    if (smoothAnimation)
                        smooth();
                    strokeWeight(wl.getThickness());
                    // float[] mouse = { realX, realY };
                    float[] position1 = { wl.getOneEnd().position().x(), wl.getOneEnd().position().y() };
                    // float[] position1 = scaleUP(mouse, position1,10);
                    float[] position2 = { wl.getTheOtherEnd().position().x(), wl.getTheOtherEnd().position().y() };
                    // float[] position2 = scaleUP(mouse, position2,10);
                    line(position1[0], position1[1], position2[0], position2[1]);
                    if (smoothAnimation)
                        noSmooth();
                }
            }
        }
        // if drawing forces, draw them
        if (drawForces) {
            stroke(100);
            strokeWeight(1);
            for (int a = 0; a < physics.getAttractions().size(); a++) {
                WordAttraction wa = (WordAttraction) physics.getAttractions().get(a);
                if (isOnScreen(wa)) {
                    if (smoothAnimation)
                        smooth();
                    // float[] mouse = { realX, realY };
                    float[] position1 = { wa.getOneEnd().position().x(), wa.getOneEnd().position().y() };
                    // float[] position1 = scaleUP(mouse, position1,10);
                    float[] position2 = { wa.getTheOtherEnd().position().x(), wa.getTheOtherEnd().position().y() };
                    // float[] position2 = scaleUP(mouse, position2,10);
                    line(position1[0], position1[1], position2[0], position2[1]);
                    if (smoothAnimation)
                        noSmooth();
                }
            }
        }
        // for all particles (wordnodes)
        for (int a = 0; a < physics.getParticles().size(); a++) {
            WordNode wn = (WordNode) physics.getParticles().get(a);
            boolean mouseOver = false;
            // if it is on screen
            if (isOnScreen(wn)) {
                fill(0, 0, 255, 20);
                stroke(0, 0, 0, 40);
                mouseOver = mouseOver(wn);
                // if mouse is over it
                if (mouseOver) {
                    stroke(200, 0, 0, 60);
                    LinkedHashMap<String, WordLink> links = wn.getLinks();
                    Object[] springs = links.values().toArray();
                    for (Object entry : springs) {
                        WordLink wl = (WordLink) entry;
                        if (smoothAnimation)
                            smooth();
                        strokeWeight(wl.getThickness());
                        // float[] mouse = { realX, realY };
                        float[] position1 = { wl.getOneEnd().position().x(), wl.getOneEnd().position().y() };
                        // float[] position1 = scaleUP(mouse, position1,10);
                        float[] position2 = { wl.getTheOtherEnd().position().x(), wl.getTheOtherEnd().position().y() };
                        // float[] position2 = scaleUP(mouse, position2,10);
                        line(position1[0], position1[1], position2[0], position2[1]);
                        if (smoothAnimation)
                            noSmooth();
                    }
                }
                // if drawing nodes, draw them
                if (drawNodes) {
                    if (smoothAnimation)
                        smooth();
                    int size = 10;
                    if (wn.isNodeOpen()) {
                        fill(255, 0, 0, 40);
                    }
                    // float[] mouse = { realX, realY };
                    float[] position = { wn.position().x(), wn.position().y() };
                    // float[] position = scaleUP(mouse, position, size);
                    ellipse(position[0], position[1], size, size);
                    if (smoothAnimation) {
                        noSmooth();
                    }
                }
                // if drawing text, draw it
                if (drawText) {
                    int textFontSize = 0;
                    Double freq = wn.getFrequency();
                    // TODO: something more elegant here..
                    freq = freq * 50000;
                    if (freq < 1) {
                        textFontSize = 16;
                    } else if (freq < 25) {
                        textFontSize = 20;
                    } else if (freq < 50) {
                        textFontSize = 26;
                    } else if (freq < 75) {
                        textFontSize = 32;
                    } else if (freq < 100) {
                        textFontSize = 38;
                    } else {
                        textFontSize = 44;
                    }
                    if (mouseOver(wn)) {
                        fill(0, 255);
                        textFontSize *= 2;
                        ;
                    } else {
                        fill(0, 120);
                    }
                    if (wn.isNodeOpen()) {
                        fill(255, 0, 0, 255);
                        textFontSize *= 1.1;
                    }
                    if (wn.isSelected()) {
                        fill(0, 255, 0, 255);
                    }
                    textFont(fontA, textFontSize);
                    if (smoothFont)
                        smooth();
                    // float[] mouse = { realX, realY };
                    float[] position = { wn.position().x(), wn.position().y() };
                    // float[] position = scaleUP(mouse, position,10);
                    text(wn.getWord(), position[0] - (textWidth(wn.getWord()) / 2), position[1]);
                    if (smoothFont)
                        noSmooth();
                    if (wn.getFrequency() <= 0) {
                        stroke(255, 0, 0, 128);
                        strokeWeight(5);
                        line(position[0] - textFontSize, position[1] - textFontSize, position[0] + textFontSize, position[1] + textFontSize);
                        line(position[0] - textFontSize, position[1] + textFontSize, position[0] + textFontSize, position[1] - textFontSize);
                    }
                }
            }
        }
        // restore the matrix from the stack
        popMatrix();
        // draw debug (if selected)
        if (drawDebug) {
            fill(0x00, 0x00, 0x00);
            textFont(fontA, 14);
            if (smoothFont)
                smooth();
            text("FPS:" + (int) frameRate, 2, 15);
            text("Number of Nodes: " + (int) physics.getParticles().size(), 2, 30);
            text("Number of Edges: " + (int) physics.getSprings().size(), 2, 45);
            text("Number of Forces: " + (int) physics.getAttractions().size(), 2, 60);
            text("Zoom Level: " + zoomLevel, 2, 75);
            text("MouseX: " + mouseX, 2, 90);
            text("MouseY " + mouseY, 2, 105);
            text("Xoffset: " + Xoffset, 2, 120);
            text("Yoffset " + Yoffset, 2, 135);
            if (smoothFont)
                noSmooth();
        }
        // draw nodeInfo if selected
        if (drawNodeInfo) {
            fill(0x00, 0x00, 0x00);
            textFont(fontA, 14);
            if (smoothFont)
                smooth();
            text(wordInfo, width - textWidth(wordInfo), 15);
            if (smoothFont)
                noSmooth();
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
