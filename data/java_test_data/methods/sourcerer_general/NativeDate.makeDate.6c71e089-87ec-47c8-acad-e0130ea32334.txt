private static double makeDate(double date, Object[] args, int methodId) {
    int maxargs;
    boolean local = true;
    switch(methodId) {
        case Id_setUTCDate:
            local = false;
        // fallthrough
        case Id_setDate:
            maxargs = 1;
            break;
        case Id_setUTCMonth:
            local = false;
        // fallthrough
        case Id_setMonth:
            maxargs = 2;
            break;
        case Id_setUTCFullYear:
            local = false;
        // fallthrough
        case Id_setFullYear:
            maxargs = 3;
            break;
        default:
            Kit.codeBug();
            maxargs = 0;
    }
    int i;
    double[] conv = new double[3];
    double year, month, day;
    double lorutime;
    /* local or UTC version of date */
    double result;
    /* See arg padding comment in makeTime.*/
    if (args.length == 0)
        args = ScriptRuntime.padArguments(args, 1);
    for (i = 0; i < args.length && i < maxargs; i++) {
        conv[i] = ScriptRuntime.toNumber(args[i]);
        // limit checks that happen in MakeDate in ECMA.
        if (conv[i] != conv[i] || Double.isInfinite(conv[i])) {
            return ScriptRuntime.NaN;
        }
        conv[i] = ScriptRuntime.toInteger(conv[i]);
    }
    /* return NaN if date is NaN and we're not setting the year,
         * If we are, use 0 as the time. */
    if (date != date) {
        if (args.length < 3) {
            return ScriptRuntime.NaN;
        } else {
            lorutime = 0;
        }
    } else {
        if (local)
            lorutime = LocalTime(date);
        else
            lorutime = date;
    }
    i = 0;
    int stop = args.length;
    if (maxargs >= 3 && i < stop)
        year = conv[i++];
    else
        year = YearFromTime(lorutime);
    if (maxargs >= 2 && i < stop)
        month = conv[i++];
    else
        month = MonthFromTime(lorutime);
    if (maxargs >= 1 && i < stop)
        day = conv[i++];
    else
        day = DateFromTime(lorutime);
    day = MakeDay(year, month, day);
    /* day within year */
    result = MakeDate(day, TimeWithinDay(lorutime));
    if (local)
        result = internalUTC(result);
    date = TimeClip(result);
    return date;
}
