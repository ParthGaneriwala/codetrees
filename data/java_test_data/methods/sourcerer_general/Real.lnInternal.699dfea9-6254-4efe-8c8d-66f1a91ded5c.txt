private int lnInternal() {
    if ((this.exponent < 0 && this.mantissa != 0))
        return 0;
    if ((this.sign != 0)) {
        makeNan();
        return 0;
    }
    if ((this.exponent == 0 && this.mantissa == 0)) {
        makeInfinity(1);
        return 0;
    }
    if ((this.exponent < 0 && this.mantissa == 0))
        return 0;
    /*
         * Adapted from:
         * Cephes Math Library Release 2.7:  May, 1998
         * Copyright 1984, 1990, 1998 by Stephen L. Moshier
         *
         * logl.c
         *
         * long double logl(long double x);
         */
    // normalize to range [0.5, 1)
    int e = exponent - 0x3fffffff;
    exponent = 0x3fffffff;
    // log(1+x) = x - x�/2 + x� P(x)/Q(x)
    if (this.compare(SQRT1_2) < 0) {
        e--;
        exponent++;
    }
    sub(ONE);
    {
        expTmp2.mantissa = this.mantissa;
        expTmp2.exponent = this.exponent;
        expTmp2.sign = this.sign;
    }
    ;
    // P(x)
    // 4.5270000862445199635215E-5
    {
        this.sign = (byte) 0;
        this.exponent = 0x3ffffff1;
        this.mantissa = 0x5ef0258ace5728ddL;
    }
    // 4.5270000862445199635215E-5
    ;
    mul(expTmp2);
    // 0.4985410282319337597221
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x3ffffffe;
        expTmp3.mantissa = 0x7fa06283f86a0ce8L;
    }
    // 0.4985410282319337597221
    ;
    add(expTmp3);
    mul(expTmp2);
    // 6.5787325942061044846969
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000002;
        expTmp3.mantissa = 0x69427d1bd3e94ca1L;
    }
    // 6.5787325942061044846969
    ;
    add(expTmp3);
    mul(expTmp2);
    // 29.911919328553073277375
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000004;
        expTmp3.mantissa = 0x77a5ce2e32e7256eL;
    }
    // 29.911919328553073277375
    ;
    add(expTmp3);
    mul(expTmp2);
    // 60.949667980987787057556
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000005;
        expTmp3.mantissa = 0x79e63ae1b0cd4222L;
    }
    // 60.949667980987787057556
    ;
    add(expTmp3);
    mul(expTmp2);
    // 57.112963590585538103336
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000005;
        expTmp3.mantissa = 0x7239d65d1e6840d6L;
    }
    // 57.112963590585538103336
    ;
    add(expTmp3);
    mul(expTmp2);
    // 20.039553499201281259648
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000004;
        expTmp3.mantissa = 0x502880b6660c265fL;
    }
    // 20.039553499201281259648
    ;
    add(expTmp3);
    // Q(x)
    {
        expTmp.mantissa = expTmp2.mantissa;
        expTmp.exponent = expTmp2.exponent;
        expTmp.sign = expTmp2.sign;
    }
    ;
    // 15.062909083469192043167
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000003;
        expTmp3.mantissa = 0x7880d67a40f8dc5cL;
    }
    // 15.062909083469192043167
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 83.047565967967209469434
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000006;
        expTmp3.mantissa = 0x530c2d4884d25e18L;
    }
    // 83.047565967967209469434
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 221.76239823732856465394
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000007;
        expTmp3.mantissa = 0x6ee19643f3ed5776L;
    }
    // 221.76239823732856465394
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 309.09872225312059774938
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000008;
        expTmp3.mantissa = 0x4d465177242295efL;
    }
    // 309.09872225312059774938
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 216.42788614495947685003
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000007;
        expTmp3.mantissa = 0x6c36c4f923819890L;
    }
    // 216.42788614495947685003
    ;
    expTmp.add(expTmp3);
    expTmp.mul(expTmp2);
    // 60.118660497603843919306
    {
        expTmp3.sign = (byte) 0;
        expTmp3.exponent = 0x40000005;
        expTmp3.mantissa = 0x783cc111991239a3L;
    }
    // 60.118660497603843919306
    ;
    expTmp.add(expTmp3);
    div(expTmp);
    {
        expTmp3.mantissa = expTmp2.mantissa;
        expTmp3.exponent = expTmp2.exponent;
        expTmp3.sign = expTmp2.sign;
    }
    ;
    expTmp3.sqr();
    mul(expTmp3);
    mul(expTmp2);
    expTmp3.scalbn(-1);
    sub(expTmp3);
    add(expTmp2);
    return e;
}
