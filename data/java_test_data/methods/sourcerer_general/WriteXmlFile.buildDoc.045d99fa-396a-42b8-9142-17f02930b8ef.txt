private boolean buildDoc() {
    try {
        Element em, app, posixApp, jobDesc;
        Text t;
        rootElement = doc.createElement("jsdl:JobDefinition");
        rootElement.setAttribute("xmlns", "http://www.example.org/");
        rootElement.setAttribute("xmlns:jsdl", "http://schemas.ggf.org/jsdl/2005/11/jsdl");
        rootElement.setAttribute("xmlns:jsdl-posix", "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
        rootElement.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        jobDesc = doc.createElement("jsdl:JobDescription");
        app = doc.createElement("jsdl:Application");
        em = doc.createElement("jsdl:ApplicationName");
        t = doc.createTextNode(cJob.executable);
        // remove extension in app name - But is this necessary?
        // t = doc.createTextNode(cJob.executable.substring(0,cJob.executable.lastIndexOf(".")));
        em.appendChild(t);
        app.appendChild(em);
        posixApp = doc.createElement("jsdl-posix:POSIXApplication");
        em = doc.createElement("jsdl-posix:Executable");
        // TODO hard coded reference for testing
        t = doc.createTextNode(cJob.executable);
        em.appendChild(t);
        posixApp.appendChild(em);
        if (cJob.arch != null) {
            em = doc.createElement("jsdl:CPUArchitecture");
            t = doc.createTextNode(cJob.arch);
            em.appendChild(t);
            posixApp.appendChild(em);
        }
        if (cJob.memory != null) {
            em = doc.createElement("jsdl:IndividualPhysicalMemory");
            t = doc.createTextNode(cJob.memory);
            em.appendChild(t);
            posixApp.appendChild(em);
        }
        if (cJob.opsys != null) {
            em = doc.createElement("OperatingSystemType");
            t = doc.createTextNode(cJob.opsys);
            em.appendChild(t);
            posixApp.appendChild(em);
        }
        if (DEBUG)
            System.out.println("cJob.input == " + cJob.input);
        if (cJob.input != null && !(cJob.input.equals(""))) {
            if (DEBUG)
                System.out.println("input is being added to xml");
            em = doc.createElement("jsdl-posix:Input");
            t = doc.createTextNode(cJob.input);
            em.appendChild(t);
            posixApp.appendChild(em);
        }
        if (DEBUG)
            System.out.println("cJob.output == " + cJob.output);
        if (cJob.output != null && !(cJob.output.equals(""))) {
            if (DEBUG)
                System.out.println("output is being added to xml");
            em = doc.createElement("jsdl-posix:Output");
            t = doc.createTextNode(cJob.output);
            em.appendChild(t);
            posixApp.appendChild(em);
        }
        if (DEBUG)
            System.out.println("cJob.error == " + cJob.error);
        if (cJob.error != null && !(cJob.error.equals(""))) {
            if (DEBUG)
                System.out.println("error is being added to xml");
            em = doc.createElement("jsdl-posix:Error");
            t = doc.createTextNode(cJob.error);
            em.appendChild(t);
            posixApp.appendChild(em);
        }
        if (cJob.arguments != null) {
            for (int i = 0; i < cJob.arguments.size(); i++) {
                em = doc.createElement("jsdl-posix:Argument");
                t = doc.createTextNode(cJob.arguments.get(i));
                em.appendChild(t);
                posixApp.appendChild(em);
            }
        }
        // Data staging
        Element[] dataStaging = new Element[cJob.fileNames.size()];
        for (int index = 0; index < cJob.fileNames.size(); index++) {
            if (DEBUG)
                System.out.println("index == " + index + ". fileNames[i] == " + cJob.fileNames.get(index));
            dataStaging[index] = doc.createElement("jsdl:DataStaging");
            em = doc.createElement("jsdl:FileName");
            t = doc.createTextNode(cJob.fileNames.get(index));
            em.appendChild(t);
            if (DEBUG)
                System.out.println("index == " + index + ". creationFlags[i] == " + cJob.creationFlags.get(index));
            dataStaging[index].appendChild(em);
            em = doc.createElement("jsdl:CreationFlag");
            t = doc.createTextNode(cJob.creationFlags.get(index));
            em.appendChild(t);
            if (DEBUG)
                System.out.println("index == " + index + ". deleteOnTermination[i] == " + cJob.deleteOnTermination.get(index));
            dataStaging[index].appendChild(em);
            em = doc.createElement("jsdl:DeleteOnTermination");
            t = doc.createTextNode(cJob.deleteOnTermination.get(index));
            em.appendChild(t);
            Element em2;
            String source = cJob.sources.get(index);
            if (DEBUG)
                System.out.println("index == " + index + ". sources[i] == " + source);
            String target = cJob.targets.get(index);
            if (DEBUG)
                System.out.println("index == " + index + ". targets[i] == " + target);
            if (source != null && !source.equals("")) {
                dataStaging[index].appendChild(em);
                em = doc.createElement("jsdl:Source");
                em2 = doc.createElement("jsdl:URI");
                t = doc.createTextNode(source);
                em2.appendChild(t);
                em.appendChild(em2);
            } else {
                dataStaging[index].appendChild(em);
                em = doc.createElement("jsdl:Target");
                em2 = doc.createElement("jsdl:URI");
                t = doc.createTextNode(target);
                em2.appendChild(t);
                em.appendChild(em2);
            }
            dataStaging[index].appendChild(em);
        }
        app.appendChild(posixApp);
        jobDesc.appendChild(app);
        for (int i = 0; i < dataStaging.length; i++) jobDesc.appendChild(dataStaging[i]);
        rootElement.appendChild(jobDesc);
        doc.appendChild(rootElement);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}
