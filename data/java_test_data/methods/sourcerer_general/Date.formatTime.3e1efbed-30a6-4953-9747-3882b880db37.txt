public String formatTime(TextProvider tp, java.util.Date date) {
    java.util.Date now = new java.util.Date();
    StringBuffer sb = new StringBuffer();
    List args = new ArrayList();
    long secs = Math.abs((now.getTime() - date.getTime()) / 1000);
    long mins = secs / 60;
    long sec = secs % 60;
    int min = (int) mins % 60;
    long hours = mins / 60;
    int hour = (int) hours % 24;
    int days = (int) hours / 24;
    int day = days % 365;
    int years = days / 365;
    if (years > 0) {
        args.add(new Long(years));
        args.add(new Long(day));
        args.add(sb);
        args.add(null);
        sb.append(tp.getText(DATETAG_PROPERTY_YEARS, DATETAG_DEFAULT_YEARS, args));
    } else if (day > 0) {
        args.add(new Long(day));
        args.add(new Long(hour));
        args.add(sb);
        args.add(null);
        sb.append(tp.getText(DATETAG_PROPERTY_DAYS, DATETAG_DEFAULT_DAYS, args));
    } else if (hour > 0) {
        args.add(new Long(hour));
        args.add(new Long(min));
        args.add(sb);
        args.add(null);
        sb.append(tp.getText(DATETAG_PROPERTY_HOURS, DATETAG_DEFAULT_HOURS, args));
    } else if (min > 0) {
        args.add(new Long(min));
        args.add(new Long(sec));
        args.add(sb);
        args.add(null);
        sb.append(tp.getText(DATETAG_PROPERTY_MINUTES, DATETAG_DEFAULT_MINUTES, args));
    } else {
        args.add(new Long(sec));
        args.add(sb);
        args.add(null);
        sb.append(tp.getText(DATETAG_PROPERTY_SECONDS, DATETAG_DEFAULT_SECONDS, args));
    }
    args.clear();
    args.add(sb.toString());
    if (date.before(now)) {
        // looks like this date is passed
        return tp.getText(DATETAG_PROPERTY_PAST, DATETAG_DEFAULT_PAST, args);
    } else {
        return tp.getText(DATETAG_PROPERTY_FUTURE, DATETAG_DEFAULT_FUTURE, args);
    }
}
