public void testBackupProject() throws Exception {
    int projectId = -1;
    {
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        api.setTransactionMeta(meta);
        // The minimum number of fields for a successful project insert
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.addField("title", "Backup and Restore Test");
        record.addField("shortDescription", "API Test Project short description");
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        // Other fields
        record.addField("requestedBy", "Project Manager");
        record.addField("showCalendar", "true");
        record.addField("showTickets", "false");
        record.addField("showDiscussion", "true");
        record.addField("showPlan", "true");
        record.addField("showLists", "true");
        record.addField("showDocuments", "true");
        api.save(record);
        // Process the complete transaction
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        projectId = api.getResponseValueAsInt("id");
        assertTrue("Did not retreive a valid projectId: " + projectId, projectId > -1);
    }
    // Backup the project to a System.out
    packetContext.setOutputStream(System.out);
    DataRecord record = new DataRecord();
    record.setName("projectList");
    record.setAction("backup");
    record.addField("projectId", projectId);
    api.setAutoGenerateMeta(true);
    api.save(record);
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    Project project = new Project(db, projectId);
    project.delete(db, null);
}
