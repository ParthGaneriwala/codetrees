/*
    // do not check for compatibility with 1.8.0.x
    private void checkParametersSet() throws SQLException {

        if (parameterStream == null) {
            for (int i = 0; i < parameterSet.length; i++) {
                if (!parameterSet[i]) {
                    throw Util.sqlException(Trace.JDBC_PARAMETER_NOT_SET);
                }
            }
        } else {
            for (int i = 0; i < parameterSet.length; i++) {
                if (!parameterSet[i] &&!parameterStream[i]) {
                    throw Util.sqlException(Trace.JDBC_PARAMETER_NOT_SET);
                }
            }

            ArrayUtil.clearArray(ArrayUtil.CLASS_CODE_BOOLEAN,
                                 parameterStream, 0, parameterStream.length);
        }
    }
*/
private void setParameter(int i, Object o) throws SQLException {
    checkSetParameterIndex(i, false);
    i--;
    if (o == null) {
        parameterValues[i] = null;
        return;
    }
    int outType = parameterTypes[i];
    try {
        switch(outType) {
            case Types.OTHER:
                o = new JavaObject((Serializable) o);
                break;
            case Types.BINARY:
            case Types.VARBINARY:
            case Types.LONGVARBINARY:
                if (!(o instanceof byte[])) {
                    throw Util.sqlException(Trace.error(Trace.INVALID_CONVERSION));
                }
                o = new Binary((byte[]) o, !connection.isNetConn);
                break;
            case Types.DATE:
                if (o instanceof java.util.Date) {
                    long t = HsqlDateTime.getNormalisedDate(((java.util.Date) o).getTime());
                    o = new Date(t);
                } else {
                    o = Column.convertObject(o, outType);
                }
                break;
            case Types.TIME:
                if (o instanceof java.util.Date) {
                    long m = HsqlDateTime.getNormalisedTime(((java.util.Date) o).getTime());
                    o = new Time(m);
                } else {
                    o = Column.convertObject(o, outType);
                }
                break;
            case Types.TIMESTAMP:
                if (o instanceof Timestamp) {
                    long m = ((Timestamp) o).getTime();
                    int n = ((Timestamp) o).getNanos();
                    o = new Timestamp(m);
                    ((Timestamp) o).setNanos(n);
                } else {
                    o = Column.convertObject(o, outType);
                }
                break;
            default:
                o = Column.convertObject(o, outType);
                break;
        }
    } catch (HsqlException e) {
        Util.throwError(e);
    }
    parameterValues[i] = o;
}
