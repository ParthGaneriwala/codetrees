void extract_block(short[][] input_data, int start_row, int start_col, int[] output_data, short[] quanttbl) {
    int temp;
    // local handle to memory
    int[] block = block_;
    int elemr, pos, col;
    int i;
    // avoid an array dereference in the loop
    short[] input_data_row;
    pos = 0;
    for (elemr = DCTSIZE; --elemr >= 0; ) {
        // unroll the inner loop
        col = start_col;
        input_data_row = input_data[start_row++];
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
        block[pos++] = input_data_row[col++] - CENTERJSAMPLE;
    }
    Fwddct.fwd_dct(block);
    for (i = DCTSIZE * DCTSIZE; --i >= 0; ) {
        temp = block[ZZ[i]];
        // divide by *quanttbl, ensuring proper rounding
        if (temp < 0) {
            temp = -temp;
            temp += (int) (quanttbl[i] >> 1);
            temp /= (int) (quanttbl[i]);
            temp = -temp;
        } else {
            temp += quanttbl[i] >> 1;
            temp /= quanttbl[i];
        }
        output_data[i] = temp;
    }
}
