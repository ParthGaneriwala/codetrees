public ActionForward Update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    String username = (String) request.getSession().getAttribute("username");
    if (username != null) {
        DynaValidatorForm recipeForm = (DynaValidatorForm) form;
        String postID = recipeForm.getString("postID");
        String recipeID = recipeForm.getString("recipeID");
        String title = recipeForm.getString("title");
        boolean free = (Boolean) recipeForm.get("free");
        String ingredient = recipeForm.getString("ingredient");
        String cookingProcedure = recipeForm.getString("cookingProcedure");
        String uploadDate = recipeForm.getString("uploadDate");
        String postType = recipeForm.getString("postType");
        String categoryID = recipeForm.getString("categoryID");
        String imageUrl = recipeForm.getString("imageUrl");
        // user profile object
        UserProfileDTO user = new UserProfileDTO();
        user.setUsername(username);
        // Post object
        PostDTO postDTO = new PostDTO();
        postDTO.setPostID(postID);
        postDTO.setPostTitle(title);
        postDTO.setFree(free);
        postDTO.setPostType(postType);
        String a = Util.getYMDandTime(uploadDate);
        System.out.println(a);
        postDTO.setUploadDate(Util.getYMDandTime(uploadDate));
        postDTO.setUserProfile(user);
        // Category
        CategoryRecipeDTO category = new CategoryRecipeDTO();
        category.setCategoryID(categoryID);
        // recipe object
        RecipeDTO recipeDTO = new RecipeDTO();
        recipeDTO.setRecipeID(recipeID);
        recipeDTO.setPost(postDTO);
        recipeDTO.setIngredient(ingredient);
        recipeDTO.setCookingProcedure(cookingProcedure);
        recipeDTO.setImagePath(imageUrl);
        recipeDTO.setCategory(category);
        // execute
        RecipeDAO recipeDAO = new RecipeDAO();
        if (recipeDAO.updateRecipe(postDTO, recipeDTO)) {
            Collection list3Recipes = recipeDAO.readLimitByFree(true);
            request.getSession().setAttribute("list3Recipes", list3Recipes);
            request.setAttribute("message", "Update Recipe Successfuly!");
            return mapping.findForward(SUCCESS);
        } else {
            request.setAttribute("message", "Update Recipe error!");
            return mapping.findForward(ERROR);
        }
    } else {
        request.setAttribute("message", "Please Login!");
        return mapping.findForward(LOGIN);
    }
}
