public GridCoverage2D generateCoverageGAMOpt() {
    // optimized for using GAM on the synthetic infectious, road, and wind data
    // DO NOT USE FOR ANYTHING ELSE!
    // Adjusted for synthLandScan by increasing cellSize (that should work, right?)
    // System.out.println("using the GAM optimization in ImageProcessor");
    gam.setInitializer(igf);
    Vector solutions = gam.run();
    double cellSize = 0.084;
    float[][] rasterArray = new float[1000][1000];
    minHeight = Float.MAX_VALUE;
    maxHeight = Float.MIN_VALUE;
    EpanechnikovKernelGAM ekg = new EpanechnikovKernelGAM();
    Iterator kernelIt = solutions.iterator();
    // int index = 0;  //only used for debugging.
    while (kernelIt.hasNext()) {
        Gene next = (Gene) kernelIt.next();
        int geneX = (int) Math.round((next.getX() / cellSize) + 50);
        int geneY = (int) Math.round((next.getY() / cellSize) + 50);
        double height = next.getFitness();
        int minX = Math.max(0, geneX - 50);
        int minY = Math.max(0, geneY - 50);
        int maxX = Math.min(1000, geneX + 51);
        int maxY = Math.min(1000, geneY + 51);
        // *5 to get it into integer territory (rather than 0.1, 0.2, ...)
        int radius = (int) Math.round(next.getMajorAxisRadius() / (cellSize * 5));
        if (radius > 9) {
            // this little statement for FZ, which can occasionally give 10.
            radius = 9;
        }
        System.out.println("real radius is " + next.getMajorAxisRadius() + " so radius is " + radius);
        for (int x = minX; x < maxX; x++) {
            for (int y = minY; y < maxY; y++) {
                rasterArray[x][y] = rasterArray[x][y] + (float) ekg.getValueAt(x, y, geneX, geneY, radius, height);
            }
        }
    // System.out.println("finished gene " + index + " of " + size);
    }
    for (int x = 0; x < 1000; x++) {
        for (int y = 0; y < 1000; y++) {
            if (rasterArray[x][y] < minHeight) {
                minHeight = rasterArray[x][y];
            }
            if (rasterArray[x][y] > maxHeight) {
                maxHeight = rasterArray[x][y];
            }
        }
    }
    return DissUtils.matrixToCoverage(rasterArray, new GeneralEnvelope(new Rectangle2D.Double(igf.getMinX(), igf.getMinY(), 74, 74)));
}
