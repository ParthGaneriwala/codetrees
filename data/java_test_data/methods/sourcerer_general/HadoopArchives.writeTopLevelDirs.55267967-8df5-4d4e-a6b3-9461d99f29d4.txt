// this method is tricky. This method writes
// the top level directories in such a way so that
// the output only contains valid directoreis in archives.
// so for an input path specified by the user
// as /user/org.fit.hiai.hadoop
// we need to index
// / as the root
// /user as a directory
// /user/org.fit.hiai.hadoop as a directory
// so for multiple input paths it makes sure that it
// does the right thing.
// so if the user specifies the input directories as
// /user/harry and /user/org.fit.hiai.hadoop
// we need to write / and user as its child
private void writeTopLevelDirs(SequenceFile.Writer srcWriter, List<Path> paths) throws IOException {
    // these are qualified paths
    List<Path> justDirs = new ArrayList<Path>();
    for (Path p : paths) {
        if (!p.getFileSystem(getConf()).isFile(p)) {
            justDirs.add(new Path(p.toUri().getPath()));
        } else {
            justDirs.add(new Path(p.getParent().toUri().getPath()));
        }
    }
    // get the largest depth path
    // this is tricky
    TreeMap<String, HashSet<String>> allpaths = new TreeMap<String, HashSet<String>>();
    Path deepest = largestDepth(paths);
    Path root = new Path(Path.SEPARATOR);
    for (int i = 0; i < deepest.depth(); i++) {
        List<Path> parents = new ArrayList<Path>();
        for (Path p : justDirs) {
            if (p.compareTo(root) == 0) {
            // don nothing
            } else {
                Path parent = p.getParent();
                if (allpaths.containsKey(parent.toString())) {
                    HashSet<String> children = allpaths.get(parent.toString());
                    children.add(p.getName());
                } else {
                    HashSet<String> children = new HashSet<String>();
                    children.add(p.getName());
                    allpaths.put(parent.toString(), children);
                }
                parents.add(parent);
            }
        }
        justDirs = parents;
    }
    Set<Map.Entry<String, HashSet<String>>> keyVals = allpaths.entrySet();
    for (Map.Entry<String, HashSet<String>> entry : keyVals) {
        HashSet<String> children = entry.getValue();
        String toWrite = entry.getKey() + " dir ";
        StringBuffer sbuff = new StringBuffer();
        sbuff.append(toWrite);
        for (String child : children) {
            sbuff.append(child + " ");
        }
        toWrite = sbuff.toString();
        srcWriter.append(new LongWritable(0L), new Text(toWrite));
    }
}
