@Test
public void testExtract() throws Exception {
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(WhiteSpaceExtractorTest.Annotator.class, typeSystemDescription);
    JCas jc = AnalysisEngineFactory.process(engine, "This is some test text.");
    FSIndex<Annotation> fsIndex = jc.getAnnotationIndex(Token.type);
    Token targetToken = new Token(jc, 0, 4);
    Token t1 = (Token) fsIndex.find(targetToken);
    WhiteSpaceExtractor extractor = new WhiteSpaceExtractor();
    List<Feature> features = extractor.extract(jc, t1);
    assertEquals(2, features.size());
    Feature feature = features.get(0);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_LEFT, feature.getValue());
    feature = features.get(1);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_RIGHT, feature.getValue());
    assertEquals("whitespace", feature.getName());
    targetToken = new Token(jc, 5, 7);
    t1 = (Token) fsIndex.find(targetToken);
    features = extractor.extract(jc, t1);
    assertEquals(features.size(), 2);
    feature = features.get(0);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_LEFT, feature.getValue());
    feature = features.get(1);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_RIGHT, feature.getValue());
    assertEquals("whitespace", feature.getName());
    targetToken = new Token(jc, 18, 22);
    t1 = (Token) fsIndex.find(targetToken);
    features = extractor.extract(jc, t1);
    assertEquals(features.size(), 1);
    feature = features.get(0);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_LEFT, feature.getValue());
    targetToken = new Token(jc, 22, 23);
    t1 = (Token) fsIndex.find(targetToken);
    features = extractor.extract(jc, t1);
    assertEquals(1, features.size());
    feature = features.get(0);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_RIGHT, feature.getValue());
    targetToken = new Token(jc, 10, 12);
    t1 = (Token) fsIndex.find(targetToken);
    features = extractor.extract(jc, t1);
    assertEquals(1, features.size());
    feature = features.get(0);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_RIGHT, feature.getValue());
    targetToken = new Token(jc, 15, 20);
    t1 = (Token) fsIndex.find(targetToken);
    features = extractor.extract(jc, t1);
    assertEquals(0, features.size());
    targetToken = new Token(jc, 0, 23);
    t1 = (Token) fsIndex.find(targetToken);
    features = extractor.extract(jc, t1);
    assertEquals(features.size(), 2);
    feature = features.get(0);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_LEFT, feature.getValue());
    feature = features.get(1);
    assertEquals(WhiteSpaceExtractor.ORIENTATION_RIGHT, feature.getValue());
}
