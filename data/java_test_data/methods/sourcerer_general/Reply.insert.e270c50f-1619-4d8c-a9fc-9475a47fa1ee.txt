public boolean insert(Connection db) throws SQLException {
    if (!isValid()) {
        return false;
    }
    boolean autoCommit = db.getAutoCommit();
    try {
        if (autoCommit) {
            db.setAutoCommit(false);
        }
        // Insert the reply
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_issue_replies " + "(issue_id, reply_to, subject, message, importance, helpful, solution, solution_date, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        if (modified != null) {
            sql.append("modified, ");
        }
        sql.append("enteredby, modifiedby ) ");
        sql.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ");
        if (entered != null) {
            sql.append("?, ");
        }
        if (modified != null) {
            sql.append("?, ");
        }
        sql.append("?, ?) ");
        int i = 0;
        PreparedStatement pst = db.prepareStatement(sql.toString());
        pst.setInt(++i, issueId);
        pst.setInt(++i, replyToId);
        pst.setString(++i, subject);
        pst.setString(++i, body);
        pst.setInt(++i, importance);
        pst.setBoolean(++i, helpful);
        pst.setBoolean(++i, solution);
        pst.setTimestamp(++i, solutionDate);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        if (modified != null) {
            pst.setTimestamp(++i, modified);
        }
        pst.setInt(++i, enteredBy);
        pst.setInt(++i, modifiedBy);
        pst.execute();
        pst.close();
        id = DatabaseUtils.getCurrVal(db, "project_issue_repl_reply_id_seq", -1);
        // Update the issue count
        i = 0;
        pst = db.prepareStatement("UPDATE project_issues " + "SET reply_count = reply_count + 1, " + (entered != null ? "last_reply_date = ?, " : "last_reply_date = " + DatabaseUtils.getCurrentTimestamp(db) + ", ") + "last_reply_by = ? " + "WHERE project_id = ? " + "AND issue_id = ? ");
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        pst.setInt(++i, modifiedBy);
        pst.setInt(++i, projectId);
        pst.setInt(++i, issueId);
        pst.executeUpdate();
        pst.close();
        // Update the category count
        i = 0;
        pst = db.prepareStatement("UPDATE project_issues_categories " + "SET posts_count = posts_count + 1, " + (entered != null ? "last_post_date = ?, " : "last_post_date = " + DatabaseUtils.getCurrentTimestamp(db) + ", ") + "last_post_by = ? " + "WHERE project_id = ? " + "AND category_id = ? ");
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        pst.setInt(++i, modifiedBy);
        pst.setInt(++i, projectId);
        pst.setInt(++i, categoryId);
        pst.executeUpdate();
        pst.close();
        if (attachmentList != null) {
            FileItemList.convertTempFiles(db, Constants.DISCUSSION_FILES_REPLY, this.getModifiedBy(), id, attachmentList);
        }
        if (replyToId > -1) {
            // Update the topic response
            DiscussionUtils.updateTopicResponse(db, this);
        }
        if (autoCommit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (autoCommit) {
            db.rollback();
        }
        throw e;
    } finally {
        if (autoCommit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
