private Object[] showExportDialog(String fName, int type) {
    final JDialog exp = new JDialog(this, "dsj - capture / export", true);
    final Object[] settings = new Object[] { fName, null, type == DSFiltergraph.DV ? Boolean.valueOf(true) : null, Boolean.valueOf(true) };
    GridLayout gl = new GridLayout(0, 1);
    gl.setVgap(5);
    exp.getContentPane().setLayout(gl);
    exp.getContentPane().add(new JLabel("To write WM enter a wmv or asf file & leave"));
    exp.getContentPane().add(new JLabel("codecs set to none! (settings may be shown)"));
    JPanel dest = new JPanel(new BorderLayout());
    final JTextField tf = new JTextField(fName);
    dest.add("Center", tf);
    JButton browse = new JButton("browse");
    browse.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            settings[0] = showFileDialog("Set capture/export file", FileDialog.SAVE);
            tf.setText((String) settings[0]);
        }
    });
    dest.add("East", browse);
    exp.getContentPane().add(dest);
    final DSFilterInfo[][] installedEncoders = DSEnvironment.getEncoders();
    final JComboBox comp = new JComboBox();
    for (int i = 0; i < installedEncoders[0].length; i++) comp.addItem(installedEncoders[0][i].getName());
    exp.getContentPane().add(new JLabel("video encoder", SwingConstants.CENTER));
    exp.getContentPane().add(comp);
    final JCheckBox sd = new JCheckBox("Show video-encoder settings", false);
    exp.getContentPane().add(sd);
    final JComboBox acomp = new JComboBox();
    final JComboBox aFormats = new JComboBox();
    if (type != DSFiltergraph.DV) {
        exp.getContentPane().add(new JLabel("audio encoder"));
        for (int i = 0; i < installedEncoders[1].length; i++) acomp.addItem(installedEncoders[1][i].getName());
        acomp.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                aFormats.removeAllItems();
                String[] cf = DSEnvironment.getAudioEncoderFormats(installedEncoders[1][acomp.getSelectedIndex()], dsfg);
                try {
                    for (int i = 0; i < cf.length; i++) {
                        aFormats.addItem(cf[i]);
                    }
                } catch (Exception ex) {
                    aFormats.removeAllItems();
                }
                if (aFormats.getItemCount() == 0) {
                    aFormats.addItem("formats unknown");
                    installedEncoders[1][acomp.getSelectedIndex()].setPreferredFormat(DSFilterInfo.SHOW_USER_DIALOG);
                }
            }
        });
        aFormats.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                installedEncoders[1][acomp.getSelectedIndex()].setPreferredFormat(aFormats.getSelectedIndex());
            }
        });
        exp.getContentPane().add(acomp);
        exp.getContentPane().add(aFormats);
    } else {
        final JCheckBox grabDVAudio = new JCheckBox("grab DV audio", true);
        grabDVAudio.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                settings[2] = Boolean.valueOf(grabDVAudio.isSelected());
            }
        });
        exp.getContentPane().add(grabDVAudio);
    }
    if (type != DSFiltergraph.MOVIE) {
        final JCheckBox preview = new JCheckBox("Preview during capture", true);
        preview.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                settings[3] = Boolean.valueOf(preview.isSelected());
            }
        });
        exp.getContentPane().add(preview);
    }
    JButton go = new JButton("go");
    exp.getContentPane().add(go);
    go.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            settings[0] = tf.getText().trim();
            exp.setVisible(false);
            exp.dispose();
        }
    });
    exp.pack();
    exp.setLocation((int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - exp.getWidth() / 2), (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - exp.getHeight() / 2));
    exp.setVisible(true);
    if (sd.isSelected())
        installedEncoders[0][comp.getSelectedIndex()].setPreferredFormat(DSFilterInfo.SHOW_USER_DIALOG);
    try {
        settings[1] = installedEncoders[0][comp.getSelectedIndex()];
    // settings[1] = DSFilterInfo.filterInfoForProfile(new java.io.File("profiles/75_100.prx").getAbsoluteFile()); //
    } catch (Exception e) {
    }
    if (type != DSFiltergraph.DV)
        settings[2] = installedEncoders[1][acomp.getSelectedIndex()];
    return settings;
}
