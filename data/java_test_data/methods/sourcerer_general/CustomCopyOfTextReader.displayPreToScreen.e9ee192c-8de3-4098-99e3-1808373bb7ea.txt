private void displayPreToScreen(int n, Animation animation) {
    String tag = "displayPreToScreen";
    // ȡ��mCurrentLine��Ϣ���Ƿ�Ϊ0�����Ϊ0��˵������ʾ�����е����
    // ��ʱ���浱ǰ��
    int tempCurrentLine = mCurrentLine;
    // δ�����е�λ��
    int futureLine = tempCurrentLine - n;
    Log.d(tag, "futureLine : " + futureLine);
    if (futureLine < 0) {
        // Խ����
        futureLine = 0;
    }
    Log.d(tag, "mCurrentLine:" + mCurrentLine);
    Log.d(tag, "futureLine:" + futureLine);
    Log.d(tag, "mBeforeOfDoc:" + mBeforeOfDoc);
    Log.d(tag, "mEndOfDoc:" + mEndOfDoc);
    Log.d(tag, "mCurrentLine:" + mCurrentLine);
    // �Ƿ���Ҫ�����µĻ��棬����ĵ��Ƿ��ڵ�һ���ĵ��ж�
    if (futureLine == 0 && !mBeforeOfDoc) {
        // ��Ҫ�����»���
        // Log.d(tag, "futureLine ==0 && !mBeforeOfDoc");
        readPreBuffer();
        analysisDisplayBuffer();
        Log.d(tag, "futureLine ==0 && !mBeforeOfDoc");
        // ��Ļ������һ�е�����
        int lastLine = mLinesOfOneScreen - 1;
        if (lastLine > mMyLines.size()) {
            // �����һ����Ļ������
            Log.d(tag, "lastLine  : " + lastLine);
            Log.d(tag, "mMyLines.size():" + mMyLines.size());
            mStartOffset = 0;
            mDataStartLocation = mMyLines.get(0).beforeLineLength;
            mEndOffset = mMyLines.get(mMyLines.size() - 1).offset;
            mDataEndLocation = mMyLines.get(mMyLines.size() - 1).beforeLineLength;
        } else {
            mCurrentLine = mMyLines.size() - mLinesOfOneScreen;
            if (mCurrentLine < 0) {
                Log.d(tag, "set the mCurrentLine is 0 ....");
                mCurrentLine = 0;
            }
            mStartOffset = mMyLines.get(mCurrentLine).offset;
            mDataStartLocation = mMyLines.get(mCurrentLine).beforeLineLength;
            mEndOffset = mMyLines.get(mMyLines.size() - 1).offset;
            mDataEndLocation = mMyLines.get(mMyLines.size() - 1).beforeLineLength;
        }
        Log.d(tag, "mCurrentLine : " + mCurrentLine);
        Log.d(tag, "mDataStartLocation �� " + mDataStartLocation);
        Log.d(tag, "mDataEndLocation : " + mDataEndLocation);
        /*
			 * System.out.println("��ȡ���µĻ��岢��ʾ");
			 * System.out.println("mCurrentLine: "+mCurrentLine);
			 * System.out.println("lastLine: "+lastLine);
			 * System.out.println("mStartOffset �� " + mStartOffset);
			 * System.out.println("mDataStartLocation �� " +
			 * mDataStartLocation); System.out.println("mDataEndLocation : " +
			 * mDataEndLocation);
			 */
        setData(mStartOffset, mDataEndLocation, animation);
        return;
    }
    if (futureLine == 0 && mBeforeOfDoc) {
        // �ĵ��Ѿ�����һ���ˣ������к�Ҳ�ڵ�һ��
        mCurrentLine = 0;
        mStartOffset = 0;
        mDataStartLocation = 0;
        // ��Ļ������һ�е�����
        int lastLine = mLinesOfOneScreen - 1;
        if (lastLine > mMyLines.size()) {
            // �����һ����Ļ������
            mEndOffset = mMyLines.get(mMyLines.size() - 1).offset;
            mDataEndLocation = mMyLines.get(mMyLines.size() - 1).beforeLineLength;
        } else {
            mEndOffset = mMyLines.get(lastLine).offset;
            mDataEndLocation = mMyLines.get(lastLine).beforeLineLength;
        }
        Log.d(tag, "futureLine ==0 && mBeforeOfDoc");
        Log.d(tag, "mDataStartLocation : " + mDataStartLocation);
        Log.d(tag, "mDataEndLocation : " + mDataEndLocation);
        // System.out.println("�ĵ��Ѿ�����һ���ˣ������к�Ҳ�ڵ�һ��");
        setData(mDataStartLocation, mDataEndLocation, animation);
        return;
    }
    if (futureLine > 0) {
        // ˵�����ϻ��ܹ��������Ƿ�ҳ
        // ���һ��
        int lastLine = futureLine + mLinesOfOneScreen;
        if (lastLine >= mMyLines.size()) {
            // ��ֹȡ������ݵ�ʱ��Խ��
            lastLine = mMyLines.size() - 1;
        }
        mCurrentLine = futureLine;
        mStartOffset = mMyLines.get(futureLine).offset;
        mDataStartLocation = mMyLines.get(futureLine).beforeLineLength;
        mEndOffset = mMyLines.get(lastLine).offset;
        mDataEndLocation = mMyLines.get(lastLine).beforeLineLength;
        Log.d(tag, "futureLine > 0");
        Log.d(tag, "mDataStartLocation �� " + mDataStartLocation);
        Log.d(tag, "mDataEndLocation : " + mDataEndLocation);
        // System.out.println("˵�����ϻ��ܹ��������Ƿ�ҳ");
        setData(mDataStartLocation, mDataEndLocation, animation);
    }
// �����Ҫ�����µĻ��棬��ô�ʹ���ݻ����п�����ݵ���Ļ������
}
