protected void createLink() throws BadLocationException {
    // Get selection start and end
    int start = editorPane.getCaret().getDot();
    int finish = editorPane.getCaret().getMark();
    if (start == finish) {
        return;
    }
    if (start > finish) {
        // Selection is backwards
        int tmp = finish;
        finish = start;
        start = tmp;
    }
    // Trim off spaces at the start and end of the selection
    while (editorPane.getDocument().getText(start, 1).equals(" ") && start < finish) {
        start++;
    }
    while (editorPane.getDocument().getText(finish - 1, 1).equals(" ") && start < finish) {
        finish--;
    }
    editorPane.getCaret().setDot(start);
    editorPane.getCaret().moveDot(finish);
    // Get and check the selected text
    String selectedText = null;
    try {
        selectedText = editorPane.getDocument().getText(start, finish - start);
    } catch (BadLocationException e1) {
        return;
    }
    if (selectedText == null) {
        // Shouldn't happen but fail gracefully and quietly if it does
        return;
    }
    if (selectedText.trim().length() == 0) {
        String msg = "Cannot create hyperlinks on selections that only consist of whitespace.";
        JOptionPane.showMessageDialog(editorPane, msg, "Bad Selection", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    // Step 3 : get link and ensure it's all dandy
    URL linkURL = null;
    String linkRef = "";
    while (StringUtils.isEmpty(linkRef) || linkURL == null) {
        linkRef = JOptionPane.showInputDialog(editorPane, "Enter the URL to link to", linkRef);
        if (linkRef == null) {
            // aborted
            return;
        }
        try {
            linkURL = new URL(linkRef);
        } catch (MalformedURLException e) {
            String msg = "That link does not conform to the rules for a hyperlink destination.";
            JOptionPane.showMessageDialog(editorPane, msg, "Bad Link Format", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
    linkRef = linkURL.toString();
    // Step 4 : Construct the link
    StringBuilder link = new StringBuilder();
    link.append("<a href=\"");
    link.append(linkRef);
    link.append("\">");
    link.append(selectedText);
    link.append("</a>");
    // Remove selected text from document and place in new shiny linked text
    HTMLDocument doc = (HTMLDocument) editorPane.getDocument();
    doc.remove(start, finish - start);
    try {
        htmlKit.insertHTML(doc, start, link.toString(), 0, 0, HTML.Tag.A);
    } catch (IOException e) {
        String msg = "Unable to insert hyperlink due to a client error\nSpecific Error : " + e.getMessage();
        JOptionPane.showMessageDialog(editorPane, msg, "IO Error", JOptionPane.ERROR_MESSAGE);
    }
}
