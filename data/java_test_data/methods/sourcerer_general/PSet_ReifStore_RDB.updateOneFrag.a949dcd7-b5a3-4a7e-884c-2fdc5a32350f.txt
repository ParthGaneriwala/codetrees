public void updateOneFrag(Node stmtURI, Triple frag, ReificationStatementMask fragMask, boolean nullify, IDBID my_GID) {
    String stmtStr = null;
    Node val = null;
    int argc = 1;
    String argStr;
    if (!fragMask.hasOneBit())
        throw new JenaException("Reification can only update one column");
    PreparedStatement ps = null;
    if (fragMask.hasSubj()) {
        stmtStr = "updateReifiedS";
        if (!nullify)
            val = frag.getObject();
    } else if (fragMask.hasPred()) {
        stmtStr = "updateReifiedP";
        if (!nullify)
            val = frag.getObject();
    } else if (fragMask.hasObj()) {
        stmtStr = "updateReifiedO";
        if (!nullify)
            val = frag.getObject();
    } else if (fragMask.hasType()) {
        stmtStr = "updateReifiedT";
    }
    try {
        try {
            ps = m_sql.getPreparedSQLStatement(stmtStr, getTblName());
            ps.clearParameters();
            if (fragMask.hasSubj() || fragMask.hasPred() || fragMask.hasObj()) {
                if (nullify)
                    ps.setNull(argc++, java.sql.Types.VARCHAR);
                else {
                    argStr = m_driver.nodeToRDBString(val, true);
                    if (argStr == null)
                        throw new RDFRDBException("Invalid update argument: " + val.toString());
                    ps.setString(argc++, argStr);
                }
            } else {
                // update hasType field
                if (nullify)
                    // not nullable
                    ps.setString(argc++, " ");
                else
                    ps.setString(argc++, "T");
            }
            argStr = m_driver.nodeToRDBString(stmtURI, true);
            if (argStr == null)
                throw new RDFRDBException("Invalid update statement URI: " + stmtURI.toString());
            ps.setString(argc++, argStr);
            ps.setString(argc++, my_GID.getID().toString());
        } catch (Exception e) {
            logger.warn("Getting prepared statement for " + stmtStr + " Caught exception ", e);
            // Rethrow in case there is a recovery option
            throw new JenaException("Exception during database access", e);
        }
        try {
            ps.executeUpdate();
        } catch (SQLException e1) {
            logger.error("SQLException caught during reification update" + e1.getErrorCode(), e1);
            // Rethrow in case there is a recovery option
            throw new JenaException("Exception during database access", e1);
        }
    } finally {
        if (ps != null)
            m_sql.returnPreparedSQLStatement(ps);
    }
}
