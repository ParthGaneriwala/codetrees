public GridCoverage2D generateCoverage() {
    gam.setInitializer(igf);
    Vector solutions = gam.run();
    if (writeFileFlag) {
        File out = new File("E:/OH_stuff/GAMcrashClustersTrimmed.csv");
        try {
            java.io.FileWriter outWriter = new java.io.FileWriter(out);
            Iterator blah = solutions.iterator();
            while (blah.hasNext()) {
                outWriter.write(((Gene) blah.next()).toCSVString());
            }
        } catch (java.io.IOException ioe) {
            System.out.println("whinge horribly.");
        }
    }
    Vector kernels = new Vector();
    Iterator it = solutions.iterator();
    while (it.hasNext()) {
        Gene next = (Gene) it.next();
        EpanechnikovKernel ep = new EpanechnikovKernel();
        ep.setCentroid(new Point2D.Double(next.getX(), next.getY()));
        ep.setHeight(next.getFitness());
        ep.setMajorAxis(next.getMajorAxisRadius());
        ep.setMajorAxisOrientation(next.getOrientation());
        ep.setMinorAxis(next.getMinorAxisRadius());
        kernels.add(ep);
    }
    double deltaX = igf.getMaxX() - igf.getMinX();
    double deltaY = igf.getMaxY() - igf.getMinY();
    double cellSize = Math.max(deltaX / 1000, deltaY / 1000);
    int xCells = (int) Math.round(deltaX / cellSize);
    int yCells = (int) Math.round(deltaY / cellSize);
    // for some reason, having the normal [xCells][yCells] order flipped it around
    // same goes for (i and j) and (x and y) in assignment statements in loops further down.
    float[][] rasterArray = new float[yCells][xCells];
    minHeight = Float.MAX_VALUE;
    maxHeight = Float.MIN_VALUE;
    for (int i = 0; i < xCells; i++) {
        for (int j = 0; j < yCells; j++) {
            rasterArray[j][i] = 0;
        }
    }
    Iterator kernelIt = kernels.iterator();
    while (kernelIt.hasNext()) {
        EpanechnikovKernel nextKernel = (EpanechnikovKernel) kernelIt.next();
        for (int x = 0; x < xCells; x++) {
            for (int y = 0; y < yCells; y++) {
                Point2D.Double here = new Point2D.Double(igf.getMinX() + cellSize * x, igf.getMinY() + cellSize * y);
                rasterArray[y][x] = rasterArray[y][x] + (float) nextKernel.getValueAt(here);
            }
        }
    }
    for (int x = 0; x < xCells; x++) {
        // there should be a way to fold this into the above loop.  I'll look at that later.
        for (int y = 0; y < yCells; y++) {
            if (rasterArray[y][x] < minHeight) {
                minHeight = rasterArray[y][x];
            }
            if (rasterArray[y][x] > maxHeight) {
                maxHeight = rasterArray[y][x];
            }
        }
    }
    GridCoverage2D gc = DissUtils.matrixToCoverage(rasterArray, new GeneralEnvelope(new Rectangle2D.Double(igf.getMinX(), igf.getMinY(), deltaX, deltaY)));
    return gc;
}
