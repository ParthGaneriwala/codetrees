// $ANTLR start "start"
public final Compila_doresParser.start_return start() throws RecognitionException {
    Compila_doresParser.start_return retval = new Compila_doresParser.start_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PROGR1 = null;
    Token EOL3 = null;
    Token END7 = null;
    Compila_doresParser.id_return id2 = null;
    Compila_doresParser.declaration_return declaration4 = null;
    Compila_doresParser.body_return body5 = null;
    Compila_doresParser.block_return block6 = null;
    CommonTree PROGR1_tree = null;
    CommonTree EOL3_tree = null;
    CommonTree END7_tree = null;
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleTokenStream stream_PROGR = new RewriteRuleTokenStream(adaptor, "token PROGR");
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_body = new RewriteRuleSubtreeStream(adaptor, "rule body");
    RewriteRuleSubtreeStream stream_declaration = new RewriteRuleSubtreeStream(adaptor, "rule declaration");
    RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:2: ( ( PROGR id ( EOL )+ ) ( declaration )* ( body )* ( block ) ( END ) -> ^( PROGR id ^( DECLARATION ( declaration )* ) ^( METHOD ( body )* ) ^( MAIN block ) ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:4: ( PROGR id ( EOL )+ ) ( declaration )* ( body )* ( block ) ( END )
        {
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:4: ( PROGR id ( EOL )+ )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:5: PROGR id ( EOL )+
            {
                PROGR1 = (Token) match(input, PROGR, FOLLOW_PROGR_in_start504);
                stream_PROGR.add(PROGR1);
                pushFollow(FOLLOW_id_in_start506);
                id2 = id();
                state._fsp--;
                stream_id.add(id2.getTree());
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:14: ( EOL )+
                int cnt1 = 0;
                loop1: do {
                    int alt1 = 2;
                    int LA1_0 = input.LA(1);
                    if ((LA1_0 == EOL)) {
                        alt1 = 1;
                    }
                    switch(alt1) {
                        case 1:
                            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:14: EOL
                            {
                                EOL3 = (Token) match(input, EOL, FOLLOW_EOL_in_start508);
                                stream_EOL.add(EOL3);
                            }
                            break;
                        default:
                            if (cnt1 >= 1)
                                break loop1;
                            EarlyExitException eee = new EarlyExitException(1, input);
                            throw eee;
                    }
                    cnt1++;
                } while (true);
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:20: ( declaration )*
            loop2: do {
                int alt2 = 2;
                int LA2_0 = input.LA(1);
                if (((LA2_0 >= INT && LA2_0 <= BOOL) || LA2_0 == ARRAY)) {
                    alt2 = 1;
                }
                switch(alt2) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:21: declaration
                        {
                            pushFollow(FOLLOW_declaration_in_start513);
                            declaration4 = declaration();
                            state._fsp--;
                            stream_declaration.add(declaration4.getTree());
                        }
                        break;
                    default:
                        break loop2;
                }
            } while (true);
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:35: ( body )*
            loop3: do {
                int alt3 = 2;
                int LA3_0 = input.LA(1);
                if ((LA3_0 == FUNC || LA3_0 == PROC)) {
                    alt3 = 1;
                }
                switch(alt3) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:36: body
                        {
                            pushFollow(FOLLOW_body_in_start518);
                            body5 = body();
                            state._fsp--;
                            stream_body.add(body5.getTree());
                        }
                        break;
                    default:
                        break loop3;
                }
            } while (true);
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:43: ( block )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:44: block
            {
                pushFollow(FOLLOW_block_in_start523);
                block6 = block();
                state._fsp--;
                stream_block.add(block6.getTree());
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:51: ( END )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:84:52: END
            {
                END7 = (Token) match(input, END, FOLLOW_END_in_start527);
                stream_END.add(END7);
            }
            // AST REWRITE
            // elements: PROGR, id, declaration, body, block
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 85:2: -> ^( PROGR id ^( DECLARATION ( declaration )* ) ^( METHOD ( body )* ) ^( MAIN block ) )
            {
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:85:5: ^( PROGR id ^( DECLARATION ( declaration )* ) ^( METHOD ( body )* ) ^( MAIN block ) )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot(stream_PROGR.nextNode(), root_1);
                    adaptor.addChild(root_1, stream_id.nextTree());
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:85:16: ^( DECLARATION ( declaration )* )
                    {
                        CommonTree root_2 = (CommonTree) adaptor.nil();
                        root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(DECLARATION, "DECLARATION"), root_2);
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:85:30: ( declaration )*
                        while (stream_declaration.hasNext()) {
                            adaptor.addChild(root_2, stream_declaration.nextTree());
                        }
                        stream_declaration.reset();
                        adaptor.addChild(root_1, root_2);
                    }
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:85:44: ^( METHOD ( body )* )
                    {
                        CommonTree root_2 = (CommonTree) adaptor.nil();
                        root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(METHOD, "METHOD"), root_2);
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:85:53: ( body )*
                        while (stream_body.hasNext()) {
                            adaptor.addChild(root_2, stream_body.nextTree());
                        }
                        stream_body.reset();
                        adaptor.addChild(root_1, root_2);
                    }
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:85:60: ^( MAIN block )
                    {
                        CommonTree root_2 = (CommonTree) adaptor.nil();
                        root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(MAIN, "MAIN"), root_2);
                        adaptor.addChild(root_2, stream_block.nextTree());
                        adaptor.addChild(root_1, root_2);
                    }
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
