protected void processHeadElements() {
    if (commands.isEmpty()) {
        return;
    }
    PageImports pageImports = new PageImports(null);
    Iterator it = commands.iterator();
    List<JQCommand> evalCommands = null;
    while (it.hasNext()) {
        JQCommand command = (JQCommand) it.next();
        if (EVAL.equals(command.getCommand())) {
            // added, but after all other commands were processed
            if (evalCommands == null) {
                evalCommands = new ArrayList<JQCommand>();
            }
            evalCommands.add(command);
            it.remove();
            continue;
        }
        processHeadElements(command, pageImports);
        // processed by the line above
        if (ADD_HEADER.equals(command.getCommand())) {
            it.remove();
        }
    }
    List<Element> headElements = pageImports.getHeadElements();
    // must be valid XML.
    for (int i = 0, size = headElements.size(); i < size; i++) {
        Element element = headElements.get(i);
        if (element instanceof CssStyle) {
            ((CssStyle) element).setCharacterData(true);
        }
    }
    List<Element> jsElements = pageImports.getJsElements();
    JQCommand headElementsCommand = new JQCommand(JQTaconite.ADD_HEADER);
    headElementsCommand.setContent(headElements);
    // Place all JsScripts at the bottom of the command list which ensures
    // that new HTML elements added through JQTaconite are present in the DOM
    // when scripts are executed. Otherwise scripts which target elements
    // will fail as the elements are only loaded after the script executes
    JQCommand jsScriptsCommand = new JQCommand(JQTaconite.ADD_HEADER);
    splitJavaScriptElements(headElementsCommand, jsScriptsCommand, jsElements);
    // commands
    if (headElementsCommand.getContent().size() > 0) {
        int i = 0;
        for (int size = commands.size(); i < size; i++) {
            JQCommand command = commands.get(i);
            if (!CUSTOM.equals(command.getCommand())) {
                break;
            }
        }
        commands.add(i, headElementsCommand);
    }
    // Add JsScript elements at the bottom of the command list
    if (jsScriptsCommand.getContent().size() > 0) {
        commands.add(jsScriptsCommand);
    }
    // Add eval commands last
    if (evalCommands != null) {
        commands.addAll(evalCommands);
    }
}
