@Override
protected void paintComponent(Graphics graphics) {
    int width = getWidth();
    int height = getHeight();
    if (width > 0 && height > 0) {
        Graphics2D g = (Graphics2D) graphics.create();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, width, height);
        double centerX = width / 2.0;
        double centerY = height / 2.0;
        double scaleX = width / viewport.getX();
        double scaleY = height / viewport.getY();
        g.setColor(new Color(16, 16, 16, 32));
        Path2D grid = new Path2D.Double();
        grid.moveTo(0.0, centerY);
        grid.lineTo(width, centerY);
        grid.moveTo(centerX, 0.0);
        grid.lineTo(centerX, height);
        for (double x = 0.0; x <= viewport.getX() / 2.0; x += 1.0) {
            grid.moveTo(centerX + x * scaleX, centerY - 5.0);
            grid.lineTo(centerX + x * scaleX, centerY + 5.0);
            grid.moveTo(centerX - x * scaleX, centerY - 5.0);
            grid.lineTo(centerX - x * scaleX, centerY + 5.0);
        }
        for (double y = 0.0; y <= viewport.getY() / 2.0; y += 1.0) {
            grid.moveTo(centerX + 5.0, centerY + y * scaleY);
            grid.lineTo(centerX - 5.0, centerY + y * scaleY);
            grid.moveTo(centerX + 5.0, centerY - y * scaleY);
            grid.lineTo(centerX - 5.0, centerY - y * scaleY);
        }
        g.draw(grid);
        AffineTransform transform = new AffineTransform();
        transform.translate(centerX, centerY);
        transform.scale(scaleX, -scaleY);
        Color plain = new Color(255, 0, 0, 128);
        Color mirror = new Color(0, 0, 255, 128);
        for (Point2D[] ray : rays) {
            Point2D from = ray[0];
            Point2D to = ray[1];
            g.setColor(plain);
            g.draw(createPath(from, to).createTransformedShape(transform));
            g.setColor(mirror);
            from = mirrorFunction.calculate(from);
            to = mirrorFunction.calculate(to);
            g.draw(createPath(from, to).createTransformedShape(transform));
        }
        g.dispose();
    }
}
