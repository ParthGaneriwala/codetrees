public void applyImpulse() {
    if (collideSide == COLLIDE_NONE)
        return;
    Vector2f dv = new Vector2f(body2.getVelocity());
    dv.add(MathUtil.cross(body2.getAngularVelocity(), r2));
    dv.sub(body1.getVelocity());
    dv.sub(MathUtil.cross(body1.getAngularVelocity(), r1));
    float reln = dv.dot(ndp);
    reln = restitute - reln;
    float P = reln / K;
    float newImpulse;
    if (collideSide == COLLIDE_MIN) {
        newImpulse = accumulateImpulse + P < 0.0f ? accumulateImpulse + P : 0.0f;
    } else {
        newImpulse = accumulateImpulse + P > 0.0f ? accumulateImpulse + P : 0.0f;
    }
    P = newImpulse - accumulateImpulse;
    accumulateImpulse = newImpulse;
    Vector2f impulse = new Vector2f(ndp);
    impulse.scale(P);
    if (!body1.isStatic()) {
        Vector2f accum1 = new Vector2f(impulse);
        accum1.scale(body1.getInvMass());
        body1.adjustVelocity(accum1);
        body1.adjustAngularVelocity((body1.getInvI() * MathUtil.cross(r1, impulse)));
    }
    if (!body2.isStatic()) {
        Vector2f accum2 = new Vector2f(impulse);
        accum2.scale(-body2.getInvMass());
        body2.adjustVelocity(accum2);
        body2.adjustAngularVelocity(-(body2.getInvI() * MathUtil.cross(r2, impulse)));
    }
}
