public Object[] parseString(String value) {
    if ((value == null) || this.isCommand()) {
        Print.logError("Invalid value or property: 0x" + StringTools.toHexString(this.getKey()));
        return null;
    }
    int arrayLen = this.getArrayLength();
    String[] val = null;
    if (arrayLen == 1) {
        val = new String[] { value };
    } else {
        val = StringTools.parseArray(value);
        if (val.length != arrayLen) {
            Print.logError("Invalid array length [expected " + arrayLen + ", found=" + val.length + "]");
            return null;
        }
    }
    Object[] obj = null;
    switch((int) (this.getType() & TYPE_TYPE_MASK)) {
        case TYPE_STRING:
            obj = new Object[] { val[0] };
            break;
        case TYPE_BINARY:
            if (StringTools.isHex(val[0], true)) {
                obj = new Object[] { StringTools.parseHex(val[0], new byte[0]) };
            }
            break;
        case TYPE_GPS:
            if (val[0].indexOf(GeoPoint.PointSeparator) > 0) {
                // <-- not a definitive test
                obj = new Object[] { new GeoPoint(val[0]) };
            }
            break;
        case TYPE_BOOLEAN:
            obj = new Object[arrayLen];
            for (int i = 0; i < arrayLen; i++) {
                String v = val[i].trim();
                if (StringTools.isBoolean(v, true)) {
                    obj[i] = new Boolean(StringTools.parseBoolean(v, false));
                } else {
                    Print.logError("Invalid boolean value: " + v);
                    obj = null;
                    break;
                }
            // Print.logInfo("Parsed " + obj[i]);
            }
            break;
        case TYPE_NUMERIC:
            obj = new Object[arrayLen];
            for (int i = 0; i < arrayLen; i++) {
                String v = val[i].trim();
                if (this.isDecimal()) {
                    if (StringTools.isDouble(v, true)) {
                        obj[i] = new Double(StringTools.parseDouble(v, 0.0));
                    } else {
                        Print.logError("Invalid decimal value: " + v);
                        obj = null;
                        break;
                    }
                } else {
                    if (StringTools.isLong(v, true)) {
                        obj[i] = new Long(StringTools.parseLong(v, 0L));
                    } else {
                        Print.logError("Invalid integer value: " + v);
                        obj = null;
                        break;
                    }
                }
            // Print.logInfo("Parsed " + obj[i]);
            }
            break;
        case TYPE_COMMAND:
            // ??
            break;
    }
    return obj;
}
