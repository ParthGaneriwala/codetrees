@Test
@DirtiesContext
public void testCreateItem() throws Exception {
    configureMinimalGame();
    System.out.println("**** testCreateItem ****");
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.createUser("U1", "test", "test", "test");
    userService.login("U1", "test");
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "xx", "xx", 0, 0);
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    // Establish Connection
    movableService.getGameInfo();
    // Build Factory
    System.out.println("---- build unit ---");
    Index buildPos = collisionService.getFreeRandomPosition(itemService.getItemType(TEST_FACTORY_ITEM_ID), new Rectangle(0, 0, 100000, 100000), 400, true);
    sendBuildCommand(movableService.getAllSyncInfo().iterator().next().getId(), buildPos, TEST_FACTORY_ITEM_ID);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    waitForActionServiceDone();
    // Verify
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    List<DisplayHistoryElement> displayHistoryElements = historyService.getNewestHistoryElements(userService.getUser("U1"), 1000);
    System.out.println("----- History -----");
    for (DisplayHistoryElement displayHistoryElement : displayHistoryElements) {
        System.out.println(displayHistoryElement);
    }
    System.out.println("----- History End -----");
    Assert.assertEquals(4, displayHistoryElements.size());
    Assert.assertTrue(displayHistoryElements.get(0).getTimeStamp() >= displayHistoryElements.get(1).getTimeStamp());
    Assert.assertEquals("Item created: " + TEST_FACTORY_ITEM, displayHistoryElements.get(0).getMessage());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
