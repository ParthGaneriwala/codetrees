public BigNumber sub(BigNumber bn) {
    boolean negative = false;
    if (this.negative != bn.negative) {
        BigNumber b1 = abs(this);
        BigNumber b2 = abs(bn);
        BigNumber result = b1.add(b2);
        result.negative = this.negative;
        return result;
    }
    Stack<Digit> stack = new Stack<Digit>();
    int borrow = 0;
    BigNumber b1 = abs(this);
    BigNumber b2 = abs(bn);
    if (this.lt(bn)) {
        negative = true;
    }
    if (b1.lt(b2)) {
        BigNumber t = b1;
        b1 = b2;
        b2 = t;
    }
    int i = b1.getNumberOfDigits() - 1;
    int j = b2.getNumberOfDigits() - 1;
    for (; i >= 0 && j >= 0; i--, j--) {
        Digit id = b1.digits.get(i);
        Digit jd = b2.digits.get(j);
        int sum = id.getCurrent() + borrow - jd.getCurrent();
        if (sum < 0) {
            borrow = -1;
            sum += radix;
        } else {
            borrow = 0;
        }
        Digit d = new Digit(new Range(radix - 1));
        d.setValue(sum);
        stack.push(d);
    }
    if (j >= 0) {
        throw new IllegalStateException("subtrahend longer than minuhend");
    }
    if (i >= 0) {
        while (i >= 0) {
            Digit id = b1.digits.get(i);
            int sum = id.getCurrent() + borrow;
            if (sum < 0) {
                borrow = -1;
                sum += radix;
            } else {
                borrow = 0;
            }
            Digit d = new Digit(new Range(radix - 1));
            d.setValue(sum);
            stack.push(d);
            i--;
        }
    }
    while (stack.peek().getCurrent() == 0 && stack.size() > 1) {
        stack.pop();
    }
    if (borrow != 0) {
        borrow += radix;
        Digit d = new Digit();
        d.setValue(borrow);
        stack.push(d);
    }
    BigNumber result = new BigNumber();
    while (!stack.isEmpty()) {
        result.digits.add(stack.pop());
    }
    result.negative = negative;
    BigNumber zero = new BigNumber("0");
    if (abs(result).eq(zero)) {
        result.negative = false;
    }
    return result;
}
