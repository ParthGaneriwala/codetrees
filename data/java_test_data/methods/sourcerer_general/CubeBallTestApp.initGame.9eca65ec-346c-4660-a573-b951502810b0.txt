public void initGame(double size, int numBalls, int bars) {
    mode = MODE_MULTI;
    cubeSize = size;
    cageBars = bars;
    // does this need to be a vec?
    balls = new Vector<CubeTestBall>();
    for (int i = 0; i < numBalls; i++) {
        balls.add(new CubeTestBall(i, INI_RADIUS, INI_SPEED, rndPt()));
    }
    getBall(VIEW_BALL).setState(CubeTestBall.VIEW_STATE);
    view = new Transform3D();
    viewVec = new Vector3d();
    backViewVec = new Vector3d();
    backViewDist = new Vector3d(0, 0, cubeSize / 4.0);
    rotMats = new Matrix3d[6];
    Matrix3d m = new Matrix3d();
    m.rotX(ROT_SPD);
    rotMats[LEFT] = new Matrix3d(m);
    m.rotX(-ROT_SPD);
    rotMats[RIGHT] = new Matrix3d(m);
    m.rotY(ROT_SPD);
    rotMats[UP] = new Matrix3d(m);
    m.rotY(-ROT_SPD);
    rotMats[DOWN] = new Matrix3d(m);
    m.rotZ(ROT_SPD);
    rotMats[NEAR] = new Matrix3d(m);
    m.rotZ(-ROT_SPD);
    rotMats[FAR] = new Matrix3d(m);
    quadSize = (cubeSize * 2) / cageBars;
    discTab = new int[6][cageBars][cageBars];
    numDiscs = 6 * cageBars * cageBars;
    for (int i = 0; i < 6; i++) for (int j = 0; j < cageBars; j++) for (int k = 0; k < cageBars; k++) discTab[i][j][k] = NO_DISC;
    System.out.println("Discs:" + numDiscs);
    currDisc = 0;
}
