private void negotiateSSLConnection(String user, String password, String database, int packLength) throws SQLException {
    if (!ExportControlled.enabled()) {
        throw new ConnectionFeatureNotAvailableException(this.connection, this.lastPacketSentTimeMs, null);
    }
    boolean doSecureAuth = false;
    if ((this.serverCapabilities & CLIENT_SECURE_CONNECTION) != 0) {
        this.clientParam |= CLIENT_SECURE_CONNECTION;
        doSecureAuth = true;
    }
    this.clientParam |= CLIENT_SSL;
    Buffer packet = new Buffer(packLength);
    if (this.use41Extensions) {
        packet.writeLong(this.clientParam);
    } else {
        packet.writeInt((int) this.clientParam);
    }
    send(packet, packet.getPosition());
    ExportControlled.transformSocketToSSLSocket(this);
    packet.clear();
    if (doSecureAuth) {
        if (versionMeetsMinimum(4, 1, 1)) {
            secureAuth411(null, packLength, user, password, database, true);
        } else {
            secureAuth411(null, packLength, user, password, database, true);
        }
    } else {
        if (this.use41Extensions) {
            packet.writeLong(this.clientParam);
            packet.writeLong(this.maxThreeBytes);
        } else {
            packet.writeInt((int) this.clientParam);
            packet.writeLongInt(this.maxThreeBytes);
        }
        // User/Password data
        packet.writeString(user);
        if (this.protocolVersion > 9) {
            packet.writeString(Util.newCrypt(password, this.seed));
        } else {
            packet.writeString(Util.oldCrypt(password, this.seed));
        }
        if (((this.serverCapabilities & CLIENT_CONNECT_WITH_DB) != 0) && (database != null) && (database.length() > 0)) {
            packet.writeString(database);
        }
        send(packet, packet.getPosition());
    }
}
