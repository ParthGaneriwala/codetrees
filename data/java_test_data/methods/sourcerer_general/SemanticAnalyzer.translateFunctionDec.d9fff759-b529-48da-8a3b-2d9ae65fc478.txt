public void translateFunctionDec(FunctionDec functionDec) {
    Symbol funcName = functionDec.getName();
    FieldList params = functionDec.getParams();
    NameTy returnType = functionDec.getResult();
    Exp body = functionDec.getBody();
    TypeEntry retTypeEntry = null;
    // Type checking of return type
    if (returnType != null) {
        Symbol retTypeSymbol = returnType.getName();
        retTypeEntry = (TypeEntry) environments.getTypeTable().get(retTypeSymbol);
        if (retTypeEntry == null) {
            errorHandler.addError(functionDec.getPosition(), ErrorHandler.THE_TYPE, retTypeSymbol.toString(), ErrorHandler.NOT_DEFINED);
        }
    } else {
        // This is a void return type
        retTypeEntry = VoidTypeEntry.getInstance();
    }
    // Type checking of the param list
    RecordTypeEntry formals = translateFieldList(params);
    // Make the function entry
    currentFunctionLevel = new Level(currentFunctionLevel, funcName);
    // Add this level to the pool of function entries
    functionLevels.addElement(currentFunctionLevel);
    FunctionEntry funcEntry = new FunctionEntry(formals, retTypeEntry, currentFunctionLevel);
    environments.getVariableTable().put(funcName, funcEntry);
    // Create a new scope for the variable/function environment and analyze
    environments.getVariableTable().beginScope();
    int paramCount = 0;
    for (FieldList prm = params; prm != null; prm = prm.getNextFieldList()) {
        Symbol varName = prm.getName();
        TypeEntry entr = (TypeEntry) environments.getTypeTable().get(prm.getTypeSymbol());
        // ActivationFrame currAf = currentFunctionLevel.getActivationFrame();
        // int currVarOffSet = currAf.getCurrentOffSet();
        // currAf.setCurrentOffSet(++currVarOffSet);
        VariableEntry varEntry = new VariableEntry(entr, true, ++paramCount, currentFunctionLevel);
        environments.getVariableTable().put(varName, varEntry);
    }
    currentFunctionLevel.setNumIncomingParams(paramCount);
    // Check the body expression and set the translated type into the level object
    TranslatedExpAndType translatedExpAndType = translateExpression(body);
    AssemType assemBody = translatedExpAndType.getAssemType();
    assemBody = translatingMediator.translateReturnStm(assemBody);
    currentFunctionLevel.setFunctionBody(assemBody);
    if (retTypeEntry != (TypeEntry) translatedExpAndType.getTypeEntry()) {
        errorHandler.addError(functionDec.getPosition(), ErrorHandler.FUNC_RETTYPE_NOT_COMPATIBLE);
    }
    // End the scope
    environments.getVariableTable().endScope();
    // The function has ended; now retrieve the earlier level of the function
    currentFunctionLevel = currentFunctionLevel.getParentLevel();
}
