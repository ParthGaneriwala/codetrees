public XYSeriesCollection getChartDataSet(String aType, int aNumberOfParts, int aLowerLimit, int aUpperlimit, boolean showHuberDistribution, boolean showRealDistribution) {
    // creat the data set
    XYSeriesCollection lDataset = new XYSeriesCollection();
    // create the distributions
    if (iQuantitativeValidationSingelton.isLog2()) {
        iDensityReal = new XYSeries("Ratio distribution (log 2) in reference proteins");
        iDensityHuberCalculated = new XYSeries("Normal distribution (log 2) in reference proteins calcutaled by huber estimator");
    } else {
        iDensityReal = new XYSeries("Ratio distribution in reference proteins");
        iDensityHuberCalculated = new XYSeries("Distribution in reference proteins calcutaled by huber estimator");
    }
    // add the wanted distributions
    if (showHuberDistribution) {
        lDataset.addSeries(iDensityHuberCalculated);
    }
    if (showRealDistribution) {
        lDataset.addSeries(iDensityReal);
    }
    // add "real" distribution
    int lHighestDensity = 0;
    if (iDescriptiveStats == null || iQuantitativeValidationSingelton.isLog2() != iLog2StatusDescriptiveStatistics) {
        this.createDescriptiveStatistics();
    }
    if (iHuberEstimators == null) {
        this.huberStatistics();
    }
    for (int i = 0; i < iRatioTypes.length; i++) {
        if (iRatioTypes[i].equalsIgnoreCase(aType)) {
            DescriptiveStatistics stat = iDescriptiveStats[i];
            double lLowest = aLowerLimit;
            double lHighest = aUpperlimit;
            double lDiff = lHighest - lLowest;
            double lInterval = lDiff / aNumberOfParts;
            double[] lRatios = stat.getSortedValues();
            int[] lWeight = new int[aNumberOfParts];
            double[] lValue = new double[aNumberOfParts];
            for (int j = 0; j < lWeight.length; j++) {
                lWeight[j] = 0;
                lValue[j] = lLowest + (j * lInterval);
            }
            for (int j = 0; j < lRatios.length; j++) {
                for (int k = 0; k < lWeight.length; k++) {
                    double lLowerLimit = lLowest + k * lInterval - lInterval / 2;
                    if (lLowerLimit <= lRatios[j] && lRatios[j] < lLowerLimit + lInterval) {
                        lWeight[k] = lWeight[k] + 1;
                        if (lWeight[k] > lHighestDensity) {
                            lHighestDensity = lWeight[k];
                        }
                    }
                }
            }
            iHighestYAxisDensity = lHighestDensity;
            for (int j = 0; j < lWeight.length; j++) {
                iDensityReal.add(lValue[j], lWeight[j]);
            }
        }
    }
    // add huber estimated distrubution
    for (int i = 0; i < iRatioTypes.length; i++) {
        if (iRatioTypes[i].equalsIgnoreCase(aType)) {
            HashMap map = iHuberEstimators[i];
            double lLowest = aLowerLimit;
            double lHighest = aUpperlimit;
            double lDiff = lHighest - lLowest;
            double lInterval = lDiff / aNumberOfParts;
            double lStDev = (Double) map.get("stdev");
            double lMean = (Double) map.get("mean");
            double[] lValue = new double[aNumberOfParts];
            for (int j = 0; j < lValue.length; j++) {
                lValue[j] = lLowest + (j * lInterval);
            }
            // calcutate the height for the mean with the probabilty distribution function
            double lMeanDenom = lStDev * Math.sqrt(2 * 3.1415926539);
            double lMeanHeight = 1 / lMeanDenom * Math.exp((-0.5) * Math.pow(((lMean - lMean) / lStDev), 2));
            // calculate the correction for the height (the height must be the same as the maximun height in the "real" distribution
            double lCorrection = (double) lHighestDensity / lMeanHeight;
            for (int k = 0; k < lValue.length; k++) {
                double lValueToCalculateDensityFor = lValue[k];
                if (!iQuantitativeValidationSingelton.isLog2()) {
                    // we are not in the log2 mode
                    // the values (for which the density will be calculated) must first be made log 2
                    lValueToCalculateDensityFor = Math.log(lValue[k]) / Math.log(2);
                }
                double denom = lStDev * Math.sqrt(2 * 3.1415926539);
                double y = 1 / denom * Math.exp((-0.5) * Math.pow(((lValueToCalculateDensityFor - lMean) / lStDev), 2));
                iDensityHuberCalculated.add(lValue[k], (y * lCorrection));
            }
        }
    }
    return lDataset;
}
