public void commitMove(Point from, Point to, PieceType promoteTo) {
    ChessPiece moving = at(from);
    Point victimPoint = to;
    ArrayList<HalfMove> fromMoves = getMoves(from);
    Move chosen = null;
    ChessPiece victim = null;
    boolean mustPromote = false;
    for (HalfMove m : fromMoves) {
        if (m.dest.equals(to)) {
            chosen = new Move(from, to, m.type);
            break;
        }
    }
    if (null == chosen) {
        throw new IllegalArgumentException("Move is not legal");
    } else if (MoveType.EN_PASSANT == chosen.type) {
        victimPoint = new Point(to.x, from.y);
    } else if (PieceType.PAWN == moving.getType()) {
        if (0 == to.y || 7 == to.y) {
            mustPromote = true;
            if (null == promoteTo) {
                throw new UnPromotedPawnException("moving " + moving + " to final row requires promotion");
            }
        }
    }
    victim = at(victimPoint);
    if (null != victim) {
        if (victim.color_ == moving.color_) {
            throw new IllegalArgumentException("can't capture allies");
        }
    }
    if (mustPromote) {
        // may throw IllegalArgumentException--that's OK
        Pawn p = (Pawn) moving;
        p.promoteTo(promoteTo);
    }
    /* transaction start ... */
    clear(from);
    clear(victimPoint);
    set(to, moving);
    moving.firstmove = false;
    if (null != victim) {
        this.captured.add(victim);
    }
    if (MoveType.PAWN_2MOVE == chosen.type) {
        passing_pawn_loc = to;
    } else {
        passing_pawn_loc = null;
        if (MoveType.CASTLE == chosen.type) {
            int rook_start, rook_end;
            if (6 == to.x) {
                rook_start = 7;
                rook_end = 5;
            } else {
                rook_start = 0;
                rook_end = 3;
            }
            Point rookfrom = new Point(rook_start, from.y);
            Point rookto = new Point(rook_end, from.y);
            ChessPiece rook = at(rookfrom);
            set(rookto, rook);
            clear(rookfrom);
        }
    }
    // oh dear, this gets time-consuming (better to pre-check)
    black_in_check = hasCheck(PieceColor.WHITE);
    white_in_check = hasCheck(PieceColor.BLACK);
/* transaction end */
}
