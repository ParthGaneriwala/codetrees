public String intercept(ActionInvocation invocation) throws Exception {
    // TODO Auto-generated method stub
    ActionContext context = ActionContext.getContext();
    Action action = (Action) invocation.getAction();
    if (!(action instanceof AbstractAction)) {
        return invocation.invoke();
    }
    String result = "jxqresult";
    HttpServletRequest request = (HttpServletRequest) context.get(ServletActionContext.HTTP_REQUEST);
    String ip = getIpAddr(request);
    String url = request.getRequestURI();
    try {
        Object obj = ActionContext.getContext().getSession().get("USERSESSION");
        AbstractAction abstractAction = (AbstractAction) action;
        int moduleId = abstractAction.moduleid;
        abstractAction.userip = ip;
        if (obj != null) {
            LOG.debug("obj::" + obj);
            String[] str = obj.toString().split(",");
            abstractAction.usertype = (short) Integer.parseInt(str[6]);
            abstractAction.currentUserid = Integer.parseInt(str[0]);
            abstractAction.provinceid = Integer.parseInt(str[1]);
            abstractAction.cityid = Integer.parseInt(str[2]);
            abstractAction.districtid = Integer.parseInt(str[3]);
            abstractAction.currentRole = (short) Integer.parseInt(str[4]);
            abstractAction.currentUsername = str[5];
        } else if (!abstractAction.rightCode.equals("PUBLIC")) {
            javax.servlet.http.Cookie[] cookies = request.getCookies();
            Cookie cookie = null;
            for (int i = 0; cookies != null && i < cookies.length; i++) {
                System.out.println("cookies[i].getName():::" + cookies[i].getName());
                if (cookies[i].getName().equals(CommonData.LOGINCOOKIE)) {
                    cookie = cookies[i];
                }
            }
            if (cookie == null)
                return Action.LOGIN;
            else {
                String s = cookie.getValue();
                LOG.info("我去拿cookie了" + s);
                int idx = s.indexOf("||");
                String loginname = s.substring(0, idx);
                String password = s.substring(idx + 2);
                WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
                UserService service = (UserService) wac.getBean("userService");
                CoreUser user = service.getUserByLoginName(loginname);
                if (user == null)
                    return Action.LOGIN;
                String usersession = user.getId() + "," + user.getProvinceId() + "," + user.getCityId() + "," + user.getDistrictId() + "," + user.getUserRole() + "," + user.getUserName() + "," + user.getUserType();
                ActionContext.getContext().getSession().put("USERSESSION", usersession);
                abstractAction.currentUserid = user.getId();
                abstractAction.currentRole = user.getUserRole();
                abstractAction.provinceid = user.getProvinceId();
                abstractAction.cityid = user.getCityId();
                abstractAction.districtid = user.getDistrictId();
                abstractAction.usertype = user.getUserType();
                abstractAction.currentUsername = user.getUserName();
            }
        }
        // 先处理完毕这个东东，事后再来处理发送到接口的请求
        long begin = System.currentTimeMillis();
        // 执行action里面的逻辑
        result = invocation.invoke();
        // 执行后面的一些逻辑处理
        int userId = abstractAction.currentUserid;
        int provinceId = abstractAction.provinceid;
        int cityId = abstractAction.cityid;
        int districtId = abstractAction.districtid;
        short userRole = (short) abstractAction.currentRole;
        short userType = (short) abstractAction.usertype;
        // 这里感觉都可以通过陈总的统一的那个log日志来处理
        if (!result.equals(Action.ERROR)) {
        // 判断是否记录积分等
        }
        long now = System.currentTimeMillis();
        LOG.info(result + ":" + userId + ">" + provinceId + ">" + cityId + ">" + districtId + ">" + moduleId + ">" + userRole + ">" + userType + ">" + ip + ">" + url + ">" + (now - begin));
        return result;
    } catch (Exception e) {
        LOG.error("拦截失败::" + e + ">" + ip + ">" + url);
        e.printStackTrace();
        if (result != null && result.equals("jxqresult"))
            result = invocation.invoke();
        return result;
    }
}
