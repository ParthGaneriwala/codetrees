public void alignItemsInColumns(int[] columns) {
    ArrayList<Integer> rows = new ArrayList<Integer>();
    for (int i = 0; i < columns.length; i++) {
        rows.add(columns[i]);
    }
    int height = -5;
    int row = 0, rowHeight = 0, columnsOccupied = 0, rowColumns;
    for (int i = 0; i < children.size(); i++) {
        MenuItem item = (MenuItem) children.get(i);
        assert row < rows.size() : "Too many menu items for the amount of rows/columns.";
        rowColumns = rows.get(row);
        assert rowColumns != 0 : "Can't have zero columns on a row";
        rowHeight = (int) Math.max(rowHeight, item.getHeight());
        ++columnsOccupied;
        if (columnsOccupied >= rowColumns) {
            height += rowHeight + 5;
            columnsOccupied = 0;
            rowHeight = 0;
            ++row;
        }
    }
    assert columnsOccupied != 0 : "Too many rows/columns for available menu items.";
    CCSize winSize = Director.sharedDirector().winSize();
    row = 0;
    rowHeight = 0;
    rowColumns = 0;
    float w = 0, x = 0, y = height / 2;
    for (int i = 0; i < children.size(); i++) {
        MenuItem item = (MenuItem) children.get(i);
        if (rowColumns == 0) {
            rowColumns = rows.get(row);
            w = winSize.width / (1 + rowColumns);
            x = w;
        }
        rowHeight = Math.max(rowHeight, (int) item.getHeight());
        item.setPosition(x - winSize.width / 2, y - item.getHeight() / 2);
        x += w + 10;
        ++columnsOccupied;
        if (columnsOccupied >= rowColumns) {
            y -= rowHeight + 5;
            columnsOccupied = 0;
            rowColumns = 0;
            rowHeight = 0;
            ++row;
        }
    }
}
