@SuppressWarnings("unchecked")
private static void addGrouping() {
    List<Major> selectedMajors = new ArrayList<Major>(2);
    List<Minor> selectedMinors = new ArrayList<Minor>(1);
    Session session = getSession();
    Transaction tx;
    // get majors
    tx = session.beginTransaction();
    List<Major> majors = (List<Major>) session.createQuery("from Major as major").list();
    tx.commit();
    Util.printHeader("Majors");
    // display majors
    do {
        int count = 1;
        for (Major major : majors) {
            System.out.println(count++ + ".\t" + major.getProgram() + " : " + major.getDescription());
        }
        Major selected = majors.get(Util.getValidInt(1, majors.size(), "Major") - 1);
        if (selected != null) {
            selectedMajors.add(selected);
            majors.remove(selected);
        }
    } while (selectedMajors.size() < 2 && Util.getYesNo("Add another major?"));
    Util.printHeader("Minors");
    if (selectedMajors.size() < 2 && Util.getYesNo("Add minor?")) {
        tx = session.beginTransaction();
        List<Minor> minors = (List<Minor>) session.createQuery("from Minor as minor").list();
        tx.commit();
        do {
            int count = 1;
            for (Minor minor : minors) {
                System.out.println(count++ + ".\t" + minor.getProgram() + " : " + minor.getDescription());
            }
            Minor selected = minors.get(Util.getValidInt(1, minors.size(), "Minor") - 1);
            if (selected != null) {
                selectedMinors.add(selected);
                minors.remove(selected);
            }
        } while (selectedMinors.size() < 1 && Util.getYesNo("Add another minor?"));
    }
    String query = "from RequirementGrouping as grouping where grouping.major.majorId = " + selectedMajors.get(0).getMajorId();
    if (selectedMinors.size() >= 1) {
        query += " and grouping.minor.minorId = " + selectedMinors.get(0).getMinorId();
    }
    tx = session.beginTransaction();
    // List<RequirementGrouping> requirementGroupings = (List<RequirementGrouping>) session.createQuery(query).list();
    tx.commit();
    RequirementGrouping grouping = new RequirementGrouping();
    grouping.setMajor(selectedMajors.get(0));
    if (!selectedMinors.isEmpty()) {
        grouping.setMinor(selectedMinors.get(0));
    }
    grouping.setCreditsRequired(Util.getValidInt(0, "How many credits are required?"));
    StringBuffer prereqs = new StringBuffer();
    Set<String> preReqSet = new TreeSet<String>();
    do {
        GroupedCourse course = new GroupedCourse();
        course.setDegreeProgram(Util.getInput("Degree program"));
        course.setCourseNum(Util.getInput("Course number"));
        tx = session.beginTransaction();
        /*if(session.createQuery("from Course as course where course.courseNum = '" + 
					course.getCourseNum() + "' and course.degreeProgram = '" + 
					course.getDegreeProgram() + "'").list().isEmpty()){
				System.err.println("Invalid course: course " + course.getDegreeProgram() + " " + course.getCourseNum() + " does not exist in database.");
			} else {
			*/
        course.setCredits(Util.getInput("Number of credits"));
        if (Util.getYesNo("Does course have pre-requisites?")) {
            do {
                String prereqDegreeProgram = Util.getInput("Pre-requisite degree program");
                String prereqCourseNumber = Util.getInput("Pre-requisite course number");
                // prereqs.append(prereqDegreeProgram + prereqCourseNumber + ",");
                if (preReqSet.add(prereqDegreeProgram + prereqCourseNumber)) {
                    prereqs.append(prereqDegreeProgram + prereqCourseNumber + ",");
                }
            // }
            } while (Util.getYesNo("Add another pre-requisite?"));
        // course.setPreReqs(prereqs.toString());
        }
        course.setRequirementGrouping(grouping);
        grouping.getGroupedCourses().add(course);
        session.saveOrUpdate(grouping);
        System.out.println("Saved grouping [ID = " + grouping.getRequirementGroupingId() + "]");
        // }
        tx.commit();
    } while (Util.getYesNo("Add another course?"));
    for (GroupedCourse course : grouping.getGroupedCourses()) {
        course.setPreReqs(prereqs.toString());
        tx = session.beginTransaction();
        session.saveOrUpdate(course);
        tx.commit();
    }
    session.close();
}
