// ------------------------------------------
// get item details from the **cloud
public static Cursor getItem(long id, Context context) {
    Logger.log(TAG + ".getItem()");
    Logger.log("id", id);
    // variable is used to update of local database
    String item = "";
    resetError();
    String key = HTTPPost.Request.GET_ITEM + id;
    Cursor c = getCachedCursor(key);
    if (c == null) {
        Logger.log("read from server", true);
        HTTPPost post = new HTTPPost(HTTPPost.Request.GET_ITEM);
        post.addLong("item", id);
        String xml = post.post();
        if (xml == null) {
            setError(ERR_NETWORK);
        } else {
            String[] cols = { "_id", "flag", "item", "description", "link", "image", "audio", "tags" };
            c = new ArrayCursor(cols, xml);
            if (!errorState()) {
                if (c.getCount() == 0) {
                    setError(ERR_ITEM404);
                } else {
                    // retrieve item to update the local database.
                    // note: column index corresponds to cosl[] array!!!
                    item = cols[2];
                    mCache.put(key, new CachedCursor(c));
                }
            }
        }
        // update local database...
        if (!errorState()) {
            if (mDBHelper == null)
                mDBHelper = new DBHelper(context);
            SQLiteDatabase db = mDBHelper.getWritableDatabase();
            String sql = prepare(SQL[UPDATE_SILENT], id, quote(item));
            Logger.log("SQL", sql);
            db.execSQL(sql);
        } else if (mLastErrorCode == ERR_ITEM404) {
            if (mDBHelper == null)
                mDBHelper = new DBHelper(context);
            SQLiteDatabase db = mDBHelper.getWritableDatabase();
            String sql = prepare(SQL[DELETE], id);
            Logger.log("SQL", sql);
            db.execSQL(sql);
        }
    }
    return c;
}
