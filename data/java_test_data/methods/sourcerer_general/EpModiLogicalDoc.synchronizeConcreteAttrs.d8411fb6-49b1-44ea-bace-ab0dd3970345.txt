private void synchronizeConcreteAttrs() throws DfException {
    int i = 0;
    int j = 0;
    int k = 0;
    IDfList idfConcreteDocs = null;
    IDfList idfSynchronizedAttrNames = null;
    IEpModiConcreteDoc iepConcreteDoc = null;
    String strAttrName = null;
    // System.out.println("*** " + this.getClass().getName() + " BEGIN synchronizeConcreteAttrs ***");
    idfConcreteDocs = this.getLinguisticVersions();
    idfSynchronizedAttrNames = this.getSynchronizedAttrNames();
    // Boolean to save only concrete doc if it was changed :
    // prevent from infinite mutual update if 2 way synchro (Logical<->Concrete)
    boolean blnAttributesChanged;
    boolean blnRepeatingAttrDifferent;
    for (i = 0; i < idfConcreteDocs.getCount(); i++) {
        iepConcreteDoc = (IEpModiConcreteDoc) idfConcreteDocs.get(i);
        blnAttributesChanged = false;
        for (j = 0; j < idfSynchronizedAttrNames.getCount(); j++) {
            strAttrName = idfSynchronizedAttrNames.getString(j);
            if (iepConcreteDoc.isAttrRepeating(strAttrName)) {
                blnRepeatingAttrDifferent = false;
                if (iepConcreteDoc.getValueCount(strAttrName) != this.getValueCount(strAttrName)) {
                    // There is not the same numbers of values
                    blnRepeatingAttrDifferent = true;
                } else {
                    // Check values one by one
                    for (k = 0; k < this.getValueCount(strAttrName); k++) {
                        if (iepConcreteDoc.getRepeatingValue(strAttrName, k) != this.getRepeatingValue(strAttrName, k)) {
                            blnRepeatingAttrDifferent = true;
                        // System.out.println(" synchro " + strAttrName);
                        }
                    }
                }
                // Repeating attributes are not the same, update them all
                if (blnRepeatingAttrDifferent) {
                    iepConcreteDoc.removeAll(strAttrName);
                    for (k = 0; k < this.getValueCount(strAttrName); k++) {
                        iepConcreteDoc.setRepeatingValue(strAttrName, k, this.getRepeatingValue(strAttrName, k));
                    }
                    blnAttributesChanged = true;
                }
            } else {
                // 27/03/2006 : Synchronize concrete documents object name
                if (strAttrName.equals(OBJECT_NAME)) {
                    String strTemp = this.getValue(strAttrName) + "_" + iepConcreteDoc.getLanguageCode();
                    // Synchronize only if value is different
                    if (iepConcreteDoc.getString(strAttrName) != strTemp) {
                        iepConcreteDoc.setString(strAttrName, strTemp);
                        blnAttributesChanged = true;
                    }
                } else {
                    // Synchronize only if value is different
                    if (iepConcreteDoc.getValue(strAttrName) != this.getValue(strAttrName)) {
                        iepConcreteDoc.setValue(strAttrName, this.getValue(strAttrName));
                        blnAttributesChanged = true;
                    // System.out.println(" synchro " + strAttrName);
                    }
                }
            }
        }
        if (blnAttributesChanged) {
            // System.out.println(" iepConcreteDoc.save");
            if (iepConcreteDoc.isCheckedOut()) {
                iepConcreteDoc.saveLock();
            } else {
                iepConcreteDoc.save();
            }
        }
    }
// System.out.println("*** " + this.getClass().getName() + " END  synchronizeConcreteAttrs ***");
}
