public void buildNodeAttributes(CyNetwork network) {
    Iterator i = network.nodesIterator();
    while (i.hasNext()) {
        Node node = (Node) i.next();
        String termID = node.getIdentifier();
        String shape;
        String description;
        String pValue;
        String adj_pValue;
        String smallX;
        String smallN;
        String bigX;
        String bigN;
        // String color;
        Double color;
        Double size;
        shape = "ellipse";
        try {
            description = ontology.getTerm(Integer.parseInt(termID)).getName();
        } catch (Exception e) {
            description = "?";
        }
        try {
            if (testMap != null) {
                pValue = SignificantFigures.sci_format(testMap.get(new Integer(termID)).toString(), 5);
            } else {
                pValue = "N/A";
            }
        } catch (Exception e) {
            pValue = "N/A";
        }
        try {
            if (correctionMap != null) {
                adj_pValue = SignificantFigures.sci_format(correctionMap.get(termID).toString(), 5);
            } else {
                adj_pValue = "N/A";
            }
        } catch (Exception e) {
            adj_pValue = "N/A";
        }
        try {
            smallX = mapSmallX.get(new Integer(termID)).toString();
        } catch (Exception e) {
            smallX = "N/A";
        }
        try {
            smallN = mapSmallN.get(new Integer(termID)).toString();
        } catch (Exception e) {
            smallN = "N/A";
        }
        try {
            bigX = mapBigX.get(new Integer(termID)).toString();
        } catch (Exception e) {
            bigX = "N/A";
        }
        try {
            bigN = mapBigN.get(new Integer(termID)).toString();
        } catch (Exception e) {
            bigN = "N/A";
        }
        try {
            if (testMap == null) {
                color = new Double(0);
            } else if (correctionMap == null) {
                double a = -(Math.log((new BigDecimal(testMap.get(new Integer(termID)).toString())).doubleValue()) / Math.log(10));
                color = new Double(a);
            } else {
                double a = -(Math.log((new BigDecimal(correctionMap.get(termID).toString())).doubleValue()) / Math.log(10));
                color = new Double(a);
            }
        } catch (Exception e) {
            color = new Double(0);
        }
        try {
            double numberOfGenes = new Integer(mapSmallX.get(new Integer(termID)).toString()).doubleValue();
            numberOfGenes = Math.sqrt(numberOfGenes) * 2;
            size = new Double(numberOfGenes);
        } catch (Exception e) {
            size = DEFAULT_SIZE;
        }
        CyAttributes nodeAttrs = Cytoscape.getNodeAttributes();
        nodeAttrs.setAttribute(node.getIdentifier(), "pValue_" + clusterName, pValue);
        nodeAttrs.setAttribute(node.getIdentifier(), "adjustedPValue_" + clusterName, adj_pValue);
        nodeAttrs.setAttribute(node.getIdentifier(), "x_" + clusterName, smallX);
        nodeAttrs.setAttribute(node.getIdentifier(), "X_" + clusterName, bigX);
        nodeAttrs.setAttribute(node.getIdentifier(), "n_" + clusterName, smallN);
        nodeAttrs.setAttribute(node.getIdentifier(), "N_" + clusterName, bigN);
        nodeAttrs.setAttribute(node.getIdentifier(), "description_" + clusterName, description);
        nodeAttrs.setAttribute(node.getIdentifier(), "nodeFillColor_" + clusterName, color);
        nodeAttrs.setAttribute(node.getIdentifier(), "nodeSize_" + clusterName, size);
        nodeAttrs.setAttribute(node.getIdentifier(), "nodeType_" + clusterName, shape);
    }
}
