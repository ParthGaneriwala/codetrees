public int code(String insn, Vector arg, Environment env) throws IllegalArgumentException {
    String ins = insn.toLowerCase();
    if (!map.containsKey(ins))
        throw new IllegalArgumentException("Unrecognized instruction '" + ins + "'");
    int ic = map.get(ins);
    if (ins.equalsIgnoreCase("add") || ins.equalsIgnoreCase("addcy") || ins.equalsIgnoreCase("and") || ins.equalsIgnoreCase("or") || ins.equalsIgnoreCase("sub") || ins.equalsIgnoreCase("subcy") || ins.equalsIgnoreCase("xor") || ins.equalsIgnoreCase("input") || ins.equalsIgnoreCase("output") || ins.equalsIgnoreCase("load")) {
        if (arg == null || arg.size() != 2)
            throw new IllegalArgumentException();
        // find target/first operand register
        Integer a = env.resolve(arg.get(0), Symbol.Type.REGISTER);
        if (a == null)
            throw new IllegalArgumentException();
        // find second operand
        Object b = arg.get(1);
        if (b == null)
            throw new IllegalArgumentException();
        // implied integer value operand
        if (b instanceof Integer)
            return (ic << 12) | (a << posx) | ((Integer) b);
        else // search symbol
        {
            Symbol s = env.symbols.get((String) b);
            if (s == null) {
                Integer x = env.resolve((String) b);
                if (// implied hex
                x != null)
                    // implied hex
                    return (ic << 12) | (a << posx) | x;
                else
                    throw new IllegalArgumentException();
            } else {
                // symbol found
                if (s.type == Symbol.Type.REGISTER) {
                    if (ins.equalsIgnoreCase("input") || ins.equalsIgnoreCase("output"))
                        return ((ic | 1) << 12) | (a << posx) | (((Integer) s.value) << posy);
                    else
                        return (0xc << 12) | (a << posx) | (((Integer) s.value) << posy) | ic;
                } else
                    return (ic << 12) | (a << posx) | ((Integer) s.value);
            }
        }
    } else if (ins.equalsIgnoreCase("rl") || ins.equalsIgnoreCase("sl0") || ins.equalsIgnoreCase("sl1") || ins.equalsIgnoreCase("sla") || ins.equalsIgnoreCase("slx") || ins.equalsIgnoreCase("rr") || ins.equalsIgnoreCase("sr0") || ins.equalsIgnoreCase("sr1") || ins.equalsIgnoreCase("sra") || ins.equalsIgnoreCase("srx")) {
        if (arg == null || arg.size() != 1)
            throw new IllegalArgumentException("Bad shift/rotate arguments");
        // find target/first operand register
        Integer a = env.resolve(arg.get(0), Symbol.Type.REGISTER);
        if (a == null)
            throw new IllegalArgumentException();
        return ic | (a << posx);
    } else if (ins.equalsIgnoreCase("call") || ins.equalsIgnoreCase("jump")) {
        Object a = null, b = null;
        int l = (arg == null) ? 0 : arg.size();
        if (l > 2)
            throw new IllegalArgumentException();
        if (l > 0)
            a = arg.get(0);
        if (l > 1)
            b = arg.get(1);
        if (l == 1) {
            if (a instanceof Integer)
                return ic | ((Integer) a);
            else if (a instanceof String) {
                Symbol s = env.symbols.get(a);
                if (s == null || s.type == Symbol.Type.REGISTER)
                    throw new IllegalArgumentException();
                return ic | ((Integer) s.value);
            }
        } else if (l == 2) {
            // a is condition code
            if (!(a instanceof String))
                throw new IllegalArgumentException();
            if (b instanceof Integer)
                return ic | translateCondition((String) a) | ((Integer) b);
            else if (b instanceof String) {
                Symbol s = env.symbols.get((String) b);
                if (s == null) {
                    Integer x = env.resolve((String) b);
                    if (x != null)
                        return ic | translateCondition((String) a) | x;
                    else
                        throw new IllegalArgumentException();
                } else if (s.type == Symbol.Type.REGISTER)
                    throw new IllegalArgumentException();
                return ic | translateCondition((String) a) | ((Integer) s.value);
            }
        }
    } else if (ins.equalsIgnoreCase("return") || ins.equalsIgnoreCase("returni") || ins.equalsIgnoreCase("interrupt")) {
        Object a = null;
        int l = (arg == null) ? 0 : arg.size();
        if (l > 1)
            throw new IllegalArgumentException();
        if (l == 1)
            a = arg.get(0);
        if (l == 0) {
            if (ins.equalsIgnoreCase("return"))
                return ic;
        } else {
            if (!(a instanceof String))
                throw new IllegalArgumentException();
            if (ins.equalsIgnoreCase("return"))
                return ic | translateCondition((String) a);
            else
                return ic | translateAction((String) a);
        }
    } else if (ins.equalsIgnoreCase("enable") || ins.equalsIgnoreCase("disable")) {
        Object a = null;
        int l = (arg == null) ? 0 : arg.size();
        if (arg == null || arg.size() != 1)
            throw new IllegalArgumentException();
        a = arg.get(0);
        if (!(a instanceof String) || !((String) a).equalsIgnoreCase("interrupt"))
            throw new IllegalArgumentException();
        return ic | translateAction(ins);
    }
    throw new IllegalArgumentException();
}
