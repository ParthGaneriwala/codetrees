private void processBlock(Token token) throws BadSpecial, SqlToolError {
    Matcher m = plPattern.matcher(dereference(token.val, false));
    if (!m.matches()) {
        throw new BadSpecial(SqltoolRB.pl_malformat.getString());
    // I think it's impossible to get here, since the pattern is
    // so liberal.
    }
    if (m.groupCount() < 1 || m.group(1) == null) {
        plMode = true;
        stdprintln(SqltoolRB.pl_expansionmode.getString("on"));
        return;
    }
    String[] tokens = m.group(1).split("\\s+", -1);
    // If user runs any PL command, we turn PL mode on.
    plMode = true;
    if (tokens[0].equals("foreach")) {
        Matcher foreachM = foreachPattern.matcher(dereference(token.val, false));
        if (!foreachM.matches()) {
            throw new BadSpecial(SqltoolRB.foreach_malformat.getString());
        }
        if (foreachM.groupCount() != 2) {
            throw new RuntimeException("Internal assertion failed.  " + "foreach pattern matched, but captured " + foreachM.groupCount() + " groups");
        }
        String varName = foreachM.group(1);
        if (varName.indexOf(':') > -1) {
            throw new BadSpecial(SqltoolRB.plvar_nocolon.getString());
        }
        String[] values = foreachM.group(2).split("\\s+", -1);
        String origval = shared.userVars.get(varName);
        try {
            for (String val : values) {
                try {
                    shared.userVars.put(varName, val);
                    updateUserSettings();
                    boolean origRecursed = recursed;
                    recursed = true;
                    try {
                        scanpass(token.nestedBlock.dup());
                    } finally {
                        recursed = origRecursed;
                    }
                } catch (ContinueException ce) {
                    String ceMessage = ce.getMessage();
                    if (ceMessage != null && !ceMessage.equals("foreach")) {
                        throw ce;
                    }
                }
            }
        } catch (BreakException be) {
            String beMessage = be.getMessage();
            // Handle "foreach" and plain breaks (by doing nothing)
            if (beMessage != null && !beMessage.equals("foreach")) {
                throw be;
            }
        } catch (QuitNow qn) {
            throw qn;
        } catch (RuntimeException re) {
            // Unrecoverable
            throw re;
        } catch (Exception e) {
            throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);
        }
        if (origval == null) {
            shared.userVars.remove(varName);
            updateUserSettings();
        } else {
            shared.userVars.put(varName, origval);
        }
        return;
    }
    if (tokens[0].equals("if") || tokens[0].equals("while")) {
        Matcher ifwhileM = ifwhilePattern.matcher(dereference(token.val, false));
        if (!ifwhileM.matches()) {
            throw new BadSpecial(SqltoolRB.ifwhile_malformat.getString());
        }
        if (ifwhileM.groupCount() != 1) {
            throw new RuntimeException("Internal assertion failed.  " + "if/while pattern matched, but captured " + ifwhileM.groupCount() + " groups");
        }
        String[] values = ifwhileM.group(1).replaceAll("!([a-zA-Z0-9*])", "! $1").replaceAll("([a-zA-Z0-9*])!", "$1 !").split("\\s+", -1);
        if (tokens[0].equals("if")) {
            try {
                if (eval(values)) {
                    boolean origRecursed = recursed;
                    recursed = true;
                    try {
                        scanpass(token.nestedBlock.dup());
                    } finally {
                        recursed = origRecursed;
                    }
                }
            } catch (BreakException be) {
                String beMessage = be.getMessage();
                // Handle "if" and plain breaks (by doing nothing)
                if (beMessage == null || !beMessage.equals("if")) {
                    throw be;
                }
            } catch (ContinueException ce) {
                throw ce;
            } catch (QuitNow qn) {
                throw qn;
            } catch (BadSpecial bs) {
                bs.appendMessage(SqltoolRB.if_malformat.getString());
                throw bs;
            } catch (RuntimeException re) {
                // Unrecoverable
                throw re;
            } catch (Exception e) {
                throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);
            }
        } else if (tokens[0].equals("while")) {
            try {
                while (eval(values)) {
                    try {
                        boolean origRecursed = recursed;
                        recursed = true;
                        try {
                            scanpass(token.nestedBlock.dup());
                        } finally {
                            recursed = origRecursed;
                        }
                    } catch (ContinueException ce) {
                        String ceMessage = ce.getMessage();
                        if (ceMessage != null && !ceMessage.equals("while")) {
                            throw ce;
                        }
                    }
                }
            } catch (BreakException be) {
                String beMessage = be.getMessage();
                // Handle "while" and plain breaks (by doing nothing)
                if (beMessage != null && !beMessage.equals("while")) {
                    throw be;
                }
            } catch (QuitNow qn) {
                throw qn;
            } catch (BadSpecial bs) {
                bs.appendMessage(SqltoolRB.while_malformat.getString());
                throw bs;
            } catch (RuntimeException re) {
                // Unrecoverable
                throw re;
            } catch (Exception e) {
                throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);
            }
        } else {
            // Assertion
            throw new RuntimeException(SqltoolRB.pl_unknown.getString(tokens[0]));
        }
        return;
    }
    throw new BadSpecial(SqltoolRB.pl_unknown.getString(tokens[0]));
}
