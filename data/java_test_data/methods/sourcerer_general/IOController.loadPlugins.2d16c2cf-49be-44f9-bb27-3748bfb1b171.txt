public static void loadPlugins() {
    readers = new LinkedList<MoleculeReader>();
    writers = new LinkedList<MoleculeWriter>();
    File f = new File("plugins/");
    System.out.println("Plugin folder: " + f.getAbsolutePath());
    String[] files = f.list();
    System.out.println("Found " + files.length + " potential plugins");
    int count = 0;
    try {
        ClassLoader cl = new URLClassLoader(new URL[] { f.toURI().toURL() });
        for (String s : files) {
            String ext = s.substring(s.lastIndexOf("."));
            if (!ext.equals(".class")) {
                continue;
            }
            // Strip off ".class" from the end
            s = s.substring(0, s.lastIndexOf("."));
            Class<?> c = null;
            try {
                c = cl.loadClass(s);
                List<Class<?>> iList = Arrays.asList(c.getInterfaces());
                Object item = null;
                boolean plugin = false;
                if (iList.contains(MoleculeReader.class)) {
                    item = c.newInstance();
                    readers.add((MoleculeReader) item);
                    plugin = true;
                }
                if (iList.contains(MoleculeWriter.class)) {
                    if (item == null)
                        item = c.newInstance();
                    writers.add((MoleculeWriter) item);
                    plugin = true;
                }
                if (plugin)
                    count++;
            } catch (Exception e) {
                System.err.println("Error instantiating " + s);
                continue;
            }
        }
    } catch (NullPointerException e) {
        System.err.println("No plugin directory");
    } catch (Exception e) {
        System.err.println("Error while loading plugins");
    }
    System.out.println("Found " + count + " I/O plugins:");
    System.out.println("\t" + readers.size() + " readers");
    System.out.println("\t" + writers.size() + " writers");
}
