private void playGame(int numPlay, InetAddress serverAddress) {
    Process myserv = null;
    playing = true;
    // Makes this packet a new one with no real info
    packet = new Packet();
    packet.numPlay = numPlay;
    // Step 0: if numPlay is 1, make a local server.
    if (numPlay == 1) {
    /* try{
                myserv = Runtime.getRuntime().exec("java -jar server.jar "+PORT);
            }catch(Exception e){
                playing = false;
                waiting = true;
                JOptionPane.showMessageDialog(null,
                        "Failed to start single player game",
                        "ERROR!",
                        JOptionPane.PLAIN_MESSAGE);
                return;
            }*/
    }
    // Step 1: contact the server at serverAddress
    try {
        Thread.sleep(1000);
        socket = new Socket(serverAddress, PORT);
    } catch (Exception io) {
        playing = false;
        waiting = true;
        io.printStackTrace();
        failureMessage("Could not open connection to server.");
        return;
    }
    // Step 2: tell server number of players
    send_packet(0, 0, null, null, Types.ChangeSet.ID);
    get_packet();
    // Step 3: Start playing!
    addKeyListener(this);
    requestFocus();
    while (isVisible() && playing) {
        if (playing)
            // Update the board
            get_update();
        if (playing)
            // Paint the board
            paint_board();
        if (playing)
            // Check state
            state_check();
    }
    if (myserv != null)
        myserv.destroy();
    try {
        send_packet(0, 0, null, null, Types.ChangeSet.QUIT);
        socket.close();
    } catch (Exception e) {
    }
}
