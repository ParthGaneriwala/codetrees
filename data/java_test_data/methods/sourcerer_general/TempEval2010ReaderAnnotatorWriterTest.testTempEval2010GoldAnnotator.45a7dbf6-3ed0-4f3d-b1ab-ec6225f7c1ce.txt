@Test
public void testTempEval2010GoldAnnotator() throws Exception {
    CollectionReader reader = TempEval2010CollectionReader.getCollectionReader(this.outputDirectory.getPath());
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(TempEval2010GoldAnnotator.getDescription());
    reader.getNext(this.jCas.getCas());
    engine.process(this.jCas);
    String expectedText = "Italian chemical giant Montedison S.p.A . , through its Montedison Acquisition N.V. indirect unit , began its $37-a-share tender offer for all the common shares outstanding of Erbamont N.V. , a maker of pharmaceuticals incorporated in the Netherlands .\n" + "The offer , advertised in today 's editions of The Wall Street Journal , is scheduled to expire at the the end of November .\n" + "Montedison currently owns about 72% of Erbamont 's common shares outstanding .\n" + "The offer is being launched pursuant to a previously announced agreement between the companies .";
    Assert.assertEquals(expectedText, this.jCas.getDocumentText().trim());
    Collection<Sentence> sentences = JCasUtil.select(this.jCas, Sentence.class);
    Assert.assertEquals(4, sentences.size());
    Assert.assertEquals("Montedison currently owns about 72% of Erbamont 's common shares outstanding .", itemAtIndex(sentences, 2).getCoveredText());
    Collection<Token> tokens = JCasUtil.select(this.jCas, Token.class);
    Assert.assertEquals(91, tokens.size());
    Assert.assertEquals("Montedison", itemAtIndex(tokens, 3).getCoveredText());
    Collection<Event> events = JCasUtil.select(this.jCas, Event.class);
    Assert.assertEquals(11, events.size());
    Event e10 = itemAtIndex(events, 9);
    Assert.assertEquals("e10", e10.getId());
    Assert.assertEquals("announced", e10.getCoveredText());
    Assert.assertEquals("POS", e10.getPolarity());
    Assert.assertEquals("NONE", e10.getModality());
    Assert.assertEquals("ADJECTIVE", e10.getPos());
    Assert.assertEquals("NONE", e10.getTense());
    Assert.assertEquals("NONE", e10.getAspect());
    Assert.assertEquals("REPORTING", e10.getEventClass());
    Collection<Time> times = JCasUtil.select(this.jCas, Time.class);
    Assert.assertEquals(5, times.size());
    Time t18 = itemAtIndex(times, 2);
    Assert.assertEquals("t18", t18.getId());
    Assert.assertEquals("the end of November", t18.getCoveredText());
    Assert.assertEquals("1989-11", t18.getValue());
    // wrong, but that's what the data says
    Assert.assertEquals("TIME", t18.getTimeType());
    Collection<DocumentCreationTime> dcts = JCasUtil.select(this.jCas, DocumentCreationTime.class);
    Assert.assertEquals(1, dcts.size());
    Assert.assertEquals(itemAtIndex(times, 0), itemAtIndex(dcts, 0));
    Time dct = itemAtIndex(dcts, 0);
    Assert.assertEquals("t0", dct.getId());
    Assert.assertEquals("1989-11-02", dct.getValue());
    Assert.assertEquals("CREATION_TIME", dct.getFunctionInDocument());
    Collection<TemporalLink> tlinks = JCasUtil.select(this.jCas, TemporalLink.class);
    Assert.assertEquals(15, tlinks.size());
    this.jCas.reset();
    reader.getNext(this.jCas.getCas());
    engine.process(this.jCas);
    engine.collectionProcessComplete();
    sentences = JCasUtil.select(this.jCas, Sentence.class);
    Assert.assertEquals(2, sentences.size());
    tokens = JCasUtil.select(this.jCas, Token.class);
    Assert.assertEquals(2, tokens.size());
}
