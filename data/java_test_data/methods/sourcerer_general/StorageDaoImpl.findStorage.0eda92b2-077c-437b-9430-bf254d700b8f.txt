public List<Storage> findStorage(Storage storage, Date from, Date to) throws DataAccessException {
    StringBuffer hql = new StringBuffer();
    ArrayList<Object> params = new ArrayList<Object>();
    hql.append("from Storage s where 1=1");
    if (storage != null) {
        if (storage.getAmount() != null) {
            params.add(storage.getAmount());
            hql.append(" and s.amount = ?");
        }
        if (storage.getDate() != null) {
            params.add(storage.getDate());
            hql.append(" and s.date = ?");
        }
        if (storage.getEmployee() != null && storage.getEmployee().getId() != null) {
            params.add(storage.getEmployee().getId());
            hql.append(" and s.employee.id = ?");
        }
        if (StringUtils.isNotBlank(storage.getEnterNo())) {
            params.add(storage.getEnterNo());
            hql.append(" and s.enterNo = ?");
        }
        if (StringUtils.isNotBlank(storage.getOuterNo())) {
            params.add(storage.getOuterNo());
            hql.append(" and s.outNo = ?");
        }
        if (storage.getProduct() != null && storage.getProduct().getId() != null) {
            params.add(storage.getProduct().getId());
            hql.append(" and s.product.id = ?");
        }
    }
    if (from != null) {
        params.add(from);
        hql.append(" and s.date >= ?");
    }
    if (to != null) {
        params.add(to);
        hql.append(" and s.date <= ?");
    }
    if (params.size() > 0) {
        Object[] os = params.toArray();
        return getHibernateTemplate().find(hql.toString(), os);
    }
    return getHibernateTemplate().find(hql.toString());
}
