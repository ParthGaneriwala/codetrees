private SyncBaseItem createSyncBuilderItem() throws Exception {
    configureMinimalGame();
    // Mock
    ItemService itemServiceMock = EasyMock.createNiceMock(ItemService.class);
    EasyMock.expect(itemServiceMock.hasItemsInRectangle(EasyMock.<Rectangle>anyObject())).andReturn(false).anyTimes();
    EasyMock.expect(itemServiceMock.baseObjectExists(EasyMock.<SyncItem>anyObject())).andReturn(true).anyTimes();
    EasyMock.expect(itemServiceMock.createSyncObject(EasyMock.<ItemType>anyObject(), EasyMock.<Index>anyObject(), EasyMock.<SyncBaseItem>anyObject(), EasyMock.<SimpleBase>anyObject(), EasyMock.anyInt())).andAnswer(new IAnswer<SyncItem>() {

        @Override
        public SyncItem answer() throws Throwable {
            Id id2 = new Id(2, 1, 1);
            return createSyncBaseItem(TEST_SIMPLE_BUILDING_ID, new Index(5000, 5350), id2, servicesMock);
        }
    }).once();
    EasyMock.replay(itemServiceMock);
    CollisionService collisionServiceMock = EasyMock.createNiceMock(CollisionService.class);
    EasyMock.expect(collisionServiceMock.getDestinationHint(EasyMock.<SyncBaseItem>anyObject(), EasyMock.anyInt(), EasyMock.<ItemType>anyObject(), EasyMock.<Index>anyObject())).andReturn(new Index(5000, 5200)).anyTimes();
    EasyMock.replay(collisionServiceMock);
    AbstractTerrainService terrainServiceMock = EasyMock.createNiceMock(AbstractTerrainService.class);
    List<Index> path = new ArrayList<Index>();
    path.add(new Index(5000, 5000));
    path.add(new Index(5000, 5200));
    EasyMock.expect(terrainServiceMock.setupPathToDestination(EasyMock.<Index>anyObject(), EasyMock.<Index>anyObject(), EasyMock.<TerrainType>anyObject())).andReturn(path).anyTimes();
    EasyMock.replay(terrainServiceMock);
    ConnectionService connectionServiceMock = EasyMock.createNiceMock(ConnectionService.class);
    EasyMock.replay(connectionServiceMock);
    AbstractBaseService abstractBaseServiceMock = EasyMock.createNiceMock(AbstractBaseService.class);
    EasyMock.replay(abstractBaseServiceMock);
    servicesMock = EasyMock.createNiceMock(Services.class);
    EasyMock.expect(servicesMock.getItemService()).andReturn(itemServiceMock).anyTimes();
    EasyMock.expect(servicesMock.getCollisionService()).andReturn(collisionServiceMock).anyTimes();
    EasyMock.expect(servicesMock.getTerrainService()).andReturn(terrainServiceMock).anyTimes();
    EasyMock.expect(servicesMock.getConnectionService()).andReturn(connectionServiceMock).anyTimes();
    EasyMock.expect(servicesMock.getBaseService()).andReturn(abstractBaseServiceMock).anyTimes();
    EasyMock.replay(servicesMock);
    Id id = new Id(1, 1, 1);
    SyncBaseItem syncBaseItem = createSyncBaseItem(TEST_START_BUILDER_ITEM_ID, new Index(5000, 5000), id, servicesMock);
    SyncMovable syncMovable = syncBaseItem.getSyncMovable();
    // Set speed to 100
    syncMovable.getMovableType().changeTo(new MovableType(100, syncMovable.getMovableType().getTerrainType()));
    Assert.assertFalse(syncMovable.tick(1.0));
    // Set buildup
    SyncBuilder syncBuilder = syncBaseItem.getSyncBuilder();
    syncBuilder.getBuilderType().changeTo(new BuilderType(10, 2, syncBuilder.getBuilderType().getAbleToBuild()));
    return syncBaseItem;
}
