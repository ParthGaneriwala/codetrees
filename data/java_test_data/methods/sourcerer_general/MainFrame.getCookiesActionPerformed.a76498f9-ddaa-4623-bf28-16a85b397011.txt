// GEN-LAST:event_jTable1MouseClicked
private void getCookiesActionPerformed(java.awt.event.ActionEvent evt) {
    // GEN-FIRST:event_getCookiesActionPerformed
    String host = jTextField1.getText();
    jLabel7.setText("");
    characteristics = true;
    try {
        ReadParosData rpd = new ReadParosData(file, host);
        String[] cookies = rpd.getCookies();
        String allCookies = "";
        Arrays.sort(cookies);
        for (int j = 0; j < cookies.length; j++) {
            for (int i = j + 1; i < cookies.length; i++) {
                if (new Integer(cookies[i].length()).compareTo(cookies[j].length()) > 0) {
                    String t = cookies[j];
                    cookies[j] = cookies[i];
                    cookies[i] = t;
                }
            }
        }
        // Sets same cookie values to null
        int count = 0;
        for (int i = 0; i < cookies.length; i++) {
            if (allCookies.contains(cookies[i])) {
                cookies[i] = null;
            } else {
                allCookies += cookies[i];
                count++;
            }
        }
        jLabel6.setText("Session Management: Unknown or not used");
        cookieTableNeedRecreate = true;
        cookieTableRows = count;
        for (int i = 0; i < cookies.length; i++) {
            if (cookies[i] != null) {
                CookieParser cp = new CookieParser(cookies[i]);
                List<KeyValuePair> cookieList = cp.parseCookie();
                List<KeyValuePair> params = new LinkedList<KeyValuePair>();
                this.receiveCookie(params, cookieList);
            }
        }
    } catch (IOException ioe) {
        System.out.println("Error reading file!");
    } catch (NullPointerException npe) {
        System.out.println("No File Selected!");
        JOptionPane.showMessageDialog(this, "No File Selected!", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        System.out.println("We've got some problems.....");
        e.printStackTrace();
    }
}
