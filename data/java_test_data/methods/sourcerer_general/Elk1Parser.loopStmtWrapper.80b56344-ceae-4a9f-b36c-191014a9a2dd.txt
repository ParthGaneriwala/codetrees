private ParseNode loopStmtWrapper() {
    LoopNode loopParent;
    LoopSymbolNode loopLeftChild;
    ProgramNode loopProg1;
    ProgramNode loopProg2;
    LoopSymbolNode looprightChild;
    Boolean isEndOfLoop = new Boolean(false);
    loopParent = new LoopNode(NonterminalGrammarSymbol.LOOP);
    loopLeftChild = new LoopSymbolNode(nowReadingsymbol);
    loopProg1 = new ProgramNode(PROGRAM);
    loopProg2 = new ProgramNode(PROGRAM);
    loopProg1.appendChild(loopProg2);
    loopEnds.push(isEndOfLoop);
    // to make the nowReadingsymbol the first token in the block
    readToken();
    if (nowReadingsymbol.isLoopSymbol(LoopSymbol.LOOPEND)) {
        // deal with empty loop {{ }}
        looprightChild = new LoopSymbolNode(nowReadingsymbol);
        loopParent.appendChild(loopLeftChild);
        loopParent.appendChild(loopProg1);
        loopParent.appendChild(looprightChild);
        isEndOfFile();
        // remove this block end
        loopEnds.pop();
        if (!isAccepted) {
            // ���粻��EOF��ô���п�����}�Ǿ���ֱ������һ��block�Ľ���
            // ����ע��˳��Ҫ��pop���Լ����Ǹ�end֮�����жϲ�Ȼ�Ļ�stack�ö����п�����true
            isEndOfCurrentBlock();
            isEndOfCurrentLoop();
        }
        // ��print assign block���ߵĵ�λ������� ҲӦ�����������block�Ľ����ж�
        return loopParent;
    } else {
        while (!loopEnds.peek()) {
            if (nowReadingsymbol.isKeyword(Keyword.ROUTINE)) {
                error("routine declaration can not be in a block it can only be Global!");
                // ????????????
                break;
            }
            ParseNode eachSingleProg = loopStmt();
            loopProg2.appendChild(eachSingleProg);
        }
        looprightChild = new LoopSymbolNode(new TokenGrammarSymbol(lastEaten));
        loopParent.appendChild(loopLeftChild);
        loopParent.appendChild(loopProg1);
        loopParent.appendChild(looprightChild);
        if (nowReading instanceof NullToken) {
            accept();
        }
        // �ر��ж�
        // remove this block end
        loopEnds.pop();
        if (!isAccepted) {
            // ���粻��EOF��ô���п�����}�Ǿ���ֱ������һ��block�Ľ���
            // ����ע��˳��Ҫ��pop���Լ����Ǹ�end֮�����жϲ�Ȼ�Ļ�stack�ö����п�����true
            isEndOfCurrentBlock();
            isEndOfCurrentLoop();
        }
        // ��print assign block���ߵĵ�λ������� ҲӦ�����������block�Ľ����ж�
        return loopParent;
    }
}
