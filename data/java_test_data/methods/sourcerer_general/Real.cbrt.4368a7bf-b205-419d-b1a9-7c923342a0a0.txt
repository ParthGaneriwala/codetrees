public void cbrt() {
    if (!(this.exponent >= 0 && this.mantissa != 0))
        return;
    byte s = sign;
    sign = 0;
    // Calculates recipocal cube root of normalized Real,
    // not zero, nan or infinity
    final long start = 0x5120000000000000L;
    // Save -A
    {
        recipTmp.mantissa = this.mantissa;
        recipTmp.exponent = this.exponent;
        recipTmp.sign = this.sign;
    }
    ;
    recipTmp.neg();
    // First establish approximate result
    mantissa = start - (mantissa >>> 2);
    int expRmd = exponent == 0 ? 2 : (exponent - 1) % 3;
    exponent = 0x40000000 - (exponent - 0x40000000 - expRmd) / 3;
    normalize();
    if (expRmd > 0) {
        // cbrt(1/2)
        {
            recipTmp2.sign = (byte) 0;
            recipTmp2.exponent = 0x3fffffff;
            recipTmp2.mantissa = 0x6597fa94f5b8f20bL;
        }
        // cbrt(1/2)
        ;
        mul(recipTmp2);
        if (expRmd > 1)
            mul(recipTmp2);
    }
    // Xn+1 = (4*Xn - A*Xn**4)/3
    for (int i = 0; i < 4; i++) {
        {
            recipTmp2.mantissa = this.mantissa;
            recipTmp2.exponent = this.exponent;
            recipTmp2.sign = this.sign;
        }
        ;
        sqr();
        sqr();
        mul(recipTmp);
        recipTmp2.scalbn(2);
        add(recipTmp2);
        mul(THIRD);
    }
    recip();
    if (!(this.exponent < 0 && this.mantissa != 0))
        sign = s;
}
