@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) {
    String artifact = decodeArtifact(parameters.get(POST_EVALUATION_ARTIFACT));
    Result result = new Result(artifact);
    try {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(artifact));
        Document document = db.parse(is);
        Element element = document.getDocumentElement();
        NodeList nodeList = element.getElementsByTagName("reminder");
        if (nodeList != null && nodeList.getLength() > MAXIMUM_REMINDER_DISPLAYED) {
            Random random = new Random();
            while (nodeList.getLength() > MAXIMUM_REMINDER_DISPLAYED) {
                Integer randomizedValue = random.nextInt(MAXIMUM_RANDOM_VALUE);
                Integer moduloValue = randomizedValue % nodeList.getLength();
                // get the element
                Element nodeElement = (Element) nodeList.item(moduloValue);
                // get the parent node and then remove the above node
                Node parentNode = nodeElement.getParentNode();
                parentNode.removeChild(nodeElement);
            }
        }
        OutputFormat format = new OutputFormat();
        format.setIndenting(true);
        format.setLineWidth(150);
        Writer writer = new StringWriter();
        XMLSerializer xmlSerializer = new XMLSerializer(writer, format);
        xmlSerializer.serialize(document);
        result = new Result(writer.toString());
    } catch (Exception e) {
        log.error("Failed parsing xml string ...", e);
    }
    return result;
}
