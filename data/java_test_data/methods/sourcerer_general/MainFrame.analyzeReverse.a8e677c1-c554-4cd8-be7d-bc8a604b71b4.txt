public void analyzeReverse() {
    this.htmlLabel.removeAll();
    Date now = new Date(System.currentTimeMillis());
    SimpleDateFormat format = new SimpleDateFormat("EEE, d MMM HH:mm:ss z");
    FieldPosition pos = new FieldPosition(0);
    StringBuffer empty = new StringBuffer();
    StringBuffer s = format.format(now, empty, pos);
    String stamp = "Analysis (x,y) -&gt; (lon,lat) run at: " + s.toString() + "<p>\n";
    stamp += "Net(s): " + getRefnets() + "<p>\n";
    double sumErr = 0;
    double sumErr2 = 0;
    for (Triangle triangle : tris) {
        double minErr = Double.MAX_VALUE;
        double distErr = -1;
        String[] perErr = new String[3];
        Pt[] array = new Pt[3];
        String[] labels = triangle.getArray();
        array[0] = labelPtMap.get(labels[0]);
        array[1] = labelPtMap.get(labels[1]);
        array[2] = labelPtMap.get(labels[2]);
        for (Iterator i = new Permute(array); i.hasNext(); ) {
            Pt[] a = (Pt[]) i.next();
            // Estimate target (x,y) position of [2] using [0] and [1]
            Pt result = GeodeticHelper.projectReverse(a[0], a[1], a[2]);
            double lona = a[2].getLon();
            double lata = a[2].getLat();
            double lone = result.getLon();
            double late = result.getLat();
            double errLon = (lona - lone) * (a[0].getX() - a[1].getX()) / (a[0].getLon() - a[1].getLon());
            double errLat = (lata - late) * (a[0].getY() - a[1].getY()) / (a[0].getLat() - a[1].getLat());
            // Compute error between actual and estimate
            // double err = Math.sqrt((lona - lone) * (lona - lone) + (lata - late) * (lata - late));
            double err = Math.sqrt(errLon * errLon + errLat * errLat);
            // Compute distance to target
            double dist = GeodeticHelper.getDistance(a[0], a[2]);
            // Update the minmum error stats
            if (err < minErr) {
                minErr = err;
                distErr = dist;
                perErr[0] = a[0].getLabel();
                perErr[1] = a[1].getLabel();
                perErr[2] = a[2].getLabel();
            }
        }
        triangle.setMinErr(minErr);
        triangle.setDist(distErr);
        triangle.setPermutation(perErr);
        sumErr += minErr;
        sumErr2 += minErr * minErr;
    }
    Collections.sort(tris, new TriComparator());
    String table = "<table>\n";
    table += "<th>tri</th><th>1</th><th>2</th><th>3</th><th>Dist</th><th>Min err</th>\n";
    int n = 0;
    for (Triangle triangle : tris) {
        String[] per = triangle.getPermutation();
        table += "<tr><td>" + triangle.getNum() + "</td>";
        table += "<td>" + per[0] + "</td><td>" + per[1] + "</td><td>" + per[2] + "</td>";
        table += "<td>" + Math.round(triangle.getDist()) + "</td><td>" + Math.round(triangle.getMinErr()) + "</td></tr>\n";
        n++;
    }
    table += "</table>\n";
    double sigma = Math.sqrt(sumErr2 / n - sumErr * sumErr / (n * n));
    String descr = "Mean err: " + Math.round(sumErr / n) + " &#177; " + Math.round(sigma) + "<br>";
    descr += "50%-tile err: " + Math.round(tris.get(n / 2).getMinErr()) + "<br>";
    descr += "75%-tile err: " + Math.round(tris.get(n / 4).getMinErr()) + "<br>";
    descr += "90%-tile err: " + Math.round(tris.get(n / 10).getMinErr()) + "<br>";
    descr += "95%-tile err: " + Math.round(tris.get(n / 20).getMinErr()) + "<br>";
    this.htmlLabel.setText("<html>" + stamp + descr + table + "</html>");
    this.exportDiagsMentuItem.setEnabled(true);
    this.exportProjMenuItem.setEnabled(true);
}
