@Override
public Collection<PubSubNode> getChildNodes(String parent) throws Exception {
    Connection connection = null;
    try {
        connection = connectionPool.getConnection();
        PreparedStatement preStat = null;
        if (parent == null) {
            preStat = connection.prepareStatement(GETROOTPUBSUBNODES_SQL);
        } else {
            preStat = connection.prepareStatement(GETPUBSUBNODES_SQL);
            preStat.setString(1, parent);
        }
        ResultSet nodeResultSet = preStat.executeQuery();
        if (loggerServiceTracker.isDebugEnabled()) {
            loggerServiceTracker.debug("SQL:" + preStat.toString());
            loggerServiceTracker.debug("Result:" + nodeResultSet.toString());
        }
        List<PubSubNode> nodeList = new ArrayList<PubSubNode>();
        while (nodeResultSet.next()) {
            PubSubNode node = new PubSubNode();
            node.setServiceId(nodeResultSet.getString("serviceId"));
            node.setNodeId(nodeResultSet.getString("nodeId"));
            node.setParent(parent);
            node.setName(nodeResultSet.getString("name"));
            node.setLeaf(nodeResultSet.getBoolean("leaf"));
            Time modificationDate = nodeResultSet.getTime("modificationDate");
            if (modificationDate != null) {
                node.setModificationDate(modificationDate.getTime());
            }
            Time creationDate = nodeResultSet.getTime("creationDate");
            if (creationDate != null) {
                node.setCreationDate(creationDate.getTime());
            }
            node.setCreator(nodeResultSet.getString("creator"));
            node.setDescription(nodeResultSet.getString("description"));
            nodeList.add(node);
        }
        return nodeList;
    } finally {
        if (connection != null) {
            connectionPool.returnConnection(connection);
        }
    }
}
