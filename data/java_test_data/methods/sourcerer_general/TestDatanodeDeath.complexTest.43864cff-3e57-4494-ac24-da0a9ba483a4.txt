private void complexTest() throws IOException {
    Configuration conf = new Configuration();
    conf.setInt("heartbeat.recheck.interval", 2000);
    conf.setInt("dfs.heartbeat.interval", 2);
    conf.setInt("dfs.replication.pending.timeout.sec", 2);
    conf.setInt("dfs.socket.timeout", 5000);
    MiniDFSCluster cluster = new MiniDFSCluster(conf, numDatanodes, true, null);
    cluster.waitActive();
    FileSystem fs = cluster.getFileSystem();
    Modify modThread = null;
    try {
        // Create threads and make them run workload concurrently.
        workload = new Workload[numThreads];
        for (int i = 0; i < numThreads; i++) {
            workload[i] = new Workload(AppendTestUtil.nextLong(), fs, i, numberOfFiles, replication, 0);
            workload[i].start();
        }
        // Create a thread that kills existing datanodes and creates new ones.
        modThread = new Modify(conf, cluster);
        modThread.start();
        // wait for all transactions to get over
        for (int i = 0; i < numThreads; i++) {
            try {
                System.out.println("Waiting for thread " + i + " to complete...");
                workload[i].join();
                // if most of the threads are done, then stop restarting datanodes.
                if (i >= numThreads / 2) {
                    modThread.close();
                }
            } catch (InterruptedException e) {
                // retry
                i--;
            }
        }
    } finally {
        if (modThread != null) {
            modThread.close();
            try {
                modThread.join();
            } catch (InterruptedException e) {
            }
        }
        fs.close();
        cluster.shutdown();
    }
}
