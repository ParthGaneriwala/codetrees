public void recalculeImage() {
    this.rectanglesInclus = new ArrayList<Rectangle>();
    this.ValeursIncluses = new ArrayList<Integer>();
    if (this.getImageOriginale() != null) {
        BufferedImage buLuminance = Utilitaire.toBufferedImage(this.panneauCentre.getPanneauLuminance().getImage());
        this.image = buLuminance;
        BufferedImage bufferFINALLUMINANCE = new BufferedImage(buLuminance.getWidth(), buLuminance.getHeight(), BufferedImage.TYPE_INT_RGB);
        for (int i = 0; i < buLuminance.getWidth(); i++) {
            for (int j = 0; j < buLuminance.getHeight(); j++) {
                bufferFINALLUMINANCE.setRGB(i, j, buLuminance.getRGB(i, j));
            }
        }
        // ne marche pas,
        // garde une reference,
        // et modifie l image originale
        // BufferedImage bufferFINALLUMINANCE = Utilitaire.toBufferedImage(this.panneauCentre.getPanneauLuminance().getImage()) ;
        int nombreDePointsAleatoires = this.panneauCentre.getFenetre().getNombreDePointsAleatoires();
        int tailleCote = this.panneauCentre.getFenetre().getTailleMinimaleZone();
        int pourcentagePerte = this.panneauCentre.getFenetre().getPourcentagePerteLuminance();
        // les cases parcourues
        lesParcourus = new boolean[buLuminance.getWidth()][buLuminance.getHeight()];
        for (int i = 0; i < lesParcourus.length; i++) {
            for (int j = 0; j < lesParcourus[0].length; j++) {
                lesParcourus[i][j] = false;
            }
        }
        for (int i = 0; i < nombreDePointsAleatoires; i++) {
            int rand_x = (int) (0 + Math.random() * buLuminance.getWidth());
            int rand_y = (int) (0 + Math.random() * buLuminance.getHeight());
            // le tableau est de deux entier
            int[] coin = Utilitaire.indicesHautGaucheDeZone(rand_x, rand_y, tailleCote);
            // donc on part de ce coin
            Rectangle plusGrandRectangleInclus = Utilitaire.trouverLePlusGrandRectangle(coin, tailleCote, pourcentagePerte, buLuminance, lesParcourus);
            if (plusGrandRectangleInclus != null) {
                this.rectanglesInclus.add(plusGrandRectangleInclus);
                int valeur = (buLuminance.getRGB(rand_x, rand_y) >> 16) & 0xFF;
                this.ValeursIncluses.add(new Integer(valeur));
                // on ecrit dans le buffer a afficher
                for (int j = (int) plusGrandRectangleInclus.getX(); j < plusGrandRectangleInclus.getX() + plusGrandRectangleInclus.getWidth(); j++) {
                    for (int k = (int) plusGrandRectangleInclus.getY(); k < plusGrandRectangleInclus.getY() + plusGrandRectangleInclus.getHeight(); k++) {
                        bufferFINALLUMINANCE.setRGB(j, k, buLuminance.getRGB(coin[0], coin[1]));
                    }
                }
            }
        }
        this.image = bufferFINALLUMINANCE;
    }
}
