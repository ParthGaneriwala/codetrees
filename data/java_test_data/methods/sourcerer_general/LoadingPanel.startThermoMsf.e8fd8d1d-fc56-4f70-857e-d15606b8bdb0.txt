public void startThermoMsf(int aIndex) {
    final int iIndex = aIndex;
    // create a new swing worker
    final Flamable lFlamable = iParent;
    QuantitativeValidationSingelton iQuantitativeValidationSingelton = QuantitativeValidationSingelton.getInstance();
    iQuantitativeValidationSingelton.setUseOnlyValidRatioForProteinMean(true);
    // 1.check the msf files
    Vector<File> lFiles = iParent.getFiles(iIndex);
    Vector<MsfReader> lMsfFiles = new Vector<MsfReader>();
    // update progress bar
    progressBar.setMaximum(lFiles.size() + 1);
    progressBar.setValue(0);
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    // set checking files
    lblCheckFiles.setEnabled(true);
    setIconOnPanel(jpanCheck, "clock.png", 3, 1);
    // 1.check the msf files
    for (int i = 0; i < lFiles.size(); i++) {
        try {
            lMsfFiles.add(new MsfReader(lFiles.get(i).getAbsolutePath(), iParent.getMsfPeptideConfidence(), iParent.isMsfOnlyHighestScoring(), !iParent.isMsfOnlyHighestScoring()));
        } catch (ClassNotFoundException e) {
            logger.error(e.getMessage(), e);
        } catch (SQLException e) {
            logger.error(e.getMessage(), e);
        } catch (IOException e) {
            logger.error(e.getMessage(), e);
        }
        // update progress bar
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString("Parsed " + lFiles.get(i).getName() + ".");
    }
    // update progress bar
    progressBar.setIndeterminate(true);
    // Show in the gui that we found all the rov files
    setIconOnPanel(jpanCheck, "apply.png", 3, 1);
    // set id loading
    lblId.setEnabled(true);
    setIconOnPanel(jpanId, "clock.png", 3, 2);
    // set quant loading
    lblQuant.setEnabled(true);
    setIconOnPanel(jpanQuant, "clock.png", 3, 3);
    // 3.match ids to quantitations
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    progressBar.setMaximum(lMsfFiles.size() + 1);
    progressBar.setValue(0);
    // set id done
    setIconOnPanel(jpanId, "apply.png", 3, 2);
    // set quant done
    setIconOnPanel(jpanQuant, "apply.png", 3, 3);
    // set match loading
    lblMatch.setEnabled(true);
    setIconOnPanel(jpanMatch, "clock.png", 3, 4);
    Vector<RatioGroupCollection> lRatioGroupCollection = new Vector<RatioGroupCollection>();
    for (int i = 0; i < lMsfFiles.size(); i++) {
        // update progress bar
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString("Creating ratio information for " + (i + 1) + " of " + lMsfFiles.size() + " msf files");
        RatioGroupCollection lTemp = lMsfFiles.get(i).getRatioGroupCollection();
        if (lTemp != null) {
            lRatioGroupCollection.add(lTemp);
            iCollection.add(lTemp);
            iCollectionIndexes.add(iIndex);
        }
        // _____Do garbage collection______
        System.gc();
    }
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(false);
    progressBar.setIndeterminate(true);
    // set match done
    setIconOnPanel(jpanMatch, "apply.png", 3, 4);
    // 6. get all the protein accessions from the identifications
    for (int i = 0; i < lRatioGroupCollection.size(); i++) {
        // if (i == 0) {
        // iQuantitativeValidationSingelton.setRatioTypes(lRatioGroupCollection.get(i).getRatioTypes());
        // iQuantitativeValidationSingelton.setComponentTypes(lRatioGroupCollection.get(i).getComponentTypes());
        // }
        lRatioGroupCollection.get(i).setRoverSource(iParent.getRoverSource(iIndex));
        for (int j = 0; j < lRatioGroupCollection.get(i).size(); j++) {
            RatioGroup lRatioGroup = lRatioGroupCollection.get(i).get(j);
            String[] lAccessionsForRatioGroup = lRatioGroup.getProteinAccessions();
            for (int k = 0; k < lAccessionsForRatioGroup.length; k++) {
                // check if it's a new accession
                boolean lNewAccession = true;
                if (lAccessionsForRatioGroup[k] == null) {
                    System.out.println("dd");
                }
                for (int l = 0; l < iProteinAccession.size(); l++) {
                    if (iProteinAccession.get(l).equalsIgnoreCase(lAccessionsForRatioGroup[k])) {
                        lNewAccession = false;
                    }
                }
                if (lNewAccession) {
                    iProteinAccession.add(lAccessionsForRatioGroup[k]);
                }
            }
        }
    }
    if (lRatioGroupCollection.size() == 0) {
        // show gui
        JOptionPane.showMessageDialog(iParent, "No quantitative data could be found!\n The program will close.", "INFO", JOptionPane.INFORMATION_MESSAGE);
        iParent.close();
    }
    // 7.A get the types of the ratios from the first distiller ratio collecion
    Vector<String> lRatioList = lRatioGroupCollection.get(0).getRatioTypes();
    String[] lRatioTypes = new String[lRatioList.size()];
    lRatioList.toArray(lRatioTypes);
    iCollectionRatios.add(lRatioTypes);
    // 7.B get the types of the ratios from the first distiller ratio collecion
    Vector<String> lComponentList = lRatioGroupCollection.get(0).getComponentTypes();
    String[] lComponentTypes = new String[lComponentList.size()];
    lComponentList.toArray(lComponentTypes);
    iCollectionComponents.add(lComponentTypes);
    // update progress bar
    progressBar.setIndeterminate(false);
    // _____Do garbage collection______
    System.gc();
}
