private void initParticle(Particle particle) {
    CCPoint v = CCPoint.zero();
    // position
    particle.pos.x = (int) (source.x + posVar.x * CCRANDOM_MINUS1_1());
    particle.pos.y = (int) (source.y + posVar.y * CCRANDOM_MINUS1_1());
    // direction
    float a = CC_DEGREES_TO_RADIANS(angle + angleVar * CCRANDOM_MINUS1_1());
    v.y = (float) Math.sin(a);
    v.x = (float) Math.cos(a);
    float s = speed + speedVar * CCRANDOM_MINUS1_1();
    particle.dir = CCPoint.ccpMult(v, s);
    // radial accel
    particle.radialAccel = radialAccel + radialAccelVar * CCRANDOM_MINUS1_1();
    // tangential accel
    particle.tangentialAccel = tangentialAccel + tangentialAccelVar * CCRANDOM_MINUS1_1();
    // life
    particle.life = life + lifeVar * CCRANDOM_MINUS1_1();
    // Color
    CCColorF start = new CCColorF();
    start.r = startColor.r + startColorVar.r * CCRANDOM_MINUS1_1();
    start.g = startColor.g + startColorVar.g * CCRANDOM_MINUS1_1();
    start.b = startColor.b + startColorVar.b * CCRANDOM_MINUS1_1();
    start.a = startColor.a + startColorVar.a * CCRANDOM_MINUS1_1();
    CCColorF end = new CCColorF();
    end.r = endColor.r + endColorVar.r * CCRANDOM_MINUS1_1();
    end.g = endColor.g + endColorVar.g * CCRANDOM_MINUS1_1();
    end.b = endColor.b + endColorVar.b * CCRANDOM_MINUS1_1();
    end.a = endColor.a + endColorVar.a * CCRANDOM_MINUS1_1();
    particle.color = start;
    particle.deltaColor.r = (end.r - start.r) / particle.life;
    particle.deltaColor.g = (end.g - start.g) / particle.life;
    particle.deltaColor.b = (end.b - start.b) / particle.life;
    particle.deltaColor.a = (end.a - start.a) / particle.life;
    // size
    particle.size = size + sizeVar * CCRANDOM_MINUS1_1();
    // position
    if (positionType_ == kPositionTypeFree) {
        particle.startPos = convertToWorldSpace(0, 0);
    } else {
        particle.startPos = CCPoint.make(getPositionX(), getPositionY());
    }
}
