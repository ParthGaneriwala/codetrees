protected short getNativeShort(int columnIndex, boolean overflowCheck) throws SQLException {
    checkRowPos();
    checkColumnBounds(columnIndex);
    // / JDBC is 1-based
    columnIndex--;
    if (this.thisRow.isNull(columnIndex)) {
        this.wasNullFlag = true;
        return 0;
    }
    this.wasNullFlag = false;
    Field f = this.fields[columnIndex];
    switch(f.getMysqlType()) {
        case MysqlDefs.FIELD_TYPE_TINY:
            byte tinyintVal = getNativeByte(columnIndex + 1, false);
            if (!f.isUnsigned() || tinyintVal >= 0) {
                return tinyintVal;
            }
            return (short) (tinyintVal + (short) 256);
        case MysqlDefs.FIELD_TYPE_SHORT:
        case MysqlDefs.FIELD_TYPE_YEAR:
            short asShort = this.thisRow.getNativeShort(columnIndex);
            if (!f.isUnsigned()) {
                return asShort;
            }
            int valueAsInt = asShort & 0xffff;
            if (overflowCheck && this.jdbcCompliantTruncationForReads && valueAsInt > Short.MAX_VALUE) {
                throwRangeException(String.valueOf(valueAsInt), columnIndex + 1, Types.SMALLINT);
            }
            return (short) valueAsInt;
        case MysqlDefs.FIELD_TYPE_INT24:
        case MysqlDefs.FIELD_TYPE_LONG:
            if (!f.isUnsigned()) {
                valueAsInt = getNativeInt(columnIndex + 1, false);
                if (overflowCheck && this.jdbcCompliantTruncationForReads && valueAsInt > Short.MAX_VALUE || valueAsInt < Short.MIN_VALUE) {
                    throwRangeException(String.valueOf(valueAsInt), columnIndex + 1, Types.SMALLINT);
                }
                return (short) valueAsInt;
            }
            long valueAsLong = getNativeLong(columnIndex + 1, false, true);
            if (overflowCheck && this.jdbcCompliantTruncationForReads && valueAsLong > Short.MAX_VALUE) {
                throwRangeException(String.valueOf(valueAsLong), columnIndex + 1, Types.SMALLINT);
            }
            return (short) valueAsLong;
        case MysqlDefs.FIELD_TYPE_LONGLONG:
            valueAsLong = getNativeLong(columnIndex + 1, false, false);
            if (!f.isUnsigned()) {
                if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                    if (valueAsLong < Short.MIN_VALUE || valueAsLong > Short.MAX_VALUE) {
                        throwRangeException(String.valueOf(valueAsLong), columnIndex + 1, Types.SMALLINT);
                    }
                }
                return (short) valueAsLong;
            }
            BigInteger asBigInt = convertLongToUlong(valueAsLong);
            if (overflowCheck && this.jdbcCompliantTruncationForReads && ((asBigInt.compareTo(new BigInteger(String.valueOf(Short.MAX_VALUE))) > 0) || (asBigInt.compareTo(new BigInteger(String.valueOf(Short.MIN_VALUE))) < 0))) {
                throwRangeException(asBigInt.toString(), columnIndex + 1, Types.SMALLINT);
            }
            return (short) getIntFromString(asBigInt.toString(), columnIndex + 1);
        case MysqlDefs.FIELD_TYPE_DOUBLE:
            double valueAsDouble = getNativeDouble(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsDouble < Short.MIN_VALUE || valueAsDouble > Short.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsDouble), columnIndex + 1, Types.SMALLINT);
                }
            }
            return (short) valueAsDouble;
        case MysqlDefs.FIELD_TYPE_FLOAT:
            float valueAsFloat = getNativeFloat(columnIndex + 1);
            if (overflowCheck && this.jdbcCompliantTruncationForReads) {
                if (valueAsFloat < Short.MIN_VALUE || valueAsFloat > Short.MAX_VALUE) {
                    throwRangeException(String.valueOf(valueAsFloat), columnIndex + 1, Types.SMALLINT);
                }
            }
            return (short) valueAsFloat;
        default:
            String stringVal = getNativeString(columnIndex + 1);
            if (this.useUsageAdvisor) {
                issueConversionViaParsingWarning("getShort()", columnIndex, stringVal, this.fields[columnIndex], new int[] { MysqlDefs.FIELD_TYPE_DOUBLE, MysqlDefs.FIELD_TYPE_TINY, MysqlDefs.FIELD_TYPE_SHORT, MysqlDefs.FIELD_TYPE_LONG, MysqlDefs.FIELD_TYPE_LONGLONG, MysqlDefs.FIELD_TYPE_FLOAT });
            }
            return getShortFromString(stringVal, columnIndex + 1);
    }
}
