public void analyse() {
    Analysis analyzer = new Analysis(_ucm);
    Map<String, Double> stats;
    Box box;
    // Paths, nodes
    stats = new HashMap<String, Double>();
    stats.put("Number of Paths", (double) analyzer.countPathSegments());
    stats.put("Number of Nodes", (double) analyzer.countNodes());
    add(_view.showPieChartStatistics("Paths vs Nodes", stats));
    box = new Box(BoxLayout.PAGE_AXIS);
    box.add(new JLabel("Number of Nodes: " + analyzer.countNodes()));
    box.add(new JLabel("Components: " + analyzer.countComponents()));
    box.add(new JLabel("Shortest Path: " + analyzer.getShortestPath()));
    box.add(new JLabel("Longest Path: " + analyzer.getLongestPath()));
    add(box);
    // Start points, end points, responsibilities
    stats = new HashMap<String, Double>();
    stats.put("Number of Start Points", (double) analyzer.countStartPoints());
    stats.put("Number of End Points", (double) analyzer.countEndPoints());
    stats.put("Number of Responsibilities", (double) analyzer.countResponsibilities());
    add(_view.show3DPieChartStatistics("Start Points vs End Points vs Responsibilities", stats));
    box = new Box(BoxLayout.PAGE_AXIS);
    box.add(new JLabel("Start Points: " + analyzer.countStartPoints()));
    box.add(new JLabel("End Points: " + analyzer.countEndPoints()));
    box.add(new JLabel("Responsibilities: " + analyzer.countResponsibilities()));
    add(box);
    // Forks, joins
    stats = new HashMap<String, Double>();
    stats.put("OR Forks", (double) analyzer.countOrForks());
    stats.put("OR Joins", (double) analyzer.countOrJoins());
    stats.put("AND Forks", (double) analyzer.countAndForks());
    stats.put("AND Joins", (double) analyzer.countAndJoins());
    add(_view.showBarChartStatistics("Forks and Joins", "Node Type", "Number of nodes", stats));
    box = new Box(BoxLayout.PAGE_AXIS);
    box.add(new JLabel("OR Forks: " + analyzer.countOrForks()));
    box.add(new JLabel("OR Joins: " + analyzer.countOrJoins()));
    box.add(new JLabel("AND Forks: " + analyzer.countAndForks()));
    box.add(new JLabel("AND Joins: " + analyzer.countAndJoins()));
    add(box);
    validate();
// setVisible(true);
}
