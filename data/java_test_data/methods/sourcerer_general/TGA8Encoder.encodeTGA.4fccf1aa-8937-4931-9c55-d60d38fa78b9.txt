public void encodeTGA(AdaptiveRasterImage ji, LEDataOutputStream out) throws JimiException {
    IndexColorModel model;
    try {
        model = (IndexColorModel) ji.getColorModel();
    } catch (ClassCastException cce) {
        throw new JimiException("TGA8 requires an IndexColorModel.");
    }
    int palette_size = model.getMapSize();
    // and color map is defaultRGB.
    try {
        int w = ji.getWidth();
        int h = ji.getHeight();
        // id length - no id
        out.writeByte(0);
        // Color Map Type - use colormap
        out.writeByte(1);
        // pseudo-color
        out.writeByte(1);
        // start at the first color index
        out.writeShort(0);
        // number of color entries
        out.writeShort(palette_size);
        // 24 bits per palette entry.
        out.writeByte(24);
        // x origin
        out.writeShort(0);
        // y origin
        out.writeShort(0);
        // width
        out.writeShort(w);
        // height
        out.writeShort(h);
        // 8 bits per pixel
        out.write(8);
        // boring image descriptor
        out.write(0);
        // no Image ID
        // colormap data
        byte[] reds = new byte[palette_size];
        byte[] greens = new byte[palette_size];
        byte[] blues = new byte[palette_size];
        model.getReds(reds);
        model.getGreens(greens);
        model.getBlues(blues);
        // write palette
        for (int i = 0; i < palette_size; i++) {
            out.writeByte(blues[i]);
            out.writeByte(greens[i]);
            out.writeByte(reds[i]);
        }
        int i;
        int j;
        byte[] buf = new byte[w];
        // ji.setRGBDefault(true);	// only writing out 24 bit data
        for (i = 0; i < h; ++i) {
            // convert to normal TGA order
            int y = h - i - 1;
            ji.getChannel(0, y, buf, 0);
            out.write(buf);
        }
    } catch (IOException e) {
        throw new JimiException("TGA8Encoder encodeTGA() IOException encountered");
    }
}
