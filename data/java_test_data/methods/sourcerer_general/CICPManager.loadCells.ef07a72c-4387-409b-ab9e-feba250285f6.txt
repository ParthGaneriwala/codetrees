private void loadCells(String rline, PrintWriter pw, RegionControl rc, String user, String key, SLGraph slg, CICPProducer producer) throws IOException {
    // log.info(rline);
    int mode = 0;
    String menuPrimId = null;
    String[] split = rline.split(",");
    int layer = Integer.parseInt(split[7]);
    LinkedList layerPrimList = null;
    if (slg != null)
        layerPrimList = rc.getPrimList(slg.layer);
    double startX = Double.parseDouble(split[1]);
    double startY = Double.parseDouble(split[3]);
    double startZ = Double.parseDouble(split[2]);
    removeExpiredLayers();
    if (slg == null || slg.producerLayer != layer) {
        int ngid = getNextGraphId();
        slg = new SLGraph(ngid, startX, startY, startZ, rc, user, key, layer, producer);
        layerTable.put(String.valueOf(ngid), slg);
    } else {
        if ((user == null && slg.user != null) || (user != null && slg.user == null) || (key == null && slg.key != null) || (key != null && slg.key == null) || (user != null && !slg.user.equals(user)) || (key != null && !slg.key.equals(key))) {
            pw.println("error: bad credentials");
            return;
        }
        slg.chunkList.clear();
        slg.dispatchList.clear();
        slg.menuList.clear();
        slg.listCounts[0] = 0;
        slg.listCounts[1] = 0;
        slg.timeMillis = System.currentTimeMillis();
    }
    boolean isMod = false;
    boolean isImage = false;
    if (split[0].equals("modify")) {
        isMod = true;
        mode = 2;
        menuPrimId = slg.menuPrimId;
    } else if (split[0].equals("flatImage"))
        isImage = true;
    // hack to avoid the overhead of doing SSL get locally
    if (split[8].startsWith("https"))
        split[8] = "http" + split[8].substring(5);
    URL url = new URL(split[8]);
    URLConnection conn = url.openConnection();
    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    StringBuffer curChunk = new StringBuffer();
    String chunkPrimId = null;
    int chunkInd = 0;
    while ((line = br.readLine()) != null) {
        // log.info("line: " + line);
        if (mode == 0) {
            slg.menuList.add(line);
            if (line.equals("nodes") || line.equals("images"))
                mode = 1;
        } else {
            String[] lsplit = line.split(",");
            LinkedList<Integer> tempPrimList = new LinkedList<Integer>();
            if (!lsplit[0].equals("create") && !lsplit[0].equals("flatImage") && !lsplit[0].equals("modify")) {
                String nextPrimId = null;
                boolean addToTempList = true;
                if (isMod) {
                    Integer existPrim = slg.nodeMap.get(lsplit[19]);
                    if (lsplit[0].equals("del")) {
                        addToTempList = false;
                        if (existPrim != null) {
                            nextPrimId = String.valueOf(existPrim.intValue());
                            if (existPrim.intValue() != Integer.parseInt(slg.menuPrimId))
                                slg.rc.freePrim(existPrim.intValue() - 1);
                        } else
                            log.info("null existPrim for node " + lsplit[1]);
                    } else {
                        if (existPrim != null) {
                            nextPrimId = String.valueOf(existPrim.intValue());
                            addToTempList = false;
                        } else
                            nextPrimId = slg.rc.getNextFreePrim(slg.layer, lsplit[19], slg.nodeMap);
                    }
                } else if (!isImage)
                    nextPrimId = slg.rc.getNextFreePrim(slg.layer, lsplit[19], slg.nodeMap);
                else
                    nextPrimId = slg.rc.getNextFreePrim(slg.layer, "0", slg.nodeMap);
                // log.info("got " + nextPrimId + " from rc for node " + lsplit[19]);
                if (nextPrimId != null && nextPrimId.equals("full")) {
                    br.close();
                    pw.println("error: not enough cicp prims available");
                    rc.freePrims(tempPrimList, slg.layer);
                    return;
                } else if (nextPrimId != null && addToTempList)
                    tempPrimList.add(new Integer(Integer.parseInt(nextPrimId) - 1));
                if (menuPrimId == null) {
                    menuPrimId = nextPrimId;
                    slg.menuPrimId = menuPrimId;
                }
                String lineAbs = null;
                if (split[0].equals("flatImage"))
                    lineAbs = line;
                else if (lsplit[0].equals("del"))
                    lineAbs = "del";
                else
                    lineAbs = makeAbsolute(lsplit, slg, menuPrimId, slg.layer);
                if (mode == 1) {
                    slg.menuList.add(lineAbs);
                    slg.dispatchList.add(nextPrimId + ";menu," + slg.layer);
                    mode = 2;
                } else {
                    if (chunkPrimId == null)
                        chunkPrimId = nextPrimId;
                    if (curChunk.length() + 2 + nextPrimId.length() + lineAbs.length() >= CHUNK_SIZE) {
                        slg.chunkList.add(curChunk);
                        slg.dispatchList.add(chunkPrimId + ";chunk," + slg.layer + "," + chunkInd);
                        chunkInd++;
                        curChunk = new StringBuffer();
                        chunkPrimId = nextPrimId;
                    } else
                        curChunk.append('\n');
                    curChunk.append(nextPrimId);
                    curChunk.append(';');
                    curChunk.append(lineAbs);
                }
            }
        }
    }
    br.close();
    if (curChunk.length() > 0) {
        slg.chunkList.add(curChunk);
        slg.dispatchList.add(chunkPrimId + ";chunk," + slg.layer + "," + chunkInd);
    }
    // log.info("graph has " + slg.chunkList.size() + " chunks");
    String directive = "new";
    if (split[0].equals("modify"))
        directive = "mod";
    else if (layerPrimList != null)
        rc.freePrims(layerPrimList, slg.layer);
    pw.println(directive);
    printListChunk(pw, slg.dispatchList, slg.listCounts, 0);
}
