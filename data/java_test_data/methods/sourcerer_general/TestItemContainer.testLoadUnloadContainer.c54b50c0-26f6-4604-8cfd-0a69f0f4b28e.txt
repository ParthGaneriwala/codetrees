@Test
public void testLoadUnloadContainer() throws Exception {
    configureMinimalGame();
    System.out.println("**** testLoadContainer ****");
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "xx", "xx", 0, 0);
    SimpleBase actorBase = ((RealityInfo) movableService.getGameInfo()).getBase();
    Id builderId = getFirstSynItemId(actorBase, TEST_START_BUILDER_ITEM_ID);
    SyncBaseItem builder = (SyncBaseItem) itemService.getItem(builderId);
    // Create container
    sendBuildCommand(builderId, new Index(300, 300), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendFactoryCommand(getFirstSynItemId(actorBase, TEST_FACTORY_ITEM_ID), TEST_CONTAINER_ITEM_ID);
    waitForActionServiceDone();
    Id containerId = getFirstSynItemId(actorBase, TEST_CONTAINER_ITEM_ID);
    SyncBaseItem container = (SyncBaseItem) itemService.getItem(containerId);
    SyncItemContainer syncItemContainer = container.getSyncItemContainer();
    sendMoveCommand(containerId, new Index(5000, 5000));
    waitForActionServiceDone();
    Assert.assertEquals(0, syncItemContainer.getContainedItems().size());
    Assert.assertFalse(builder.isContainedIn());
    Assert.assertNotNull(builder.getPosition());
    // Load
    sendContainerLoadCommand(builderId, containerId);
    waitForActionServiceDone();
    Assert.assertEquals(1, syncItemContainer.getContainedItems().size());
    Assert.assertEquals(builderId, syncItemContainer.getContainedItems().get(0));
    Assert.assertTrue(builder.isContainedIn());
    Assert.assertNull(builder.getPosition());
    // Unload
    sendUnloadContainerCommand(containerId, new Index(8000, 8000));
    waitForActionServiceDone();
    Assert.assertEquals(0, syncItemContainer.getContainedItems().size());
    Assert.assertFalse(builder.isContainedIn());
    Assert.assertEquals(new Index(8000, 8000), builder.getPosition());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
