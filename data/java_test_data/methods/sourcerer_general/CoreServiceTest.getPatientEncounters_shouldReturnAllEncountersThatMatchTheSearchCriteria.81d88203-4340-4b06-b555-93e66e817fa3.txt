@Test
public void getPatientEncounters_shouldReturnAllEncountersThatMatchTheSearchCriteria() {
    Patient patient = Context.getPatientService().getPatient(7);
    Location firstLocation = Context.getLocationService().getLocation(1);
    Location secondLocation = Context.getLocationService().getLocation(2);
    EncounterType firstEncounterType = Context.getEncounterService().getEncounterType(1);
    EncounterType secondEncounterType = Context.getEncounterService().getEncounterType(2);
    EncounterType sixEncounterType = Context.getEncounterService().getEncounterType(6);
    CoreService coreService = Context.getService(CoreService.class);
    Map<String, Collection<OpenmrsObject>> restrictions = new Hashtable<String, Collection<OpenmrsObject>>();
    restrictions.put(EvaluableConstants.ENCOUNTER_LOCATION, Arrays.<OpenmrsObject>asList(firstLocation));
    FetchRestriction fetchRestriction = new FetchRestriction();
    List<Encounter> encounters = coreService.getPatientEncounters(patient.getPatientId(), restrictions, fetchRestriction);
    Assert.assertNotNull(encounters);
    Assert.assertTrue(CollectionUtils.isNotEmpty(encounters));
    Assert.assertEquals(2, encounters.size());
    Assert.assertEquals(Integer.valueOf(4), encounters.get(0).getEncounterId());
    fetchRestriction.setFetchOrdering(FetchOrdering.ORDER_ASCENDING);
    encounters = coreService.getPatientEncounters(patient.getPatientId(), restrictions, fetchRestriction);
    Assert.assertEquals(Integer.valueOf(3), encounters.get(0).getEncounterId());
    fetchRestriction.setSize(1);
    encounters = coreService.getPatientEncounters(patient.getPatientId(), restrictions, fetchRestriction);
    Assert.assertEquals(1, encounters.size());
    fetchRestriction = new FetchRestriction();
    restrictions.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.<OpenmrsObject>asList(firstEncounterType));
    encounters = coreService.getPatientEncounters(patient.getPatientId(), restrictions, fetchRestriction);
    Assert.assertEquals(1, encounters.size());
    Assert.assertEquals(Integer.valueOf(4), encounters.get(0).getEncounterId());
}
