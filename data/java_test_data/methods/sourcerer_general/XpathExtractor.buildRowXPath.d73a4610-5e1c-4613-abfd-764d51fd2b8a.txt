private String buildRowXPath(List<Node> result, List<Node> exampleNodes) {
    StringBuilder sb = new StringBuilder();
    for (Node n : result) {
        // System.out.println(n.getNodeName());
        String nodeName = n.getNodeName();
        if (nodeName.contains("#document")) {
            continue;
        } else {
            sb.append("/" + nodeName);
        }
        NamedNodeMap attrMap = n.getAttributes();
        if (attrMap == null || attrMap.getLength() == 0) {
            continue;
        }
        if (attrMap.item(0).getNodeName().equals("xmlns")) {
            continue;
        }
        int aCounter = 0;
        StringBuilder msb = new StringBuilder();
        for (int i = 0; i < attrMap.getLength(); i++) {
            if (aCounter > 0) {
                msb.append(" or ");
            }
            Node attr = attrMap.item(i);
            String attrName = attr.getNodeName();
            String attrValue = attr.getNodeValue();
            if (attrName.equals("action") || attrName.startsWith("on")) {
                continue;
            }
            msb.append("@").append(attrName).append("='" + attrValue + "'");
            aCounter++;
        // System.out.print(attr.getNodeName() + ":" + attr.getNodeValue() + ";");
        }
        if (aCounter > 0) {
            sb.append("[").append(msb.toString()).append("]");
        }
    // System.out.println();
    }
    Node parent = result.get(result.size() - 1);
    List<Node> itemNodes = new ArrayList<Node>(exampleNodes.size());
    for (Node node : exampleNodes) {
        Node p = node;
        while (true) {
            if (p != null && parent.equals(p.getParentNode())) {
                break;
            }
            System.out.println(p.getNodeName());
            p = p.getParentNode();
        }
        if (p != null) {
            itemNodes.add(p);
        } else {
            throw new RuntimeException("没有共同的parent node");
        }
    }
    sb.append("/").append(itemNodes.get(0).getNodeName());
    Map<String, Set<String>> attrMap = new HashMap<String, Set<String>>();
    for (Node n : itemNodes) {
        NamedNodeMap map = n.getAttributes();
        if (map == null || map.getLength() == 0) {
            continue;
        }
        for (int i = 0; i < map.getLength(); i++) {
            Node attr = map.item(i);
            // attr中需要排除"id"属性吗？
            String attrName = attr.getNodeName();
            if (attrName.equals("action") || attrName.startsWith("on")) {
                continue;
            }
            Set<String> values = attrMap.get(attr.getNodeName());
            if (values == null) {
                values = new HashSet<String>();
                attrMap.put(attr.getNodeName(), values);
            }
            values.add(attr.getNodeValue());
        }
    }
    if (!attrMap.isEmpty()) {
        int oCounter = 0;
        sb.append("[");
        for (Map.Entry<String, Set<String>> entry : attrMap.entrySet()) {
            oCounter++;
            String key = entry.getKey();
            Set<String> values = entry.getValue();
            int counter = 0;
            sb.append("(");
            for (String v : values) {
                sb.append("@").append(key).append("=").append("'").append(v).append("' ");
                counter++;
                if (counter < (values.size() - 1)) {
                    sb.append(" and ");
                }
            }
            sb.append(")");
            if (oCounter < (attrMap.size())) {
                sb.append(" and ");
            }
        }
        sb.append("]");
    }
    return sb.toString();
}
