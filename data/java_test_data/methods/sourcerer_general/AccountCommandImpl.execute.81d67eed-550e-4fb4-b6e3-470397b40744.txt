public String execute(String cmdline, PrintStream out, PrintStream err) throws InsuffisantPrivilege {
    StringBuffer res = new StringBuffer();
    EcomCustomerRemote ecomCustomerBean = (EcomCustomerRemote) _context.getVar("customerBean");
    EcomAdminRemote ecomAdminBean = (EcomAdminRemote) _context.getVar("adminBean");
    Outputs currentOutput = (Outputs) _context.getVar("output");
    String currentCurrency = String.valueOf(_context.getVar("currency"));
    Collection<AccountBean> accountList = null;
    StringTokenizer st = new StringTokenizer(cmdline, " ");
    // Ignore cmd
    st.nextToken();
    // without arg : list all accounts
    if (st.countTokens() == 0) {
        if (true != _context.getVar("adminMode")) {
            throw new InsuffisantPrivilege();
        }
        accountList = ecomAdminBean.getAllAccounts();
        return printList(ecomCustomerBean, currentCurrency, out, accountList, currentOutput);
    } else // With option
    {
        String option = st.nextToken();
        // adding
        if (option.equals("-add")) {
            if (true != _context.getVar("adminMode")) {
                throw new InsuffisantPrivilege();
            }
            if (st.countTokens() == 7) {
                try {
                    String accountOwner;
                    double balance;
                    String login, pass, surname, address, birthdate;
                    accountOwner = st.nextToken();
                    balance = Double.valueOf(st.nextToken());
                    login = st.nextToken();
                    pass = st.nextToken();
                    surname = st.nextToken();
                    address = st.nextToken();
                    birthdate = st.nextToken();
                    int id = ecomAdminBean.createAccount(accountOwner, balance, login, pass, surname, address, birthdate);
                    res.append(_context.returnCode("Account Created with id #" + id, RESULT_ACTION.SUCCESS));
                } catch (Exception e) {
                    res.append(_context.returnCode("Error with account creation", RESULT_ACTION.FAILED));
                    err.println("Error with account creation");
                }
            } else {
                res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else // removing
        if (option.equals("-remove")) {
            if (true != _context.getVar("adminMode")) {
                throw new InsuffisantPrivilege();
            }
            if (st.countTokens() == 1) {
                try {
                    int id = Integer.valueOf(st.nextToken());
                    ecomAdminBean.removeAccount(id);
                    res.append(_context.returnCode("Account #" + id + " deleted", RESULT_ACTION.SUCCESS));
                } catch (UnknownIdentifier ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println(ex);
                } catch (Exception ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println("Error with account remove" + ex);
                }
            } else {
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else if (option.equals("-id")) {
            if (st.countTokens() == 1) {
                try {
                    int id = Integer.valueOf(st.nextToken());
                    AccountBean a = ecomCustomerBean.getAccountById(id);
                    return printAccount(ecomCustomerBean, currentCurrency, out, a, currentOutput);
                } catch (UnknownIdentifier ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println(ex);
                } catch (Exception ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println("Error with account detail");
                }
            } else {
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else if (option.equals("-deposit")) {
            if (st.countTokens() == 2) {
                try {
                    int id = Integer.valueOf(st.nextToken());
                    double amount = Double.valueOf(st.nextToken());
                    ecomCustomerBean.deposit(id, amount);
                    res.append(_context.returnCode("DEPOSIT OK", RESULT_ACTION.SUCCESS));
                } catch (UnknownIdentifier ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println(ex);
                } catch (Exception ex) {
                    res.append(_context.returnCode(ex.toString(), RESULT_ACTION.FAILED));
                    err.println("Error with account detail");
                }
            } else {
                res.append(_context.returnCode(Shell.INCORRECT_ARGS_NUMBER, RESULT_ACTION.FAILED));
                err.println(Shell.INCORRECT_ARGS_NUMBER);
            }
        } else {
            res.append(_context.returnCode(option + " is not known for Account Management", RESULT_ACTION.FAILED));
            err.println("\t" + option + " is not known for Account Management");
        }
    }
    return res.toString();
}
