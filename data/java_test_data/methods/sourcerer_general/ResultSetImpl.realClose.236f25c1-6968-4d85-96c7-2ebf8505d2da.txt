public void realClose(boolean calledExplicitly) throws SQLException {
    if (this.isClosed) {
        return;
    }
    try {
        if (this.useUsageAdvisor) {
            if (!calledExplicitly) {
                this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN, "", (this.owningStatement == null) ? "N/A" : this.owningStatement.currentCatalog, this.connectionId, (this.owningStatement == null) ? (-1) : this.owningStatement.getId(), this.resultId, System.currentTimeMillis(), 0, Constants.MILLIS_I18N, null, this.pointOfOrigin, Messages.getString(// $NON-NLS-1$
                "ResultSet.ResultSet_implicitly_closed_by_driver")));
            }
            if (this.rowData instanceof RowDataStatic) {
                if (this.rowData.size() > this.connection.getResultSetSizeThreshold()) {
                    this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN, "", (this.owningStatement == null) ? Messages.getString("ResultSet.N/A_159") : // $NON-NLS-1$
                    this.owningStatement.currentCatalog, this.connectionId, (this.owningStatement == null) ? (-1) : this.owningStatement.getId(), this.resultId, System.currentTimeMillis(), 0, Constants.MILLIS_I18N, null, this.pointOfOrigin, Messages.getString("ResultSet.Too_Large_Result_Set", new Object[] { new Integer(this.rowData.size()), new Integer(this.connection.getResultSetSizeThreshold()) })));
                }
                if (!isLast() && !isAfterLast() && (this.rowData.size() != 0)) {
                    this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN, "", (this.owningStatement == null) ? Messages.getString("ResultSet.N/A_159") : // $NON-NLS-1$
                    this.owningStatement.currentCatalog, this.connectionId, (this.owningStatement == null) ? (-1) : this.owningStatement.getId(), this.resultId, System.currentTimeMillis(), 0, Constants.MILLIS_I18N, null, this.pointOfOrigin, Messages.getString(// $NON-NLS-1$
                    "ResultSet.Possible_incomplete_traversal_of_result_set", new Object[] { new Integer(getRow()), new Integer(this.rowData.size()) })));
                }
            }
            if (this.columnUsed.length > 0 && !this.rowData.wasEmpty()) {
                StringBuffer buf = new StringBuffer(Messages.getString(// $NON-NLS-1$
                "ResultSet.The_following_columns_were_never_referenced"));
                boolean issueWarn = false;
                for (int i = 0; i < this.columnUsed.length; i++) {
                    if (!this.columnUsed[i]) {
                        if (!issueWarn) {
                            issueWarn = true;
                        } else {
                            buf.append(", ");
                        }
                        buf.append(this.fields[i].getFullName());
                    }
                }
                if (issueWarn) {
                    this.eventSink.consumeEvent(new ProfilerEvent(ProfilerEvent.TYPE_WARN, "", (this.owningStatement == null) ? "N/A" : this.owningStatement.currentCatalog, this.connectionId, (this.owningStatement == null) ? (-1) : this.owningStatement.getId(), 0, System.currentTimeMillis(), 0, Constants.MILLIS_I18N, null, this.pointOfOrigin, buf.toString()));
                }
            }
        }
    } finally {
        if (this.owningStatement != null && calledExplicitly) {
            this.owningStatement.removeOpenResultSet(this);
        }
        SQLException exceptionDuringClose = null;
        if (this.rowData != null) {
            try {
                this.rowData.close();
            } catch (SQLException sqlEx) {
                exceptionDuringClose = sqlEx;
            }
        }
        if (this.statementUsedForFetchingRows != null) {
            try {
                this.statementUsedForFetchingRows.realClose(true, false);
            } catch (SQLException sqlEx) {
                if (exceptionDuringClose != null) {
                    exceptionDuringClose.setNextException(sqlEx);
                } else {
                    exceptionDuringClose = sqlEx;
                }
            }
        }
        this.rowData = null;
        this.defaultTimeZone = null;
        this.fields = null;
        this.columnLabelToIndex = null;
        this.fullColumnNameToIndex = null;
        this.columnToIndexCache = null;
        this.eventSink = null;
        this.warningChain = null;
        if (!this.retainOwningStatement) {
            this.owningStatement = null;
        }
        this.catalog = null;
        this.serverInfo = null;
        this.thisRow = null;
        this.fastDateCal = null;
        this.connection = null;
        this.isClosed = true;
        if (exceptionDuringClose != null) {
            throw exceptionDuringClose;
        }
    }
}
