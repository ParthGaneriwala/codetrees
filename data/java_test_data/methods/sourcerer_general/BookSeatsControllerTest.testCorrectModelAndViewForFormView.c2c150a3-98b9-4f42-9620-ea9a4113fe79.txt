public void testCorrectModelAndViewForFormView() throws Exception {
    // creating the objects.
    MockHttpServletRequest httpRequest = new MockHttpServletRequest("GET", "/reserveSeats.html");
    httpRequest.addParameter("performanceId", "1");
    httpRequest.addParameter("priceBandId", "1");
    MockHttpServletResponse httpResponse = new MockHttpServletResponse();
    // setting expectations.
    final Performance performance = new Performance();
    eventsCalendarMock.getPerformance(1);
    eventsCalendarMockControl.setReturnValue(performance);
    SeatClass seatClass = new SeatClass();
    final PriceBand priceBand = new PriceBand();
    priceBand.setSeatClass(seatClass);
    boxOfficeMock.getPriceBand(1);
    boxOfficeMockControl.setReturnValue(priceBand);
    boxOfficeMock.getAvailableSeatsCount(performance, seatClass);
    boxOfficeMockControl.setReturnValue(20);
    final ReservationRequest request = new ReservationRequest();
    request.setPerformance(performance);
    request.setPriceBand(priceBand);
    request.holdFor(5);
    boxOfficeMockControl.replay();
    eventsCalendarMockControl.replay();
    // executing tested method.
    BookSeatsController bookSeatsController = new BookSeatsController() {

        protected ReservationRequest createReservationRequest(Performance p, PriceBand pb, int minutesToHold) {
            assertSame(performance, p);
            assertSame(priceBand, pb);
            assertEquals(5, minutesToHold);
            return request;
        }
    };
    initController(bookSeatsController);
    ModelAndView mav = bookSeatsController.handleRequest(httpRequest, httpResponse);
    // assertions & verifications.
    assertEquals("the form view name", "formView", mav.getViewName());
    assertSame("the 'reservationRequest' command object", request, mav.getModel().get("reservationRequest"));
    assertEquals("the 'maximumSeats' allowed", new Integer(10), mav.getModel().get("maximumSeats"));
    assertEquals("The 'defaultSelected' number of seats", new Integer(2), mav.getModel().get("defaultSelected"));
    boxOfficeMockControl.verify();
    eventsCalendarMockControl.verify();
}
