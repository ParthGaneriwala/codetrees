public boolean doOptimization() {
    classes = clel.getAllClassDescriptors();
    method_tokens = new ArrayList<ArrayList<Token>>();
    method_sizes = new Hashtable<MethodDescriptor, Integer>();
    methods_code = new Hashtable<MethodDescriptor, ArrayList<CLInstruction>>();
    classes_methods = new ArrayList<ArrayList<MethodDescriptor>>();
    total_code_size = 0;
    ClassDescriptor cd;
    MethodDescriptor md;
    ArrayList<MethodDescriptor> methods;
    ArrayList<CLInstruction> code;
    ArrayList<Token> tokens;
    int i, j;
    int csize, msize, code_size;
    csize = classes.size();
    // for each class
    for (i = 0; i < csize; i++) {
        cd = classes.get(i);
        try {
            methods = clel.getClassesMethodDescriptors(cd);
        } catch (ClassNotFoundException cnfe) {
            cnfe.printStackTrace();
            return false;
        }
        classes_methods.add(methods);
        msize = methods.size();
        tokens = new ArrayList<Token>();
        for (// for each method
        j = 0; // for each method
        j < msize; // for each method
        j++) {
            md = methods.get(j);
            try {
                code = clel.getMethodsCode(md);
                tokens.add(clel.getMethodToken(md));
            } catch (MethodNotFoundException mnfe) {
                mnfe.printStackTrace();
                return false;
            }
            methods_code.put(md, code);
            code_size = getCodeSize(code);
            method_sizes.put(md, code_size);
            total_code_size += code_size;
        }
        method_tokens.add(tokens);
    }
    builder = new CostCallGraphBuilder(classes, classes_methods, method_tokens, methods_code);
    builder.buildCallGraph();
    return doInline(builder.getGraph());
}
