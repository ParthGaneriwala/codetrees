@Test
public void runTest1() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(TestAnnotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkSequenceAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultMalletCRFDataWriterFactory.class.getName());
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    File trainFile = new MalletCRFClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    BufferedReader reader = new BufferedReader(new FileReader(trainFile));
    reader.readLine();
    reader.close();
    HideOutput hider = new HideOutput();
    Train.main(outputDirectoryName);
    hider.restoreOutput();
    MalletCRFClassifierBuilder builder = new MalletCRFClassifierBuilder();
    MalletCRFClassifier classifier;
    classifier = builder.loadClassifierFromTrainingDirectory(this.outputDirectory);
    List<List<Feature>> sequenceFeatures = new ArrayList<List<Feature>>();
    List<Instance<String>> instances = createInstances();
    for (Instance<String> instance : instances) {
        sequenceFeatures.add(instance.getFeatures());
    }
    List<String> outcomes = classifier.classify(sequenceFeatures);
    assertEquals(sequenceFeatures.size(), outcomes.size());
    testLabels(outcomes, "O O O O O O O O O O O O O O O B-GENE I-GENE I-GENE O B-GENE I-GENE O O O O O O O O O O O O O O O O O O O O O");
    AnalysisEngine classifierAnnotator = AnalysisEngineFactory.createPrimitive(TestAnnotator.class, typeSystemDescription, GenericJarClassifierFactory.PARAM_CLASSIFIER_JAR_PATH, outputDirectoryName + "/model.jar");
    jCas.reset();
    classifierAnnotator.process(jCas);
    classifierAnnotator.collectionProcessComplete();
}
