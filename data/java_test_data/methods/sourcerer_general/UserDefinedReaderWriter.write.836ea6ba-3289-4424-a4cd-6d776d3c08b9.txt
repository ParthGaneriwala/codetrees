private void write(StreamResult result, Collection entries) throws IOException {
    try {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.newDocument();
        Node root = document.createElement(ROOT);
        document.appendChild(root);
        for (Iterator iter = entries.iterator(); iter.hasNext(); ) {
            UserDefinedEntry entry = (UserDefinedEntry) iter.next();
            String name = entry.getName();
            boolean isFold = entry.isFold();
            boolean isCollapse = entry.isCollapse();
            Node region = document.createElement(REGION);
            root.appendChild(region);
            NamedNodeMap attrs = region.getAttributes();
            Attr nameAttr = document.createAttribute(NAME_ATTR);
            nameAttr.setValue(entry.getName());
            Attr foldAttr = document.createAttribute(IS_FOLD_ATTR);
            foldAttr.setValue(String.valueOf(isFold));
            Attr collapseAttr = document.createAttribute(IS_COLLAPSE_ATTR);
            collapseAttr.setValue(String.valueOf(isCollapse));
            attrs.setNamedItem(nameAttr);
            attrs.setNamedItem(foldAttr);
            attrs.setNamedItem(collapseAttr);
        }
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        DOMSource source = new DOMSource(document);
        transformer.transform(source, result);
    } catch (ParserConfigurationException e) {
        throw new IOException("Unable to build document for saving user defined settings.");
    } catch (TransformerException e) {
        if (e.getException() instanceof IOException)
            throw (IOException) e.getException();
        else
            throw new IOException("Unable to build document for saving user defined settings.");
    }
}
