public void setBoundsLinear2(int x, int y, int w, int h) {
    DockNode node;
    int index, size;
    int dW, dH, cx = 0, cy = 0;
    int cap[], scap = 0;
    double[] sub;
    int rsub, rssub = 0, diff = 0;
    if (x == this.x && y == this.y && w == this.w && h == this.h) {
        return;
    }
    dW = w - this.w;
    dH = h - this.h;
    this.x = x;
    this.y = y;
    if (this.type == Dock.DOCK_LEAF) {
        this.w = w;
        this.h = h;
    } else if (this.type == Dock.DOCK_INODE) {
        size = this.children.size();
        cap = new int[size];
        sub = new double[size];
        /*
             * Sweep through the nodes to calculate capacities of the children
             * and the amount to subtract from each child.
             */
        for (index = 0; index < size; index++) {
            node = (DockNode) children.get(index);
            if (this.orientation == Dock.DOCK_H) {
                if (dH < 0) {
                    cap[index] = node.vCapacity(false);
                }
            } else if (this.orientation == Dock.DOCK_V) {
                if (dW < 0) {
                    cap[index] = node.hCapacity(false);
                }
            }
            scap += cap[index];
        }
        for (index = 0; index < size; index++) {
            node = (DockNode) children.get(index);
            if (this.orientation == Dock.DOCK_H) {
                sub[index] = (double) dH * (double) node.h / (double) this.h;
            } else if (this.orientation == Dock.DOCK_V) {
                sub[index] = (double) dW * (double) node.w / (double) this.w;
            }
        }
        /*
             * If the amount we are shrinking by (dW/H) is greater than the sum
             * of the capacities of the children, then shrink all the children
             * by their capacities, set this.w/h and return
             */
        cx = x;
        cy = y;
        if (this.orientation == Dock.DOCK_H) {
            if (dH < 0 && -dH > scap) {
                for (index = 0; index < size; index++) {
                    node = (DockNode) children.get(index);
                    node.setBoundsLinear2(x, cy, w, node.h - cap[index]);
                    cy += node.h;
                }
                this.w = w;
                this.h -= scap;
                return;
            }
        } else if (this.orientation == Dock.DOCK_V) {
            if (dW < 0 && -dW > scap) {
                for (index = 0; index < size; index++) {
                    node = (DockNode) children.get(index);
                    node.setBoundsLinear2(cx, y, node.w - cap[index], h);
                    cx += node.w;
                }
                this.w -= scap;
                this.h = h;
                return;
            }
        }
        /*
             * Apply all the subs
             */
        cx = x;
        cy = y;
        for (index = 0; index < size; index++) {
            node = (DockNode) children.get(index);
            diff = 0;
            rsub = (int) Math.round(sub[index]);
            if (this.orientation == Dock.DOCK_H) {
                rssub += rsub;
                if (index == size - 1) {
                    diff = (dH - rssub);
                }
                node.setBoundsLinear2(x, cy, w, node.h + rsub + diff);
                cy += node.h;
            } else if (this.orientation == Dock.DOCK_V) {
                rssub += rsub;
                if (index == size - 1) {
                    diff = (dW - rssub);
                }
                node.setBoundsLinear2(cx, y, node.w + rsub + diff, h);
                cx += node.w;
            }
        }
        this.w = w;
        this.h = h;
    }
}
