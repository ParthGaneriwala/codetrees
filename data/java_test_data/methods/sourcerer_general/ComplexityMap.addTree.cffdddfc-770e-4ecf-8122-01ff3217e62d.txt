public void addTree(final Tree tree) {
    log.trace("Entering ComplexityMap.addTree(sourceDataTree)");
    this.tree = tree;
    VisualTree visualTree = m_vis.addTree(Constant.TREE, tree);
    m_vis.setVisible(Constant.TREE_EDGES, null, false);
    // ensure that only leaf nodes are interactive
    Predicate allNodes = (Predicate) ExpressionParser.parse("childcount()<100");
    // m_vis.setInteractive(Constant.TREE_NODES, noLeaf, true);
    m_vis.setInteractive(Constant.TREE_NODES, allNodes, true);
    // add labels to the visualization, first create a filter to show labels only at top-level nodes
    Predicate labelPredicate = (Predicate) ExpressionParser.parse("treedepth()<" + GUIConstant.INITIAL_LABEL_DEPTH);
    // now create the labels as decorators of the nodes
    m_vis.addDecorators(Constant.LABELS, Constant.TREE_NODES, labelPredicate, GUIConstant.LABEL_SCHEMA);
    // set up the renderers - one for nodes and one for labels
    DefaultRendererFactory rf = new DefaultRendererFactory();
    roundedNodeRenderer = new RoundedNodeRenderer(10);
    rf.add(new InGroupPredicate(Constant.TREE_NODES), roundedNodeRenderer);
    // rf.add(new InGroupPredicate(Constant.TREE_NODES), new ActorRenderer());
    LabelRenderer labelRenderer = new LabelRenderer(SourceData.NAME);
    labelRenderer.setHorizontalAlignment(Constants.LEFT);
    rf.add(new InGroupPredicate(Constant.LABELS), labelRenderer);
    m_vis.setRendererFactory(rf);
    searchQueryBinding = new SearchQueryBinding(visualTree.getNodeTable(), SourceData.NAME);
    m_vis.addFocusGroup(Visualization.SEARCH_ITEMS, searchQueryBinding.getSearchSet());
    searchQueryBinding.getPredicate().addExpressionListener(new UpdateListener() {

        public void update(Object src) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    cancelAndReAnimate();
                }
            });
        }
    });
    ActionList animatePaint = new ActionList(200);
    animatePaint.add(new ColorAnimator(Constant.TREE_NODES));
    animatePaint.add(new RepaintAction());
    m_vis.putAction("animatePaint", animatePaint);
    ActionList layout = new ActionList();
    // size nodes according the weight given in the FileSystemParser
    layout.add(new DataSizeAction(Constant.TREE_NODES, SourceData.WEIGHT));
    TreeMapLayout treeMapLayout = new TreeMapLayout(Constant.TREE, INTER_SQUARE_SPACE);
    treeMapLayout.putCustomPaneLayout(PaneLayout.SQUARIFY, new SquarifiedTreeMapLayout(treeMapLayout));
    treeMapLayout.putCustomPaneLayout(PaneLayout.HORIZONTAL, new HorizontalPaneLayout(treeMapLayout, false));
    treeMapLayout.putCustomPaneLayout(PaneLayout.VERTICAL, new VerticalPaneLayout(treeMapLayout, true));
    treeMapLayout.putCustomPaneLayout(PaneLayout.TWO_LEVEL_MATRIX, new MatrixPaneLayout(treeMapLayout, false, false));
    treeMapLayout.putCustomPaneLayout(PaneLayout.THREE_LEVEL_MATRIX, new MatrixPaneLayout(treeMapLayout, false, false));
    layout.add(treeMapLayout);
    layout.add(new ComplexityMapLabelLayout(Constant.LABELS, ColorMapFactory.getSummarizedColorMap()));
    // border colors
    ColorAction borderColorAction = new BorderColorAction(Constant.TREE_NODES);
    // The SUMMARIZED_COLOR_MAP Map contains the color Green, which is n/a in case of
    // individual metrics
    // as a backup: GUIConstant.INDIVIDUAL_COLOR_MAP
    fillColorAction = new FillColorAction(Constant.TREE_NODES, viewPoint, ColorMapFactory.getIndividualColorMap(), ColorMapFactory.getSummarizedColorMap(), ColorMapFactory.getExpertColorMap());
    // colors ActionList
    ActionList colors = new ActionList();
    colors.add(fillColorAction);
    colors.add(borderColorAction);
    m_vis.putAction("colors", colors);
    layout.add(colors);
    layout.add(new RepaintAction());
    // m_vis.runAfter("animatePaint", "layout");
    m_vis.putAction("layout", layout);
    // mouse entry/exit listener
    addControlListener(new MouseEntryExitListener(m_vis, (BorderColorAction) borderColorAction));
    log.trace("Leaving ComplexityMap.addTree(sourceDataTree)");
}
