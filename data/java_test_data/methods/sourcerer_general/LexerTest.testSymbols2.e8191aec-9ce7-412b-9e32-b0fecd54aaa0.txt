public void testSymbols2() throws Exception {
    // Test symbols in combination
    TokenStream ts = getLexerFor("{([})]");
    LocatableToken token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LCURLY, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LBRACK, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RCURLY, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RBRACK, token.getType());
    ts = getLexerFor("+++++-----!!!!~~~~(()){{}}");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INC, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.INC, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.PLUS, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.DEC, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.DEC, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.MINUS, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BNOT, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LCURLY, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LCURLY, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RCURLY, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RCURLY, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
    ts = getLexerFor(" [][] ]); ]).");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LBRACK, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RBRACK, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.LBRACK, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RBRACK, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RBRACK, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.SEMI, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RBRACK, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.RPAREN, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.DOT, token.getType());
    ts = getLexerFor(">>, >>>,");
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.SR, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.COMMA, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.BSR, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.COMMA, token.getType());
    token = (LocatableToken) ts.nextToken();
    assertEquals(JavaTokenTypes.EOF, token.getType());
}
