static void float2byteGeneric(float[] input, int inOffset, byte[] output, int outByteOffset, int outByteStep, int sampleCount, int formatType, float ditherBits) {
    if (inOffset < 0 || inOffset + sampleCount > input.length || sampleCount < 0) {
        throw new IllegalArgumentException("invalid input index: " + "input.length=" + input.length + " inOffset=" + inOffset + " sampleCount=" + sampleCount);
    }
    if (outByteOffset < 0 || outByteOffset + (sampleCount * outByteStep) >= (output.length + outByteStep) || outByteStep < getSampleSize(formatType)) {
        throw new IllegalArgumentException("invalid output index: " + "output.length=" + output.length + " outByteOffset=" + outByteOffset + " outByteStep=" + outByteStep + " sampleCount=" + sampleCount + " format=" + formatType2Str(formatType));
    }
    if (ditherBits != 0.0f && random == null) {
        // create the random number generator for dithering
        random = new Random();
    }
    int endSample = inOffset + sampleCount;
    int iSample;
    int outIndex = outByteOffset;
    for (int inIndex = inOffset; inIndex < endSample; inIndex++, outIndex += outByteStep) {
        // do conversion
        switch(formatType) {
            case CT_8S:
                output[outIndex] = quantize8(input[inIndex] * twoPower7, ditherBits);
                break;
            case CT_8U:
                output[outIndex] = (byte) (quantize8((input[inIndex] * twoPower7), ditherBits) + 128);
                break;
            case CT_16SB:
                iSample = quantize16(input[inIndex] * twoPower15, ditherBits);
                output[outIndex] = (byte) (iSample >> 8);
                output[outIndex + 1] = (byte) (iSample & 0xFF);
                break;
            case CT_16SL:
                iSample = quantize16(input[inIndex] * twoPower15, ditherBits);
                output[outIndex + 1] = (byte) (iSample >> 8);
                output[outIndex] = (byte) (iSample & 0xFF);
                break;
            case CT_24_3SB:
                iSample = quantize24(input[inIndex] * twoPower23, ditherBits);
                output[outIndex] = (byte) (iSample >> 16);
                output[outIndex + 1] = (byte) ((iSample >>> 8) & 0xFF);
                output[outIndex + 2] = (byte) (iSample & 0xFF);
                break;
            case CT_24_3SL:
                iSample = quantize24(input[inIndex] * twoPower23, ditherBits);
                output[outIndex + 2] = (byte) (iSample >> 16);
                output[outIndex + 1] = (byte) ((iSample >>> 8) & 0xFF);
                output[outIndex] = (byte) (iSample & 0xFF);
                break;
            case CT_24_4SB:
                // TODO: verify
                iSample = quantize24(input[inIndex] * twoPower23, ditherBits);
                output[outIndex + 0] = 0;
                output[outIndex + 1] = (byte) (iSample >> 16);
                output[outIndex + 2] = (byte) ((iSample >>> 8) & 0xFF);
                output[outIndex + 3] = (byte) (iSample & 0xFF);
                break;
            case CT_24_4SL:
                // TODO: verify
                iSample = quantize24(input[inIndex] * twoPower23, ditherBits);
                output[outIndex + 3] = (byte) (iSample >> 16);
                output[outIndex + 2] = (byte) ((iSample >>> 8) & 0xFF);
                output[outIndex + 1] = (byte) (iSample & 0xFF);
                output[outIndex + 0] = 0;
                break;
            case CT_32SB:
                iSample = quantize32(input[inIndex] * twoPower31, ditherBits);
                output[outIndex] = (byte) (iSample >> 24);
                output[outIndex + 1] = (byte) ((iSample >>> 16) & 0xFF);
                output[outIndex + 2] = (byte) ((iSample >>> 8) & 0xFF);
                output[outIndex + 3] = (byte) (iSample & 0xFF);
                break;
            case CT_32SL:
                iSample = quantize32(input[inIndex] * twoPower31, ditherBits);
                output[outIndex + 3] = (byte) (iSample >> 24);
                output[outIndex + 2] = (byte) ((iSample >>> 16) & 0xFF);
                output[outIndex + 1] = (byte) ((iSample >>> 8) & 0xFF);
                output[outIndex] = (byte) (iSample & 0xFF);
                break;
            default:
                throw new IllegalArgumentException("unsupported format=" + formatType2Str(formatType));
        }
    }
}
