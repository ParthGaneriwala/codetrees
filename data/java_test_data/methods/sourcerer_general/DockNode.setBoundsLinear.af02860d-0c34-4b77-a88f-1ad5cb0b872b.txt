public void setBoundsLinear(int x, int y, int w, int h) {
    DockNode node, lastnode = null;
    double hfactor = 1, vfactor = 1;
    double cx, cy;
    /* Running value of x and y */
    double cw, ch;
    /* Calculated width and height */
    int rcx, rcy, rcw, rch, fx, fy;
    int index, size, diff;
    if (x == this.x && y == this.y && w == this.w && h == this.h) {
        return;
    }
    this.x = x;
    this.y = y;
    if (this.type == Dock.DOCK_LEAF) {
        this.w = w;
        this.h = h;
    } else if (this.type == Dock.DOCK_INODE) {
        hfactor = (double) w / (double) this.w;
        vfactor = (double) h / (double) this.h;
        cx = (double) x;
        cy = (double) y;
        size = this.children.size();
        for (index = 0; index < size; index++) {
            node = (DockNode) this.children.get(index);
            cw = (((double) node.w * (double) hfactor));
            ch = (((double) node.h * (double) vfactor));
            rcw = (int) Math.round(cw);
            rch = (int) Math.round(ch);
            rcx = (int) Math.round(cx);
            rcy = (int) Math.round(cy);
            diff = 0;
            if (this.orientation == Dock.DOCK_H) {
                fy = (lastnode == null ? y : lastnode.y + lastnode.h);
                if (index == size - 1) {
                    diff = (y + h) - (fy + rch);
                }
                node.setBoundsLinear(x, fy, rcw, rch + diff);
                cy += ch;
            } else if (this.orientation == Dock.DOCK_V) {
                fx = (lastnode == null ? x : lastnode.x + lastnode.w);
                if (index == size - 1) {
                    diff = (x + w) - (fx + rcw);
                }
                node.setBoundsLinear(fx, y, rcw + diff, rch);
                cx += cw;
            }
            lastnode = node;
        }
        this.w = w;
        this.h = h;
    }
}
