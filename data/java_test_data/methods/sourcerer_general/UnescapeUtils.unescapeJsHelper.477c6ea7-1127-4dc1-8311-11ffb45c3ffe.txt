private static int unescapeJsHelper(String s, int i, StringBuilder sb) {
    if (i >= s.length()) {
        throw new IllegalArgumentException("End-of-string after escape character in [" + s + "]");
    }
    char c = s.charAt(i++);
    switch(c) {
        case 'n':
            sb.append('\n');
            break;
        case 'r':
            sb.append('\r');
            break;
        case 't':
            sb.append('\t');
            break;
        case 'b':
            sb.append('\b');
            break;
        case 'f':
            sb.append('\f');
            break;
        case '\\':
        case '\"':
        case '\'':
        case '>':
            sb.append(c);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
            // backup to first octal digit
            --i;
            int nOctalDigits = 1;
            int digitLimit = c < '4' ? 3 : 2;
            while (nOctalDigits < digitLimit && i + nOctalDigits < s.length() && isOctal(s.charAt(i + nOctalDigits))) {
                ++nOctalDigits;
            }
            sb.append((char) Integer.parseInt(s.substring(i, i + nOctalDigits), 8));
            i += nOctalDigits;
            break;
        case 'x':
        case 'u':
            String hexCode;
            int nHexDigits = (c == 'u' ? 4 : 2);
            try {
                hexCode = s.substring(i, i + nHexDigits);
            } catch (IndexOutOfBoundsException ioobe) {
                throw new IllegalArgumentException("Invalid unicode sequence [" + s.substring(i) + "] at index " + i + " in [" + s + "]");
            }
            int unicodeValue;
            try {
                unicodeValue = Integer.parseInt(hexCode, 16);
            } catch (NumberFormatException nfe) {
                throw new IllegalArgumentException("Invalid unicode sequence [" + hexCode + "] at index " + i + " in [" + s + "]");
            }
            sb.append((char) unicodeValue);
            i += nHexDigits;
            break;
        default:
            throw new IllegalArgumentException("Unknown escape code [" + c + "] at index " + i + " in [" + s + "]");
    }
    return i;
}
