private String pieceCountingSalary() throws Exception {
    boolean saUser = getCurrentUser().getSaUser();
    boolean actual = true;
    if (saUser)
        actual = false;
    pieceCountingSalaryReports = new ArrayList<PieceCountingSalaryReportVO>();
    try {
        if (StringUtils.isNotBlank(yearAndMonth)) {
            Date[] dates = DateUtil.getOneMonth(yearAndMonth);
            int holidays = 0;
            String[] ss = yearAndMonth.split("-");
            if (ss.length == 2) {
                int month = Integer.valueOf(ss[1]);
                if (month == 5 || month == 10) {
                    holidays = 3;
                } else if (month == 1) {
                    holidays = 1;
                }
            }
            attendanceReports = attendanceDao.populateAttendances(dates[0], dates[1], actual);
            HashMap<Employee, AttendanceReportVO> map = new HashMap<Employee, AttendanceReportVO>();
            if (attendanceReports != null) {
                for (AttendanceReportVO vo : attendanceReports) {
                    Employee key = vo.getEmployee();
                    map.put(key, vo);
                }
            }
            Employee e = new Employee();
            SalaryType salaryType = new SalaryType();
            salaryType.setId(2l);
            e.setSalaryType(salaryType);
            List<Employee> employees = employeeDao.findEmployee(e);
            if (employees != null) {
                for (Employee temp : employees) {
                    PieceCountingSalaryReportVO vo = new PieceCountingSalaryReportVO();
                    vo.setEmployee(temp);
                    pieceCountingSalaryReports.add(vo);
                    Produce produce = new Produce();
                    produce.setEmployee(temp);
                    List<Produce> produces = produceDao.findProduce(produce, dates[0], dates[1], actual);
                    if (produces != null) {
                        for (Produce p : produces) {
                            vo.addProduce(p);
                        }
                    }
                    AttendanceReportVO attendance = map.get(temp);
                    if (attendance != null) {
                        vo.setGeneralWorkHours(attendance.getGeneralWorkHours());
                        vo.setWeekendExtraHours(attendance.getWeekendExtraHours());
                        vo.setHolidayExtraHours(attendance.getHolidayExtraHours());
                        vo.setWorkDayExtraHours(attendance.getWorkDayExtraHours());
                        vo.setIdleHours(0f);
                        vo.setHolidays((float) holidays);
                        vo.setSocialInsurance(0f);
                        vo.setIncomeTax(0f);
                        SalaryStrategy salaryStrategy = employeeDao.getSalary(temp);
                        vo.setNoAbsenceFee(salaryStrategy.getNoAbsenceFee());
                    }
                }
            }
        }
    } catch (DateFormatException e) {
        e.printStackTrace();
    }
    return "pieceCountingSalaryReport";
}
