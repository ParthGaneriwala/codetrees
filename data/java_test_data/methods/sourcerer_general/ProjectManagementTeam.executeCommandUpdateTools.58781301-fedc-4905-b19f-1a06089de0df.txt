public String executeCommandUpdateTools(ActionContext context) {
    Connection db = null;
    String errorMessage = null;
    // Parameters
    String projectIdStr = context.getRequest().getParameter("pid");
    String targetUserId = context.getRequest().getParameter("id");
    String enable = context.getRequest().getParameter("enable");
    User user = getUser(context);
    Project project = null;
    int projectId = -1;
    try {
        db = getConnection(context);
        if (projectIdStr == null) {
            errorMessage = "Project id (pid) must be specified.";
        } else if (user == null || user.getId() == -1) {
            errorMessage = "User must be logged in to join.";
        } else {
            projectId = Integer.parseInt(context.getRequest().getParameter("pid"));
        }
        if (errorMessage != null) {
            context.getRequest().setAttribute("actionError", errorMessage);
            return "SystemError";
        }
        // Verify the project and use for refresh
        project = retrieveAuthorizedProject(projectId, context);
        if (!hasProjectAccess(context, project.getId(), "project-team-tools")) {
            return "PermissionError";
        }
        context.getRequest().setAttribute("project", project);
        // Update the target user's status
        TeamMember prevMember = new TeamMember(db, project.getId(), new Integer(targetUserId));
        TeamMember member = new TeamMember(db, project.getId(), new Integer(targetUserId));
        if (member.getTools() != "true".equals(enable)) {
            member.setTools("true".equals(enable));
            member.updateTools(db);
        }
        // trigger the workflow
        this.processUpdateHook(context, prevMember, member);
    } catch (Exception e) {
        context.getRequest().setAttribute("Error", e);
        return "SystemError";
    } finally {
        freeConnection(context, db);
    }
    return "UpdateToolsOK";
}
