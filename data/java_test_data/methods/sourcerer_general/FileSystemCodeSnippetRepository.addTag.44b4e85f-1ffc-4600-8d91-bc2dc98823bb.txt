public ActionResponse addTag(Tag tag) {
    ActionResponse response = new ActionResponse();
    Action action = _helper.actionForNewTag(tag);
    if (tag.getUser().getName() == "") {
        response.addError("no_user_for_tag");
        return addActionBasedOnResponse(response, action);
    }
    addUser(tag.getUser());
    response.merge(addCodeSnippet(tag.getCodeSnippet()));
    if (!response.isValid()) {
        return addActionBasedOnResponse(response, action);
    }
    String filename = _codeSnippetFilename + "." + tag.getUser().getId();
    try {
        Document doc = readDocument(filename);
        int currentId = new Integer(extractIdFrom(doc)).intValue();
        int nextId = tag.isOfficial() ? currentId : currentId + 1;
        Tag[] oldTags = getAllTags("/" + tag.getUser().getName(), false);
        XmlBuffer buffer = new XmlBuffer();
        buffer.addEntity("all-tags");
        buffer.addSimpleEntity("next-id", nextId + "");
        for (int i = 0; i < oldTags.length; i++) {
            Tag existing = oldTags[i];
            if (tag.isOfficial() && existing.getId().equals(tag.getId())) {
                addTagTo(buffer, tag);
            } else {
                addTagTo(buffer, existing);
            }
        }
        if (!tag.isOfficial()) {
            tag.setId(currentId + "");
            addTagTo(buffer, tag);
        }
        buffer.closeEntity();
        writeFileToDisk(filename, buffer);
    } catch (Exception e) {
        response.addError(e.getMessage());
    }
    return addActionBasedOnResponse(response, action);
}
