protected double calModularity(ArrayList alClusters) {
    double M = 0.0, temp;
    int A, i, j, n1, n2;
    int d1, d2, c1, c2;
    int[] neighs;
    int m = currentNetwork.getEdgeCount();
    Iterator i0 = alClusters.iterator();
    while (i0.hasNext()) {
        // for each Complex
        Cluster cur = (Cluster) i0.next();
        ArrayList alNodes = cur.getALNodes();
        int[] nodes = ClusterUtil.convertIntArrayList2array(alNodes);
        for (i = 0; i < nodes.length - 1; i++) {
            // for each pairs of nodes
            n1 = nodes[i];
            neighs = getNeighborArray(currentNetwork, n1);
            Arrays.sort(neighs);
            d1 = neighs.length;
            c1 = searchInComplexes(alClusters, new Integer(n1));
            for (j = 0; j < nodes.length; j++) {
                n2 = nodes[j];
                d2 = currentNetwork.getDegree(n2);
                c2 = searchInComplexes(alClusters, new Integer(n2));
                A = (Arrays.binarySearch(neighs, n2) < 0) ? 0 : 1;
                temp = (d1 * d2);
                temp = temp / 2 / m;
                temp = -temp;
                temp += A;
                M += temp / c1 / c2;
            }
        }
    }
    // M=M/2/m;
    return M;
}
