private void pieceDropped(int dropHeight) {
    for (int i = 0; i < Settings.currPiece.maxCoords(); ++i) {
        int x = Settings.curX + Settings.currPiece.x(i);
        int y = Settings.curY + Settings.currPiece.y(i);
        setShapeAt(x, y, Settings.currPiece.shape());
    }
    Settings.numPiecesDropped++;
    int scoreToAdd = dropHeight * 5;
    if (GlobalSettings.inDevelopment)
        scoreToAdd = 4000;
    createScore(scoreToAdd, Settings.curX + (Settings.currPiece.maxX() + Settings.currPiece.minX()) / 2, Settings.curY + (Settings.currPiece.maxY() + Settings.currPiece.minY()) / 2);
    if (Settings.currPiece.shape() != TetrisShape.Bomb)
        removeFullLines();
    Updatables.isWaitingAfterPiece = true;
    /**
     * Bomb explosion management code
     */
    if (GlobalSettings.levelModes.contains(LevelMode.BombTetris) && Settings.currPiece.shape() == TetrisShape.Bomb) {
        int landingY = Settings.curY + Settings.currPiece.minY();
        int landingX = Settings.curX + Settings.currPiece.minX();
        int height = Settings.currPiece.maxY() - Settings.currPiece.minY() + 1;
        int width = Settings.currPiece.maxX() - Settings.currPiece.minX() + 1;
        int pause = 0;
        int score = 0;
        int i, j;
        for (i = 0; i < height; i++) {
            for (j = 0; j < Settings.boardWidth; j++) {
                pause++;
                if (isIn(j, landingX, landingX + width))
                    pause = 0;
                else
                    pause = (j < landingX ? landingX - j : j - landingX - width);
                if (shapeAt(j, i + landingY) == TetrisShape.NoShape)
                    score = 0;
                else {
                    score = 10;
                    addCombo(2);
                }
                Renderables.bombAnimation.add(new BombAnimation(pause, j, i + landingY, score));
            }
            Updatables.linesNoRender[Settings.boardHeight - i - landingY - 1] = true;
        }
        Updatables.isBomb = true;
        Updatables.isWaitingAfterLine = true;
        Updatables.doTick = false;
    }
    /**
     * // Bomb explosion management code
     *
     * *******************************************
     *
     * Combo management code
     */
    if (Renderables.linesToRemove.size() > 0 || Updatables.isBomb || Updatables.isNewPiece) {
        if (GlobalSettings.tetris)
            addCombo(6);
        else if (GlobalSettings.completeTetris) {
            addCombo(10);
            addCombo(GlobalSettings.combo.nextVal());
        } else
            addCombo(Renderables.linesToRemove.size());
    } else
        resetCombo(false);
    /**
     * // Combo management code
     *
     * *******************************************
     *
     * Ghost piece management code
     */
    int minX = Settings.curX;
    int minY = Settings.curY;
    Renderables.ghostOutline.start(minX, minY, Settings.currPiece);
    /**
     * End ghost piece management code
     */
    Updatables.isNewPiece = true;
    // TODO Find out a good number for pieces per level
    if (Settings.numPiecesDropped % PIECES_PER_LEVEL == 0) {
        nextLevel();
    }
    if (!Updatables.isWaitingAfterLine)
        newPiece();
}
