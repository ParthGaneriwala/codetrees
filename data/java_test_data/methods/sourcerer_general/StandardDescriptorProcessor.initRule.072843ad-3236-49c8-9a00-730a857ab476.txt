@SuppressWarnings("rawtypes")
public MatchingRule initRule(XmlParser.Node node) {
    String name = node.getTag();
    if ("and".equals(name)) {
        AndRule and = new AndRule();
        Iterator it = node.iterator();
        while (it.hasNext()) {
            Object o = it.next();
            if (!(o instanceof XmlParser.Node))
                continue;
            and.addCriterion(initRule((XmlParser.Node) o));
        }
        return and;
    } else if ("equal".equals(name)) {
        String var = node.getString("var", false, true);
        String value = node.getString("value", false, true);
        boolean ignoreCase = "true".equalsIgnoreCase(node.getAttribute("ignore-case"));
        return new EqualsRule(var, value, ignoreCase);
    } else if ("subdomain-of".equals(name)) {
        String var = node.getString("var", false, true);
        String value = node.getString("value", false, true);
        return new SubdomainRule(var, value);
    } else if ("or".equals(name)) {
        OrRule or = new OrRule();
        Iterator it = node.iterator();
        while (it.hasNext()) {
            Object o = it.next();
            if (!(o instanceof XmlParser.Node))
                continue;
            or.addCriterion(initRule((XmlParser.Node) o));
        }
        return or;
    } else if ("not".equals(name)) {
        NotRule not = new NotRule();
        Iterator it = node.iterator();
        while (it.hasNext()) {
            Object o = it.next();
            if (!(o instanceof XmlParser.Node))
                continue;
            not.setCriterion(initRule((XmlParser.Node) o));
        }
        return not;
    } else if ("contains".equals(name)) {
        String var = node.getString("var", false, true);
        String value = node.getString("value", false, true);
        boolean ignoreCase = "true".equalsIgnoreCase(node.getAttribute("ignore-case"));
        return new ContainsRule(var, value, ignoreCase);
    } else if ("exists".equals(name)) {
        return new ExistsRule(node.getString("var", false, true));
    } else {
        throw new IllegalArgumentException("Unknown rule: " + name);
    }
}
