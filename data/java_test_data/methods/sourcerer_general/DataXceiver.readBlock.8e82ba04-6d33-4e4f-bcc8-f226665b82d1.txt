private void readBlock(DataInputStream in) throws IOException {
    // 
    // Read in the header
    // 
    long blockId = in.readLong();
    Block block = new Block(blockId, 0, in.readLong());
    long startOffset = in.readLong();
    long length = in.readLong();
    String clientName = Text.readString(in);
    // send the block
    OutputStream baseStream = NetUtils.getOutputStream(s, datanode.socketWriteTimeout);
    DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, SMALL_BUFFER_SIZE));
    BlockSender blockSender = null;
    final String clientTraceFmt = clientName.length() > 0 && ClientTraceLog.isInfoEnabled() ? String.format(DN_CLIENTTRACE_FORMAT, localAddress, remoteAddress, "%d", "HDFS_READ", clientName, datanode.dnRegistration.getStorageID(), block) : datanode.dnRegistration + " Served block " + block + " to " + s.getInetAddress();
    try {
        try {
            blockSender = new BlockSender(block, startOffset, length, true, true, false, datanode, clientTraceFmt);
        } catch (IOException e) {
            out.writeShort(DataTransferProtocol.OP_STATUS_ERROR);
            throw e;
        }
        // send op status
        out.writeShort(DataTransferProtocol.OP_STATUS_SUCCESS);
        // send data
        long read = blockSender.sendBlock(out, baseStream, null);
        if (blockSender.isBlockReadFully()) {
            // This is an optional response from client.
            try {
                if (in.readShort() == DataTransferProtocol.OP_STATUS_CHECKSUM_OK && datanode.blockScanner != null) {
                    datanode.blockScanner.verifiedByClient(block);
                }
            } catch (IOException ignored) {
            }
        }
        datanode.myMetrics.bytesRead.inc((int) read);
        datanode.myMetrics.blocksRead.inc();
    } catch (SocketException ignored) {
        // Its ok for remote side to close the connection anytime.
        datanode.myMetrics.blocksRead.inc();
    } catch (IOException ioe) {
        /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
        LOG.warn(datanode.dnRegistration + ":Got exception while serving " + block + " to " + s.getInetAddress() + ":\n" + StringUtils.stringifyException(ioe));
        throw ioe;
    } finally {
        IOUtils.closeStream(out);
        IOUtils.closeStream(blockSender);
    }
}
