// $ANTLR start "expression2"
public final Compila_doresParser.expression2_return expression2() throws RecognitionException {
    Compila_doresParser.expression2_return retval = new Compila_doresParser.expression2_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token set139 = null;
    Compila_doresParser.expression3_return expression3138 = null;
    Compila_doresParser.expression3_return expression3140 = null;
    CommonTree set139_tree = null;
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:223:2: ( expression3 ( ( GTE | LTE | GT | LT ) expression3 )* )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:223:4: expression3 ( ( GTE | LTE | GT | LT ) expression3 )*
        {
            root_0 = (CommonTree) adaptor.nil();
            pushFollow(FOLLOW_expression3_in_expression21491);
            expression3138 = expression3();
            state._fsp--;
            adaptor.addChild(root_0, expression3138.getTree());
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:223:16: ( ( GTE | LTE | GT | LT ) expression3 )*
            loop34: do {
                int alt34 = 2;
                int LA34_0 = input.LA(1);
                if (((LA34_0 >= GTE && LA34_0 <= LT))) {
                    alt34 = 1;
                }
                switch(alt34) {
                    case 1:
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:223:17: ( GTE | LTE | GT | LT ) expression3
                        {
                            set139 = (Token) input.LT(1);
                            set139 = (Token) input.LT(1);
                            if ((input.LA(1) >= GTE && input.LA(1) <= LT)) {
                                input.consume();
                                root_0 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(set139), root_0);
                                state.errorRecovery = false;
                            } else {
                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                throw mse;
                            }
                            pushFollow(FOLLOW_expression3_in_expression21511);
                            expression3140 = expression3();
                            state._fsp--;
                            adaptor.addChild(root_0, expression3140.getTree());
                        }
                        break;
                    default:
                        break loop34;
                }
            } while (true);
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
