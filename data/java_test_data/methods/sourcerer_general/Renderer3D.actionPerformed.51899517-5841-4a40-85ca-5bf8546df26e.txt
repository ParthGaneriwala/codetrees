public void actionPerformed(ActionEvent e) {
    if ("maximize".equals(e.getActionCommand())) {
        for (int i = 0; i < NVIEWS; i++) {
            viewspanel.remove(views[i]);
        // cams[i].canvas.stopRenderer();
        }
        for (// para for�ar a ltera��o do tamanho de todas as canvas
        int i = 0; // para for�ar a ltera��o do tamanho de todas as canvas
        i < NVIEWS; // para for�ar a ltera��o do tamanho de todas as canvas
        i++) {
            // para o desenho2d n�o se passar...
            if (// panal_op j� vai alterar o seu tam � frente
            i != panel_op) {
                viewspanel.setLayout(new BorderLayout());
                cams[i].canvas.startRenderer();
                viewspanel.add(views[i], BorderLayout.CENTER);
                viewspanel.doLayout();
                views[i].doLayout();
                panel_max = panel_op;
            }
        }
        for (int i = 0; i < NVIEWS; i++) {
            viewspanel.remove(views[i]);
        // cams[i].canvas.stopRenderer();
        }
        viewspanel.setLayout(new BorderLayout());
        cams[panel_op].canvas.startRenderer();
        viewspanel.add(views[panel_op], BorderLayout.CENTER);
        viewspanel.doLayout();
        views[panel_op].doLayout();
        panel_max = panel_op;
        return;
    }
    if ("restore".equals(e.getActionCommand())) {
        // boolean auxc=cams[panel_max].canvas.caminfo; //info cam *
        viewspanel.remove(views[panel_op]);
        // cams[panel_op].canvas.stopRenderer();
        viewspanel.setLayout(new GridLayout(lines, coluns));
        for (int i = 0; i < NVIEWS; i++) {
            cams[i].canvas.truePostRender();
            cams[i].canvas.startRenderer();
            cams[i].canvas.validate();
            viewspanel.doLayout();
            views[i].doLayout();
            viewspanel.add(views[i]);
            cams[i].canvas.addNotify();
        // cams[i].canvas.caminfo=false;
        }
        viewspanel.doLayout();
        Dimension d2 = new Dimension();
        // d= viewspanel.getSize();
        d2.setSize(1, 1);
        for (int i = 0; i < NVIEWS; i++) {
            views[i].doLayout();
        // cams[i].canvas.paint(cams[i].canvas.g2);
        // cams[i].canvas.doLayout();
        // cams[i].canvas.repaint();
        }
        // cams[panel_max].canvas.caminfo=auxc;   //info cam
        panel_max = -1;
        return;
    }
    if ("move".equals(e.getActionCommand())) {
        if (viewing == 1)
            setViewMode(Renderer3D.NONE);
        else {
            setViewMode(Renderer3D.TRANSLATION);
        // viewing=1;
        }
        sendChangeEvent();
        return;
    }
    if ("zoom".equals(e.getActionCommand())) {
        if (viewing == 2)
            setViewMode(Renderer3D.NONE);
        else {
            setViewMode(Renderer3D.ZOOM);
        // viewing=2;
        }
        sendChangeEvent();
        return;
    }
    if ("rotate".equals(e.getActionCommand())) {
        if (viewing == 3)
            setViewMode(Renderer3D.NONE);
        else {
            setViewMode(Renderer3D.ROTATION);
        // viewing=3;
        }
        sendChangeEvent();
        return;
    }
    if ("resetmenu".equals(e.getActionCommand())) {
        return;
    }
    if ("resettop".equals(e.getActionCommand())) {
        cams[panel_op].resetTop();
        return;
    }
    if ("resetright".equals(e.getActionCommand())) {
        cams[panel_op].resetRight();
        return;
    }
    if ("resetback".equals(e.getActionCommand())) {
        cams[panel_op].resetBack();
        return;
    }
    if ("resetuser".equals(e.getActionCommand())) {
        cams[panel_op].resetUser();
        return;
    }
    if ("resetview".equals(e.getActionCommand())) {
        cams[panel_op].setType(cams[panel_op].type);
        return;
    }
    if ("grid".equals(e.getActionCommand())) {
        if (grid) {
            contentsTransGr.removeChild(gridobj.getFullObj3D());
            grid = false;
        } else {
            gridobj.setPos(gcenter);
            gridobj.setParent3D(contentsTransGr);
            grid = true;
        }
        return;
    }
    if ("menugrid".equals(e.getActionCommand())) {
        // Grid3D grid3Ddialog=new Grid3D();
        Grid3D.showGridDialog(this);
        return;
    }
    if ("infocamera".equals(e.getActionCommand())) {
        if (cams[panel_op].canvas.caminfo) {
            cams[panel_op].canvas.caminfo = false;
        } else {
            cams[panel_op].canvas.caminfo = true;
        }
        return;
    }
    if ("infoaxis".equals(e.getActionCommand())) {
        if (cams[panel_op].canvas.axisinfo) {
            cams[panel_op].canvas.axisinfo = false;
        } else {
            cams[panel_op].canvas.axisinfo = true;
        }
        return;
    }
    if ("infoobj".equals(e.getActionCommand())) {
        if (cams[panel_op].canvas.objinfo) {
            cams[panel_op].canvas.objinfo = false;
        } else {
            cams[panel_op].canvas.objinfo = true;
        }
        return;
    }
    if ("Lock".equals(e.getActionCommand().substring(0, 4))) {
        System.err.println("Chamou Lock");
        for (Enumeration<String> enuma = Vehicles.keys(); enuma.hasMoreElements(); ) {
            String vt = (String) enuma.nextElement();
            if (e.getActionCommand().endsWith(vt)) {
                Obj3D v3D = (Obj3D) Vehicles.get(vt);
                if (cams[panel_op].lockobj == v3D) {
                    v3D.removeCamera3D(cams[panel_op]);
                    viewTransGr.addChild(cams[panel_op].getCamera3D());
                    cams[panel_op].lockobj = null;
                } else {
                    if (cams[panel_op].lockobj != null)
                        cams[panel_op].lockobj.removeCamera3D(cams[panel_op]);
                    else
                        viewTransGr.removeChild(cams[panel_op].getCamera3D());
                    v3D.addCamera3D(cams[panel_op]);
                    cams[panel_op].lockobj = v3D;
                }
            }
        }
        return;
    }
}
