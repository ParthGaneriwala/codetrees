protected void onRender(Element parent, int index) {
    super.onRender(parent, index);
    HorizontalPanel header = new HorizontalPanel();
    header.add(Resources.images.icon_search().createImage());
    header.add(new Label("  " + Resources.constants.AttributeList_GoodsType()));
    // ListField<BeanObject> listGoodsType = new ListField<BeanObject>();
    // 
    // ListLoader lgtLoader = new ListService().getLoader(ModelNames.GOODSTYPE);
    // final ListStore<BeanObject> store1 = new ListStore<BeanObject>(lgtLoader);
    // listGoodsType.setStore(store1);
    // listGoodsType.setDisplayField(GoodsTypeForm.NAME);
    // lgtLoader.load();
    // ComboBox<BeanObject> listGoodsType = new ComboBox<BeanObject>();
    // 
    // ListLoader lgtLoader = new ListService().getLoader(ModelNames.GOODSTYPE);
    // final ListStore<BeanObject> store1 = new ListStore<BeanObject>(lgtLoader);
    // listGoodsType.setStore(store1);
    // listGoodsType.setDisplayField(GoodsTypeForm.NAME);
    // lgtLoader.load();
    listGoodsType.addChangeListener(new ChangeListener() {

        public void onChange(Widget sender) {
            // getCurState().setSelectedGoodsTypeID(listGoodsType.getSelectedIndex());
            refreshAttributeList();
        }
    });
    header.add(listGoodsType);
    add(header);
    loader = new PagingListService().getLoader(ModelNames.ATTRIBUTE);
    final ListStore<BeanObject> store = new ListStore<BeanObject>(loader);
    // store.addStoreListener(new StoreListener<BeanObject>() {
    // public void storeUpdate(StoreEvent<BeanObject> se) {
    // 
    // }
    // });
    toolBar = new PagingToolBar(pageSize);
    toolBar.bind(loader);
    List<ColumnConfig> columns = new ArrayList<ColumnConfig>();
    final CheckBoxSelectionModel<BeanObject> smRowSelection = new CheckBoxSelectionModel<BeanObject>();
    columns.add(smRowSelection.getColumn());
    columns.add(new ColumnConfig(IAttribute.ID, Resources.constants.AttributeList_ID(), 50));
    ColumnConfig col = new ColumnConfig(IAttribute.NAME, Resources.constants.AttributeList_Name(), 100);
    col.setEditor(new CellEditor(new TextField()));
    columns.add(col);
    columns.add(new ColumnConfig(IAttribute.GOODSTYPE, Resources.constants.AttributeList_GoodsType(), 80));
    columns.add(new ColumnConfig(IAttribute.INPUTTYPE, Resources.constants.AttributeList_InputType(), 80));
    columns.add(new ColumnConfig(IAttribute.VALUES, Resources.constants.AttributeList_Values(), 80));
    columns.add(new ColumnConfig(IAttribute.SORTORDER, Resources.constants.AttributeList_SortOrder(), 50));
    ColumnConfig actcol = new ColumnConfig("Action", Resources.constants.action(), 100);
    columns.add(actcol);
    ColumnModel cm = new ColumnModel(columns);
    Grid<BeanObject> grid = new EditorGrid<BeanObject>(store, cm);
    grid.setLoadMask(true);
    grid.setBorders(true);
    grid.setSelectionModel(smRowSelection);
    // grid.setAutoExpandColumn("forum");
    // grid.addPlugin(onsale);
    // grid.addPlugin(hotsold);
    // grid.addPlugin(bestsold);
    // grid.addPlugin(newadd);
    ActionCellRenderer render = new ActionCellRenderer(grid);
    ActionCellRenderer.ActionInfo act = new ActionCellRenderer.ActionInfo();
    act.setImage("icon_edit.gif");
    act.setAction("editAttribute($id)");
    act.setTooltip(Resources.constants.edit());
    render.addAction(act);
    act = new ActionCellRenderer.ActionInfo();
    act.setImage("icon_trash.gif");
    act.setAction("deleteAttribute($id)");
    act.setTooltip(Resources.constants.delete());
    render.addAction(act);
    actcol.setRenderer(render);
    ContentPanel panel = new ContentPanel();
    panel.setFrame(true);
    panel.setCollapsible(true);
    panel.setAnimCollapse(false);
    panel.setButtonAlign(HorizontalAlignment.CENTER);
    panel.setIconStyle("icon-table");
    // panel.setHeading("Paging Grid");
    panel.setLayout(new FitLayout());
    panel.add(grid);
    panel.setSize(900, 350);
    panel.setBottomComponent(toolBar);
    panel.setButtonAlign(HorizontalAlignment.CENTER);
    panel.addButton(new Button(Resources.constants.reset(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            store.rejectChanges();
        }
    }));
    panel.addButton(new Button(Resources.constants.save(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            List<Record> changed = store.getModifiedRecords();
            for (Record rec : changed) {
                BeanObject bean = (BeanObject) rec.getModel();
                updateAttribute(bean, null);
            }
            store.commitChanges();
        }
    }));
    panel.addButton(new Button(Resources.constants.add(), new SelectionListener<ButtonEvent>() {

        public void componentSelected(ButtonEvent ce) {
            AttributePanel.State newState = new AttributePanel.State();
            newState.setIsEdit(false);
            newState.setSelectedGoodsTypeID(getCurState().getSelectedGoodsTypeID());
            newState.execute();
        // iShop.getInstance().displayAttributePanel(newState);
        // iShop.getInstance().displayAttributePanel(null);
        }
    }));
    add(panel);
// refresh();
}
