private TreebankNode convertNode(JCas jCas, Tree<String> berkeleyNode, List<TOKEN_TYPE> tokens, TokenIndex tokenIndex, List<TerminalTreebankNode> leafNodes, boolean isTop) {
    if (berkeleyNode.isLeaf()) {
        if (!isTop) {
            TOKEN_TYPE token = tokens.get(tokenIndex.index);
            TerminalTreebankNode leafNode = new TerminalTreebankNode(jCas, token.getBegin(), token.getEnd());
            leafNode.setNodeType(berkeleyNode.getLabel());
            leafNode.setTokenIndex(tokenIndex.index);
            leafNode.setNodeValue(berkeleyNode.toString());
            leafNode.addToIndexes();
            tokenIndex.index++;
            leafNodes.add(leafNode);
            return leafNode;
        } else {
            TOKEN_TYPE token = tokens.get(tokenIndex.index);
            TopTreebankNode topNode = new TopTreebankNode(jCas, token.getBegin(), token.getEnd());
            topNode.addToIndexes();
            return topNode;
        }
    }
    List<TreebankNode> uimaChildren = convertChildren(jCas, berkeleyNode, tokens, tokenIndex, leafNodes);
    int nodeBegin = uimaChildren.get(0).getBegin();
    int nodeEnd = uimaChildren.get(uimaChildren.size() - 1).getEnd();
    TreebankNode uimaNode;
    if (isTop) {
        uimaNode = new TopTreebankNode(jCas);
    } else {
        uimaNode = new TreebankNode(jCas, nodeBegin, nodeEnd);
    }
    uimaNode.setNodeType(berkeleyNode.getLabel());
    uimaNode.setChildren(UIMAUtil.toFSArray(jCas, uimaChildren));
    uimaNode.addToIndexes();
    for (TreebankNode child : uimaChildren) {
        child.setParent(uimaNode);
    }
    return uimaNode;
}
