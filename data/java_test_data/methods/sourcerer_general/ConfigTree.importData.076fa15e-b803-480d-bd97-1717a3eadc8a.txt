public boolean importData(JComponent comp, Transferable t) {
    if (!canImport(comp, t.getTransferDataFlavors())) {
        // this isn't checked automatically for paste
        return false;
    }
    boolean local = t.isDataFlavorSupported(LOCAL_NODE_TRANSFER_FLAVOR);
    Object data;
    try {
        data = t.getTransferData(local ? LOCAL_NODE_TRANSFER_FLAVOR : ToolUtil.SERIALIZED_WRAPPED_FLAVOR);
    } catch (Exception e) {
        log.warning("Failure importing data.", e);
        return false;
    }
    ConfigTreeNode node, onode = null;
    if (local) {
        NodeTransfer transfer = (NodeTransfer) data;
        node = transfer.cnode;
        onode = transfer.onode;
    } else {
        data = ((SerializableWrapper) data).getObject();
        if (!(data instanceof ConfigTreeNode)) {
            // some other kind of wrapped transfer
            return false;
        }
        node = (ConfigTreeNode) data;
    }
    if (!node.verifyConfigClass(_groups[0].getConfigClass())) {
        // some other kind of config
        return false;
    }
    ConfigTreeNode snode = getSelectedNode();
    ConfigTreeNode parent = (ConfigTreeNode) getModel().getRoot();
    if (snode != null && snode.getParent() != null) {
        parent = snode.getAllowsChildren() ? snode : (ConfigTreeNode) snode.getParent();
    }
    if (onode == parent || (onode != null && onode.getParent() == parent)) {
        // can't move to self or to the same folder
        return false;
    }
    // have to clone it in case we are going to paste it multiple times
    node = node.clone();
    // find a unique name
    String name = (String) node.getUserObject();
    node.setUserObject(parent.findNameForChild(name));
    // can reuse our identifiers
    if (onode != null && onode.getRoot() == parent.getRoot()) {
        ((DefaultTreeModel) getModel()).removeNodeFromParent(onode);
    }
    // insert, re-expand, select
    ((DefaultTreeModel) getModel()).insertNodeInto(node, parent, parent.getInsertionIndex(node));
    node.expandPaths(ConfigTree.this);
    setSelectionPath(new TreePath(node.getPath()));
    return true;
}
