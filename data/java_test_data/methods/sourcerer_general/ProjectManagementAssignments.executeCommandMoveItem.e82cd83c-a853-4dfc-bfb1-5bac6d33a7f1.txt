public synchronized String executeCommandMoveItem(ActionContext context) {
    Connection db = null;
    // Parameters
    String projectId = context.getRequest().getParameter("pid");
    String requirementId = context.getRequest().getParameter("rid");
    String assignmentId = context.getRequest().getParameter("aid");
    String folderId = context.getRequest().getParameter("folderId");
    String direction = context.getRequest().getParameter("dir");
    try {
        // this.checkReturnPage(context);
        db = getConnection(context);
        // Load the project and permissions
        Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
        if (!hasProjectAccess(context, thisProject.getId(), "project-plan-outline-modify")) {
            return "PermissionError";
        }
        // Configure the item to be moved
        RequirementMapItem mapItem = new RequirementMapItem();
        mapItem.setProjectId(Integer.parseInt(projectId));
        mapItem.setRequirementId(Integer.parseInt(requirementId));
        mapItem.setFolderId(DatabaseUtils.parseInt(folderId, -1));
        mapItem.setAssignmentId(DatabaseUtils.parseInt(assignmentId, -1));
        try {
            db.setAutoCommit(false);
            if ("r".equals(direction)) {
                mapItem.moveRight(db);
            } else if ("l".equals(direction)) {
                mapItem.moveLeft(db);
            } else if ("u".equals(direction)) {
                mapItem.moveUp(db);
            } else if ("d".equals(direction)) {
                mapItem.moveDown(db);
            }
            db.commit();
        } catch (SQLException e) {
            db.rollback();
        } finally {
            db.setAutoCommit(true);
        }
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("SystemError");
    } finally {
        freeConnection(context, db);
    }
    return "MoveItemOK";
}
