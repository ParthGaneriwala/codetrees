public void getNextImage(LEDataInputStream in, AdaptiveRasterImage ji) throws JimiException, IOException {
    byte b;
    // indicates have decoded image
    boolean imageDecoded = false;
    AdaptiveRasterImage loadingJI = createAdaptiveRasterImage();
    int len;
    while (true) {
        if (// if inside loop
        gotPrevImageSeperator_)
            b = IMAGE_SEPERATOR;
        else
            b = in.readByte();
        switch(b) {
            case IMAGE_SEPERATOR:
                if (// allready decode image - next is waiting now.
                imageDecoded) {
                    gotPrevImageSeperator_ = true;
                    return;
                }
                GIFImageDescriptor gifImageD = new GIFImageDescriptor(in);
                imageDescriptor_ = gifImageD;
                initJimiImage(gifImageD, loadingJI);
                decodeImage(in, gifImageD, loadingJI);
                loadingJI.addFullCoverage();
                addImageDelta(gifImageD, loadingJI, ji_);
                gifGraphicExt_ = null;
                imageDecoded = true;
                gotPrevImageSeperator_ = false;
                break;
            case // all done.
            TRAILER:
                // indicate no more images
                state_ &= ~MOREIMAGES;
                gotPrevImageSeperator_ = false;
                gifGraphicExt_ = null;
                return;
            case EXTENSION_INTRODUCER:
                // get Lable on Extensions
                b = dIn_.readByte();
                // handle label
                switch(b) {
                    // ignored
                    case PLAINTEXT_EXTENSION:
                    case // ignored
                    APPLICATION_EXTENSION:
                        int blockSize = in.readByte();
                        byte[] block = new byte[blockSize];
                        in.readFully(block);
                        String blockString = new String(block);
                        // netscape extension block?
                        if (blockString.equals("NETSCAPE2.0")) {
                            int subBlockSize = in.read();
                            byte[] subBlock = new byte[subBlockSize];
                            for (int i = 0; i < subBlock.length; i++) {
                                subBlock[i] = (byte) in.read();
                            }
                            // check for number of loops extension
                            if ((subBlockSize == 3) && (subBlock[0] == 1)) {
                                numberOfLoops_ = (((int) subBlock[2]) & 0xff) << 8;
                                numberOfLoops_ |= ((int) subBlock[1]) & 0xff;
                                if (numberOfLoops_ != 0) {
                                    numberOfLoops_++;
                                }
                            }
                        }
                        while (// skip data blocks
                        (len = in.readUnsignedByte()) != 0) in.skip(len);
                        break;
                    case COMMENT_EXTENSION:
                        if (// only pickup first comment
                        comment_ == null) {
                            byte[] tmp;
                            while (// skip data blocks
                            (len = in.readUnsignedByte()) != 0) {
                                tmp = new byte[len];
                                in.readFully(tmp);
                                // 1.0 compatibility
                                comment_ = comment_ + new String(tmp, 0);
                            }
                        } else {
                            // skip comment data
                            while ((len = in.readUnsignedByte()) != 0) in.skip(len);
                        }
                        break;
                    case GRAPHIC_CONTROL_EXTENSION:
                        gifGraphicExt_ = new GIFGraphicExt(in);
                        break;
                }
                break;
            default:
        }
    }
}
