public void testCustomIsRunning() {
    final Lifecycle mock = EasyMock.createStrictMock(Lifecycle.class);
    final AtomicBoolean running = new AtomicBoolean(true);
    final Lifecycle stub = new TestLifecycle(mock) {

        @Override
        public boolean isRunning() {
            return running.get();
        }
    };
    mock.stop();
    mock.stop();
    mock.start();
    mock.start();
    mock.stop();
    mock.stop();
    mock.stop();
    mock.start();
    mock.stop();
    EasyMock.replay(mock);
    running.set(true);
    // no-op
    stub.start();
    // stop
    stub.stop();
    // stop
    stub.stop();
    running.set(false);
    // no-op
    stub.stop();
    // start
    stub.start();
    // start
    stub.start();
    // stop
    stub.stop();
    running.set(true);
    // stop
    stub.stop();
    // stop
    stub.stop();
    running.set(false);
    // start
    stub.start();
    // stop
    stub.stop();
    // noop
    stub.stop();
    EasyMock.verify(mock);
}
