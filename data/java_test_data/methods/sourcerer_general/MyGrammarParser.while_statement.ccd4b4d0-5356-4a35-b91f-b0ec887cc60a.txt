// $ANTLR start "while_statement"
public final MyGrammarParser.while_statement_return while_statement() throws RecognitionException {
    MyGrammarParser.while_statement_return retval = new MyGrammarParser.while_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token WHILE54 = null;
    Token DO56 = null;
    Token END58 = null;
    MyGrammarParser.expression_return expression55 = null;
    MyGrammarParser.statement_sequence_return statement_sequence57 = null;
    CommonTree WHILE54_tree = null;
    CommonTree DO56_tree = null;
    CommonTree END58_tree = null;
    RewriteRuleTokenStream stream_DO = new RewriteRuleTokenStream(adaptor, "token DO");
    RewriteRuleTokenStream stream_WHILE = new RewriteRuleTokenStream(adaptor, "token WHILE");
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_statement_sequence = new RewriteRuleSubtreeStream(adaptor, "rule statement_sequence");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:189:2: ( WHILE expression DO statement_sequence END -> ^( WHILE_STATEMENT expression statement_sequence ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:189:4: WHILE expression DO statement_sequence END
        {
            WHILE54 = (Token) match(input, WHILE, FOLLOW_WHILE_in_while_statement1383);
            stream_WHILE.add(WHILE54);
            pushFollow(FOLLOW_expression_in_while_statement1385);
            expression55 = expression();
            state._fsp--;
            stream_expression.add(expression55.getTree());
            DO56 = (Token) match(input, DO, FOLLOW_DO_in_while_statement1387);
            stream_DO.add(DO56);
            pushFollow(FOLLOW_statement_sequence_in_while_statement1389);
            statement_sequence57 = statement_sequence();
            state._fsp--;
            stream_statement_sequence.add(statement_sequence57.getTree());
            END58 = (Token) match(input, END, FOLLOW_END_in_while_statement1391);
            stream_END.add(END58);
            // AST REWRITE
            // elements: expression, statement_sequence
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 189:47: -> ^( WHILE_STATEMENT expression statement_sequence )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:189:50: ^( WHILE_STATEMENT expression statement_sequence )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(WHILE_STATEMENT, "WHILE_STATEMENT"), root_1);
                    adaptor.addChild(root_1, stream_expression.nextTree());
                    adaptor.addChild(root_1, stream_statement_sequence.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
