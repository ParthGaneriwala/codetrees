private void openServerSocket() throws Exception {
    String address;
    int port;
    String[] candidateAddrs;
    String emsg;
    StopWatch sw;
    printWithThread("openServerSocket() entered");
    if (isTls()) {
        printWithThread("Requesting TLS/SSL-encrypted JDBC");
    }
    sw = new StopWatch();
    socketFactory = HsqlSocketFactory.getInstance(isTls());
    address = getAddress();
    port = getPort();
    if (org.hsqldb.lib.StringUtil.isEmpty(address) || ServerConstants.SC_DEFAULT_ADDRESS.equalsIgnoreCase(address.trim())) {
        socket = socketFactory.createServerSocket(port);
    } else {
        try {
            socket = socketFactory.createServerSocket(port, address);
        } catch (UnknownHostException e) {
            candidateAddrs = ServerConfiguration.listLocalInetAddressNames();
            int messageID;
            Object[] messageParameters;
            if (candidateAddrs.length > 0) {
                messageID = ErrorCode.M_SERVER_OPEN_SERVER_SOCKET_1;
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < candidateAddrs.length; i++) {
                    if (sb.length() > 0) {
                        sb.append(", ");
                    }
                    sb.append(candidateAddrs[i]);
                }
                messageParameters = new Object[] { address, sb.toString() };
            } else {
                messageID = ErrorCode.M_SERVER_OPEN_SERVER_SOCKET_2;
                messageParameters = new Object[] { address };
            }
            throw new UnknownHostException(Error.getMessage(messageID, 0, messageParameters));
        }
    }
    /*
         * Following line necessary for Java 1.3 on UNIX.  See accept()
         * comment elsewhere in this file.
         */
    socket.setSoTimeout(1000);
    printWithThread("Got server socket: " + socket);
    print(sw.elapsedTimeToMessage("Server socket opened successfully"));
    if (socketFactory.isSecure()) {
        print("Using TLS/SSL-encrypted JDBC");
    }
    printWithThread("openServerSocket() exiting");
}
