public void test12(Model m) {
    String test = "Test12";
    int n = 0;
    try {
        StmtIterator iter;
        // System.out.println("Beginning " + test);
        Resource r = m.createResource();
        boolean tvBoolean = true;
        byte tvByte = 1;
        short tvShort = 2;
        int tvInt = -1;
        long tvLong = -2;
        char tvChar = '!';
        float tvFloat = (float) 123.456;
        double tvDouble = -123.456;
        String tvString = "test 12 string";
        LitTestObj tvObject = new LitTestObj(12345);
        Literal tvLiteral = m.createLiteral("test 12 string 2");
        Resource tvResource = m.createResource();
        String lang = "en";
        Statement stmt;
        n = 100;
        n++;
        if (!r.addLiteral(RDF.value, tvByte).hasLiteral(RDF.value, tvByte))
            error(test, n);
        n++;
        if (!r.addLiteral(RDF.value, tvShort).hasLiteral(RDF.value, tvShort))
            error(test, n);
        n++;
        if (!r.addLiteral(RDF.value, tvInt).hasLiteral(RDF.value, tvInt))
            error(test, n);
        n++;
        if (!r.addLiteral(RDF.value, tvLong).hasLiteral(RDF.value, tvLong))
            error(test, n);
        n++;
        if (!r.addLiteral(RDF.value, tvChar).hasLiteral(RDF.value, tvChar))
            error(test, n);
        n++;
        if (!r.addLiteral(RDF.value, tvFloat).hasLiteral(RDF.value, tvFloat))
            error(test, n);
        n++;
        if (!r.addLiteral(RDF.value, tvDouble).hasLiteral(RDF.value, tvDouble))
            error(test, n);
        n++;
        if (!r.addProperty(RDF.value, tvString).hasProperty(RDF.value, tvString))
            error(test, n);
        n++;
        if (!r.addProperty(RDF.value, tvString, lang).hasProperty(RDF.value, tvString, lang))
            error(test, n);
        n++;
        if (!r.addLiteral(RDF.value, tvObject).hasLiteral(RDF.value, tvObject))
            error(test, n);
        n++;
        if (!r.addProperty(RDF.value, tvLiteral).hasProperty(RDF.value, tvLiteral))
            error(test, n);
        n++;
        if (!r.addProperty(RDF.value, tvResource).hasProperty(RDF.value, tvResource))
            error(test, n);
        n++;
        if (!r.getRequiredProperty(RDF.value).getSubject().equals(r))
            error(test, n);
        n++;
        try {
            r.getRequiredProperty(RDF.type);
            error(test, n);
        } catch (PropertyNotFoundException e) {
        // as expected
        }
        n++;
        iter = r.listProperties(RDF.value);
        int count = 0;
        while (iter.hasNext()) {
            stmt = iter.nextStatement();
            if (!stmt.getSubject().equals(r))
                error(test, n);
            count++;
        }
        n++;
        if (count != 12)
            error(test, n);
        n++;
        iter = r.listProperties(RDF.type);
        count = 0;
        while (iter.hasNext()) {
            stmt = iter.nextStatement();
            if (!stmt.getSubject().equals(r))
                error(test, n);
            count++;
        }
        n++;
        if (count != 0)
            error(test, n);
        n++;
        iter = r.listProperties();
        count = 0;
        while (iter.hasNext()) {
            stmt = iter.nextStatement();
            if (!stmt.getSubject().equals(r))
                error(test, n);
            count++;
        }
        n++;
        if (count != 12)
            error(test, n);
        n++;
        r.removeProperties();
        n++;
        Model mm = m.query(new SimpleSelector(r, null, (RDFNode) null));
        if (!(mm.size() == 0))
            error(test, n);
    } catch (Exception e) {
        logger.error("test " + test + "[" + n + "]", e);
        errors = true;
    }
// System.out.println("End of " + test);
}
