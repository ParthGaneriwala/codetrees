public void calcNewStats() {
    double simpleSum = 0;
    double squaredSum = 0;
    double toTheThirdSum = 0;
    double toTheFourthSum = 0;
    double varianceCirculation = 0;
    double thirdCentralMoment = 0;
    double fourthCentralMoment = 0;
    double V = 0;
    double circulation = 0;
    double averageCirculation = 0;
    double medianCirculation = 0;
    double stdevCirculation = 0;
    double skewnessCirculation = 0;
    double kurtosisCirculation = 0;
    double inequalityLM = 0;
    circulation = 0;
    for (int i = 1; i < maxID; i++) {
        circulation = circulation + bestChipsList[i].getTotalValue();
    }
    averageCirculation = circulation / (maxID - 1);
    medianCirculation = (int) ((bestChipsList[(int) (Math.floor((double) (((maxID - 1.0) / 2.0))))].getTotalValue() + bestChipsList[(int) (Math.floor((double) (((maxID - 1.0) / 2.0) + 1)))].getTotalValue()) / 2.0);
    for (int i = 1; i < maxID; i++) {
        simpleSum = simpleSum + bestChipsList[i].getTotalValue();
        squaredSum = squaredSum + Math.pow((bestChipsList[i].getTotalValue() - averageCirculation), 2.0);
        toTheThirdSum = toTheThirdSum + Math.pow((bestChipsList[i].getTotalValue() - averageCirculation), 3.0);
        toTheFourthSum = toTheFourthSum + Math.pow((bestChipsList[i].getTotalValue() - averageCirculation), 4.0);
        V = V + (simpleSum / circulation);
    }
    varianceCirculation = squaredSum / (maxID - 1);
    thirdCentralMoment = toTheThirdSum / (maxID - 1);
    fourthCentralMoment = toTheFourthSum / (maxID - 1);
    stdevCirculation = Math.sqrt(varianceCirculation);
    skewnessCirculation = thirdCentralMoment / (Math.pow(varianceCirculation, 1.5));
    kurtosisCirculation = fourthCentralMoment / (Math.pow(varianceCirculation, 2.0));
    V = V - 0.5;
    inequalityLM = 1 - ((2 * V - 1) / (maxID - 2));
    circulationCurrent = (int) (Math.floor(circulation));
    stdevCurrent = (int) (Math.floor(stdevCirculation));
    averageCurrent = ((int) (averageCirculation * 100)) / 100.0;
    medianCurrent = ((int) (medianCirculation * 100)) / 100.0;
    skewnessCurrent = ((int) (skewnessCirculation * 10000)) / 10000.0;
    kurtosisCurrent = ((int) (kurtosisCirculation * 10000)) / 10000.0;
    inequalityCurrent = ((int) (inequalityLM * 10000)) / 10000.0;
}
