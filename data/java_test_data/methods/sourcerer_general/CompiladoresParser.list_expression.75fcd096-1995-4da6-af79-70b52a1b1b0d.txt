// $ANTLR start "list_expression"
public final CompiladoresParser.list_expression_return list_expression() throws RecognitionException {
    CompiladoresParser.list_expression_return retval = new CompiladoresParser.list_expression_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token COMMA113 = null;
    CompiladoresParser.expression_return expression112 = null;
    CompiladoresParser.expression_return expression114 = null;
    CommonTree COMMA113_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    try {
        dbg.enterRule(getGrammarFileName(), "list_expression");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(160, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:160:19: ( expression ( COMMA expression )* -> expression ( expression )* )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:160:21: expression ( COMMA expression )*
            {
                dbg.location(160, 21);
                pushFollow(FOLLOW_expression_in_list_expression1293);
                expression112 = expression();
                state._fsp--;
                stream_expression.add(expression112.getTree());
                dbg.location(160, 31);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:160:31: ( COMMA expression )*
                try {
                    dbg.enterSubRule(26);
                    loop26: do {
                        int alt26 = 2;
                        try {
                            dbg.enterDecision(26);
                            int LA26_0 = input.LA(1);
                            if ((LA26_0 == COMMA)) {
                                alt26 = 1;
                            }
                        } finally {
                            dbg.exitDecision(26);
                        }
                        switch(alt26) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:160:32: COMMA expression
                                {
                                    dbg.location(160, 32);
                                    COMMA113 = (Token) match(input, COMMA, FOLLOW_COMMA_in_list_expression1295);
                                    stream_COMMA.add(COMMA113);
                                    dbg.location(160, 38);
                                    pushFollow(FOLLOW_expression_in_list_expression1297);
                                    expression114 = expression();
                                    state._fsp--;
                                    stream_expression.add(expression114.getTree());
                                }
                                break;
                            default:
                                break loop26;
                        }
                    } while (true);
                } finally {
                    dbg.exitSubRule(26);
                }
                // AST REWRITE
                // elements: expression, expression
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 161:5: -> expression ( expression )*
                {
                    dbg.location(161, 8);
                    adaptor.addChild(root_0, stream_expression.nextTree());
                    dbg.location(161, 18);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:161:18: ( expression )*
                    while (stream_expression.hasNext()) {
                        dbg.location(161, 19);
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    stream_expression.reset();
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(162, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "list_expression");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
