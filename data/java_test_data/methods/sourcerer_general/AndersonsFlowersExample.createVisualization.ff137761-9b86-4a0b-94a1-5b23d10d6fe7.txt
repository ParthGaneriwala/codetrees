private void createVisualization(Flower[] flowers) {
    final String[] species = new String[] { "setosa", "versicolor", "virginica" };
    final String[] traits = new String[] { SEPAL_LENGTH, SEPAL_WIDTH, PETAL_LENGTH, PETAL_WIDTH };
    /* Size parameters. */
    final int size = 150;
    final int padding = 20;
    /* Scales for color and position. */
    final PVOrdinalScale color = PV.colors("rgba(50%, 0%, 0%, .5)", "rgba(0%, 50%, 0%, .5)", "rgba(0%, 0%, 50%, .5)");
    final Map<String, PVLinearScale> position = new HashMap<String, PVLinearScale>();
    putTraitScale(position, flowers, SEPAL_LENGTH, size);
    putTraitScale(position, flowers, SEPAL_WIDTH, size);
    putTraitScale(position, flowers, PETAL_LENGTH, size);
    putTraitScale(position, flowers, PETAL_WIDTH, size);
    /* Root panel. */
    PVPanel vis = getPVPanel().width((size + padding) * traits.length).height((size + padding) * traits.length + padding).left(10).top(5);
    /* One cell per trait pair. */
    JsDoubleFunction panelPosition = new JsDoubleFunction() {

        public double f(JsArgs args) {
            PVPanel _this = args.getThis();
            return _this.index() * (size + padding) + padding / 2;
        }
    };
    final PVPanel cell = vis.add(PV.Panel).data(traits).top(panelPosition).height(size).add(PV.Panel).data(new JsFunction<JsArrayGeneric<TraitPair>>() {

        public JsArrayGeneric<TraitPair> f(JsArgs args) {
            String d = args.getObject();
            JsArrayGeneric<TraitPair> result = JsUtils.createJsArrayGeneric();
            for (int i = 0; i < traits.length; i++) {
                result.push(new TraitPair(traits[i], d));
            }
            return result;
        }
    }).left(panelPosition).width(size);
    /* Framed dot plots not along the diagonal. */
    PVPanel plot = cell.add(PV.Panel).visible(new JsBooleanFunction() {

        public boolean f(JsArgs args) {
            TraitPair d = args.getObject(0);
            return !d.px.equals(d.py);
        }
    }).strokeStyle("#aaa");
    /* X-axis ticks. */
    PVRule xtick = plot.add(PV.Rule).data(new JsFunction<JavaScriptObject>() {

        public JavaScriptObject f(JsArgs args) {
            TraitPair t = args.getObject();
            return position.get(t.px).ticks(5);
        }
    }).left(new JsDoubleFunction() {

        public double f(JsArgs args) {
            double d = args.getDouble();
            TraitPair t = args.getObject(1);
            return position.get(t.px).fd(d);
        }
    }).strokeStyle("#eee");
    /* Bottom label. */
    xtick.anchor(BOTTOM).add(PV.Label).visible(new JsBooleanFunction() {

        public boolean f(JsArgs args) {
            return (cell.parent().index() == traits.length - 1) && (cell.index() % 2 == 0);
        }
    }).text(new JsStringFunction() {

        public String f(JsArgs args) {
            double d = args.getDouble();
            TraitPair t = args.getObject(1);
            return position.get(t.px).tickFormatDouble(d);
        }
    });
    /* Top label. */
    xtick.anchor(TOP).add(PV.Label).visible(new JsBooleanFunction() {

        public boolean f(JsArgs args) {
            return (cell.parent().index() == 0) && (cell.index() % 2 == 1);
        }
    }).text(new JsStringFunction() {

        public String f(JsArgs args) {
            double d = args.getDouble(0);
            TraitPair t = args.getObject(1);
            return position.get(t.px).tickFormatDouble(d);
        }
    });
    /* Y-axis ticks. */
    PVRule ytick = plot.add(PV.Rule).data(new JsFunction<JavaScriptObject>() {

        public JavaScriptObject f(JsArgs args) {
            TraitPair t = args.getObject(0);
            return position.get(t.py).ticks(5);
        }
    }).bottom(new JsDoubleFunction() {

        public double f(JsArgs args) {
            double d = args.getDouble(0);
            TraitPair t = args.getObject(1);
            return position.get(t.py).fd(d);
        }
    }).strokeStyle("#eee");
    /* Left label. */
    ytick.anchor(LEFT).add(PV.Label).visible(new JsBooleanFunction() {

        public boolean f(JsArgs args) {
            return (cell.index() == 0) && (cell.parent().index() % 2 == 1);
        }
    }).text(new JsStringFunction() {

        public String f(JsArgs args) {
            double d = args.getDouble(0);
            TraitPair t = args.getObject(1);
            return position.get(t.py).tickFormatDouble(d);
        }
    });
    /* Right label. */
    ytick.anchor(RIGHT).add(PV.Label).visible(new JsBooleanFunction() {

        public boolean f(JsArgs args) {
            return (cell.index() == traits.length - 1) && (cell.parent().index() % 2 == 0);
        }
    }).text(new JsStringFunction() {

        public String f(JsArgs args) {
            double d = args.getDouble(0);
            TraitPair t = args.getObject(1);
            return position.get(t.py).tickFormatDouble(d);
        }
    });
    /* Frame and dot plot. */
    plot.add(PV.Dot).data(flowers).left(new JsDoubleFunction() {

        public double f(JsArgs args) {
            Flower d = args.getObject(0);
            TraitPair t = args.getObject(1);
            return position.get(t.px).fd(d.getTraitValue(t.px));
        }
    }).bottom(new JsDoubleFunction() {

        public double f(JsArgs args) {
            Flower d = args.getObject(0);
            TraitPair t = args.getObject(1);
            return position.get(t.py).fd(d.getTraitValue(t.py));
        }
    }).size(10).strokeStyle((String) null).fillStyle(new JsFunction<PVColor>() {

        public PVColor f(JsArgs args) {
            Flower d = args.getObject(0);
            return color.fcolor(d.species);
        }
    });
    /* Labels along the diagonal. */
    cell.anchor(CENTER).add(PV.Label).visible(new JsBooleanFunction() {

        public boolean f(JsArgs args) {
            TraitPair t = args.getObject(0);
            return t.px.equals(t.py);
        }
    }).font("bold 14px sans-serif").text(new JsStringFunction() {

        public String f(JsArgs args) {
            TraitPair t = args.getObject(0);
            return t.px;
        }
    });
    /* Legend. */
    vis.add(PV.Dot).data(species).bottom(10).left(new JsDoubleFunction() {

        public double f(JsArgs args) {
            PVMark _this = args.getThis();
            return 15 + _this.index() * 65;
        }
    }).size(8).strokeStyle((String) null).fillStyle(new JsFunction<PVColor>() {

        public PVColor f(JsArgs args) {
            String d = args.getObject(0);
            return color.fcolor(d);
        }
    }).anchor(RIGHT).add(PV.Label);
}
