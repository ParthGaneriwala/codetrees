// $ANTLR start "corpo_return"
public final gramaticaMM2Parser.corpo_return_return corpo_return() throws RecognitionException {
    gramaticaMM2Parser.corpo_return_return retval = new gramaticaMM2Parser.corpo_return_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token BEGIN67 = null;
    Token RETURN69 = null;
    Token SEMICOLON71 = null;
    Token END72 = null;
    gramaticaMM2Parser.lista_comandos_return lista_comandos68 = null;
    gramaticaMM2Parser.expressao_return expressao70 = null;
    CommonTree BEGIN67_tree = null;
    CommonTree RETURN69_tree = null;
    CommonTree SEMICOLON71_tree = null;
    CommonTree END72_tree = null;
    RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleTokenStream stream_BEGIN = new RewriteRuleTokenStream(adaptor, "token BEGIN");
    RewriteRuleTokenStream stream_RETURN = new RewriteRuleTokenStream(adaptor, "token RETURN");
    RewriteRuleSubtreeStream stream_lista_comandos = new RewriteRuleSubtreeStream(adaptor, "rule lista_comandos");
    RewriteRuleSubtreeStream stream_expressao = new RewriteRuleSubtreeStream(adaptor, "rule expressao");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:115:16: ( BEGIN ( ( lista_comandos )* ) RETURN expressao SEMICOLON END -> ^( BODY_RETURN ( lista_comandos )* expressao ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:115:20: BEGIN ( ( lista_comandos )* ) RETURN expressao SEMICOLON END
        {
            BEGIN67 = (Token) match(input, BEGIN, FOLLOW_BEGIN_in_corpo_return1003);
            stream_BEGIN.add(BEGIN67);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:115:26: ( ( lista_comandos )* )
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:115:27: ( lista_comandos )*
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:115:27: ( lista_comandos )*
                loop12: do {
                    int alt12 = 2;
                    int LA12_0 = input.LA(1);
                    if ((LA12_0 == IF || (LA12_0 >= CASE && LA12_0 <= WHILE) || (LA12_0 >= WRITEINT && LA12_0 <= WRITELN) || LA12_0 == LETTER)) {
                        alt12 = 1;
                    }
                    switch(alt12) {
                        case 1:
                            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:115:27: lista_comandos
                            {
                                pushFollow(FOLLOW_lista_comandos_in_corpo_return1006);
                                lista_comandos68 = lista_comandos();
                                state._fsp--;
                                stream_lista_comandos.add(lista_comandos68.getTree());
                            }
                            break;
                        default:
                            break loop12;
                    }
                } while (true);
            }
            RETURN69 = (Token) match(input, RETURN, FOLLOW_RETURN_in_corpo_return1010);
            stream_RETURN.add(RETURN69);
            pushFollow(FOLLOW_expressao_in_corpo_return1012);
            expressao70 = expressao();
            state._fsp--;
            stream_expressao.add(expressao70.getTree());
            SEMICOLON71 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_corpo_return1014);
            stream_SEMICOLON.add(SEMICOLON71);
            END72 = (Token) match(input, END, FOLLOW_END_in_corpo_return1016);
            stream_END.add(END72);
            // AST REWRITE
            // elements: lista_comandos, expressao
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 115:74: -> ^( BODY_RETURN ( lista_comandos )* expressao )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:116:3: ^( BODY_RETURN ( lista_comandos )* expressao )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(BODY_RETURN, "BODY_RETURN"), root_1);
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:116:17: ( lista_comandos )*
                    while (stream_lista_comandos.hasNext()) {
                        adaptor.addChild(root_1, stream_lista_comandos.nextTree());
                    }
                    stream_lista_comandos.reset();
                    adaptor.addChild(root_1, stream_expressao.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
