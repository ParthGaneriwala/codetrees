/*
	 * Saving Entity
	 */
@SuppressWarnings("unchecked")
public T makePersistent(T entity, Object... argvs) {
    PersistenceManager pm = ClaymusMain.getPersistenceManager();
    Transaction tx = pm.currentTransaction();
    T datastoreEntity = null;
    try {
        for (int i = 0; i < this.retryCount; i++) {
            if (i != 0)
                Thread.sleep(this.retryInterval);
            try {
                tx.begin();
                try {
                    datastoreEntity = (T) pm.getObjectById(entity.getClass(), entity.getKey());
                    if (!updateEntity(datastoreEntity, argvs)) {
                        // Nothing to update
                        datastoreEntity.detachFields(pm);
                        return pm.detachCopy(datastoreEntity);
                    }
                    pm.makePersistent(datastoreEntity);
                } catch (JDOObjectNotFoundException ex) {
                    if (// Nothing to update
                    !updateEntity(entity, argvs))
                        return entity;
                    pm.makePersistent(entity);
                    datastoreEntity = entity;
                }
                tx.commit();
                datastoreEntity.detachFields(pm);
                entity = pm.detachCopy(datastoreEntity);
                if (entity.cache())
                    Memcache.put(entity.getKey(), entity);
                if (entity.cacheLocally())
                    Localcache.put(entity.getKey(), entity);
                return entity;
            // } catch(JDODataStoreException ex) {
            } catch (JDOException ex) {
                ClaymusMain.logger.warning(ex.getMessage());
                if (tx.isActive()) {
                    tx.rollback();
                }
            }
        }
    } catch (CapabilityDisabledException ex) {
        ClaymusMain.logger.log(Level.SEVERE, null, ex);
    } catch (InterruptedException ex) {
        ClaymusMain.logger.log(Level.SEVERE, null, ex);
    } finally {
        if (tx.isActive()) {
            tx.rollback();
        }
        pm.close();
    }
    return null;
}
