public void testOptionNegotiation() throws Exception {
    boolean negotiation1_ok = false;
    byte[] buffread1 = new byte[6];
    byte[] send1 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) 15 };
    byte[] expected1 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) 15, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) 15 };
    boolean negotiation2_ok = false;
    byte[] buffread2 = new byte[9];
    byte[] send2 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] expected2 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.ECHO, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] buffread2b = new byte[11];
    byte[] send2b = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 1, (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE };
    byte[] expected2b = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 0, (byte) 'V', (byte) 'T', (byte) '1', (byte) '0', (byte) '0', (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE };
    boolean negotiation3_ok = false;
    byte[] buffread3 = new byte[6];
    byte[] send3 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC, (byte) TelnetCommand.DO, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] expected3 = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.WILL, (byte) TelnetOption.TERMINAL_TYPE, (byte) TelnetCommand.IAC, (byte) TelnetCommand.WONT, (byte) TelnetOption.SUPPRESS_GO_AHEAD };
    byte[] buffread3b = new byte[10];
    byte[] send3b = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 1, (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE };
    byte[] expected3b = { (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) TelnetOption.TERMINAL_TYPE, (byte) 0, (byte) 'A', (byte) 'N', (byte) 'S', (byte) 'I', (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE };
    InputStream is1 = STANDARD.server.getInputStream();
    OutputStream os1 = STANDARD.server.getOutputStream();
    is1.skip(is1.available());
    os1.write(send1);
    os1.flush();
    Thread.sleep(1000);
    if (is1.available() == 6) {
        is1.read(buffread1);
        if (equalBytes(buffread1, expected1))
            negotiation1_ok = true;
    }
    InputStream is2 = OPTIONS.server.getInputStream();
    OutputStream os2 = OPTIONS.server.getOutputStream();
    Thread.sleep(1000);
    is2.skip(is2.available());
    os2.write(send2);
    os2.flush();
    Thread.sleep(1000);
    if (is2.available() == 9) {
        is2.read(buffread2);
        if (equalBytes(buffread2, expected2))
            negotiation2_ok = true;
        if (negotiation2_ok) {
            negotiation2_ok = false;
            os2.write(send2b);
            os2.flush();
            Thread.sleep(1000);
            if (is2.available() == 11) {
                is2.read(buffread2b);
                if (equalBytes(buffread2b, expected2b))
                    negotiation2_ok = true;
            }
        }
    }
    InputStream is3 = ANSI.server.getInputStream();
    OutputStream os3 = ANSI.server.getOutputStream();
    Thread.sleep(1000);
    is3.skip(is3.available());
    os3.write(send3);
    os3.flush();
    Thread.sleep(1000);
    if (is3.available() == 6) {
        is3.read(buffread3);
        if (equalBytes(buffread3, expected3))
            negotiation3_ok = true;
        if (negotiation3_ok) {
            negotiation3_ok = false;
            os3.write(send3b);
            os3.flush();
            Thread.sleep(1000);
            if (is3.available() == 10) {
                is3.read(buffread3b);
                if (equalBytes(buffread3b, expected3b))
                    negotiation3_ok = true;
            }
        }
    }
    assertTrue(negotiation1_ok);
    assertTrue(negotiation2_ok);
    assertTrue(negotiation3_ok);
    assertTrue(!STANDARD.client.getLocalOptionState(15));
    assertTrue(!STANDARD.client.getRemoteOptionState(15));
    assertTrue(!STANDARD.client.getLocalOptionState(TelnetOption.TERMINAL_TYPE));
    assertTrue(!OPTIONS.client.getLocalOptionState(TelnetOption.ECHO));
    assertTrue(!OPTIONS.client.getRemoteOptionState(TelnetOption.ECHO));
    assertTrue(OPTIONS.client.getLocalOptionState(TelnetOption.SUPPRESS_GO_AHEAD));
    assertTrue(!OPTIONS.client.getRemoteOptionState(TelnetOption.SUPPRESS_GO_AHEAD));
    assertTrue(OPTIONS.client.getLocalOptionState(TelnetOption.TERMINAL_TYPE));
    assertTrue(ANSI.client.getLocalOptionState(TelnetOption.TERMINAL_TYPE));
    assertTrue(!OPTIONS.client.getLocalOptionState(TelnetOption.ECHO));
}
