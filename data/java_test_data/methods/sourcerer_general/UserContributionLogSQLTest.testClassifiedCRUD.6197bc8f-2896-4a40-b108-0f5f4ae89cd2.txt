public void testClassifiedCRUD() throws SQLException {
    // Insert project so that it can be referred to by the test
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test testContributionCalculationForAdsPlaced");
    project.setRequestDate(new Timestamp(System.currentTimeMillis() - 10));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setApprovalDate(new Timestamp(System.currentTimeMillis() - 10));
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean projectResult = project.insert(db);
    assertTrue("Project was not inserted", projectResult);
    assertTrue("Inserted project did not have an id", project.getId() > -1);
    LookupContribution lookupContribution = new LookupContribution();
    lookupContribution.setConstant("200901101230");
    lookupContribution.setDescription("Test Description");
    assertNotNull(lookupContribution);
    boolean result = lookupContribution.insert(db);
    assertTrue("Contribution was not inserted", result);
    assertTrue("Contribution did not have an id", lookupContribution.getId() > -1);
    // Insert user contribution log record
    UserContributionLog userContributionLog = new UserContributionLog();
    userContributionLog.setUserId(USER_ID);
    userContributionLog.setProjectId(project.getId());
    userContributionLog.setPoints(10);
    userContributionLog.setContributionId(lookupContribution.getId());
    userContributionLog.setContributionDate(new Timestamp(System.currentTimeMillis()));
    userContributionLog.setEntered(new Timestamp(System.currentTimeMillis()));
    assertNotNull(userContributionLog);
    result = userContributionLog.insert(db);
    assertTrue("UserContributionLog was not inserted", result);
    assertTrue("Inserted UserContributionLog did not have an id", userContributionLog.getId() > -1);
    // Reload the user contribution log record, then update
    int updateCount = -1;
    assertTrue(userContributionLog.getId() > -1);
    userContributionLog = new UserContributionLog(db, userContributionLog.getId());
    userContributionLog.setPoints(20);
    updateCount = userContributionLog.update(db);
    assertTrue("The UserContributionLog was not updated by the database", updateCount == 1);
    // Find the user contribution log record
    int userContributionId = userContributionLog.getId();
    userContributionLog = null;
    UserContributionLogList userContributionLogList = new UserContributionLogList();
    userContributionLogList.setUserId(USER_ID);
    userContributionLogList.buildList(db);
    assertTrue(userContributionLogList.size() > 0);
    Iterator<UserContributionLog> i = userContributionLogList.iterator();
    while (i.hasNext()) {
        UserContributionLog thisUserContributionLog = i.next();
        if (thisUserContributionLog.getId() == userContributionId) {
            userContributionLog = thisUserContributionLog;
            break;
        }
    }
    assertNotNull(userContributionLog);
    // Delete the user contribution log record
    assertNotNull(userContributionLog);
    userContributionLog.delete(db);
    userContributionId = userContributionLog.getId();
    userContributionLog = null;
    // Try to find the previously deleted user contribution log record
    userContributionLogList = new UserContributionLogList();
    userContributionLogList.setId(userContributionId);
    userContributionLogList.buildList(db);
    Iterator<UserContributionLog> ij = userContributionLogList.iterator();
    while (ij.hasNext()) {
        UserContributionLog thisUserContributionLog = ij.next();
        if (thisUserContributionLog.getId() == userContributionId) {
            assertNull("user contribution record exists when it shouldn't", thisUserContributionLog);
        }
    }
    // Delete test contribution
    lookupContribution.delete(db);
    project.delete(db, null);
}
