private boolean hmClusterAux() {
    ArrayList<JObjectDoubleTuple<JIntIntTuple>> list = new ArrayList<JObjectDoubleTuple<JIntIntTuple>>();
    ProbCluster cluster1, cluster2;
    double score;
    for (int i = 0; i < k_clusters.size() - 1; i++) {
        cluster1 = k_clusters.get(i);
        for (int j = i + 1; j < k_clusters.size(); j++) {
            cluster2 = k_clusters.get(j);
            score = getAvgSimilarity(cluster1, cluster2, true);
            // score    = getCtrSimilarity(cluster1,cluster2,true);
            list.add(new JObjectDoubleTuple<JIntIntTuple>(new JIntIntTuple(i, j), score));
        }
    }
    IntOpenHashSet sClustered = new IntOpenHashSet();
    ArrayList<ProbCluster> sRemove = new ArrayList<ProbCluster>();
    JIntIntTuple idx;
    Collections.sort(list);
    for (int i = 0; i < list.size(); i++) {
        JObjectDoubleTuple<JIntIntTuple> tup = list.get(i);
        if (tup.value < d_hm_lower)
            break;
        idx = tup.object;
        if (sClustered.contains(idx.int1) || sClustered.contains(idx.int2))
            continue;
        sClustered.add(idx.int1);
        sClustered.add(idx.int2);
        cluster1 = k_clusters.get(idx.int1);
        cluster2 = k_clusters.get(idx.int2);
        cluster1.addAll(cluster2);
        cluster1.set(getJoinedKey(cluster1, cluster2), tup.value);
        sRemove.add(cluster2);
    }
    k_clusters.removeAll(sRemove);
    return !sClustered.isEmpty();
}
