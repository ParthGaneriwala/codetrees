public void getJavadoc(MethodReflective method) {
    Reflective declaring = method.getDeclaringType();
    String declName = declaring.getName();
    String methodSig = buildSig(method);
    try {
        Class<?> cl = project.getClassLoader().loadClass(declName);
        View clView = View.getView(cl);
        MethodView[] methods = clView.getAllMethods();
        for (int i = 0; i < methods.length; i++) {
            if (methodSig.equals(methods[i].getSignature())) {
                Comment comment = methods[i].getComment();
                if (comment != null) {
                    method.setJavaDoc(comment.getText());
                    List<String> paramNames = new ArrayList<String>(comment.getParamCount());
                    for (int j = 0; j < comment.getParamCount(); j++) {
                        paramNames.add(comment.getParamName(j));
                    }
                    method.setParamNames(paramNames);
                    return;
                }
                break;
            }
        }
    } catch (ClassNotFoundException cnfe) {
    } catch (LinkageError e) {
    }
    Properties comments = commentCache.get(declName);
    if (comments == null) {
        comments = getCommentsFromSource(declName);
        if (comments == null) {
            return;
        }
        commentCache.put(declName, comments);
    }
    // Find the comment for the particular method we want
    for (int i = 0; ; i++) {
        String comtarget = comments.getProperty("comment" + i + ".target");
        if (comtarget == null) {
            break;
        }
        if (comtarget.equals(methodSig)) {
            method.setJavaDoc(comments.getProperty("comment" + i + ".text"));
            String paramNames = comments.getProperty("comment" + i + ".params");
            StringTokenizer tokenizer = new StringTokenizer(paramNames);
            List<String> paramNamesList = new ArrayList<String>();
            while (tokenizer.hasMoreTokens()) {
                paramNamesList.add(tokenizer.nextToken());
            }
            method.setParamNames(paramNamesList);
            break;
        }
    }
}
