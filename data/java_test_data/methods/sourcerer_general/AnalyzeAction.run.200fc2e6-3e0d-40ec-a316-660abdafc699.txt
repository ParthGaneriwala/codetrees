public void run() {
    if (taskMonitor == null) {
        throw new IllegalStateException("The Task Monitor has not been set.");
    }
    int imageSize = 80;
    if (which.equals(ParameterSet.MCODE)) {
        try {
            alg.setTaskMonitor(taskMonitor, network.getIdentifier());
            // only (re)score the graph if the scoring parameters have been changed
            if (analyze == RESCORE) {
                taskMonitor.setPercentCompleted(0);
                taskMonitor.setStatus("Step 1 of 3:Scoring the Network...");
                System.out.println("Step 1 of 3:Scoring the Network...");
                alg.scoreGraph(network, resultTitle);
                if (interrupted)
                    return;
                System.err.println("Scoring: Time spent " + alg.getLastScoreTime() + " ms.");
            }
            taskMonitor.setPercentCompleted(0);
            taskMonitor.setStatus("Step 2 of 3:Identifying Clusters...");
            complexes = alg.K_CoreFinder(network, resultTitle);
            if (interrupted)
                return;
            taskMonitor.setPercentCompleted(0);
            taskMonitor.setStatus("Step 3 of 3: Drawing the Result Network...");
            // create all the images here for the clusters, it can be a time consuming operation
            complexes = ClusterUtil.sortClusters(complexes);
            imageList = new Image[complexes.length];
            for (int i = 0; i < complexes.length; i++) {
                if (interrupted) {
                    return;
                }
                imageList[i] = ClusterUtil.convertClusterToImage(null, complexes[i], imageSize, imageSize, null, true);
                taskMonitor.setPercentCompleted((i * 100) / complexes.length);
            }
            completedSuccessfully = true;
        } catch (Exception e) {
            taskMonitor.setException(e, "Clustering cancelled!");
        }
    } else if (which.equals(ParameterSet.EAGLE)) {
        try {
            alg.setTaskMonitor(taskMonitor, network.getIdentifier());
            taskMonitor.setPercentCompleted(0);
            taskMonitor.setStatus("Step 1 of 3:Calculate all the maximal Clique...");
            complexes = alg.run(network, resultTitle);
            /*alg.getMaximalCliques(network,resultTitle);
                    System.err.println("Finding clique: Time spent " + alg.getFindCliquesTIme() + " ms.");
                    if (interrupted )
                        return;
                    taskMonitor.setPercentCompleted(0);
                    taskMonitor.setStatus("Step 2 of 3:Generating Complexes...");
                    complexes = alg.EAGLEFinder(network, resultTitle);*/
            if (interrupted)
                return;
            taskMonitor.setPercentCompleted(0);
            taskMonitor.setStatus("Step 3 of 3: Drawing the Result Network...");
            // create all the images here for the clusters, it can be a time consuming operation
            complexes = ClusterUtil.sortClusters2(complexes);
            imageList = new Image[complexes.length];
            for (int i = 0; i < complexes.length; i++) {
                if (interrupted) {
                    return;
                }
                imageList[i] = ClusterUtil.convertClusterToImage(null, complexes[i], imageSize, imageSize, null, true);
                taskMonitor.setPercentCompleted((i * 100) / complexes.length);
            }
            completedSuccessfully = true;
        } catch (Exception e) {
            taskMonitor.setException(e, "Clustering cancelled!");
        }
    } else if (which.equals(ParameterSet.FAGEC)) {
        try {
            alg.setTaskMonitor(taskMonitor, network.getIdentifier());
            /*if (analyze == FINDCLIQUE) {
                        taskMonitor.setPercentCompleted(0);
                        taskMonitor.setStatus("Step 1 of 3:Calculate all the maximal Clique...");
                        alg.getMaximalCliques(network, resultTitle);
                        if (interrupted )
                            return;
                        taskMonitor.setPercentCompleted(0);
                        taskMonitor.setStatus("Step 2 of 3:Generating Complexes...");
                        complexes=alg.FAG_ECFinder(network, resultTitle);
                        if (interrupted )
                            return;
                        taskMonitor.setPercentCompleted(0);
                        taskMonitor.setStatus("Step 3 of 3: Drawing the Result Network...");
                        //create all the images here for the clusters, it can be a time consuming operation
                        if(params.isWeak())
                        	complexes = ClusterUtil.sortClusters3(complexes);
                        else
                        	complexes=ClusterUtil.sortClusters2(complexes);
                        imageList = new Image[complexes.length];
                        for (int i = 0; i < complexes.length; i++) {
                            if (interrupted) {
                                return;
                            }
                            imageList[i] = ClusterUtil.convertClusterToImage(null, complexes[i], imageSize, imageSize, null, true);
                            taskMonitor.setPercentCompleted((i * 100) / complexes.length);
                        }
                        completedSuccessfully = true;
                    }
                    else{*/
            taskMonitor.setPercentCompleted(0);
            taskMonitor.setStatus("Step 2 of 3:Generating Complexes...");
            complexes = alg.run(network, resultTitle);
            System.err.println("After FAG-EC.Time used:" + alg.getLastFindTime());
            if (interrupted)
                return;
            taskMonitor.setPercentCompleted(0);
            taskMonitor.setStatus("Step 3 of 3: Drawing the Result Network...");
            // create all the images here for the clusters, it can be a time consuming operation
            if (params.isWeak())
                complexes = ClusterUtil.sortClusters3(complexes);
            else
                complexes = ClusterUtil.sortClusters2(complexes);
            imageList = new Image[complexes.length];
            for (int i = 0; i < complexes.length; i++) {
                if (interrupted) {
                    return;
                }
                imageList[i] = ClusterUtil.convertClusterToImage(null, complexes[i], imageSize, imageSize, null, true);
                taskMonitor.setPercentCompleted((i * 100) / complexes.length);
            }
            completedSuccessfully = true;
            // }
            if (interrupted)
                return;
        } catch (Exception e) {
            taskMonitor.setException(e, "Clustering cancelled!");
        }
    }
    setClusterAttribute();
}
