@Override
public void validing(HttpServletRequest request, ValidatedResult vr, String[] params) {
    logger.debug("开始校验");
    ColumnManager columnManager = (ColumnManager) this.getBean("columnManager");
    AreaManager areaManager = (AreaManager) this.getBean("areaManager");
    Area area = null;
    String areaId = request.getParameter("areaId");
    try {
        area = (Area) areaManager.get(areaId);
    } catch (Exception x) {
        area = null;
    }
    logger.debug("areaId: " + areaId);
    Column superColumn = null;
    String superColumnId = request.getParameter("parentId");
    try {
        superColumn = (Column) columnManager.get(superColumnId);
    } catch (Exception x) {
        superColumn = null;
    }
    logger.debug("superColumnId: " + superColumnId);
    if (area == null && superColumn == null) {
        vr.setErrMess("areaId", "一级栏目必须选定从属的分区");
        vr.setErrMess("superColumnId", "二级栏目必须指定从属的一级栏目");
        return;
    }
    String code = this.validString(request, vr, "code", 0, 50);
    logger.debug("code : " + code);
    String name = this.validString(request, vr, "name", 1, 50);
    logger.debug("name : " + name);
    String imageUrl = this.validString(request, vr, "imageUrl", 0, 50);
    logger.debug("imageUrl : " + imageUrl);
    String url = this.validString(request, vr, "url", 0, 150);
    logger.debug("url : " + url);
    String remark = this.validString(request, vr, "remark", 0, 500);
    logger.debug("remark.length() : " + remark.length());
    String[] tIds = request.getParameterValues("tIds");
    String[] tTypes = request.getParameterValues("tTypes");
    Set orgs = new LinkedHashSet();
    Set roles = new LinkedHashSet();
    Set posts = new LinkedHashSet();
    if (tIds != null && tTypes != null) {
        OrgManager orgManager = (OrgManager) this.getBean("orgManager");
        RoleManager roleManager = (RoleManager) this.getBean("roleManager");
        PostManager postManager = (PostManager) this.getBean("postManager");
        logger.debug("取得orgs - roles - posts");
        for (int i = 0; i < tIds.length; i++) {
            int type = Integer.parseInt(tTypes[i]);
            switch(type) {
                case SysFrameParams.ORG:
                    {
                        orgs.add(orgManager.get(tIds[i]));
                        break;
                    }
                case SysFrameParams.ROLE:
                    {
                        roles.add(roleManager.get(tIds[i]));
                        break;
                    }
                case SysFrameParams.POST:
                    {
                        posts.add(postManager.get(tIds[i]));
                        break;
                    }
                default:
                    {
                        throw new AosftViewFrameException("未知目标类型:" + type);
                    }
            }
        }
    }
    if (vr.isAllValidated()) {
        logger.debug("通过校验");
        Column column = new Column();
        column.setSuperColumn(superColumn);
        if (superColumn == null) {
            column.setArea(area);
        }
        column.setCode(code);
        column.setName(name);
        column.setUrl(url);
        column.setImageUrl(imageUrl);
        if (tIds != null && tTypes != null) {
            column.setOrgs(orgs);
            column.setRoles(roles);
            column.setPosts(posts);
        }
        if (superColumn == null) {
            column.setType(ColumnType.ONE_LEVEL);
        } else {
            column.setType(ColumnType.TWO_LEVEL);
        }
        column.setRemark(remark);
        request.setAttribute(Column.class.getName(), column);
    }
}
