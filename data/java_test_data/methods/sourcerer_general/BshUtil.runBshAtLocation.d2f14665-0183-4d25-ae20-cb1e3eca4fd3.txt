@SuppressWarnings("unchecked")
public static Object runBshAtLocation(String location, Map context) throws GeneralException {
    try {
        Interpreter interpreter = makeInterpreter(context);
        String script = null;
        script = (String) parsedScripts.get(location);
        if (script == null) {
            synchronized (BshUtil.class) {
                script = (String) parsedScripts.get(location);
                if (script == null) {
                    URL scriptUrl = FlexibleLocation.resolveLocation(location);
                    Reader scriptReader = new InputStreamReader(scriptUrl.openStream());
                    script = IOUtils.toString(scriptReader);
                    if (logger.isInfoEnabled()) {
                        logger.info("Caching BSH script at: " + location);
                    }
                    parsedScripts.put(location, script);
                }
            }
        }
        return interpreter.eval(script);
    } catch (MalformedURLException e) {
        String errMsg = "Error loading BSH script at [" + location + "]: " + e.toString();
        logger.error(errMsg, e);
        throw new GeneralException(errMsg, e);
    } catch (ParseException e) {
        String errMsg = "Error parsing BSH script at [" + location + "]: " + e.toString();
        logger.error(errMsg, e);
        throw new GeneralException(errMsg, e);
    } catch (IOException e) {
        String errMsg = "Error loading BSH script at [" + location + "]: " + e.toString();
        logger.error(errMsg, e);
        throw new GeneralException(errMsg, e);
    } catch (EvalError ee) {
        Throwable t = ee.getCause();
        if (t == null) {
            logger.warn("WARNING: no cause (from getCause) found for BSH EvalError: " + ee.toString(), ee);
            t = ee;
        } else {
            logger.error("ERROR: Got cause (from getCause) for BSH EvalError: " + ee.toString(), t);
        }
        String errMsg = "Error running BSH script at [" + location + "], line [" + ee.getErrorLineNumber() + "]: " + t.toString();
        // don't log the full exception, just the main message; more detail logged later
        throw new GeneralException(errMsg, t);
    }
}
