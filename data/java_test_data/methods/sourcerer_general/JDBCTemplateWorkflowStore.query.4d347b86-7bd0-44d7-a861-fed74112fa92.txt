@SuppressWarnings("unchecked")
public List query(WorkflowExpressionQuery e) throws StoreException {
    // 
    if (log.isDebugEnabled()) {
        log.debug("Starting Query");
    }
    Expression expression = e.getExpression();
    if (log.isDebugEnabled()) {
        log.debug("Have all variables");
    }
    if (expression.isNested()) {
        NestedExpression nestedExp = (NestedExpression) expression;
        StringBuffer sel = new StringBuffer();
        StringBuffer columns = new StringBuffer();
        StringBuffer leftJoin = new StringBuffer();
        StringBuffer where = new StringBuffer();
        StringBuffer whereComp = new StringBuffer();
        StringBuffer orderBy = new StringBuffer();
        List values = new LinkedList();
        List queries = new LinkedList();
        String columnName;
        String selectString;
        // Expression is nested and see if the expresion has OR
        if (checkIfORExists(nestedExp)) {
            // For doNestedLeftJoin() uncomment these -- again order is matter
            // and comment out last two lines where buildNested() is called
            // 
            // columns.append("SELECT DISTINCT (");
            // columns.append("a0" + "." + stepEntryId);
            // columnName = "retrieved";
            // columns.append(") AS " + columnName);
            // columns.append(" FROM ");
            // columns.append(currentTable + " AS " + "a0");
            // where.append("WHERE ");
            // doNestedLeftJoin(e, nestedExp, leftJoin, where, values, queries, orderBy);
            // selectString = columns.toString() + " " + leftJoin.toString() + " " + where.toString() + " " + orderBy.toString();
            // System.out.println("LEFT JOIN ...");
            // 
            // 
            columnName = buildNested(nestedExp, sel, values);
            selectString = sel.toString();
        } else {
            columns.append("SELECT DISTINCT (");
            columns.append("a1" + '.' + stepEntryId);
            columnName = "retrieved";
            columns.append(") AS " + columnName);
            columns.append(" FROM ");
            where.append("WHERE ");
            doNestedNaturalJoin(e, nestedExp, columns, where, whereComp, values, queries, orderBy);
            selectString = columns.toString() + ' ' + leftJoin.toString() + ' ' + where.toString() + " AND ( " + whereComp.toString() + " ) " + ' ' + orderBy.toString();
        // System.out.println("NATURAL JOIN ...");
        }
        // System.out.println("Query is : " + selectString + "\n");
        return doExpressionQuery(selectString, columnName, values);
    } else {
        // query is not empty ... it's a SIMPLE query
        // do what the old query did
        StringBuffer qry;
        List values = new LinkedList();
        qry = new StringBuffer();
        String columnName = buildSimple((FieldExpression) expression, qry, values);
        if (e.getSortOrder() != WorkflowExpressionQuery.SORT_NONE) {
            qry.append(" ORDER BY ");
            if (e.getOrderBy() != 0) {
                String fName = fieldName(e.getOrderBy());
                qry.append(fName);
                // To help w/ MySQL and Informix, you have to include the column in the query
                String current = qry.toString();
                String entry = current.substring(0, current.indexOf(columnName)) + columnName + "), " + fName + ' ';
                entry += current.substring(current.indexOf(columnName) + columnName.length() + 1);
                qry = new StringBuffer(entry);
                if (e.getSortOrder() == WorkflowExpressionQuery.SORT_DESC) {
                    qry.append(" DESC");
                } else {
                    qry.append(" ASC");
                }
            } else {
                qry.append(columnName);
            }
        }
        // System.out.println("Query is: " + qry.toString());
        return doExpressionQuery(qry.toString(), columnName, values);
    }
}
