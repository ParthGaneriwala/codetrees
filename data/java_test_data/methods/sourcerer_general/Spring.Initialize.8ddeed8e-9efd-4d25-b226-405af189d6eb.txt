// end main compute function
private static void Initialize(DInterferenceGraph g) {
    DNode v;
    DNode u;
    int i;
    N = g.getNodeCount();
    makeOrderedList(g);
    NUM_TIMES_MOVED = new int[N];
    for (i = 0; i < N; i++) NUM_TIMES_MOVED[i] = 0;
    EDGES = 0;
    Vector<DNode> nodelist = g.nodes();
    for (i = 0; i < nodelist.size(); i++) {
        v = nodelist.get(i);
        for (int j = i + 1; j < nodelist.size(); j++) {
            u = nodelist.get(j);
            if (g.hasChild(v, u))
                EDGES++;
        }
    }
    epsilon = 0.5 * (N + EDGES);
    findDistances(g);
    find_l_and_k(g);
    delta = new double[N];
    E_HY = new double[HY_SIZE];
    xmin = rect.x;
    xmax = xmin + rect.width;
    ymin = rect.y;
    ymax = ymin + rect.height;
}
