// $ANTLR start "declaracao_funcao"
public final gramaticaMM2Parser.declaracao_funcao_return declaracao_funcao() throws RecognitionException {
    gramaticaMM2Parser.declaracao_funcao_return retval = new gramaticaMM2Parser.declaracao_funcao_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token PROCEDURE24 = null;
    Token LEFT_PAREN26 = null;
    Token RIGHT_PAREN28 = null;
    Token COLON29 = null;
    Token SEMICOLON31 = null;
    Token SEMICOLON35 = null;
    gramaticaMM2Parser.id_return id25 = null;
    gramaticaMM2Parser.lista_parametros_return lista_parametros27 = null;
    gramaticaMM2Parser.tipo_return tipo30 = null;
    gramaticaMM2Parser.declaracao_variaveis_return declaracao_variaveis32 = null;
    gramaticaMM2Parser.corpo_return_return corpo_return33 = null;
    gramaticaMM2Parser.id_return id34 = null;
    CommonTree PROCEDURE24_tree = null;
    CommonTree LEFT_PAREN26_tree = null;
    CommonTree RIGHT_PAREN28_tree = null;
    CommonTree COLON29_tree = null;
    CommonTree SEMICOLON31_tree = null;
    CommonTree SEMICOLON35_tree = null;
    RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
    RewriteRuleTokenStream stream_LEFT_PAREN = new RewriteRuleTokenStream(adaptor, "token LEFT_PAREN");
    RewriteRuleTokenStream stream_RIGHT_PAREN = new RewriteRuleTokenStream(adaptor, "token RIGHT_PAREN");
    RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
    RewriteRuleTokenStream stream_PROCEDURE = new RewriteRuleTokenStream(adaptor, "token PROCEDURE");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_tipo = new RewriteRuleSubtreeStream(adaptor, "rule tipo");
    RewriteRuleSubtreeStream stream_declaracao_variaveis = new RewriteRuleSubtreeStream(adaptor, "rule declaracao_variaveis");
    RewriteRuleSubtreeStream stream_lista_parametros = new RewriteRuleSubtreeStream(adaptor, "rule lista_parametros");
    RewriteRuleSubtreeStream stream_corpo_return = new RewriteRuleSubtreeStream(adaptor, "rule corpo_return");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:94:20: ( PROCEDURE id LEFT_PAREN ( lista_parametros | ) RIGHT_PAREN COLON tipo SEMICOLON ( declaracao_variaveis )* corpo_return id SEMICOLON -> ^( DECLAR_FUNC id ( lista_parametros )? tipo ( declaracao_variaveis )* corpo_return id ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:94:22: PROCEDURE id LEFT_PAREN ( lista_parametros | ) RIGHT_PAREN COLON tipo SEMICOLON ( declaracao_variaveis )* corpo_return id SEMICOLON
        {
            PROCEDURE24 = (Token) match(input, PROCEDURE, FOLLOW_PROCEDURE_in_declaracao_funcao732);
            stream_PROCEDURE.add(PROCEDURE24);
            pushFollow(FOLLOW_id_in_declaracao_funcao734);
            id25 = id();
            state._fsp--;
            stream_id.add(id25.getTree());
            LEFT_PAREN26 = (Token) match(input, LEFT_PAREN, FOLLOW_LEFT_PAREN_in_declaracao_funcao736);
            stream_LEFT_PAREN.add(LEFT_PAREN26);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:94:46: ( lista_parametros | )
            int alt5 = 2;
            int LA5_0 = input.LA(1);
            if ((LA5_0 == LETTER)) {
                alt5 = 1;
            } else if ((LA5_0 == RIGHT_PAREN)) {
                alt5 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
                throw nvae;
            }
            switch(alt5) {
                case 1:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:94:47: lista_parametros
                    {
                        pushFollow(FOLLOW_lista_parametros_in_declaracao_funcao739);
                        lista_parametros27 = lista_parametros();
                        state._fsp--;
                        stream_lista_parametros.add(lista_parametros27.getTree());
                    }
                    break;
                case 2:
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:94:64:
                    {
                    }
                    break;
            }
            RIGHT_PAREN28 = (Token) match(input, RIGHT_PAREN, FOLLOW_RIGHT_PAREN_in_declaracao_funcao743);
            stream_RIGHT_PAREN.add(RIGHT_PAREN28);
            COLON29 = (Token) match(input, COLON, FOLLOW_COLON_in_declaracao_funcao745);
            stream_COLON.add(COLON29);
            pushFollow(FOLLOW_tipo_in_declaracao_funcao747);
            tipo30 = tipo();
            state._fsp--;
            stream_tipo.add(tipo30.getTree());
            SEMICOLON31 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_declaracao_funcao749);
            stream_SEMICOLON.add(SEMICOLON31);
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:94:99: ( declaracao_variaveis )*
            loop6: do {
                int alt6 = 2;
                int LA6_0 = input.LA(1);
                if ((LA6_0 == VAR)) {
                    alt6 = 1;
                }
                switch(alt6) {
                    case 1:
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:94:99: declaracao_variaveis
                        {
                            pushFollow(FOLLOW_declaracao_variaveis_in_declaracao_funcao751);
                            declaracao_variaveis32 = declaracao_variaveis();
                            state._fsp--;
                            stream_declaracao_variaveis.add(declaracao_variaveis32.getTree());
                        }
                        break;
                    default:
                        break loop6;
                }
            } while (true);
            pushFollow(FOLLOW_corpo_return_in_declaracao_funcao754);
            corpo_return33 = corpo_return();
            state._fsp--;
            stream_corpo_return.add(corpo_return33.getTree());
            pushFollow(FOLLOW_id_in_declaracao_funcao756);
            id34 = id();
            state._fsp--;
            stream_id.add(id34.getTree());
            SEMICOLON35 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_declaracao_funcao758);
            stream_SEMICOLON.add(SEMICOLON35);
            // AST REWRITE
            // elements: tipo, id, declaracao_variaveis, lista_parametros, id, corpo_return
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 95:2: -> ^( DECLAR_FUNC id ( lista_parametros )? tipo ( declaracao_variaveis )* corpo_return id )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:95:5: ^( DECLAR_FUNC id ( lista_parametros )? tipo ( declaracao_variaveis )* corpo_return id )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(DECLAR_FUNC, "DECLAR_FUNC"), root_1);
                    adaptor.addChild(root_1, stream_id.nextTree());
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:95:22: ( lista_parametros )?
                    if (stream_lista_parametros.hasNext()) {
                        adaptor.addChild(root_1, stream_lista_parametros.nextTree());
                    }
                    stream_lista_parametros.reset();
                    adaptor.addChild(root_1, stream_tipo.nextTree());
                    // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:95:45: ( declaracao_variaveis )*
                    while (stream_declaracao_variaveis.hasNext()) {
                        adaptor.addChild(root_1, stream_declaracao_variaveis.nextTree());
                    }
                    stream_declaracao_variaveis.reset();
                    adaptor.addChild(root_1, stream_corpo_return.nextTree());
                    adaptor.addChild(root_1, stream_id.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
