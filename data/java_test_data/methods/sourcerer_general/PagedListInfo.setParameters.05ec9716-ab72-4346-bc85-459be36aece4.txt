public boolean setParameters(HttpServletRequest request) {
    contextPath = request.getContextPath();
    if (contextPath != null && contextPath.endsWith("/PlutoInvoker")) {
        contextPath = contextPath.substring(0, contextPath.indexOf("/PlutoInvoker"));
    }
    // check for multiple pagedLists on a single page
    if (request.getParameter("pagedListInfoId") != null && !(request.getParameter("pagedListInfoId").equals("")) && this.getId() != null && !"".equals(this.getId().trim()) && !(request.getParameter("pagedListInfoId").equals("null")) && !(request.getParameter("pagedListInfoId").equals(this.getId()))) {
        return false;
    }
    Enumeration parameters = request.getParameterNames();
    boolean reset = false;
    String tmpSortOrder = request.getParameter("order");
    if (tmpSortOrder != null && checkAllowed(tmpSortOrder)) {
        this.setSortOrder(tmpSortOrder);
    }
    // Check to see if the user is changing the sort column, or clicking on the
    // same column again
    String tmpColumnToSortBy = request.getParameter("column");
    if (tmpColumnToSortBy != null) {
        if (columnToSortBy != null) {
            if (tmpColumnToSortBy.equals(columnToSortBy)) {
                if (sortOrder == null) {
                    this.setSortOrder("desc");
                } else {
                    this.setSortOrder(null);
                }
            } else {
                if (sortOrder != null && sortOrder.equals("desc")) {
                    this.setSortOrder(null);
                }
            }
        }
        // Security check so that arbitrary queries cannot be executed
        if (checkAllowed(tmpColumnToSortBy)) {
            this.setColumnToSortBy(tmpColumnToSortBy);
        }
    }
    // User has specified a page number to view
    // This will be used as a parameter in the query
    String tmpCurrentPage = request.getParameter("page");
    if (tmpCurrentPage != null) {
        try {
            if (getItemsPerPage() == -1) {
                throw new java.lang.NumberFormatException("All records in one page");
            }
            this.setCurrentPage(Integer.parseInt(tmpCurrentPage));
        } catch (java.lang.NumberFormatException e) {
            this.setCurrentOffset(0);
        }
    }
    // User is changing the number of items to display -- needs to be done after the
    // page select
    String tmpItemsPerPage = request.getParameter("items");
    if (tmpItemsPerPage != null) {
        this.setItemsPerPage(tmpItemsPerPage);
    }
    // The user wants to jump to a specific letter of the alphabet...
    // The alphabet is currently tuned to a specific field that is identified
    // by the object... maybe in the future it will use the column being
    // sorted on.
    String tmpCurrentLetter = request.getParameter("letter");
    if (tmpCurrentLetter != null) {
        this.setCurrentLetter(tmpCurrentLetter);
        // Need to reset the sort because it is configured by the underlying query object
        this.setColumnToSortBy(null);
        this.setSortOrder(null);
    } else {
        this.setCurrentLetter("");
    }
    // The user has selected an offset to go to... could be through a
    // page element that calculates the offset per page
    String tmpCurrentOffset = request.getParameter("offset");
    if (tmpCurrentOffset != null) {
        this.setCurrentOffset(tmpCurrentOffset);
    }
    // The user has changed the view of the pagedList
    String tmpListView = request.getParameter("listView");
    if (tmpListView != null) {
        if (listView != null && !listView.equals(tmpListView)) {
            resetList();
        }
        this.setListView(tmpListView);
    }
    // Populate the PagedListInfo with data filters, reset the list view since
    // the user is changing the filter
    Collection<String> paramNames = Collections.list(request.getParameterNames());
    boolean hasListFilter = false;
    for (String paramName : paramNames) {
        if (paramName.contains(LIST_FILTER) && paramName.length() > LIST_FILTER.length()) {
            // already checked to make sure this doesn't throw indexOutOfBounds
            String filterNumStr = paramName.split(LIST_FILTER)[1];
            int filterNum;
            try {
                filterNum = Integer.parseInt(filterNumStr);
            } catch (NumberFormatException ne) {
                // filter name doesn't follow convention so ignore
                continue;
            }
            String filter = request.getParameter(paramName);
            if (filter != null) {
                addFilter(filterNum, filter);
                hasListFilter = true;
            }
        }
    }
    if (request.getParameter("listFilter1") != null && resetList) {
        String thisFilter = request.getParameter("listFilter1");
        if (listFilters.get("listFilter1") != null && !thisFilter.equals(listFilters.get("listFilter1"))) {
            resetList();
        }
    }
    while (parameters.hasMoreElements()) {
        String param = (String) parameters.nextElement();
        if (param.startsWith("search")) {
            if (!(reset)) {
                this.getSavedCriteria().clear();
                reset = true;
            }
            this.getSavedCriteria().put(param, request.getParameter(param));
        }
    }
    return true;
}
