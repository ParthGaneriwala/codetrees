public String ConstructXMLTree(double[][] dDistanceMatrix) throws Exception {
    qNodes = new QNode[2 * dDistanceMatrix.length - 2];
    /* Start of MCQP stuff */
    // MCQPTreeConstructor tc = new MCQPTreeConstructor();
    // tc.K = 1;
    // Document tree = getTree(tc,dDistanceMatrix);
    // QuartetTree qt = constructFromXmlDocument(tree);
    /* End of MCQP stuff */
    QuartetTree qt = createInitialTree(dDistanceMatrix.length);
    System.out.println("tree: " + qt.toTreeFile());
    ArrayList alQuartets = Quartet.generateFullQuartetList(dDistanceMatrix);
    qt.M = Quartet.worst_cost.doubleValue();
    qt.m = Quartet.best_cost.doubleValue();
    double score = 0;
    QNode[] qNodesOld = qNodes;
    qNodes = cloneQuartetNodes(qNodesOld, qt);
    /* Start of MCQP stuff */
    // QuartetTreeScorer qts = new QuartetTreeScorer();
    // double old_score = qts.ComputeScore(tree,dDistanceMatrix);
    /* End of MCQP stuff */
    double old_score = 0;
    double Pt_old = Double.MAX_VALUE;
    int step = 0;
    double sqrt_n = Math.round(Math.sqrt(dDistanceMatrix.length));
    double log_n = Math.round(Math.log(dDistanceMatrix.length));
    int stop_steps = K;
    int stop_count = 0;
    Debug.append("STOP STEPS = " + stop_steps);
    int part_q = 0;
    int non_part_q = 0;
    while (stop_count <= stop_steps) {
        double Ct = 0;
        double Pt = 0;
        int K = 1;
        stop_count++;
        while (K < 500) {
            K++;
            Arrays.sort(qNodes);
            performRandomMutation(qt);
        }
        int consistent = 0;
        htPath.clear();
        boolean foundSuitableEdge = false;
        TreeEdge rootEdge = null;
        while (!foundSuitableEdge) {
            QNode qn1 = getRandomInternNode();
            for (int i = 0; i < qn1.adj.length; i++) {
                if (qn1.adj[i].id == -1) {
                    rootEdge = new TreeEdge(qn1, qn1.adj[i]);
                    foundSuitableEdge = true;
                    break;
                }
            }
        }
        // qNodesOld = cloneQuartetNodes(qNodes,qt);
        step++;
        if (step % 100 == 0) {
            // Debug.append("score=" + score + "; old_score=" + old_score + "; step=" + step + " K="+K);
            System.out.println("score=" + score + "; old_score=" + old_score + "; step=" + step + " K=" + K);
        }
    }
    Debug.append("part_q = " + part_q);
    Debug.append("non_part_q = " + non_part_q);
    qt.St = old_score;
    qt.root = getRandomInternNode();
    File f = new File("test.tree");
    FileOutputStream fos = new FileOutputStream(f);
    fos.write(qt.toTreeFile().getBytes());
    fos.close();
    return qt.toString();
}
