protected static FloatExpression parseExpression(String expression) throws Exception {
    return (FloatExpression) new ExpressionParser<Object>(new StringReader(expression)) {

        @Override
        protected Object handleNumber(double value) {
            return new Constant((float) value);
        }

        @Override
        protected Object handleString(String value) {
            return value;
        }

        @Override
        protected Object handleOperator(String operator, int arity) throws Exception {
            if (arity == 1) {
                if (operator.equals("+")) {
                    return _output.pop();
                } else if (operator.equals("-")) {
                    Negate negate = new Negate();
                    negate.operand = (FloatExpression) _output.pop();
                    return negate;
                } else {
                    return super.handleOperator(operator, arity);
                }
            } else {
                // arity == 2
                BinaryOperation result;
                if (operator.equals("+")) {
                    result = new Add();
                } else if (operator.equals("-")) {
                    result = new Subtract();
                } else if (operator.equals("*")) {
                    result = new Multiply();
                } else if (operator.equals("/")) {
                    result = new Divide();
                } else if (operator.equals("%")) {
                    result = new Remainder();
                } else {
                    return super.handleOperator(operator, arity);
                }
                result.secondOperand = (FloatExpression) _output.pop();
                result.firstOperand = (FloatExpression) _output.pop();
                return result;
            }
        }

        @Override
        protected Object handleFunctionCall(String function, int arity) throws Exception {
            UnaryOperation result;
            if (function.equals("clock")) {
                assertArity("clock", arity, 0, 1);
                Clock clock = new Clock();
                clock.scope = (arity == 1) ? (String) _output.pop() : "";
                return clock;
            } else if (function.equals("pow")) {
                assertArity("pow", arity, 2, 2);
                Pow pow = new Pow();
                pow.secondOperand = (FloatExpression) _output.pop();
                pow.firstOperand = (FloatExpression) _output.pop();
                return pow;
            } else if (function.equals("noise2")) {
                assertArity("noise2", arity, 2, 2);
                Noise2 noise = new Noise2();
                noise.secondOperand = (FloatExpression) _output.pop();
                noise.firstOperand = (FloatExpression) _output.pop();
                return noise;
            } else if (function.equals("exp")) {
                result = new Exp();
            } else if (function.equals("sin")) {
                result = new Sin();
            } else if (function.equals("cos")) {
                result = new Cos();
            } else if (function.equals("tan")) {
                result = new Tan();
            } else if (function.equals("square")) {
                result = new Square();
            } else if (function.equals("triangle")) {
                result = new Triangle();
            } else if (function.equals("ramp")) {
                result = new Ramp();
            } else if (function.equals("saw")) {
                result = new Saw();
            } else if (function.equals("noise1")) {
                result = new Noise1();
            } else {
                return super.handleFunctionCall(function, arity);
            }
            assertArity(function, arity, 1, 1);
            result.operand = (FloatExpression) _output.pop();
            return result;
        }

        @Override
        protected Object handleIdentifier(String name) {
            Reference ref = new Reference();
            ref.name = name;
            return ref;
        }

        protected void assertArity(String function, int arity, int min, int max) throws Exception {
            if (arity < min || arity > max) {
                throw new Exception("Wrong number of arguments for " + function);
            }
        }
    }.parse();
}
