// end sendConnectedList
private void messageTreatment(Message message) {
    switch(message.getType()) {
        // connection message
        case Message.CONNECTION:
            nickname = message.getNickSrc();
            if (server.addClient(this) == true) {
                connected = true;
                Message ok = new Message(Message.CONNECTION_OK, "none", nickname, "Connection ok.");
                sendMessage(ok);
                System.out.println(this.getName() + ": Sending update messages to everybody.");
                // send update message to everybody
                sendToEverybody(Message.ADD_CLIENT, "none");
                System.out.println(this.getName() + ": Sending connected list to new client.");
                // send connected list to new client
                sendConnectedList();
                System.out.println(this.getName() + ": " + this.getNickname() + " is now connected!");
            } else {
                System.out.println(this.getName() + ": ERROR: client already connected.");
                System.out.println(this.getName() + ": Sending disconnection message to client.");
                Message disconnectionMessage = new Message(Message.DISCONNECTION, this.getName(), nickname, "Nickname already in use.");
                sendMessage(disconnectionMessage);
                closeConnection();
            }
            break;
        // diconnection message
        case Message.DISCONNECTION:
            if (!connected)
                System.out.println(this.getName() + ": Client not connected, action denied");
            else {
                System.out.println(this.getName() + ": Removing client from list.");
                if (server.removeClient(this) == true) {
                    System.out.println(this.getName() + ": Sending update messages to everybody.");
                    // send update message to everybody
                    sendToEverybody(Message.DELETE_CLIENT, "none");
                    closeConnection();
                } else {
                    System.out.println(this.getName() + ": Sending disconnection message to client.");
                    Message disconnectionMessage = new Message(Message.DISCONNECTION, this.getName(), nickname, "Nickname already in use.");
                    sendMessage(disconnectionMessage);
                    System.out.println(this.getName() + ": Closing thread client not connected.");
                    closeConnection();
                }
            }
            break;
        // file end
        case Message.PRIVATE_MESSAGE:
        case Message.FILE_PROPOSE:
        case Message.FILE_ACCEPT:
        case Message.FILE_DENY:
        case Message.FILE:
        case Message.FILE_END:
            if (!connected)
                System.out.println(this.getName() + ": Client not connected, action denied");
            else {
                ServerThread client = server.getClient(message.getNickDest());
                if (// client nickDest is connected
                client != null)
                    client.sendMessage(message);
                else
                    // client NickDest not connected
                    System.out.println(this.getName() + ": Impossible to send message: destination client not connected.");
            // -send update message to Src client ????
            }
            break;
        // message to everybody
        case Message.PUBLIC_MESSAGE:
            if (!connected)
                System.out.println(this.getName() + ": Client not connected, action denied");
            else {
                sendToEverybody(Message.PUBLIC_MESSAGE, message.getMessage());
                System.out.println(this.getName() + ": Message sent to everybody.");
            }
            break;
        // kick message
        case Message.KICK_MESSAGE:
            if (!connected)
                System.out.println(this.getName() + ": Client not connected, action denied");
            else {
                ServerThread clientKicked = server.getClient(message.getNickDest());
                if (clientKicked != null) {
                    clientKicked.kick(nickname);
                }
            }
            break;
        // not recognized type
        default:
            System.out.println(this.getName() + ": Not recognized message type(" + message.getType() + ") -> ERROR.");
            break;
    }
}
