public static void main(String[] args) {
    try {
        // Load the ontology from disk
        OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
        URI physicalURI = URI.create("file:/home/pik/Bioinformatics/MolecularFunction/ontologies/gene_ontology_edit.owl");
        OWLOntology ontology = manager.loadOntologyFromPhysicalURI(physicalURI);
        String ontologyURI = ontology.getURI().toString();
        OWLDataFactory factory = manager.getOWLDataFactory();
        OWLClass catalytic_activity = factory.getOWLClass(URI.create(ontologyURI + "#GO_0003824"));
        // Load the reasoner
        OWLReasoner reasoner = ReasonerFactory.createReasoner(manager);
        Set<Set<OWLClass>> subClsSets = reasoner.getDescendantClasses(catalytic_activity);
        // Set<Set<OWLClass>> subClsSets = reasoner.getSubClasses(catalytic_activity);
        Set<OWLClass> subClses = OWLReasonerAdapter.flattenSetOfSets(subClsSets);
        List regexps = new ArrayList();
        regexps.add(new String("(.+?)\\s(halidohydrolase activity)"));
        regexps.add(new String("(.+?)\\s(glycerate dehydrogenase activity)"));
        regexps.add(new String("(.+?)\\s(oxidoreductase activity)"));
        regexps.add(new String("(.+?)\\s(polymerase activity)"));
        regexps.add(new String("(.+?)\\s(kinase activity)"));
        regexps.add(new String("(.+?)\\s(ATPase activity)"));
        regexps.add(new String("(.+?)\\s(enzyme activity)"));
        List checked_functions = new ArrayList();
        for (OWLClass cls : subClses) {
            for (OWLAnnotationAxiom annotAxiom : cls.getAnnotationAxioms(ontology)) {
                if (annotAxiom.getAnnotation().getAnnotationURI().getFragment().equals("label")) {
                    String label_value = annotAxiom.getAnnotation().getAnnotationValue().toString();
                    // System.out.println(label_value);
                    Iterator regexp_iterator = regexps.iterator();
                    while (regexp_iterator.hasNext()) {
                        String RegexpString = (String) regexp_iterator.next();
                        // System.out.println(RegexpString);
                        Pattern pattern = Pattern.compile(RegexpString);
                        Matcher matcher = pattern.matcher(label_value);
                        boolean matchFound = matcher.find();
                        if (matchFound) {
                            String function = matcher.group(2);
                            if (!checked_functions.contains(function)) {
                                checked_functions.add(function);
                                System.out.println(function);
                                System.out.println("  e.g.: " + matcher.group(0));
                            }
                        }
                    }
                }
            }
        }
    } catch (OWLOntologyCreationException e) {
        e.printStackTrace();
    } catch (OWLReasonerException e) {
        e.printStackTrace();
    }
}
