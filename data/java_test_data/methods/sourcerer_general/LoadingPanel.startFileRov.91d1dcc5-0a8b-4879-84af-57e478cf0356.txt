public void startFileRov(int aIndex) {
    final int iIndex = aIndex;
    QuantitativeValidationSingelton iQuantitativeValidationSingelton = QuantitativeValidationSingelton.getInstance();
    iQuantitativeValidationSingelton.setUseOnlyValidRatioForProteinMean(true);
    // 1.unzip all the file and check if the quantitation and identification information can be found
    Vector<File> lFiles = iParent.getFiles(iIndex);
    Vector<RovFile> lRovFiles = new Vector<RovFile>();
    // update progress bar
    progressBar.setMaximum(lFiles.size() + 1);
    progressBar.setValue(0);
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    // set check loading
    setIconOnPanel(jpanCheck, "clock.png", 3, 2);
    lblCheckFiles.setEnabled(true);
    for (int i = 0; i < lFiles.size(); i++) {
        // update progress bar
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString("Checking .rov file number " + (i + 1) + " of " + lFiles.size() + " distiller quantitation files");
        RovFile lRovFile = new RovFile(lFiles.get(i));
        boolean allOk = lRovFile.unzipRovFile();
        if (!allOk) {
            // problem with rov file
            iParent.passHotPotato(new Throwable("A problem with the .rov file '" + lRovFile.getRovFilePath() + "' was detected!\nThis .rov file will not be used"));
        } else {
            // no problem
            lRovFiles.add(lRovFile);
        }
    }
    // Show in the gui that we found all the rov files
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(false);
    progressBar.setIndeterminate(true);
    setIconOnPanel(jpanCheck, "apply.png", 3, 2);
    // 2.read the quantitation and the identification files
    // set id loading
    lblId.setEnabled(true);
    setIconOnPanel(jpanId, "clock.png", 3, 3);
    // set quant  loading
    lblQuant.setEnabled(true);
    setIconOnPanel(jpanQuant, "clock.png", 3, 4);
    // update progress bar
    progressBar.setValue(lRovFiles.size());
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    progressBar.setMaximum(lRovFiles.size() + 1);
    progressBar.setValue(0);
    for (int i = 0; i < lRovFiles.size(); i++) {
        // update progress bar
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString("Parsing .rov file number " + (i + 1) + " of " + lRovFiles.size() + " distiller quantitation files");
        RovFile lRovFile = lRovFiles.get(i);
        lRovFile.setFlamable(iParent);
        lRovFile.unzipRovFile();
        lRovFile.readQuantitationXmlFile();
        lRovFile.setThreshold(1.0 - iParent.getThreshold(iIndex));
        lRovFile.match();
        iCollection.add(lRovFile.getRatioGroupCollection());
        iCollectionIndexes.add(iIndex);
        // _____Do garbage collection______
        System.gc();
    }
    // _____Do garbage collection______
    System.gc();
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(false);
    progressBar.setIndeterminate(true);
    // set id done
    setIconOnPanel(jpanId, "apply.png", 3, 3);
    // set quant done
    setIconOnPanel(jpanQuant, "apply.png", 3, 4);
    // 3.match ids to quantitations
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(false);
    progressBar.setMaximum(lRovFiles.size() + 1);
    progressBar.setValue(0);
    // set match loading
    lblMatch.setEnabled(true);
    setIconOnPanel(jpanMatch, "clock.png", 3, 5);
    for (int i = 0; i < lRovFiles.size(); i++) {
        // update progress bar
        progressBar.setValue(progressBar.getValue() + 1);
        progressBar.setString("Matching identification with ratios from .rov file number " + (i + 1) + " of " + lRovFiles.size() + " distiller quantitation files");
    /*RovFile lRovFile = lRovFiles.get(i);
            lRovFile.setThreshold(1.0 - iParent.getThreshold(iIndex));
            lRovFile.match();
            iCollection.add(lRovFile.getRatioGroupCollection());
            iCollectionIndexes.add(iIndex);

            //_____Do garbage collection______
            System.gc();*/
    }
    // _____Do garbage collection______
    System.gc();
    // update progress bar
    progressBar.setString("");
    progressBar.setStringPainted(false);
    progressBar.setIndeterminate(true);
    for (int i = 0; i < lRovFiles.size(); i++) {
        RovFile lRovFile = lRovFiles.get(i);
        for (int j = 0; j < lRovFile.getRatioGroupCollection().size(); j++) {
            DistillerRatioGroup lRatioGroup = (DistillerRatioGroup) lRovFile.getRatioGroupCollection().get(j);
            String[] lAccessionsForRatioGroup = lRatioGroup.getProteinAccessions();
            for (int k = 0; k < lAccessionsForRatioGroup.length; k++) {
                // check if it's a new accession
                boolean lNewAccession = true;
                for (int l = 0; l < iProteinAccession.size(); l++) {
                    if (iProteinAccession.get(l).equalsIgnoreCase(lAccessionsForRatioGroup[k])) {
                        lNewAccession = false;
                    }
                }
                if (lNewAccession) {
                    iProteinAccession.add(lAccessionsForRatioGroup[k]);
                }
            }
        }
    }
    if (lRovFiles.size() == 0) {
        // show gui
        JOptionPane.showMessageDialog(iParent, "No quantitative data could be found!\n The program will close.", "INFO", JOptionPane.INFORMATION_MESSAGE);
        iParent.close();
    }
    // 7.A get the types of the ratios from the first distiller ratio collecion
    RovFile lRovFileTemp = lRovFiles.get(0);
    Vector<String> lRatioList = lRovFileTemp.getRatioGroupCollection().getRatioTypes();
    String[] lRatioTypes = new String[lRatioList.size()];
    lRatioList.toArray(lRatioTypes);
    iCollectionRatios.add(lRatioTypes);
    // 7.B get the types of the ratios from the first distiller ratio collecion
    Vector<String> lComponentList = lRovFileTemp.getRatioGroupCollection().getComponentTypes();
    String[] lComponentTypes = new String[lComponentList.size()];
    lComponentList.toArray(lComponentTypes);
    iCollectionComponents.add(lComponentTypes);
    // set match done
    setIconOnPanel(jpanMatch, "apply.png", 3, 5);
}
