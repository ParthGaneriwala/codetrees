public void configure() {
    // descobre de que lado está
    acharLado();
    // pega numero do jogador
    playerNum = abstract_robot.getPlayerNumber(-1);
    // vari�veis para detectar situacao de deadlock no jogador;
    historico = new Vector();
    // carteado
    instDeadlockDetectado = -1000;
    // defini��es da rede neural do chute ao gol
    int[] noofneurons = { 12, 12, 12, 1 };
    double[] learnratecoeff = { 1, 1, 1, 1 };
    char[] axonfamily = { 't', 't', 't', 't' };
    double[] momentumrate = { 0, .6, .5, .4 };
    double[] flatness = { 1, 1, 1, 1 };
    // objeto utilizado na criacao da rede
    randomizerGol = new Randomizer();
    // objeto utilizado na criacao da rede
    randomizerMovim = new Randomizer();
    // cria rede neural com parametros definidos acima
    neuralGol = new NeuralNet(noofneurons, learnratecoeff, axonfamily, momentumrate, flatness, randomizerGol);
    // carrega pesos da rede neural de um arquivo
    boolean exists = (new File("redeneural_chuta_gol" + String.valueOf(playerNum) + ".nnw")).exists();
    if (exists) {
        // File or directory exists
        neuralGol.LoadWeights("redeneural_chuta_gol" + String.valueOf(playerNum) + ".nnw");
    } else {
    // File or directory does not exist
    }
    // para rede do movimento, calculamos o n�mero de neurons na sa�da.
    int numSaidasMov = NUM_NEURONS_SAIDA_MOVIMENTO;
    // defini��es da rede neural do movimento dos jogadores
    int[] noofneurons2 = { 24, 24, 14, numSaidasMov };
    double[] learnratecoeff2 = { 1, 1, 1, 1 };
    char[] axonfamily2 = { 't', 't', 't', 't' };
    double[] momentumrate2 = { 0, .6, .5, .4 };
    double[] flatness2 = { 1, 1, 1, 1 };
    // cria rede neural com parametros definidos acima
    neuralMovim = new NeuralNet(noofneurons2, learnratecoeff2, axonfamily2, momentumrate2, flatness2, randomizerMovim);
    // carrega pesos da rede neural de um arquivo
    boolean exists2 = (new File("redeneural_movimenta" + String.valueOf(playerNum) + ".nnw")).exists();
    if (exists2) {
        // File or directory exists
        neuralMovim.LoadWeights("redeneural_movimenta" + String.valueOf(playerNum) + ".nnw");
    } else {
    // File or directory does not exist
    }
    // gerador aleat�rio utilizado em alguma partes do jogo
    randomGen = new Random();
    // entradas e saidas da rede neural do chute ao gol
    trainerDataGol = new LinkedList<EntradaSaidaRede>();
    // entradas e sa�das da rede neurral de movimenta��o
    // dos jogadores
    trainerDataMovim = new LinkedList<EntradaSaidaRede>();
    // diz quem � o goleiro
    goalieNumber = 0;
    // o default era um, talvez aumentando para 2 melhore
    abstract_robot.setObstacleMaxRange(2);
}
