private void allocate() {
    Stack selectStack = new Stack();
    HashMap selectedTempVsAdjTemps = new HashMap();
    // A map of coalesed temp vs. it's set of corresponding children
    HashMap coalescedVsList = new HashMap();
    Vector igNodes = interferenceGraph.nodes();
    HashSet spilledNodes = new HashSet();
    // Analyze the interference graph now
    int numIter = 1;
    while (igNodes.size() != 0) {
        Node igNode = (Node) igNodes.elementAt(0);
        Temp tmp = interferenceGraph.getTemp(igNode);
        System.out.println("**************ITERATION " + numIter + " ******************************");
        System.out.println("Considering temp = " + tmp);
        // This node has not been considered yet; process it
        // Get the degree of the node
        int degree = interferenceGraph.getDegree(igNode);
        if (degree <= numberOfRegisters - 1) {
            processLowDegreeNode(igNodes, igNode, selectStack, selectedTempVsAdjTemps, coalescedVsList);
        } else {
            // This node is of significant degree; Get the best node from this node to the end of the list
            // of nodes
            Node bestNextNode = getBestNextNode(igNodes);
            int deg = interferenceGraph.getDegree(bestNextNode);
            if (deg <= numberOfRegisters - 1) {
                processLowDegreeNode(igNodes, bestNextNode, selectStack, selectedTempVsAdjTemps, coalescedVsList);
            } else {
                // All nodes from igNode to the end of the list are significant degree nodes;
                // select the best next node for spilling; if the spill priority of the next best node
                // is lesser than the spill priority of the current node being considered, make the
                // next best node the current node.
                int spForNextBestNode = Integer.parseInt(interferenceGraph.getSpillCost(bestNextNode));
                int spForCurrNode = Integer.parseInt(interferenceGraph.getSpillCost(igNode));
                if (spForCurrNode > spForNextBestNode)
                    bestNextNode = igNode;
                // Remove any moves associated with this node (freeze the moves)
                removeMovesForNode(bestNextNode);
                // Select for spilling
                pushOnToStack(bestNextNode, selectStack, selectedTempVsAdjTemps);
                // This will remove all edges of this node
                interferenceGraph.removeNode(bestNextNode);
                igNodes.remove(bestNextNode);
                spilledNodes.add(bestNextNode);
            }
        }
        // System.out.println("CFG AT END OF ITERATION:" );
        // interferenceGraph.showInterferenceGraph();
        // interferenceGraph.showMoveRelatedNodes();
        // Reset the work-list of nodes (populate from nodes in the interference graph)
        igNodes = interferenceGraph.nodes();
        numIter++;
    }
    // Assign the colors now
    HashMap assignment = assignColors(selectStack, selectedTempVsAdjTemps, spilledNodes, coalescedVsList);
    if (assignment != null) {
        printAssignment(assignment);
        populateOutputInstructionList(assignment);
    } else {
    // A coloring was not possible; try to spill, rewrite code, construct cfg, ig and then analyze again.
    }
}
