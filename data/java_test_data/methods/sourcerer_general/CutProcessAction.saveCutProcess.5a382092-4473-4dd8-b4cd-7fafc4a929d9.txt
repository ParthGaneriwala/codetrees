public String saveCutProcess() {
    System.out.println("CutProcessAction -> saveCutProcess()");
    if (cutProcess.getEmployee().getId() != -1 && initDateCuProcess != null) {
        Employee employee = employeeManager.get(cutProcess.getEmployee().getId());
        cutProcess.setEmployee(employee);
        cutProcess.setInitDate(DateFormatChanger.changeStringtoDate(initDateCuProcess));
        cutProcess.setEndDate(cutProcess.getInitDate());
        cutProcess.setDeleted(true);
        cutProcess.setTotalAmount(0.0D);
        cutProcess.setTotalRealAmount(0.0D);
        cutProcess.setTotalCurrentAmount(0.0D);
        cutProcess.setTotalAmountFail(0.0D);
        cutProcess = cutProcessManager.save(cutProcess);
        PeriodPaymentEmployee periodPaymentEmployee = periodPaymentEmployeeManager.getCurrentPeriodByIdEmployeeAndRole(employee.getId(), employee.getRoleByName("ROLE_EMPLOYEE_CUTTER").getIdRole());
        BalanceEmployee balanceEmployee = new BalanceEmployee();
        balanceEmployee.setBalance(periodPaymentEmployee.getCurrentAmount());
        balanceEmployee.setAmountPaid(0.0D);
        balanceEmployee.setAmountWon(0.0D);
        balanceEmployee.setCutProcess(cutProcess);
        balanceEmployee.setDateBalance(cutProcess.getInitDate());
        balanceEmployee.setPeriodPaymentEmployee(periodPaymentEmployee);
        balanceEmployee.setPaymentsCut(null);
        balanceEmployee.setPaymentsPant(null);
        balanceEmployee.setProcessDressmaker(null);
        balanceEmployee = balanceEmployeeManager.save(balanceEmployee);
        cutProcess.setBalanceEmployee(balanceEmployee);
        balanceEmployeeManager.save(balanceEmployee);
        cutProcess = cutProcessManager.save(cutProcess);
        getSession().setAttribute("idCutProcess", cutProcess.getId());
        System.out.println("End save cut process ...");
        return SUCCESS;
    } else {
        errorMessage(getText("cutProcessAction.errorSaveCutProcess"));
        return ERROR;
    }
}
