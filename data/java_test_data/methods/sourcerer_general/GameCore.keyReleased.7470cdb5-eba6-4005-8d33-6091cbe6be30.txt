protected void keyReleased(int keyCode) {
    // analisa o keyCode default
    switch(keyCode) {
        case Canvas.KEY_NUM0:
            keyState &= (KEY_NUM_0 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM1:
            keyState &= (KEY_NUM_1 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM2:
            keyState &= (KEY_NUM_2 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM3:
            keyState &= (KEY_NUM_3 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM4:
            keyState &= (KEY_NUM_4 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM5:
            keyState &= (KEY_NUM_5 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM6:
            keyState &= (KEY_NUM_6 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM7:
            keyState &= (KEY_NUM_7 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM8:
            keyState &= (KEY_NUM_8 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_NUM9:
            keyState &= (KEY_NUM_9 ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_STAR:
            keyState &= (KEY_STAR ^ MAX_KEY_BITS);
            break;
        case Canvas.KEY_POUND:
            keyState &= (KEY_POUND ^ MAX_KEY_BITS);
            break;
        case SOFTKEY_LEFT:
            keyState &= (KEY_MENU_A ^ MAX_KEY_BITS);
            break;
        case SOFTKEY_RIGHT:
            keyState &= (KEY_MENU_B ^ MAX_KEY_BITS);
            break;
    }
    // analisa o gameAction
    keyCode = getGameAction(keyCode);
    switch(keyCode) {
        case Canvas.LEFT:
            keyState &= (KEY_LEFT ^ MAX_KEY_BITS);
            break;
        case Canvas.RIGHT:
            keyState &= (KEY_RIGHT ^ MAX_KEY_BITS);
            break;
        case Canvas.UP:
            keyState &= (KEY_UP ^ MAX_KEY_BITS);
            break;
        case Canvas.DOWN:
            keyState &= (KEY_DOWN ^ MAX_KEY_BITS);
            break;
        case Canvas.FIRE:
            keyState &= (KEY_FIRE ^ MAX_KEY_BITS);
            break;
        case Canvas.GAME_A:
            keyState &= (KEY_GAME_A ^ MAX_KEY_BITS);
            break;
        case Canvas.GAME_B:
            keyState &= (KEY_GAME_B ^ MAX_KEY_BITS);
            break;
        case Canvas.GAME_C:
            keyState &= (KEY_GAME_C ^ MAX_KEY_BITS);
            break;
        case Canvas.GAME_D:
            keyState &= (KEY_GAME_D ^ MAX_KEY_BITS);
            break;
    }
}
