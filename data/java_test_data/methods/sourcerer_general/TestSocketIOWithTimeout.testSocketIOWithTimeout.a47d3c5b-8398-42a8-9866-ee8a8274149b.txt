public void testSocketIOWithTimeout() throws IOException {
    // first open pipe:
    Pipe pipe = Pipe.open();
    Pipe.SourceChannel source = pipe.source();
    Pipe.SinkChannel sink = pipe.sink();
    try {
        InputStream in = new SocketInputStream(source, TIMEOUT);
        OutputStream out = new SocketOutputStream(sink, TIMEOUT);
        byte[] writeBytes = TEST_STRING.getBytes();
        byte[] readBytes = new byte[writeBytes.length];
        out.write(writeBytes);
        doIO(null, out);
        in.read(readBytes);
        assertTrue(Arrays.equals(writeBytes, readBytes));
        doIO(in, null);
        /*
       * Verify that it handles interrupted threads properly.
       * Use a large timeout and expect the thread to return quickly.
       */
        in = new SocketInputStream(source, 0);
        Thread thread = new Thread(new ReadRunnable(in));
        thread.start();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ignored) {
        }
        thread.interrupt();
        try {
            thread.join();
        } catch (InterruptedException e) {
            throw new IOException("Unexpected InterruptedException : " + e);
        }
        // make sure the channels are still open
        assertTrue(source.isOpen());
        assertTrue(sink.isOpen());
        out.close();
        assertFalse(sink.isOpen());
        // close sink and expect -1 from source.read()
        assertEquals(-1, in.read());
        // make sure close() closes the underlying channel.
        in.close();
        assertFalse(source.isOpen());
    } finally {
        if (source != null) {
            source.close();
        }
        if (sink != null) {
            sink.close();
        }
    }
}
