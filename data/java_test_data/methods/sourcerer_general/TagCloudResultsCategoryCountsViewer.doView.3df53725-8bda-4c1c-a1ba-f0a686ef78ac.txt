public String doView(RenderRequest request, RenderResponse response) throws PortletException, IOException {
    try {
        String defaultView = VIEW_PAGE1;
        Connection db = PortalUtils.useConnection(request);
        // Set global preferences
        ProjectCategoryList categoriesToShow = null;
        ProjectCategoryList categories = (ProjectCategoryList) request.getAttribute(Constants.REQUEST_TAB_CATEGORY_LIST);
        String categoriesToInclude = request.getPreferences().getValue(PREF_INCLUDE_CATEGORIES, null);
        if (categoriesToInclude != null) {
            categoriesToShow = new ProjectCategoryList();
            String[] categoryArray = categoriesToInclude.split(",");
            for (String thisCategory : categoryArray) {
                ProjectCategory specifiedCategory = categories.getFromValue(thisCategory.trim());
                if (specifiedCategory != null) {
                    categoriesToShow.add(specifiedCategory);
                }
            }
        } else {
            categoriesToShow = (ProjectCategoryList) categories.clone();
        }
        String pageURL = request.getPreferences().getValue(PREF_PAGE_URL, null);
        if (StringUtils.hasText(pageURL)) {
            request.setAttribute(PAGE_URL, pageURL);
        }
        String tagName = PortalUtils.getPageParameter(request);
        if (StringUtils.hasText(tagName)) {
            request.setAttribute(NORMALIZED_TAG, Tag.getNormalizedTag(tagName));
        }
        String chosenCategory = PortalUtils.getPageView(request);
        if (StringUtils.hasText(chosenCategory)) {
            request.setAttribute(CHOSEN_CATEGORY, chosenCategory);
        }
        String[] params = PortalUtils.getPageParameters(request);
        if (params != null && params.length == 2) {
            String sortOrder = params[1];
            if (!StringUtils.isNumber(sortOrder)) {
                request.setAttribute(SORT_ORDER, sortOrder);
            }
        }
        int total = 0;
        LinkedHashMap<ProjectCategory, Integer> projectsCountMap = new LinkedHashMap<ProjectCategory, Integer>();
        // build the tags for the chosen categories
        for (ProjectCategory category : categoriesToShow) {
            // Get this project's tag cloud
            int categoryId = category.getId();
            TagList tagListByProjectCategory = new TagList();
            tagListByProjectCategory.setInstanceId(PortalUtils.getInstance(request).getId());
            if (PortalUtils.canShowSensitiveData(request) && PortalUtils.getUser(request).getId() > 0) {
                tagListByProjectCategory.setForParticipant(Constants.TRUE);
            } else {
                // Use the most generic settings since this portlet is cached
                tagListByProjectCategory.setForGuest(Constants.TRUE);
            }
            tagListByProjectCategory.setTableName(Project.TABLE);
            tagListByProjectCategory.setTag(StringUtils.replace(tagName, "-", " "));
            tagListByProjectCategory.setCategoryId(categoryId);
            tagListByProjectCategory.setUniqueField(Project.PRIMARY_KEY);
            tagListByProjectCategory.buildList(db);
            projectsCountMap.put(category, tagListByProjectCategory.size());
            total = total + tagListByProjectCategory.size();
        }
        request.setAttribute(TAGS_COUNTS_MAP, projectsCountMap);
        request.setAttribute(TOTAL, String.valueOf(total));
        // JSP view
        return defaultView;
    } catch (Exception e) {
        e.printStackTrace();
        throw new PortletException(e);
    }
}
