public int update(Connection db, boolean override) throws SQLException {
    int resultCount = 0;
    if (!isValid(db)) {
        return -1;
    }
    PreparedStatement pst = null;
    StringBuffer sql = new StringBuffer();
    sql.append("UPDATE ticket " + "SET department_code = ?, pri_code = ?, scode = ?, " + "cat_code = ?, assigned_to = ?, " + "subcat_code1 = ?, subcat_code2 = ?, subcat_code3 = ?, " + "source_code = ?, contact_id = ?, problem = ?, ");
    sql.append("modified = " + DatabaseUtils.getCurrentTimestamp(db) + ", modifiedby = ?, ");
    if (this.getCloseIt()) {
        sql.append("closed = " + DatabaseUtils.getCurrentTimestamp(db) + ", ");
    } else {
        if (closed != null) {
            sql.append("closed = ?, ");
        }
    }
    sql.append("solution = ?, est_resolution_date = ?, ");
    sql.append("cause_id = ?, resolution_id = ?, defect_id = ?, escalation_id = ?, state_id = ?, related_id = ?, ready_for_close = ? ");
    sql.append("WHERE ticketid = ? ");
    if (!override) {
        sql.append("AND modified = ? ");
    }
    int i = 0;
    pst = db.prepareStatement(sql.toString());
    if (this.getDepartmentCode() > 0) {
        pst.setInt(++i, this.getDepartmentCode());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (this.getPriorityCode() > 0) {
        pst.setInt(++i, this.getPriorityCode());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (this.getSeverityCode() > 0) {
        pst.setInt(++i, this.getSeverityCode());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (this.getCatCode() > 0) {
        pst.setInt(++i, this.getCatCode());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (assignedTo > 0) {
        pst.setInt(++i, assignedTo);
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (this.getSubCat1() > 0) {
        pst.setInt(++i, this.getSubCat1());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (this.getSubCat2() > 0) {
        pst.setInt(++i, this.getSubCat2());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (this.getSubCat3() > 0) {
        pst.setInt(++i, this.getSubCat3());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    if (this.getSourceCode() > 0) {
        pst.setInt(++i, this.getSourceCode());
    } else {
        pst.setNull(++i, java.sql.Types.INTEGER);
    }
    DatabaseUtils.setInt(pst, ++i, this.getContactId());
    pst.setString(++i, this.getProblem());
    pst.setInt(++i, this.getModifiedBy());
    if (!this.getCloseIt() && closed != null) {
        pst.setTimestamp(++i, closed);
    }
    pst.setString(++i, this.getSolution());
    DatabaseUtils.setTimestamp(pst, ++i, estimatedResolutionDate);
    DatabaseUtils.setInt(pst, ++i, causeId);
    DatabaseUtils.setInt(pst, ++i, resolutionId);
    DatabaseUtils.setInt(pst, ++i, defectId);
    DatabaseUtils.setInt(pst, ++i, escalationId);
    DatabaseUtils.setInt(pst, ++i, stateId);
    DatabaseUtils.setInt(pst, ++i, relatedId);
    pst.setBoolean(++i, readyForClose);
    pst.setInt(++i, id);
    if (!override) {
        pst.setTimestamp(++i, this.getModified());
    }
    resultCount = pst.executeUpdate();
    pst.close();
    if (this.getCloseIt()) {
        TicketLog thisEntry = new TicketLog();
        thisEntry.setEnteredBy(this.getModifiedBy());
        thisEntry.setDepartmentCode(this.getDepartmentCode());
        thisEntry.setAssignedTo(this.getAssignedTo());
        thisEntry.setPriorityCode(this.getPriorityCode());
        thisEntry.setSeverityCode(this.getSeverityCode());
        thisEntry.setTicketId(this.getId());
        thisEntry.setClosed(true);
        thisEntry.process(db, this.getId(), this.getEnteredBy(), this.getModifiedBy());
    }
    return resultCount;
}
