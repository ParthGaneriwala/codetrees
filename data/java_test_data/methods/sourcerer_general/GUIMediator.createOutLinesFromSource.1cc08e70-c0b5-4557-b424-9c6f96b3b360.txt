private int[] createOutLinesFromSource(BFSLevel srcLevel, int srcLevelIndex, Node srcNode, boolean flankLeft, Node frontierNodeLeft, Node frontierNodeRight, Vector<Line> lines) {
    // Get the node to the immediate left of the source node
    int[] retStartPoint = new int[2];
    Node nodeLeftOfScrNode = null;
    Node nodeRightOfScrNode = null;
    int rightEdgeOfLeftNodeOfSrc = 0;
    int leftEdgeOfRightNodeOfSrc = 0;
    Vector<Node> nodesInSrcLevel = srcLevel.getNodes();
    int srcNodeIndexInLevel = 0;
    for (int i = 0; i < nodesInSrcLevel.size(); i++) {
        if (nodesInSrcLevel.elementAt(i) == srcNode) {
            srcNodeIndexInLevel = i;
            break;
        }
    }
    if (srcNodeIndexInLevel > 0) {
        nodeLeftOfScrNode = nodesInSrcLevel.elementAt(srcNodeIndexInLevel - 1);
        DrawingParameters dpNodeLeftOfSrcNode = nodesVsDrawingParameters.get(nodeLeftOfScrNode);
        rightEdgeOfLeftNodeOfSrc = dpNodeLeftOfSrcNode.getXPosition() + dpNodeLeftOfSrcNode.getSize().width;
    }
    if (srcNodeIndexInLevel < nodesInSrcLevel.size() - 1) {
        nodeRightOfScrNode = nodesInSrcLevel.elementAt(srcNodeIndexInLevel + 1);
        DrawingParameters dpNodeRightOfSrcNode = nodesVsDrawingParameters.get(nodeRightOfScrNode);
        leftEdgeOfRightNodeOfSrc = dpNodeRightOfSrcNode.getXPosition();
    }
    // Set the initial "out-lines"
    Line outLine1 = new Line();
    int xPosStart = 0;
    int yStart = 0;
    DrawingParameters dpSrcNode = nodesVsDrawingParameters.get(srcNode);
    int srcLevelHeight = getVerticalDistanceForLayer(srcLevelIndex);
    int srcNodeBtm = srcLevelHeight + dpSrcNode.getSize().height;
    int srcNodeMid = dpSrcNode.getXPosition() + (int) (dpSrcNode.getSize().width / 2.0);
    ;
    outLine1.setStartPoint(new Point(srcNodeMid, srcNodeBtm));
    yStart = srcNodeBtm + minDistanceOfEdgeFromNode;
    outLine1.setEndPoint(new Point(srcNodeMid, yStart));
    lines.add(outLine1);
    xPosStart = srcNodeMid;
    DrawingParameters dpFrontierNodeLeft = nodesVsDrawingParameters.get(frontierNodeLeft);
    int frontierNodeLeftXPos = dpFrontierNodeLeft.getXPosition();
    DrawingParameters dpFrontierNodeRight = nodesVsDrawingParameters.get(frontierNodeRight);
    int frontierNodeRightXPos = dpFrontierNodeRight.getXPosition();
    if (flankLeft) {
        // The back edge must flank the left of the loop
        int offsetFromSrcNode = dpSrcNode.getXPosition() - minDistanceOfEdgeFromNode;
        if (offsetFromSrcNode > frontierNodeLeftXPos && nodeLeftOfScrNode != null && rightEdgeOfLeftNodeOfSrc > frontierNodeLeftXPos) {
            // An intersection exists between the out line and the node to
            // the left of the source node
            Line outLine4 = new Line();
            xPosStart = rightEdgeOfLeftNodeOfSrc + getEdgeOffsetFromNode(nodeLeftOfScrNode, AdjacentEdge.RIGHT);
            outLine4.setStartPoint(new Point(srcNodeMid, yStart));
            outLine4.setEndPoint(new Point(xPosStart, yStart));
            Line outLine5 = new Line();
            int newYPos = dpSrcNode.getYPosition() - getEdgeOffsetFromNode(nodeLeftOfScrNode, AdjacentEdge.TOP);
            outLine5.setStartPoint(new Point(xPosStart, yStart));
            outLine5.setEndPoint(new Point(xPosStart, newYPos));
            yStart = newYPos;
            lines.add(outLine4);
            lines.add(outLine5);
            Line outLine6 = new Line();
            outLine6.setStartPoint(new Point(xPosStart, yStart));
            xPosStart = frontierNodeLeftXPos - getEdgeOffsetFromNode(frontierNodeLeft, AdjacentEdge.LEFT);
            outLine6.setEndPoint(new Point(xPosStart, yStart));
            lines.add(outLine6);
        } else {
            // No intersection exists between the out line and the node to
            // the left of the source node
            Line outLine2 = new Line();
            Line outLine3 = new Line();
            outLine2.setStartPoint(new Point(xPosStart, yStart));
            int offsetFromFrontierNode = frontierNodeLeftXPos - getEdgeOffsetFromNode(frontierNodeLeft, AdjacentEdge.LEFT);
            if (offsetFromFrontierNode < offsetFromSrcNode)
                xPosStart = offsetFromFrontierNode;
            else
                xPosStart = dpSrcNode.getXPosition() - minDistanceOfEdgeFromNode;
            outLine2.setEndPoint(new Point(xPosStart, yStart));
            outLine3.setStartPoint(new Point(xPosStart, yStart));
            int verticalOffSet = getEdgeOffsetFromNode(srcNode, AdjacentEdge.TOP);
            yStart = srcLevelHeight - verticalOffSet;
            outLine3.setEndPoint(new Point(xPosStart, yStart));
            lines.add(outLine2);
            lines.add(outLine3);
        }
    } else {
        // The back edge must flank the right of the loop
        int offsetFromSrcNode = dpSrcNode.getXPosition() + dpSrcNode.getSize().width + minDistanceOfEdgeFromNode;
        if (offsetFromSrcNode < frontierNodeRightXPos && nodeRightOfScrNode != null && leftEdgeOfRightNodeOfSrc < frontierNodeRightXPos) {
            // An intersection exists between the out line and the node to
            // the right of the source node
            Line outLine4 = new Line();
            xPosStart = leftEdgeOfRightNodeOfSrc - getEdgeOffsetFromNode(nodeRightOfScrNode, AdjacentEdge.LEFT);
            outLine4.setStartPoint(new Point(srcNodeMid, yStart));
            outLine4.setEndPoint(new Point(xPosStart, yStart));
            Line outLine5 = new Line();
            int newYPos = dpSrcNode.getYPosition() - getEdgeOffsetFromNode(nodeRightOfScrNode, AdjacentEdge.TOP);
            outLine5.setStartPoint(new Point(xPosStart, yStart));
            outLine5.setEndPoint(new Point(xPosStart, newYPos));
            yStart = newYPos;
            lines.add(outLine4);
            lines.add(outLine5);
            Line outLine6 = new Line();
            outLine6.setStartPoint(new Point(xPosStart, yStart));
            xPosStart = frontierNodeRightXPos + dpFrontierNodeLeft.getSize().width + getEdgeOffsetFromNode(frontierNodeRight, AdjacentEdge.RIGHT);
            outLine6.setEndPoint(new Point(xPosStart, yStart));
            lines.add(outLine6);
        } else {
            // No intersection exists between the out line and the node to
            // the right of the source node
            Line outLine2 = new Line();
            Line outLine3 = new Line();
            outLine2.setStartPoint(new Point(xPosStart, yStart));
            xPosStart = frontierNodeRightXPos + dpFrontierNodeRight.getSize().width + getEdgeOffsetFromNode(frontierNodeRight, AdjacentEdge.RIGHT);
            outLine2.setEndPoint(new Point(xPosStart, yStart));
            outLine3.setStartPoint(new Point(xPosStart, yStart));
            int verticalOffSet = getEdgeOffsetFromNode(srcNode, AdjacentEdge.TOP);
            yStart = srcLevelHeight - verticalOffSet;
            outLine3.setEndPoint(new Point(xPosStart, yStart));
            lines.add(outLine2);
            lines.add(outLine3);
        }
    }
    retStartPoint[0] = xPosStart;
    retStartPoint[1] = yStart;
    return retStartPoint;
}
