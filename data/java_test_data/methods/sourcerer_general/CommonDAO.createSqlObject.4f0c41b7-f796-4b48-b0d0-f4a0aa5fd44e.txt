protected SqlVO createSqlObject(CommonVO valueObject, int operationType, boolean allowNulls) {
    StringBuffer sqlBuffer = new StringBuffer("INSERT INTO ");
    sqlBuffer.append(getTableName());
    sqlBuffer.append("(");
    StringBuffer sqlBindBuffer = new StringBuffer("VALUES(");
    StringBuffer sqlValues = new StringBuffer("VALUES(");
    StringBuffer errorBuffer = new StringBuffer();
    StringBuffer outputBuffer = null;
    if (operationType == 3)
        outputBuffer = new StringBuffer("OUTPUT ");
    ArrayList<ObjectDescription> values = new ArrayList<ObjectDescription>();
    Class<? extends CommonVO> userValue = valueObject.getClass();
    Method[] methods = userValue.getMethods();
    for (int i = 0; i < obtainFieldNameSet().length; i++) {
        StringBuffer accesor = new StringBuffer("get");
        accesor.append(obtainFieldNameSet()[i]);
        if (validateMetaValues(getFields(), i)) {
            for (int j = 0; j < methods.length; j++) {
                if (!methods[j].getName().equalsIgnoreCase(accesor.toString()))
                    continue;
                Object returnObject = null;
                try {
                    returnObject = methods[j].invoke(valueObject, null);
                    ObjectDescription objectDescription = new ObjectDescription();
                    objectDescription.setValue(returnObject);
                    objectDescription.setDataType(getFields()[i][1]);
                    validateValue(getFields()[i], returnObject, errorBuffer);
                    String fieldName = obtainFieldNameSet()[i];
                    switch(operationType) {
                        case // '\001'
                        1:
                            createInsertString(allowNulls, sqlBuffer, sqlBindBuffer, sqlValues, values, objectDescription, fieldName);
                            break;
                        case // '\003'
                        3:
                            createInsertString(allowNulls, sqlBuffer, sqlBindBuffer, sqlValues, values, objectDescription, fieldName);
                            break;
                    }
                    break;
                } catch (Exception e) {
                    errorBuffer.append("Error when try to reflect method [");
                }
                errorBuffer.append(methods[j]);
                errorBuffer.append("] for field [");
                errorBuffer.append(obtainFieldNameSet()[i]);
                errorBuffer.append("]\n");
            }
        }
        if (operationType == 3) {
            String fieldName = obtainFieldNameSet()[i];
            createOutputString(outputBuffer, fieldName);
        }
    }
    return asembleSQLObject(sqlBuffer, sqlBindBuffer, sqlValues, errorBuffer, outputBuffer, values);
}
