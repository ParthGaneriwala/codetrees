public int parse() throws ParserException {
    // from interface GPMessageConstants
    int result = 0;
    boolean done = false;
    Token readToken;
    int parseResult;
    if ((pActionTable.size() < 1) | (pDFA.size() < 1)) {
        result = gpMsgNotLoadedError;
    } else {
        while (!done) {
            if (// we must read a token
            pInputTokens.size() == 0) {
                readToken = retrieveToken(pSource);
                if (readToken == null) {
                    result = gpMsgInternalError;
                    done = true;
                } else {
                    if (readToken.getKind() != symbolTypeWhitespace) {
                        pInputTokens.push(readToken);
                        if ((pCommentLevel == 0) & (readToken.getKind() != symbolTypeCommentLine) & (readToken.getKind() != symbolTypeCommentStart)) {
                            result = gpMsgTokenRead;
                            done = true;
                        }
                    }
                }
            } else {
                if (// we are in a block comment
                pCommentLevel > 0) {
                    readToken = (Token) pInputTokens.pop();
                    switch(readToken.getKind()) {
                        case symbolTypeCommentStart:
                            pCommentLevel++;
                            break;
                        case symbolTypeCommentEnd:
                            pCommentLevel--;
                            break;
                        case symbolTypeEnd:
                            result = gpMsgCommentError;
                            done = true;
                            break;
                        default:
                    }
                } else {
                    readToken = (Token) pInputTokens.peek();
                    switch(readToken.getKind()) {
                        case symbolTypeCommentStart:
                            pCommentLevel++;
                            // remove it
                            pInputTokens.pop();
                            break;
                        case symbolTypeCommentLine:
                            // remove it
                            pInputTokens.pop();
                            // and rest of line
                            discardRestOfLine();
                            break;
                        case symbolTypeError:
                            result = gpMsgLexicalError;
                            done = true;
                            break;
                        default:
                            // FINALLY, we can parse the token
                            parseResult = parseToken(readToken);
                            switch(parseResult) {
                                case parseResultAccept:
                                    result = gpMsgAccept;
                                    done = true;
                                    break;
                                case parseResultInternalError:
                                    result = gpMsgInternalError;
                                    done = true;
                                    break;
                                case parseResultReduceNormal:
                                    result = gpMsgReduction;
                                    done = true;
                                    break;
                                case // A simple shift, we must continue
                                parseResultShift:
                                    // Okay, remove the top token, it is on the stack
                                    pInputTokens.pop();
                                    break;
                                case parseResultSyntaxError:
                                    result = gpMsgSyntaxError;
                                    done = true;
                                    break;
                                default:
                                    // do nothing
                                    break;
                            }
                            break;
                    }
                }
            }
        }
    }
    return result;
}
