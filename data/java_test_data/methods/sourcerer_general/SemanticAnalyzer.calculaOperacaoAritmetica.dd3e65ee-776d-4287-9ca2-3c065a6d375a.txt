private void calculaOperacaoAritmetica(String operador) {
    if (operador.equals("**"))
        new ErroSemantico("Operador ** nao implementado", sintatico.getLexico().getLineNumber(), this);
    if (operador.equals(")")) {
        // geraCodigo("// pilha operandos: " + pilhaOperandos);
        if (pilhaOperadores.size() > 0) {
            while (pilhaOperadores.size() > 0 && !pilhaOperadores.peek().equals("(")) {
                operando1 = pilhaOperandos.pop();
                operando2 = pilhaOperandos.pop();
                if (isNumeric(operando1)) {
                    geraCodigo("LV /" + operando1);
                    geraCodigo("MM _OP1");
                    operando1 = "_OP1";
                }
                if (isNumeric(operando2)) {
                    geraCodigo("LV /" + operando2);
                    geraCodigo("MM _OP2");
                    operando2 = "_OP2";
                }
                geraCodigo("LD " + operando1);
                geraCodigo(pilhaOperadores.pop() + " " + operando2);
                geraCodigo("MM TMP_" + String.valueOf(contador_operando_tmp));
                memoria = new Memoria("TMP_" + String.valueOf(contador_operando_tmp), "");
                memoriaUsada.push(memoria);
                pilhaOperandos.push("TMP_" + String.valueOf(contador_operando_tmp++));
            }
            if (pilhaOperadores.size() > 0 && pilhaOperadores.peek().equals("(")) {
                pilhaOperadores.pop();
            }
        } else {
            operando1 = pilhaOperandos.pop();
            if (isNumeric(operando1)) {
                geraCodigo("LV /" + operando1);
            } else {
                geraCodigo("LD " + operando1);
            }
        }
    } else {
        if (operador.equals("*") || operador.equals("/")) {
            if (pilhaOperadores.size() > 0) {
                if (pilhaOperadores.peek().equals("+") || pilhaOperadores.peek().equals("-")) {
                    pilhaOperadores.push(operador);
                } else if (pilhaOperadores.peek().equals("*") || pilhaOperadores.peek().equals("/")) {
                    operando1 = pilhaOperandos.pop();
                    operando2 = pilhaOperandos.pop();
                    if (isNumeric(operando1)) {
                        geraCodigo("LV /" + operando1);
                        geraCodigo("MM _OP1");
                        operando1 = "_OP1";
                    }
                    if (isNumeric(operando2)) {
                        geraCodigo("LV /" + operando2);
                        geraCodigo("MM _OP2");
                        operando2 = "_OP2";
                    }
                    geraCodigo("LD " + operando1);
                    geraCodigo(pilhaOperadores.pop() + " " + operando2);
                    geraCodigo("MM TMP_" + String.valueOf(contador_operando_tmp));
                    memoria = new Memoria("TMP_" + String.valueOf(contador_operando_tmp), "");
                    memoriaUsada.push(memoria);
                    pilhaOperandos.push("TMP_" + String.valueOf(contador_operando_tmp++));
                    pilhaOperadores.push(operador);
                } else
                    pilhaOperadores.push(operador);
            } else
                pilhaOperadores.push(operador);
        } else if (operador.equals("+") || operador.equals("-")) {
            if (pilhaOperadores.size() > 0) {
                if (pilhaOperadores.peek().equals("+") || pilhaOperadores.peek().equals("-")) {
                    operando1 = pilhaOperandos.pop();
                    operando2 = pilhaOperandos.pop();
                    if (isNumeric(operando1)) {
                        geraCodigo("LV /" + operando1);
                        geraCodigo("MM _OP1");
                        operando1 = "_OP1";
                    }
                    if (isNumeric(operando2)) {
                        geraCodigo("LV /" + operando2);
                        geraCodigo("MM _OP2");
                        operando2 = "_OP2";
                    }
                    geraCodigo("LD " + operando1);
                    geraCodigo(pilhaOperadores.pop() + " " + operando2);
                    geraCodigo("MM TMP_" + String.valueOf(contador_operando_tmp));
                    memoria = new Memoria("TMP_" + String.valueOf(contador_operando_tmp), "");
                    memoriaUsada.push(memoria);
                    pilhaOperandos.push("TMP_" + String.valueOf(contador_operando_tmp++));
                    pilhaOperadores.push(operador);
                } else if (pilhaOperadores.peek().equals("*") || pilhaOperadores.peek().equals("/")) {
                    // VERIFICAR SE EH VALOR IMEDIATO E USAR LV EM VEZ
                    // DE LD EM CASO AFIRMATIVO
                    operando1 = pilhaOperandos.pop();
                    operando2 = pilhaOperandos.pop();
                    if (isNumeric(operando1)) {
                        geraCodigo("LV /" + operando1);
                        geraCodigo("MM _OP1");
                        operando1 = "_OP1";
                    }
                    if (isNumeric(operando2)) {
                        geraCodigo("LV /" + operando2);
                        geraCodigo("MM _OP2");
                        operando2 = "_OP2";
                    }
                    geraCodigo("LD " + operando1);
                    geraCodigo(pilhaOperadores.pop() + " " + operando2);
                    geraCodigo("MM TMP_" + String.valueOf(contador_operando_tmp));
                    memoria = new Memoria("TMP_" + String.valueOf(contador_operando_tmp), "");
                    memoriaUsada.push(memoria);
                    pilhaOperandos.push("TMP_" + String.valueOf(contador_operando_tmp++));
                    if (pilhaOperadores.size() > 0 && (pilhaOperadores.peek().equals("+") || pilhaOperadores.peek().equals("-"))) {
                        operando1 = pilhaOperandos.pop();
                        operando2 = pilhaOperandos.pop();
                        if (isNumeric(operando1)) {
                            geraCodigo("LV /" + operando1);
                            geraCodigo("MM _OP1");
                            operando1 = "_OP1";
                        }
                        if (isNumeric(operando2)) {
                            geraCodigo("LV /" + operando2);
                            geraCodigo("MM _OP2");
                            operando2 = "_OP2";
                        }
                        geraCodigo("LD " + operando1);
                        geraCodigo(pilhaOperadores.pop() + " " + operando2);
                        geraCodigo("MM TMP_" + String.valueOf(contador_operando_tmp));
                        memoria = new Memoria("TMP_" + String.valueOf(contador_operando_tmp), "");
                        memoriaUsada.push(memoria);
                        pilhaOperandos.push("TMP_" + String.valueOf(contador_operando_tmp++));
                    }
                    pilhaOperadores.push(operador);
                } else
                    pilhaOperadores.push(operador);
            } else
                pilhaOperadores.push(operador);
        }
    }
}
