public void test() {
    Comparator c = new Comparator() {

        public int compare(Object o1, Object o2) {
            // TODO Auto-generated method stub
            Integer i1 = (Integer) o1;
            Integer i2 = (Integer) o2;
            if (i1 < i2) {
                return -1;
            } else if (i1 > i2) {
                return 1;
            } else {
                return 0;
            }
        }
    };
    Random r = new Random();
    for (int i = 0; i < 100000; i++) {
        System.out.println(i);
        BinarySortTree bst = new BinarySortTree(c);
        List<Integer> l = new ArrayList<Integer>();
        for (int j = 0; j < 1000; j++) {
            int v = r.nextInt();
            bst.insert(v);
            l.add(v);
        }
        assertEquals(bst.size(), l.size());
        Collections.sort(l, c);
        int index = 0;
        while (!bst.isEmpty()) {
            Integer v = (Integer) bst.extract();
            assertEquals(v.intValue(), l.get(index++).intValue());
        }
        bst.clear();
        assertEquals(bst.size(), 0);
        for (int j = 0; j < 1000; j++) {
            bst = new BinarySortTree(c);
            int v = r.nextInt();
            Node n1 = bst.insert(v);
            Node n2 = bst.remove(v);
            assertEquals(n1, n2);
            assertEquals(0, bst.size());
        }
        for (int j = 0; j < 1000; j++) {
            bst = new BinarySortTree(c);
            int v = r.nextInt();
            Node n1 = bst.insert(v);
            assertTrue(n1 != null);
            assertEquals(bst.size(), 1);
            Node n2 = bst.find(v);
            assertTrue(n2 != null);
            assertEquals(n2, n1);
        }
    }
    System.out.println("ok");
}
