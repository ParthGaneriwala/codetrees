public boolean delete(Connection db) throws SQLException {
    if (this.getId() == -1) {
        throw new SQLException("ID not specified");
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        PreparedStatement pst = null;
        // Delete the project link
        pst = db.prepareStatement("DELETE from tasklink_project " + "WHERE task_id IN (SELECT task_id FROM task WHERE category_id = ?) ");
        pst.setInt(1, this.getId());
        pst.execute();
        pst.close();
        // Delete the news category link
        pst = db.prepareStatement("DELETE from taskcategorylink_news " + "WHERE category_id = ? ");
        pst.setInt(1, this.getId());
        pst.execute();
        pst.close();
        // Delete the tasklog
        pst = db.prepareStatement("DELETE from tasklog " + "WHERE task_id IN (SELECT task_id FROM task WHERE category_id = ?) OR " + "category_id = ? ");
        pst.setInt(1, this.getId());
        pst.setInt(2, this.getId());
        pst.execute();
        pst.close();
        // Delete the task rating
        pst = db.prepareStatement("DELETE from task_rating " + "WHERE task_id IN (SELECT task_id FROM task WHERE category_id = ?) ");
        pst.setInt(1, this.getId());
        pst.execute();
        pst.close();
        // Delete related tasks
        pst = db.prepareStatement("DELETE from task " + "WHERE category_id = ? ");
        pst.setInt(1, this.getId());
        pst.execute();
        pst.close();
        // Delete the project link
        pst = db.prepareStatement("DELETE from taskcategory_project " + "WHERE category_id = ? ");
        pst.setInt(1, this.getId());
        pst.execute();
        pst.close();
        // Delete the category
        pst = db.prepareStatement("DELETE from lookup_task_category " + "WHERE code = ? ");
        pst.setInt(1, this.getId());
        pst.execute();
        pst.close();
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
