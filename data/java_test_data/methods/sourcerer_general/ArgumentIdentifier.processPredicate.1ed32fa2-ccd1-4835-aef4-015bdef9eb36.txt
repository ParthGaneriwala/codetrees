public void processPredicate(JCas jCas, Predicate predicate, List<TreebankNode> sentenceConstituents, List<List<Feature>> sentenceConstituentFeatures) throws AnalysisEngineProcessException {
    nPredicates += 1;
    /*
     * Compute predicate features
     */
    List<Feature> predicateFeatures = new ArrayList<Feature>(12);
    predicateFeatures.addAll(perPredicateExtractor.extract(jCas, predicate.getAnnotation()));
    /*
     * Iterate over constituents in sentence
     */
    for (int i = 0; i < sentenceConstituents.size(); i++) {
        nConstituents += 1;
        TreebankNode constituent = sentenceConstituents.get(i);
        Instance<Boolean> instance = new Instance<Boolean>();
        /*
       * Compute predicate-constituent features
       */
        instance.addAll(perPredicatAndConstituentExtractor.extract(jCas, constituent, predicate.getAnnotation()));
        /*
       * Add constituent features
       */
        instance.addAll(sentenceConstituentFeatures.get(i));
        /*
       * Add predicate features
       */
        instance.addAll(predicateFeatures);
        if (isTraining()) {
            instance.setOutcome(false);
            for (int j = 0; j < predicate.getArguments().size(); j++) {
                Argument arg = predicate.getArguments(j);
                if (arg.getAnnotation().equals(constituent)) {
                    instance.setOutcome(true);
                    break;
                }
            }
        }
        if (this.isTraining()) {
            this.dataWriter.write(instance);
        } else {
            boolean isArgument = this.classifier.classify(instance.getFeatures());
            if (isArgument) {
                SemanticArgument arg = new SemanticArgument(jCas);
                arg.setAnnotation(constituent);
                arg.setBegin(constituent.getBegin());
                arg.setEnd(constituent.getEnd());
                arg.setLabel("?");
                arg.addToIndexes();
                List<Argument> args = UIMAUtil.toList(predicate.getArguments(), Argument.class);
                args.add(arg);
                predicate.setArguments(UIMAUtil.toFSArray(jCas, args));
            }
        }
    }
}
