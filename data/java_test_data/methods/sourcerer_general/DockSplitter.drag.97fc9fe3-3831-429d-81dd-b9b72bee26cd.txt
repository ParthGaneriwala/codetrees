public void drag(int x, int y, boolean continuous) {
    int h, v, oldX, oldY, dx = 0, dy = 0;
    int smw, smh, dmw, dmh;
    int capacity, off;
    assert (parent != null);
    assert (src != null);
    assert (dst != null);
    DockNode parent = (DockNode) this.parent;
    oldX = getX();
    oldY = getY();
    h = (int) (oldX - lastX + x);
    v = (int) (oldY - lastY + y);
    smw = src.minBoundaryLeafWidth(DockNode.DOCKNODE_RIGHT, 0xFFFFFF);
    smh = src.minBoundaryLeafHeight(DockNode.DOCKNODE_BOTTOM, 0xFFFFFF);
    dmw = dst.minBoundaryLeafWidth(DockNode.DOCKNODE_LEFT, 0xFFFFFF);
    dmh = dst.minBoundaryLeafHeight(DockNode.DOCKNODE_TOP, 0xFFFFFF);
    if (parent.orientation == Dock.DOCK_H) {
        h = oldX;
        dy = v - oldY;
        if (dy >= 0) {
            capacity = dmh - DockNode.DOCKNODE_MINSIZE;
            if (dy < capacity) {
                off = 0;
            } else {
                off = dy - capacity;
                dy = capacity;
            }
        } else {
            capacity = smh - DockNode.DOCKNODE_MINSIZE;
            if (-dy < capacity) {
                off = 0;
            } else {
                off = dy + capacity;
                dy = -capacity;
            }
        }
        if (capacity >= 0) {
            src.setBounds(src.x, src.y, src.w, src.h + dy);
            dst.setBounds(dst.x, dst.y + dy, dst.w, dst.h - dy);
            this.setLocation(h, v - off);
        }
    } else if (parent.orientation == Dock.DOCK_V) {
        v = oldY;
        dx = h - oldX;
        if (dx >= 0) {
            capacity = dmw - DockNode.DOCKNODE_MINSIZE;
            if (dx < capacity) {
                off = 0;
            } else {
                off = dx - capacity;
                dx = capacity;
            }
        } else {
            capacity = smw - DockNode.DOCKNODE_MINSIZE;
            if (-dx < capacity) {
                off = 0;
            } else {
                off = dx + capacity;
                dx = -capacity;
            }
        }
        if (capacity >= 0) {
            src.setBounds(src.x, src.y, src.w + dx, src.h);
            dst.setBounds(dst.x + dx, dst.y, dst.w - dx, dst.h);
            this.setLocation(h - off, v);
        }
    }
    if (continuous) {
        dock.sync();
    } else {
        dock.psplitter.setVisible(true);
        dock.psplitter.setBounds(this.getBounds());
        dock.moveToFront(dock.psplitter);
        dock.repaint();
    }
}
