public void testPurchaseTickets() throws Exception {
    // creating the data objects
    Seat[] seats = new Seat[0];
    Booking booking = new Booking();
    Reservation reservation = new Reservation(seats, booking);
    Address address = new Address("country", "city", "street", "123");
    CreditCardDetails cardDetails = new CreditCardDetails("visa", "john", "1234-1234-1234-1234", new Date());
    PurchaseRequest request = new PurchaseRequest();
    request.setReservation(reservation);
    request.setEmail("email");
    request.setDeliveryAddress(address);
    request.setBillingAddress(address);
    request.setCollect(true);
    request.setCreditCardDetails(cardDetails);
    // setting the expectations
    paymentProcessorMock.validate(request);
    paymentProcessorMock.process(request);
    paymentProcessorMockControl.setReturnValue("ABC");
    daoMock.checkAvailabilityForBooking(booking);
    daoMockControl.setReturnValue(true);
    daoMock.savePurchaseForBooking(booking);
    final Purchase expectedPurchase = new Purchase();
    daoMock.updatePurchaseAuthorizationCode(expectedPurchase);
    paymentProcessorMockControl.replay();
    daoMockControl.replay();
    // executing the tested method
    BoxOfficeImpl boxOffice = new BoxOfficeImpl() {

        protected Purchase createPurchase() {
            return expectedPurchase;
        }
    };
    initBoxOffice(boxOffice);
    Purchase purchase = boxOffice.purchaseTickets(request);
    // assertions and verifications
    assertNotNull(purchase);
    assertEquals("the purchase billing address", address, purchase.getBillingAddress());
    assertEquals("the purchase delivery address", address, purchase.getDeliveryAddress());
    assertEquals("the purchase customer name", cardDetails.getNameOnCard(), purchase.getCustomerName());
    assertEquals("the purchase email", "email", purchase.getEmail());
    assertEquals("the purchase encrypted card number", cardDetails.getEncryptedCardNumber(), purchase.getEncryptedCardNumber());
    assertEquals("the purchase authorization code", "ABC", purchase.getPaymentAuthorizationCode());
    paymentProcessorMockControl.verify();
    daoMockControl.verify();
}
