synchronized void moveToNextResource(Airplane a) {
    determineNextResource(a);
    if (nextResource == null) {
        // this will prompt the plane to exit the airport system
        String message = "nullResourceExit";
        // a.setWaitUntil(nextResource.getNextAvailableTime());
        ModelEvent me = createModelEvent(a, message);
        notifyChanged(me);
        a.setCurrentResource(null);
        return;
    }
    // now the actual movement of the plane, which is the main focus of this method
    try {
        /**
         * Airplane constructor
         * @param id
         * @param airline
         * @param currentState
         * @param currentResource
         * @param gate
         * @param targetLandingTime
         * @param targetTakeoffTime
         * @param fuelCapacity
         * @param fuelRemaining
         */
        a.moveTo(nextResource);
        if (a.getCurrentResource().getResourceId().startsWith("Gate")) {
            GlobalLog.info(a.getAirplaneId() + " Arrival: " + DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(System.currentTimeMillis()) + " Scheduled: " + DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(a.getTargetLandingTime()) + " Estimated: " + DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(a.getAdjustedArrivalTime()));
        }
        String message = "";
        ModelEvent me = createModelEvent(a, message);
        notifyChanged(me);
        estimateArrivalTimes();
    } catch (ResourceFullException e) {
        String message = a.getAirplaneId() + " tried to get " + nextResource.getResourceId();
        // a.setWaitUntil(nextResource.getNextAvailableTime());
        ModelEvent me = createModelEvent(a, message);
        notifyChanged(me);
        /**
         * There is a special case we can handle here.
         * If we tried to enter the holding patter, and the pattern is full,
         * the lowest priority plane gets booted to another airport.
         */
        if (currentResource.getResourceId().contains("Airspace") && nextResource.getResourceId().contains("HoldingPattern")) {
            // System.out.println("Last airplane is " + ((HoldingPattern) nextResource).getLastAirplane().getAirplaneId());
            Airplane last = ((HoldingPattern) nextResource).getLastAirplane();
            // if we are higher priority to the last plane, we boot it out.
            if (a.compareTo(last) == -1) {
                GlobalLog.info("Entering airplane is higher priority than existing");
                GlobalLog.info("boot " + last.getAirplaneId() + " and let in " + a.getAirplaneId());
                try {
                    last.moveTo(currentResource);
                    last.setCurrentState("outgoing");
                    last.interrupt();
                    String amessage = last.getAirplaneId() + " moved out of holding pattern";
                    // a.setWaitUntil(nextResource.getNextAvailableTime());
                    ModelEvent mode = createModelEvent(last, amessage);
                    notifyChanged(mode);
                } catch (ResourceFullException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                moveToNextResource(a);
            } else {
                // if we are not higher priority than the last plane, we go away
                try {
                    a.moveTo(currentResource);
                    a.setCurrentState("outgoing");
                    String amessage = a.getAirplaneId() + " not allowed to airspace, rerouted";
                    // a.setWaitUntil(nextResource.getNextAvailableTime());
                    ModelEvent mode = createModelEvent(a, amessage);
                    notifyChanged(mode);
                } catch (ResourceFullException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }
        }
    }
}
