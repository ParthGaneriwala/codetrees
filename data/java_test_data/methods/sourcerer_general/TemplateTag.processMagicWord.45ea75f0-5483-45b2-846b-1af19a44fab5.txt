private String processMagicWord(ParserInput parserInput, String name) throws Exception {
    SimpleDateFormat formatter = new SimpleDateFormat();
    TimeZone utc = TimeZone.getTimeZone("GMT+00");
    Date current = new Date(System.currentTimeMillis());
    // local date values
    if (name.equals(MAGIC_LOCAL_DAY)) {
        formatter.applyPattern("d");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_DAY2)) {
        formatter.applyPattern("dd");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_DAY_NAME)) {
        formatter.applyPattern("EEEE");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_DAY_OF_WEEK)) {
        formatter.applyPattern("F");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_MONTH)) {
        formatter.applyPattern("MM");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_MONTH_ABBR)) {
        formatter.applyPattern("MMM");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_MONTH_NAME)) {
        formatter.applyPattern("MMMM");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_TIME)) {
        formatter.applyPattern("HH:mm");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_HOUR)) {
        formatter.applyPattern("HH");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_WEEK)) {
        formatter.applyPattern("w");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_YEAR)) {
        formatter.applyPattern("yyyy");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_LOCAL_TIMESTAMP)) {
        formatter.applyPattern("yyyyMMddHHmmss");
        return formatter.format(current);
    }
    // current date values
    formatter.setTimeZone(utc);
    if (name.equals(MAGIC_CURRENT_DAY)) {
        formatter.applyPattern("d");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_DAY2)) {
        formatter.applyPattern("dd");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_DAY_NAME)) {
        formatter.applyPattern("EEEE");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_DAY_OF_WEEK)) {
        formatter.applyPattern("F");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_MONTH)) {
        formatter.applyPattern("MM");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_MONTH_ABBR)) {
        formatter.applyPattern("MMM");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_MONTH_NAME)) {
        formatter.applyPattern("MMMM");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_TIME)) {
        formatter.applyPattern("HH:mm");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_HOUR)) {
        formatter.applyPattern("HH");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_WEEK)) {
        formatter.applyPattern("w");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_YEAR)) {
        formatter.applyPattern("yyyy");
        return formatter.format(current);
    }
    if (name.equals(MAGIC_CURRENT_TIMESTAMP)) {
        formatter.applyPattern("yyyyMMddHHmmss");
        return formatter.format(current);
    }
    // statistics
    NumberFormat numFormatter = NumberFormat.getInstance();
    if (name.equals(MAGIC_CURRENT_VERSION)) {
        return WikiVersion.CURRENT_WIKI_VERSION;
    }
    /*
		if (name.equals(MAGIC_NUMBER_ARTICLES)) {
		}
		if (name.equals(MAGIC_NUMBER_ARTICLES_R)) {
		}
		*/
    if (name.equals(MAGIC_NUMBER_PAGES)) {
        int results = WikiBase.getDataHandler().lookupTopicCount(parserInput.getVirtualWiki());
        return numFormatter.format(results);
    }
    if (name.equals(MAGIC_NUMBER_PAGES_R)) {
        int results = WikiBase.getDataHandler().lookupTopicCount(parserInput.getVirtualWiki());
        return Integer.toString(results);
    }
    if (name.equals(MAGIC_NUMBER_FILES)) {
        int results = WikiBase.getDataHandler().lookupWikiFileCount(parserInput.getVirtualWiki());
        return numFormatter.format(results);
    }
    if (name.equals(MAGIC_NUMBER_FILES_R)) {
        int results = WikiBase.getDataHandler().lookupWikiFileCount(parserInput.getVirtualWiki());
        return Integer.toString(results);
    }
    if (name.equals(MAGIC_NUMBER_USERS)) {
        int results = WikiBase.getDataHandler().lookupWikiUserCount();
        return numFormatter.format(results);
    }
    if (name.equals(MAGIC_NUMBER_USERS_R)) {
        int results = WikiBase.getDataHandler().lookupWikiUserCount();
        return Integer.toString(results);
    }
    /*
		if (name.equals(MAGIC_NUMBER_ADMINS)) {
		}
		if (name.equals(MAGIC_NUMBER_ADMINS_R)) {
		}
		if (name.equals(MAGIC_PAGES_IN_NAMESPACE)) {
		}
		if (name.equals(MAGIC_PAGES_IN_NAMESPACE_NS)) {
		}
		if (name.equals(MAGIC_PAGES_IN_NAMESPACE_NS_R)) {
		}
		*/
    // page values
    WikiLink wikiLink = LinkUtil.parseWikiLink(parserInput.getTopicName());
    if (name.equals(MAGIC_FULL_PAGE_NAME)) {
        return parserInput.getTopicName();
    }
    if (name.equals(MAGIC_FULL_PAGE_NAME_E)) {
        return Utilities.encodeForURL(parserInput.getTopicName());
    }
    if (name.equals(MAGIC_PAGE_NAME)) {
        return wikiLink.getArticle();
    }
    if (name.equals(MAGIC_PAGE_NAME_E)) {
        return Utilities.encodeForURL(wikiLink.getArticle());
    }
    if (name.equals(MAGIC_SUB_PAGE_NAME)) {
        String topic = wikiLink.getArticle();
        int pos = topic.lastIndexOf('/');
        if (pos != -1 && pos < topic.length()) {
            topic = topic.substring(pos + 1);
        }
        return topic;
    }
    if (name.equals(MAGIC_SUB_PAGE_NAME_E)) {
        String topic = wikiLink.getArticle();
        int pos = topic.lastIndexOf('/');
        if (pos != -1 && pos < topic.length()) {
            topic = topic.substring(pos + 1);
        }
        return Utilities.encodeForURL(topic);
    }
    if (name.equals(MAGIC_BASE_PAGE_NAME)) {
        String topic = wikiLink.getArticle();
        int pos = topic.lastIndexOf('/');
        if (pos != -1 && pos < topic.length()) {
            topic = topic.substring(0, pos);
        }
        return topic;
    }
    if (name.equals(MAGIC_BASE_PAGE_NAME_E)) {
        String topic = wikiLink.getArticle();
        int pos = topic.lastIndexOf('/');
        if (pos != -1 && pos < topic.length()) {
            topic = topic.substring(0, pos);
        }
        return Utilities.encodeForURL(topic);
    }
    if (name.equals(MAGIC_NAMESPACE)) {
        return wikiLink.getNamespace();
    }
    if (name.equals(MAGIC_NAMESPACE_E)) {
        return Utilities.encodeForURL(wikiLink.getNamespace());
    }
    if (name.equals(MAGIC_TALK_SPACE)) {
        String namespace = wikiLink.getNamespace();
        return NamespaceHandler.getCommentsNamespace(namespace);
    }
    if (name.equals(MAGIC_TALK_SPACE_E)) {
        String namespace = wikiLink.getNamespace();
        return Utilities.encodeForURL(NamespaceHandler.getCommentsNamespace(namespace));
    }
    if (name.equals(MAGIC_SUBJECT_SPACE) || name.equals(MAGIC_ARTICLE_SPACE)) {
        String namespace = wikiLink.getNamespace();
        return NamespaceHandler.getMainNamespace(namespace);
    }
    if (name.equals(MAGIC_SUBJECT_SPACE_E) || name.equals(MAGIC_ARTICLE_SPACE_E)) {
        String namespace = wikiLink.getNamespace();
        return Utilities.encodeForURL(NamespaceHandler.getMainNamespace(namespace));
    }
    if (name.equals(MAGIC_TALK_PAGE_NAME)) {
        return WikiUtil.extractCommentsLink(parserInput.getTopicName());
    }
    if (name.equals(MAGIC_TALK_PAGE_NAME_E)) {
        return Utilities.encodeForURL(WikiUtil.extractCommentsLink(parserInput.getTopicName()));
    }
    if (name.equals(MAGIC_SUBJECT_PAGE_NAME) || name.equals(MAGIC_ARTICLE_PAGE_NAME)) {
        return WikiUtil.extractTopicLink(parserInput.getTopicName());
    }
    if (name.equals(MAGIC_SUBJECT_PAGE_NAME_E) || name.equals(MAGIC_ARTICLE_PAGE_NAME_E)) {
        return Utilities.encodeForURL(WikiUtil.extractTopicLink(parserInput.getTopicName()));
    }
    Topic topic = WikiBase.getDataHandler().lookupTopic(parserInput.getVirtualWiki(), parserInput.getTopicName(), false, null);
    TopicVersion topicVersion = WikiBase.getDataHandler().lookupTopicVersion(topic.getCurrentVersionId().intValue(), null);
    Date revision = topicVersion.getEditDate();
    formatter.setTimeZone(utc);
    if (name.equals(MAGIC_REVISION_DAY)) {
        formatter.applyPattern("d");
        return formatter.format(revision);
    }
    if (name.equals(MAGIC_REVISION_DAY2)) {
        formatter.applyPattern("dd");
        return formatter.format(revision);
    }
    if (name.equals(MAGIC_REVISION_MONTH)) {
        formatter.applyPattern("MM");
        return formatter.format(revision);
    }
    if (name.equals(MAGIC_REVISION_YEAR)) {
        formatter.applyPattern("yyyy");
        return formatter.format(revision);
    }
    if (name.equals(MAGIC_REVISION_TIMESTAMP)) {
        formatter.applyPattern("yyyyMMddHHmmss");
        return formatter.format(revision);
    }
    /*
		if (name.equals(MAGIC_REVISION_ID)) {
		}
		if (name.equals(MAGIC_SITE_NAME)) {
		}
		if (name.equals(MAGIC_SERVER)) {
		}
		if (name.equals(MAGIC_SCRIPT_PATH)) {
		}
		if (name.equals(MAGIC_SERVER_NAME)) {
		}
		*/
    return name;
}
