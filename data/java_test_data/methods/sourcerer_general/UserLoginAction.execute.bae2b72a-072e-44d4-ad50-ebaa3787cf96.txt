/*
	 * Generated Methods
	 */
public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException {
    ResultSet rs;
    boolean ValidUser = false;
    UserLoginForm userLoginForm = (UserLoginForm) form;
    HttpSession s = request.getSession();
    response.setHeader("Pragma", "no-cache");
    response.setHeader("Cache-Control", "no-cache");
    response.setHeader("Cache-Control", "no-store");
    response.setDateHeader("Expires", System.currentTimeMillis());
    String validation_query = "select * from users where userID= '" + userLoginForm.getUserName() + "' and password= '" + userLoginForm.getPassword() + "'";
    DataAccessObject ValidateUser = new DataAccessObject(validation_query, false);
    rs = ValidateUser.QueryResult();
    while (rs.next()) {
        if (rs.getString(1).equals(userLoginForm.getUserName()) && rs.getString(2).equals(userLoginForm.getPassword())) {
            ValidUser = true;
        }
    }
    ValidateUser.closeAll();
    if (ValidUser) {
        // Query for retrieving the friends List
        String FriendListQuery = "select userID from users,(select friendId from friends where userid='" + userLoginForm.getUserName() + "') F where users.userID = F.friendid";
        DataAccessObject DAO = new DataAccessObject(FriendListQuery, false);
        rs = DAO.QueryResult();
        Vector<String> FriendsList = new Vector<String>();
        String userID = "";
        while (rs.next()) {
            userID = rs.getString("userID");
            FriendsList.add(userID);
        }
        s.setAttribute("userStatus", "1");
        s.setAttribute("userName", userLoginForm.getUserName());
        // returns an object of type result set
        s.setAttribute("HisFriendsList", FriendsList);
        DAO.closeAll();
        return mapping.findForward("success");
    }
    s.setAttribute("userIsValid", ValidUser);
    return mapping.findForward("failure");
}
