/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 * If the whole Annotations as first class elements ever goes through, will 
	 * probably need to specialize protected void refreshChildren() 
	 */
public void propertyChange(PropertyChangeEvent evt) {
    try {
        String property = evt.getPropertyName();
        if (IPropertyAware.P_INTERPRETABLE.equals(property)) {
            handleInterpretation(evt);
        } else if (IPropertyAware.P_INITIAL.equals(property)) {
            handleInitialization(evt);
        } else if (IPropertyAware.P_DISPOSE.equals(property)) {
            handleDispose(evt);
        } else if (IPropertyAware.P_ANNOTATION.equals(property)) {
            // PA Commented
            handleChildChange(evt);
        // handleAnnotationChange(evt);
        } else // }
        if (IPropertyAware.P_CHILD.equals(property)) {
            handleChildChange(evt);
        } else if (IPropertyAware.P_CHILDREN.equals(property)) {
            handleChildrenChange(evt);
        } else if (IPropertyAware.P_SOURCE_STREAM.equals(property)) {
            handleSourceChange(evt);
        } else if (IPropertyAware.P_SINK_STREAM.equals(property)) {
            handleTargetChange(evt);
        } else if (IPropertyAware.P_CONSTRAINT.equals(property)) {
            handleBoundsChange(evt);
        }
        if (IPropertyAware.P_REORDER.equals(property)) {
            handleReorderChange(evt);
        } else if (IPropertyAware.P_TEXT.equals(property)) {
            handleTextChange(evt);
        } else if (IPropertyAware.P_LAYOUT.equals(property)) {
            handleLayoutChange(evt);
        } else if (IPropertyAware.P_COMPLETENESS.equals(property)) {
            handleCompletenessChange(evt);
        } else if (IPropertyAware.P_COLOR.equals(property)) {
            handleColorChange(evt);
        } else if (IPropertyAware.P_CLEAR.equals(property)) {
            handleClearChange(evt);
        } else if (IPropertyAware.P_BACKGROUNDCOLOR.equals(property)) {
            handleBackGroundChangeEvent(evt);
        } else if (IPropertyAware.P_VISIBILITY.equals(property)) {
            handleVisibilityChange(evt);
        } else if (IPropertyAware.P_LOCATION.equals(property)) {
            handleLocationChange(evt);
        }
        // not use the Graph animation, if automatic layout is being used
        if (IPropertyAware.P_TEXT.equals(property)) {
            GraphicalEditPart graphicalEditPart = (GraphicalEditPart) (getViewer().getContents());
            IFigure partFigure = graphicalEditPart.getFigure();
            partFigure.getUpdateManager().performUpdate();
        }
    /*if (IPropertyAware.P_COLOR.equals(property))
			{
				GraphicalEditPart graphicalEditPart = (GraphicalEditPart) (getViewer().getContents());
				IFigure partFigure = graphicalEditPart.getFigure();
				partFigure.getUpdateManager().performUpdate();
			}*/
    } catch (Exception e) {
        e.printStackTrace();
    }
}
