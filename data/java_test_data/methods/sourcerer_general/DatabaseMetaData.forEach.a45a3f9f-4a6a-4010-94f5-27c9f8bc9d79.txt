void forEach(Object catalogStr) throws SQLException {
    ResultSet rs = null;
    try {
        StringBuffer queryBuf = new StringBuffer("SHOW KEYS FROM ");
        queryBuf.append(quotedId);
        queryBuf.append(table);
        queryBuf.append(quotedId);
        queryBuf.append(" FROM ");
        queryBuf.append(quotedId);
        queryBuf.append(catalogStr.toString());
        queryBuf.append(quotedId);
        rs = stmt.executeQuery(queryBuf.toString());
        TreeMap sortMap = new TreeMap();
        while (rs.next()) {
            String keyType = rs.getString("Key_name");
            if (keyType != null) {
                if (keyType.equalsIgnoreCase("PRIMARY") || keyType.equalsIgnoreCase("PRI")) {
                    byte[][] tuple = new byte[6][];
                    tuple[0] = ((catalogStr.toString() == null) ? new byte[0] : s2b(catalogStr.toString()));
                    tuple[1] = null;
                    tuple[2] = s2b(table);
                    String columnName = rs.getString("Column_name");
                    tuple[3] = s2b(columnName);
                    tuple[4] = s2b(rs.getString("Seq_in_index"));
                    tuple[5] = s2b(keyType);
                    sortMap.put(columnName, tuple);
                }
            }
        }
        // Now pull out in column name sorted order
        Iterator sortedIterator = sortMap.values().iterator();
        while (sortedIterator.hasNext()) {
            rows.add(new ByteArrayRow((byte[][]) sortedIterator.next(), getExceptionInterceptor()));
        }
    } finally {
        if (rs != null) {
            try {
                rs.close();
            } catch (Exception ex) {
                ;
            }
            rs = null;
        }
    }
}
