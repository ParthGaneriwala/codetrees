private void LoadComponents() {
    BorderLayout borderL = new BorderLayout();
    borderL.setHgap(5);
    borderL.setVgap(5);
    setLayout(borderL);
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    String[] polices = ge.getAvailableFontFamilyNames();
    CFont[] cfonts = new CFont[polices.length];
    CFont cFont;
    for (int i = 0; i < polices.length; i++) {
        cFont = new CFont(polices[i]);
        cfonts[i] = cFont;
    }
    list = new JList(cfonts);
    list.addListSelectionListener(new ListSelectionListener() {

        public void valueChanged(ListSelectionEvent arg0) {
            // séléction d'un élément
            Object object = list.getSelectedValue();
            if (object != null) {
                if (object instanceof CFont) {
                    CFont cFont = (CFont) object;
                    Font exempleFont = new Font(cFont.getFontName(), Font.PLAIN, 20);
                    exempleText.setFont(exempleFont);
                }
            }
        }
    });
    JScrollPane sc = new JScrollPane(list);
    add(sc, BorderLayout.NORTH);
    // label de test
    JPanel exemplePanel = new JPanel(new BorderLayout());
    JPanel exemplePanelBis = new JPanel();
    exemplePanelBis.add(new JLabel(UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_LB_EXEMPLE")));
    exemplePanel.add(exemplePanelBis, BorderLayout.NORTH);
    exempleText = new JTextArea(UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_EXEMPLE"));
    Font exempleFont = new Font(font.getFontName(), Font.PLAIN, 20);
    exempleText.setFont(exempleFont);
    exempleText.setLineWrap(true);
    exempleText.setWrapStyleWord(true);
    exempleText.setBorder(BorderFactory.createLineBorder(Color.black));
    // exempleText.setForeground( font.getFontColor().getColor() );
    exempleText.setRows(3);
    exemplePanel.add(exempleText, BorderLayout.CENTER);
    add(exemplePanel, BorderLayout.CENTER);
    // =======================================================
    // panel des option  (autoSize, color ...)
    // =======================================================
    JPanel panelOption = new JPanel();
    GridBagLayout gbLayoutGlobal = new GridBagLayout();
    panelOption.setLayout(gbLayoutGlobal);
    autoSize = new JCheckBox(UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_AUTOSIZE"), font.isAutoSize());
    autoSize.addChangeListener(new ChangeListener() {

        public void stateChanged(ChangeEvent arg0) {
            if (autoSize.isSelected()) {
                comboSize.setEnabled(false);
                labelSize.setEnabled(false);
            } else {
                comboSize.setEnabled(true);
                labelSize.setEnabled(true);
            }
        }
    });
    // Ajout des Contraintes de AutoSize
    GridBagConstraints gbConstAutoSize = new GridBagConstraints(// Numéro de colonne
    0, // Numéro de ligne
    0, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    50, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(autoSize, gbConstAutoSize);
    panelOption.add(autoSize);
    labelSize = new JLabel("    " + UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_SIZE") + " : ");
    comboSize = new JComboBox(new Object[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 125, 150, 175, 200, 250, 300 });
    // Ajout des Contraintes de LabelSize
    GridBagConstraints gbConstLabelSize = new GridBagConstraints(// Numéro de colonne
    1, // Numéro de ligne
    0, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    25, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(labelSize, gbConstLabelSize);
    panelOption.add(labelSize);
    // Ajout des Contraintes de ComboSize
    GridBagConstraints gbConstComboSize = new GridBagConstraints(// Numéro de colonne
    2, // Numéro de ligne
    0, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    25, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(comboSize, gbConstComboSize);
    panelOption.add(comboSize);
    autoColor = new JCheckBox(UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_AUTOCOLOR"), font.isAutoColor());
    autoColor.addChangeListener(new ChangeListener() {

        public void stateChanged(ChangeEvent arg0) {
            if (autoColor.isSelected()) {
                panelColor.removeMouseListener(lisBackGround);
                labelColor.setEnabled(false);
            } else {
                panelColor.removeMouseListener(lisBackGround);
                panelColor.addMouseListener(lisBackGround);
                labelColor.setEnabled(true);
            }
        }
    });
    // Ajout des Contraintes de AutoColor
    GridBagConstraints gbConstAutoColor = new GridBagConstraints(// Numéro de colonne
    0, // Numéro de ligne
    1, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    50, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(autoColor, gbConstAutoColor);
    panelOption.add(autoColor);
    labelColor = new JLabel("    " + UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_COLOR") + " : ");
    panelColor = new TColorPanel();
    panelColor.removeMouseListener(lisBackGround);
    panelColor.addMouseListener(lisBackGround);
    // Ajout des Contraintes de ComboSize
    GridBagConstraints gbConstLabelColor = new GridBagConstraints(// Numéro de colonne
    1, // Numéro de ligne
    1, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    25, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(labelColor, gbConstLabelColor);
    panelOption.add(labelColor);
    // Ajout des Contraintes de ComboSize
    GridBagConstraints gbConstButtonColor = new GridBagConstraints(// Numéro de colonne
    2, // Numéro de ligne
    1, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    25, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(panelColor, gbConstButtonColor);
    panelOption.add(panelColor);
    shadow = new JCheckBox(UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_SHADOW"), font.isShadow());
    // Ajout des Contraintes de ComboSize
    GridBagConstraints gbConstShadow = new GridBagConstraints(// Numéro de colonne
    0, // Numéro de ligne
    2, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    50, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(shadow, gbConstShadow);
    panelOption.add(shadow);
    bold = new JCheckBox(UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_BOLD"), font.isBold());
    // Ajout des Contraintes de ComboSize
    GridBagConstraints gbConstBold = new GridBagConstraints(// Numéro de colonne
    0, // Numéro de ligne
    3, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    50, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(bold, gbConstBold);
    panelOption.add(bold);
    italic = new JCheckBox(UIString.getUIString("LB_CONFPROFIL_PANEL_FONT_ITALIC"), font.isItalic());
    // Ajout des Contraintes de ComboSize
    GridBagConstraints gbConstItalic = new GridBagConstraints(// Numéro de colonne
    0, // Numéro de ligne
    4, // Nombre de colonnes occupées
    1, // Nombre de lignes occupées
    1, // Taille horizontale relative
    50, // Taille verticale relative
    20, // Ou placer le composant en cas de redimension
    GridBagConstraints.CENTER, // Manière de rétrécir le composant
    GridBagConstraints.BOTH, // Espace autours (haut, gauche, bas, droite)
    new Insets(0, 0, 0, 0), // Espace intérieur en X
    0, // Espace intérieur en Y
    0);
    gbLayoutGlobal.setConstraints(italic, gbConstItalic);
    panelOption.add(italic);
    add(panelOption, BorderLayout.SOUTH);
}
