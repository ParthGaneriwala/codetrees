@Test
public void testLeftGrams() throws Throwable {
    WindowNGramExtractor extractor = new WindowNGramExtractor(Token.class, new SpannedTextExtractor(), WindowNGramFeature.ORIENTATION_LEFT, WindowNGramFeature.DIRECTION_LEFT_TO_RIGHT, " ", 0, 3);
    // feature extraction on "island" in "...middle of the island..."
    tokenBuilder.buildTokens(jCas, "text obtained from gutenberg\n" + "I WANTED to go and look at a place right about the middle of " + "the island that I ' d found when I was exploring ;\n" + "so we started and soon got to it");
    Token token = JCasUtil.selectByIndex(jCas, Token.class, 19);
    assertEquals("island", token.getCoveredText());
    Feature feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("WindowNGram_L0_3gram_L2R", feature.getName());
    assertEquals("middle of the", feature.getValue().toString());
    // "I" - the first word of the sentence
    token = JCasUtil.selectByIndex(jCas, Token.class, 4);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB3 OOB2 OOB1", feature.getValue().toString());
    // "WANTED"
    token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB2 OOB1 I", feature.getValue().toString());
    // "to"
    token = JCasUtil.selectByIndex(jCas, Token.class, 6);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB1 I WANTED", feature.getValue().toString());
    // "go"
    token = JCasUtil.selectByIndex(jCas, Token.class, 7);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("I WANTED to", feature.getValue().toString());
    // "exploring"
    token = JCasUtil.selectByIndex(jCas, Token.class, 28);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("when I was", feature.getValue().toString());
    // ";"
    token = JCasUtil.selectByIndex(jCas, Token.class, 29);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("I was exploring", feature.getValue().toString());
    // behavior when there is no encapsulating sentence
    jCas.reset();
    jCas.setDocumentText("foo bar baz");
    token = new Token(jCas, 4, 7);
    token.addToIndexes();
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB3 OOB2 OOB1", feature.getValue().toString());
    extractor = new WindowNGramExtractor(Token.class, new SpannedTextExtractor(), WindowNGramFeature.ORIENTATION_LEFT, WindowNGramFeature.DIRECTION_RIGHT_TO_LEFT, " ", 0, 3);
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "text obtained from gutenberg\n" + "I WANTED to go and look at a place right about the middle of " + "the island that I ' d found when I was exploring ;\n" + "so we started and soon got to it");
    token = JCasUtil.selectByIndex(jCas, Token.class, 19);
    assertEquals("island", token.getCoveredText());
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("WindowNGram_L0_3gram_R2L", feature.getName());
    assertEquals("the of middle", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 4);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB1 OOB2 OOB3", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("I OOB1 OOB2", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 6);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("WANTED I OOB1", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 7);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("to WANTED I", feature.getValue().toString());
    // behavior when there is no encapsulating sentence
    jCas.reset();
    jCas.setDocumentText("foo bar baz");
    token = new Token(jCas, 4, 7);
    token.addToIndexes();
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals(feature.getValue().toString(), "OOB1 OOB2 OOB3");
    extractor = new WindowNGramExtractor(Token.class, new SpannedTextExtractor(), WindowNGramFeature.ORIENTATION_LEFT, WindowNGramFeature.DIRECTION_LEFT_TO_RIGHT, " ", 2, 4);
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "text obtained from gutenberg\n" + "I WANTED to go and look at a place right about the middle of " + "the island that I ' d found when I was exploring ;\n" + "so we started and soon got to it");
    token = JCasUtil.selectByIndex(jCas, Token.class, 19);
    assertEquals("island", token.getCoveredText());
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("WindowNGram_L2_2gram_L2R", feature.getName());
    assertEquals("the middle", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 4);
    assertEquals("I", token.getCoveredText());
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB4 OOB3", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 5);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB3 OOB2", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 6);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB2 OOB1", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 7);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB1 I", feature.getValue().toString());
    token = JCasUtil.selectByIndex(jCas, Token.class, 8);
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("I WANTED", feature.getValue().toString());
    // behavior when there is no encapsulating sentence
    jCas.reset();
    jCas.setDocumentText("foo bar baz");
    token = new Token(jCas, 4, 7);
    token.addToIndexes();
    feature = extractor.extract(jCas, token, Sentence.class);
    assertEquals("OOB4 OOB3", feature.getValue().toString());
}
