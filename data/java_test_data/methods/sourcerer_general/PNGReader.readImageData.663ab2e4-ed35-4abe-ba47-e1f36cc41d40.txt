private void readImageData() throws JimiException, IOException {
    InputStream dataStream = new SequenceInputStream(new IDATEnumeration(this));
    /*
		DataInputStream dis = new DataInputStream(
			new BufferedInputStream(
				new InflaterInputStream(dataStream,
																new Inflater())));
*/
    DataInputStream dis = new DataInputStream(new InflaterInputStream(dataStream, // new Inflater(true)));
    new Inflater()));
    int bps = 0;
    int filterOffset;
    switch(colorType) {
        case IT_GRAYSCALE:
        case IT_PALETTE:
            bps = depth;
            break;
        case IT_RGB:
            bps = 3 * depth;
            break;
        case IT_GRAYALPHA:
            bps = depth << 1;
            break;
        case IT_RGBA:
            bps = depth << 2;
            break;
    }
    filterOffset = (bps + 7) >> 3;
    for (pass = (multipass ? 1 : 0); pass < 8; pass++) {
        int pass = this.pass;
        int rInc = rowInc[pass];
        int cInc = colInc[pass];
        int sCol = startingCol[pass];
        // val number of pixels to be read for row in current pass
        int val = ((dataWidth - sCol + cInc - 1) / cInc);
        int samples = val * filterOffset;
        int rowSize = ((val * bps) + 7) >> 3;
        int sRow = startingRow[pass];
        if ((dataHeight <= sRow) || (rowSize == 0))
            continue;
        int sInc = rInc * dataWidth;
        byte[] inbuf = new byte[rowSize];
        int[] pix = new int[rowSize];
        int[] upix = null;
        int[] temp = new int[rowSize];
        // next Y value and number of rows to report to sendPixels
        int nextY = sRow;
        int rows = 0;
        for (// , rowStart += sInc)
        int y = sRow; // , rowStart += sInc)
        y < dataHeight; // , rowStart += sInc)
        y += rInc) {
            // next line was for the blockfill and animated display of deinterlace loading
            // rows += rInc;
            int rowFilter = dis.read();
            dis.readFully(inbuf);
            if (!filterRow(inbuf, pix, upix, rowFilter, filterOffset))
                throw new JimiException("Unknown filter type: " + rowFilter);
            // if (pass == 7)	// renable coverage tracking
            // {
            // Also add coverage for the row previous to the current
            // one because the coverage tracking was disabled for the
            // previous row due to inefficient tracking for single pixels
            // ji_.addCoverage(y - 1);
            // }
            insertJimiPixels(pix, samples, sCol, y);
            // disable blockfill its pretty expensive and not worth converting
            // if (multipass && (pass < 6))
            // blockFill(rowStart);
            upix = pix;
            pix = temp;
            temp = upix;
        }
        if (!multipass)
            break;
    }
    while (dis.read() != -1) ;
// while(dis.read() != -1)
// System.err.println("Leftover data encountered.");
}
