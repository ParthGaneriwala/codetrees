@Override
public boolean save(Schedule save) {
    // method incomplete
    Element schedules;
    Element schedule = null;
    Element semester;
    Element schedCourseGrp;
    Element cclass;
    NodeList schedule_nodes;
    NodeList semester_nodes;
    NodeList schedCourseGrp_nodes;
    boolean newFile = false;
    boolean appendFile = false;
    if (save == null)
        return false;
    // saveFile(super.getSourceFile());
    if (xmlDoc == null) {
        getLogger().warn("New XMLFile being created!");
        System.out.println("xmlDoc: " + xmlDoc);
        DocumentBuilderFactory dbFactory = DocumentBuilderFactoryImpl.newInstance();
        DocumentBuilder docBuilder = null;
        try {
            docBuilder = dbFactory.newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        xmlDoc = docBuilder.newDocument();
        newFile = true;
    }
    if (newFile) {
        // new empty XML file
        // Create the root element
        Date currentTime = new Date();
        schedules = xmlDoc.createElement(TAG_SCHEDULES);
        // adjust profile ID creation, look to database that value is unique?
        xmlDoc.appendChild(xmlDoc.createComment("created on: " + currentTime));
        schedules.setAttribute("profile", new Integer(save.getScheduleProfile()).toString());
        System.out.println("profileId: " + new Integer(save.getScheduleProfile()).toString());
    } else {
        // XML file already exists with root
        schedules = (Element) xmlDoc.getElementsByTagName(TAG_SCHEDULES).item(0);
    }
    if (!newFile && idExists(save.getScheduleId()) != -1) {
        this.delete(save.getScheduleId());
        appendFile = true;
    }
    if (newFile || appendFile) {
        schedule = xmlDoc.createElement(TAG_SCHEDULE);
        schedule.setAttribute("id", new Integer(save.getScheduleId()).toString());
        schedule.setAttribute("name", save.getScheduleName());
        System.out.println(schedules);
    } else {
        NodeList tempSchedule = xmlDoc.getElementsByTagName(TAG_SCHEDULE);
        for (int i = 0; i < tempSchedule.getLength(); i++) {
            if (tempSchedule.item(i).getAttributes().getNamedItem("id").getNodeValue().equals(new Integer(save.getScheduleId()).toString()))
                schedule = (Element) tempSchedule.item(i).getFirstChild();
            System.out.println("schedule: " + schedule);
        }
    }
    schedule_nodes = schedules.getChildNodes();
    if (// Add Schedule Element and its ID
    newFile || appendFile)
        schedules.appendChild(schedule);
    List<AcademicYear> acadYears = save.getAcademicYears();
    if (acadYears == null)
        return false;
    for (int i = 0; i < acadYears.size(); i++) {
        ArrayList<ScheduledSemester> currentSchedSemester = acadYears.get(i).getSemesters();
        for (int k = 0; k < currentSchedSemester.size(); k++) {
            ScheduledCourseGroup[] currentSCG = currentSchedSemester.get(k).getCourseGroups();
            semester = xmlDoc.createElement(TAG_SEMESTER);
            semester.setAttribute("year", new Integer(currentSchedSemester.get(k).getYear()).toString());
            semester.setAttribute("term", currentSchedSemester.get(k).getTerm());
            // System.out.println(currentSchedSemester.get(k).getSemesterId());
            if (schedule.getElementsByTagName(TAG_SEMESTER).equals(semester))
                ;
            else
                schedule.appendChild(semester);
            for (int t = 0; t < currentSCG.length; t++) {
                schedCourseGrp = xmlDoc.createElement(TAG_SCHEDCRSGRP);
                Course[] currentCourses = currentSCG[t].getCourses();
                for (int m = 0; m < currentCourses.length; m++) {
                    // System.out.println("entry: " + currentCourses[m].getDegreeProgram() + "\t" + currentCourses[m].getCourseNum());
                    cclass = xmlDoc.createElement(TAG_CLASS);
                    cclass.setAttribute("id", new Integer(currentCourses[m].getCourseId()).toString());
                    cclass.setAttribute("sid", new Integer(currentCourses[m].getSpecificSectionId()).toString());
                    cclass.appendChild(xmlDoc.createTextNode(currentCourses[m].getName()));
                    schedCourseGrp.appendChild(cclass);
                // System.out.print("");
                }
                semester.appendChild(schedCourseGrp);
            }
            schedule.appendChild(semester);
        }
    }
    if (newFile)
        schedules.appendChild(schedule);
    // Add to the root Element
    if (newFile) {
        xmlDoc.appendChild(schedules);
    }
    return this.saveFile(super.getSourceFile());
}
