public void analisarBaseInteiro(List<Token> tokensLexico) {
    ArrayList<Integer> reconhecidos = new ArrayList<Integer>();
    ArrayList<String> reconhecidosDebug = new ArrayList<String>();
    ArrayList<Integer> pilha = new ArrayList<Integer>();
    ArrayList<String> pilhaDebug = new ArrayList<String>();
    /**
     * Inicializa��o da pilha
     */
    pilha.add(51);
    // simbolo inicial
    pilha.add(52);
    Integer topoPilha = pilha.get(pilha.size() - 1);
    Compilador_Semantico sem = new Compilador_Semantico();
    int i = 0;
    for (i = 0; i < tokensLexico.size(); i++) {
        Token token = tokensLexico.get(i);
        // N�oTerminais no topo
        while (NaoTerminaisConstants.NAOTERMINAIS.containsValue(topoPilha) || AcoesSemanticasConstants.ACOES_SEMANTICAS.containsValue(topoPilha)) {
            if (NaoTerminaisConstants.NAOTERMINAIS.containsValue(topoPilha)) {
                List<Integer> regra = buscaRegraGramatical(topoPilha, token);
                // Substitui um N�oTerminal por um conjunto de N�oTerminais e/ou Terminais na pilha
                pilha.remove(pilha.size() - 1);
                Collections.reverse(regra);
                pilha.addAll(regra);
                if (regra != null) {
                    System.out.println(topoPilha + "( Proximo token: (" + token.getNmToken() + ")" + " --> Regra: " + regra.toString());
                    System.out.println("PILHA -->" + pilha.toString());
                    pilhaDebug = new ArrayList<String>();
                    for (Integer integer : pilha) {
                        pilhaDebug.add(AllConstantsKeyNumber.NAOTERMINAIS.get(integer));
                    }
                    System.out.println("PILHA -->" + pilhaDebug.toString());
                    System.out.println("RECONHECIDO -->" + reconhecidosDebug.toString());
                } else {
                    System.out.println(topoPilha + "(" + token.getNmToken() + ")" + "-->" + "##NULL##");
                    System.out.println("PILHA -->" + pilha.toString());
                    pilhaDebug = new ArrayList<String>();
                    for (Integer integer : pilha) {
                        pilhaDebug.add(AllConstantsKeyNumber.NAOTERMINAIS.get(integer));
                    }
                    System.out.println("PILHA -->" + pilhaDebug.toString());
                    System.out.println("RECONHECIDO -->" + reconhecidosDebug.toString());
                }
                topoPilha = pilha.get(pilha.size() - 1);
                if (topoPilha.equals(0)) {
                    pilha.remove(pilha.size() - 1);
                    topoPilha = pilha.get(pilha.size() - 1);
                }
            }
            if (AcoesSemanticasConstants.ACOES_SEMANTICAS.containsValue(topoPilha)) {
                tmp += "| Penultimo Token Antes da A��o: " + tokensLexico.get(i - 2).getNmToken().toLowerCase();
                tmp += "\t | Ultimo Token Antes da A��o: " + tokensLexico.get(i - 1).getNmToken().toLowerCase();
                tmp += "\t | A��o : " + topoPilha.intValue() + "\n";
                sem.setPenultimoRec("" + (tokensLexico.get(i - 2).getNmToken().toLowerCase()));
                sem.setUltimoRec("" + (tokensLexico.get(i - 1).getNmToken().toLowerCase()));
                sem.acaoSemantica(topoPilha.intValue());
                pilha.remove(pilha.size() - 1);
                topoPilha = pilha.get(pilha.size() - 1);
            }
        }
        if (TerminaisConstants.TERMINAIS.containsValue(topoPilha)) {
            // Terminais no topo
            if (topoPilha.equals(token.getCdToken())) {
                reconhecidos.add(topoPilha);
                reconhecidosDebug.add(TerminaisConstantsKeyNumber.TERMINAIS.get(topoPilha).toString());
                pilha.remove(pilha.size() - 1);
                System.out.println("PILHA --> " + pilha.toString());
                pilhaDebug = new ArrayList<String>();
                for (Integer integer : pilha) {
                    pilhaDebug.add(AllConstantsKeyNumber.NAOTERMINAIS.get(integer));
                }
                System.out.println("PILHA --> " + pilhaDebug.toString());
                System.out.println("RECONHECIDO --> " + reconhecidosDebug.toString());
            } else {
                System.out.println("ERRO SINT�TICO, gram�tica n�o reconhece sequencia de tokens");
                System.out.println("Topo da Pilha= " + topoPilha);
                System.out.println("Token esperado= " + token.getCdToken());
                JOptionPane.showMessageDialog(null, "Erro Sintatico, gramatica nao reconhece sequencia de tokens" + "\n" + "Topo da Pilha= " + topoPilha + "\n" + "C�digo do Token esperado= " + token.getCdToken() + "\n" + "Tipo do Token esperado= " + token.getTpToken() + "\n");
            // throw new NullPointerException(	 "Erro Sintatico, gramatica nao reconhece sequencia de tokens" + "\n"
            // +"Topo da Pilha= "+topoPilha + "\n"
            // +"C�digo do Token esperado= "+token.getCdToken() + "\n"
            // +"Tipo do Token esperado= "+token.getTpToken() + "\n");
            }
        } else {
            System.out.println("ERRO SINT�TICO, Erro inesperado!");
            JOptionPane.showMessageDialog(null, "ERRO SINT�TICO, Erro insperado!");
        // throw new NullPointerException("ERRO SINT�TICO, Erro insperado!");
        }
        topoPilha = pilha.get(pilha.size() - 1);
    }
    if (topoPilha.equals(101)) {
        tmp += "| Penultimo Token Antes da A��o: " + tokensLexico.get(i - 2).getNmToken().toLowerCase();
        tmp += "\t | Ultimo Token Antes da A��o: " + tokensLexico.get(i - 1).getNmToken().toLowerCase();
        tmp += "\t | A��o : " + topoPilha.intValue() + "\n";
        System.out.println(tmp);
        sem.setPenultimoRec("" + (tokensLexico.get(i - 2).getNmToken().toLowerCase()));
        sem.setUltimoRec("" + (tokensLexico.get(i - 1).getNmToken().toLowerCase()));
        sem.acaoSemantica(topoPilha.intValue());
        pilha.remove(pilha.size() - 1);
        topoPilha = pilha.get(pilha.size() - 1);
        if (topoPilha.equals(51)) {
            if (sem.getErro() != null && !sem.getErro().equals("")) {
                JOptionPane.showMessageDialog(null, "Execu��o N�o Realizada!", "ERRO SEM�NTICO FINAL", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "AN�LISE L�XICA E SINT�TICA CONCLU�DA COM SUCESSO!!!");
                sem.interpreta();
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "ERRO SINT�TICO, Ainda existem elementos na pilha!" + "\n" + "Pilha = " + pilha.toString());
    // throw new NullPointerException("ERRO SINT�TICO, Ainda existem elementos na pilha!" + "\n" +"Pilha = " +pilha.toString());
    }
}
