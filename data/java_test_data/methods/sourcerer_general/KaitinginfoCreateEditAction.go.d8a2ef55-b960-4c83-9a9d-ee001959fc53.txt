@Override
protected String go() throws JDBCException, HibernateException {
    // TODO Auto-generated method stub
    // ServletActionContext c=null;
    Timestamp timestamp = new java.sql.Timestamp(System.currentTimeMillis());
    this.kaiting.setModifyuserid(this.curuser.getUserid());
    this.kaiting.setModifyusername(this.curuser.getUsername());
    this.kaiting.setCaseid(caseid);
    this.kaiting.setModifytime(timestamp);
    if (isedit) {
        getSession().update(kaiting);
        if (type != null && type.equals("caijue")) {
            this.message = "裁决/判决信息修改成功";
            super.saveOperlog("修改裁决/判决信息", 2);
        } else if (type != null && type.equals("jixiao")) {
            this.message = "开庭资料准备绩效信息修改成功";
            super.saveOperlog("修改案件的开庭资料准备绩效信息", 2);
        } else {
            this.message = "开庭信息修改成功";
            super.saveOperlog("修改开庭信息", 2);
        }
    } else {
        kaiting.setKaitingid(caseid);
        getSession().save(kaiting);
        if (type != null && type.equals("caijue")) {
            this.message = "裁决/判决信息新增成功";
            super.saveOperlog("录入裁决/判决信息", 1);
        } else if (type != null && type.equals("jixiao")) {
            this.message = "录入案件的开庭资料准备绩效成功";
            super.saveOperlog("录入案件的开庭资料准备绩效", 2);
        } else {
            // 录入了开庭信息的话，就设置为已登记
            // 这里转为存量案件
            TlawLawcase lawcase = (TlawLawcase) getSession().get(TlawLawcase.class, caseid);
            lawcase.setIsdengji(1);
            getSession().update(lawcase);
            this.message = "开庭信息新增成功";
            super.saveOperlog("录入开庭信息", 1);
        }
    }
    // 记录开庭资料准备绩效,加入到那个case_jixiao的表中
    if (type != null && type.equals("jixiao")) {
        TlawLawcase lawcase = (TlawLawcase) getSession().get(TlawLawcase.class, caseid);
        long workid = lawcase.getSusongworkid();
        TlawCaseJixiao jixiao = new TlawCaseJixiao();
        jixiao.setActionid(actionid);
        jixiao.setNodeid(nodeid);
        // 给诉讼承办人
        jixiao.setUserid(workid);
        jixiao.setJixiaoid(1005);
        jixiao.setThenumber(CommanDatas.ALLJIXIAOS.get(jixiao.getJixiaoid()).getJixiaofenshu());
        jixiao.setLogtime(df.format(timestamp));
        jixiao.setRemarks("开庭资料准备绩效");
        jixiao.setCaseid(caseid);
        jixiao.setWhylog(kaiting.getJixiaowhy());
        LawcaseService.saveJixiao(getSession(), jixiao, this.curuser);
    }
    // 不管如何,都修改先那个立案信息里的数据
    getSession().update(lianinfo);
    // if (!isedit&&kaiting.getJixiao() == 1) {
    if (chuanpiaojixiao == 1) {
        // 这里要判断这个人是否已经记录了绩效，如果记录了则只更新下记录时间等
        this.lawcase = (TlawLawcase) getSession().get(TlawLawcase.class, caseid);
        long workid = lawcase.getSusongworkid();
        TlawCaseJixiao jixiao = new TlawCaseJixiao();
        jixiao.setActionid(actionid);
        jixiao.setNodeid(nodeid);
        jixiao.setUserid(workid);
        jixiao.setJixiaoid(1002);
        jixiao.setThenumber(CommanDatas.ALLJIXIAOS.get(jixiao.getJixiaoid()).getJixiaofenshu());
        jixiao.setLogtime(df.format(timestamp));
        jixiao.setRemarks("录入开庭信息时为诉讼承办人记录领开庭传票绩效");
        jixiao.setCaseid(caseid);
        jixiao.setWhylog(CommanDatas.ALLJIXIAOS.get(jixiao.getJixiaoid()).getWhylog());
        LawcaseService.saveJixiao(getSession(), jixiao, this.curuser);
    }
    this.nextpage = "caseDoView.action?caseid=" + caseid;
    return SUCCESS;
}
