public void run() {
    while (!closed && clientRunning) {
        // if the Responder encountered an error, shutdown Responder
        if (hasError && response != null) {
            try {
                response.close();
                response.join();
                response = null;
            } catch (InterruptedException e) {
            }
        }
        Packet one = null;
        synchronized (dataQueue) {
            // process IO errors if any
            boolean doSleep = processDatanodeError(hasError, false);
            // wait for a packet to be sent.
            while ((!closed && !hasError && clientRunning && dataQueue.size() == 0) || doSleep) {
                try {
                    dataQueue.wait(1000);
                } catch (InterruptedException e) {
                }
                doSleep = false;
            }
            if (closed || hasError || dataQueue.size() == 0 || !clientRunning) {
                continue;
            }
            try {
                // get packet to be sent.
                one = dataQueue.getFirst();
                long offsetInBlock = one.offsetInBlock;
                // get new block from namenode.
                if (blockStream == null) {
                    LOG.debug("Allocating new block");
                    nodes = nextBlockOutputStream(src);
                    this.setName("DataStreamer for file " + src + " block " + block);
                    response = new ResponseProcessor(nodes);
                    response.start();
                }
                if (offsetInBlock >= blockSize) {
                    throw new IOException("BlockSize " + blockSize + " is smaller than data size. " + " Offset of packet in block " + offsetInBlock + " Aborting file " + src);
                }
                ByteBuffer buf = one.getBuffer();
                // move packet from dataQueue to ackQueue
                dataQueue.removeFirst();
                dataQueue.notifyAll();
                synchronized (ackQueue) {
                    ackQueue.addLast(one);
                    ackQueue.notifyAll();
                }
                // write out data to remote datanode
                blockStream.write(buf.array(), buf.position(), buf.remaining());
                if (one.lastPacketInBlock) {
                    // indicate end-of-block
                    blockStream.writeInt(0);
                }
                blockStream.flush();
                if (LOG.isDebugEnabled()) {
                    LOG.debug("DataStreamer block " + block + " wrote packet seqno:" + one.seqno + " size:" + buf.remaining() + " offsetInBlock:" + one.offsetInBlock + " lastPacketInBlock:" + one.lastPacketInBlock);
                }
            } catch (Throwable e) {
                LOG.warn("DataStreamer Exception: " + StringUtils.stringifyException(e));
                if (e instanceof IOException) {
                    setLastException((IOException) e);
                }
                hasError = true;
            }
        }
        if (closed || hasError || !clientRunning) {
            continue;
        }
        // Is this block full?
        if (one.lastPacketInBlock) {
            synchronized (ackQueue) {
                while (!hasError && ackQueue.size() != 0 && clientRunning) {
                    try {
                        // wait for acks to arrive from datanodes
                        ackQueue.wait();
                    } catch (InterruptedException e) {
                    }
                }
            }
            LOG.debug("Closing old block " + block);
            this.setName("DataStreamer for file " + src);
            // ignore all errors in Response
            response.close();
            try {
                response.join();
                response = null;
            } catch (InterruptedException e) {
            }
            if (closed || hasError || !clientRunning) {
                continue;
            }
            synchronized (dataQueue) {
                try {
                    blockStream.close();
                    blockReplyStream.close();
                } catch (IOException e) {
                }
                nodes = null;
                response = null;
                blockStream = null;
                blockReplyStream = null;
            }
        }
        if (progress != null) {
            progress.progress();
        }
        // This is used by unit test to trigger race conditions.
        if (artificialSlowdown != 0 && clientRunning) {
            try {
                Thread.sleep(artificialSlowdown);
            } catch (InterruptedException e) {
            }
        }
    }
}
