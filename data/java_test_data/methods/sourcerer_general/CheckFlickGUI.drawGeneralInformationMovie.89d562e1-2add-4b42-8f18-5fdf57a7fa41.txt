protected static void drawGeneralInformationMovie(final MovieEntity movie, final int tabIndex) {
    cleanAllComposites();
    Color frontColor = new Color(display, 222, 235, 247);
    entityDetails = new Composite(shell.getShell(), SWT.BORDER);
    entityDetails.setLocation(2, 145);
    entityDetails.setLayout(new FillLayout());
    bar = new ExpandBar(entityDetails, SWT.V_SCROLL);
    bar.setBackground(new Color(display, 177, 200, 231));
    Image image = ImageCache.getImage("paper_content_48.png");
    // general information
    final Composite composite = new Composite(bar, SWT.FILL);
    composite.setBackground(frontColor);
    GridLayout layout = new GridLayout(6, false);
    layout.marginLeft = layout.marginTop = layout.marginRight = layout.marginBottom = 5;
    layout.verticalSpacing = 10;
    composite.setLayout(layout);
    final ControlEditor editor = new ControlEditor(composite);
    editor.grabHorizontal = true;
    editor.grabVertical = true;
    Label label = new Label(composite, SWT.NONE);
    label.setText("Movie Name:");
    label.setBackground(frontColor);
    final Text nameText = new Text(composite, SWT.FILL | SWT.BORDER);
    if (movie.getName() != null)
        nameText.setText(movie.getName());
    label = new Label(composite, SWT.NONE);
    label.setText("Movie Year:");
    label.setBackground(frontColor);
    final Text yearText = new Text(composite, SWT.FILL | SWT.BORDER);
    if (movie.getYear() != 0)
        yearText.setText(String.valueOf(movie.getYear()));
    final String oldYear = String.valueOf(movie.getYear());
    label = new Label(composite, SWT.NONE);
    label.setText("Running Time:");
    label.setBackground(frontColor);
    final Text timeText = new Text(composite, SWT.FILL | SWT.BORDER);
    if (movie.getRunningTime() != 0)
        timeText.setText(String.valueOf(movie.getRunningTime()));
    final String oldTime = String.valueOf(movie.getRunningTime());
    label = new Label(composite, SWT.NONE);
    label.setText("Plot: ");
    label.setBackground(frontColor);
    final Text plotText = new Text(composite, SWT.WRAP | SWT.V_SCROLL | SWT.MULTI | SWT.BORDER);
    if (movie.getPlot() != null)
        plotText.setText(movie.getPlot());
    GridData gridData = new GridData();
    gridData.horizontalAlignment = GridData.FILL;
    gridData.horizontalSpan = 5;
    gridData.verticalAlignment = GridData.FILL;
    gridData.verticalSpan = 2;
    plotText.setLayoutData(gridData);
    label = new Label(composite, SWT.NONE);
    Button save = new Button(composite, SWT.PUSH);
    save.setText("Save");
    save.setBackground(frontColor);
    save.setEnabled(isAdmin);
    // listen to the save button
    save.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            Calendar toDay = Calendar.getInstance();
            final int year = toDay.get(Calendar.YEAR);
            String newName = movie.getName();
            int newYear = movie.getYear();
            int newTime = movie.getRunningTime();
            String newPlot = movie.getPlot();
            boolean valid = true;
            boolean update = false;
            if (newName.compareTo(nameText.getText()) != 0) {
                if (nameText.getText() != "") {
                    newName = nameText.getText();
                    update = true;
                } else {
                    okMessageBox("You can't leave the name of the movie empty.");
                    valid = false;
                }
            }
            if (oldYear.compareTo(yearText.getText()) != 0) {
                if (yearText.getText() != "") {
                    try {
                        newYear = Integer.parseInt(yearText.getText());
                        update = true;
                        if ((newYear < 1880) || (newYear > year + 100)) {
                            okMessageBox("Year must be between 1880 and " + (year + 100) + ".");
                            valid = false;
                        }
                    } catch (NumberFormatException nfe) {
                        okMessageBox("The year must be a number.");
                        valid = false;
                    }
                } else
                    okMessageBox("You can't leave the year of the movie empty.");
            }
            if (oldTime.compareTo(timeText.getText()) != 0) {
                if (timeText.getText() != "") {
                    try {
                        newTime = Integer.parseInt(timeText.getText());
                        update = true;
                        if (newTime < 0) {
                            okMessageBox("The running time must be larger than 0.");
                            valid = false;
                        }
                    } catch (NumberFormatException nfe) {
                        okMessageBox("Running time must be a number.");
                        valid = false;
                    }
                } else {
                    newTime = 0;
                    update = true;
                }
            }
            if (newPlot != null) {
                if (newPlot.compareTo(plotText.getText()) != 0) {
                    newPlot = plotText.getText();
                    update = true;
                }
            } else {
                if (plotText.getText() != "") {
                    newPlot = plotText.getText();
                    update = true;
                }
            }
            if (update && valid) {
                movie.setName(newName);
                movie.setPlot(newPlot);
                movie.setYear(newYear);
                movie.setRunningTime(newTime);
                try {
                    // saving
                    pool.execute(DataManager.updateMovieData(MovieDataEnum.MOVIE, movie));
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
            } else {
                // can't save
                if (!update)
                    okMessageBox("You didn't change anything.");
            }
        }
    });
    Button reset = new Button(composite, SWT.PUSH);
    reset.setText("Reset");
    // listen to the reset button
    reset.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            nameText.setText(movie.getName());
            if (movie.getYear() != 0)
                yearText.setText(String.valueOf(movie.getYear()));
            else
                yearText.setText("");
            if (movie.getRunningTime() != 0)
                timeText.setText(String.valueOf(movie.getRunningTime()));
            else
                timeText.setText("");
            if (movie.getPlot() != null)
                plotText.setText(movie.getPlot());
            else
                plotText.setText("");
        }
    });
    label = new Label(composite, SWT.NONE);
    label = new Label(composite, SWT.NONE);
    Button delete = new Button(composite, SWT.PUSH);
    delete.setText("Delete Movie");
    delete.setEnabled(isAdmin);
    // listen to the delete button
    delete.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent arg0) {
        }

        public void widgetSelected(SelectionEvent arg0) {
            switch(yesNoMessageBox("Are you sure you want to delete this movie?")) {
                case (SWT.YES):
                    {
                        try {
                            // deleting
                            pool.execute(DataManager.deleteMovieEntity(MovieDataEnum.MOVIE, movie, movie.getId()));
                            RibbonTab current = shell.getRibbonTabFolder().getSelectedTab();
                            entityDetails.setVisible(false);
                            shell.getRibbonTabFolder().selectPrevTab();
                            List<RibbonTab> tabList = shell.getRibbonTabFolder().getTabs();
                            tabList.remove(current.getIndex());
                            shell.getRibbonTabFolder().redraw();
                        } catch (InterruptedException ev) {
                            ev.printStackTrace();
                        }
                    }
                case (SWT.NO):
                    {
                    }
            }
        }
    });
    Button close = new Button(composite, SWT.PUSH);
    close.setText("Close Tab");
    close.setBackground(frontColor);
    ExpandItem item0 = new ExpandItem(bar, SWT.NONE, 0);
    item0.setText("General Information About The Movie");
    item0.setHeight(composite.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);
    item0.setControl(composite);
    item0.setImage(image);
    item0.setExpanded(true);
    // listen to the close tab button
    close.addSelectionListener(new SelectionListener() {

        public void widgetDefaultSelected(SelectionEvent e) {
        }

        public void widgetSelected(SelectionEvent e) {
            RibbonTab current = shell.getRibbonTabFolder().getTabs().get(tabIndex);
            entityDetails.setVisible(false);
            if (tabIndex == shell.getRibbonTabFolder().getSelectedTab().getIndex())
                shell.getRibbonTabFolder().selectPrevTab();
            List<RibbonTab> tabList = shell.getRibbonTabFolder().getTabs();
            tabList.remove(current.getIndex());
            shell.getRibbonTabFolder().redraw();
            ;
        }
    });
    bar.setSpacing(8);
    entityDetails.setSize(shell.getShell().getSize().x - 5, (shell.getShell().getSize().y) / 3);
}
