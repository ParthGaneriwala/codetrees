// $ANTLR start "exp_atomica"
public final gramaticaMM2Parser.exp_atomica_return exp_atomica() throws RecognitionException {
    gramaticaMM2Parser.exp_atomica_return retval = new gramaticaMM2Parser.exp_atomica_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LEFT_PAREN185 = null;
    Token RIGHT_PAREN187 = null;
    Token BOOL190 = null;
    gramaticaMM2Parser.expressao_return expressao186 = null;
    gramaticaMM2Parser.inteiro_return inteiro188 = null;
    gramaticaMM2Parser.caracter_return caracter189 = null;
    gramaticaMM2Parser.id_return id191 = null;
    gramaticaMM2Parser.procedure_chamada_return procedure_chamada192 = null;
    gramaticaMM2Parser.id_array_return id_array193 = null;
    CommonTree LEFT_PAREN185_tree = null;
    CommonTree RIGHT_PAREN187_tree = null;
    CommonTree BOOL190_tree = null;
    RewriteRuleTokenStream stream_LEFT_PAREN = new RewriteRuleTokenStream(adaptor, "token LEFT_PAREN");
    RewriteRuleTokenStream stream_RIGHT_PAREN = new RewriteRuleTokenStream(adaptor, "token RIGHT_PAREN");
    RewriteRuleSubtreeStream stream_procedure_chamada = new RewriteRuleSubtreeStream(adaptor, "rule procedure_chamada");
    RewriteRuleSubtreeStream stream_expressao = new RewriteRuleSubtreeStream(adaptor, "rule expressao");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:158:15: ( LEFT_PAREN expressao RIGHT_PAREN -> ^( PEREN_EXP expressao ) | inteiro | caracter | BOOL | id | procedure_chamada -> ^( FUNC_CALL_EXPRESSION procedure_chamada ) | id_array )
        int alt37 = 7;
        alt37 = dfa37.predict(input);
        switch(alt37) {
            case 1:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:158:17: LEFT_PAREN expressao RIGHT_PAREN
                {
                    LEFT_PAREN185 = (Token) match(input, LEFT_PAREN, FOLLOW_LEFT_PAREN_in_exp_atomica1772);
                    stream_LEFT_PAREN.add(LEFT_PAREN185);
                    pushFollow(FOLLOW_expressao_in_exp_atomica1774);
                    expressao186 = expressao();
                    state._fsp--;
                    stream_expressao.add(expressao186.getTree());
                    RIGHT_PAREN187 = (Token) match(input, RIGHT_PAREN, FOLLOW_RIGHT_PAREN_in_exp_atomica1776);
                    stream_RIGHT_PAREN.add(RIGHT_PAREN187);
                    // AST REWRITE
                    // elements: expressao
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 158:50: -> ^( PEREN_EXP expressao )
                    {
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:158:52: ^( PEREN_EXP expressao )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PEREN_EXP, "PEREN_EXP"), root_1);
                            adaptor.addChild(root_1, stream_expressao.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:159:14: inteiro
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_inteiro_in_exp_atomica1798);
                    inteiro188 = inteiro();
                    state._fsp--;
                    adaptor.addChild(root_0, inteiro188.getTree());
                }
                break;
            case 3:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:160:11: caracter
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_caracter_in_exp_atomica1811);
                    caracter189 = caracter();
                    state._fsp--;
                    adaptor.addChild(root_0, caracter189.getTree());
                }
                break;
            case 4:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:161:11: BOOL
                {
                    root_0 = (CommonTree) adaptor.nil();
                    BOOL190 = (Token) match(input, BOOL, FOLLOW_BOOL_in_exp_atomica1823);
                    BOOL190_tree = (CommonTree) adaptor.create(BOOL190);
                    adaptor.addChild(root_0, BOOL190_tree);
                }
                break;
            case 5:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:162:11: id
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_id_in_exp_atomica1836);
                    id191 = id();
                    state._fsp--;
                    adaptor.addChild(root_0, id191.getTree());
                }
                break;
            case 6:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:163:11: procedure_chamada
                {
                    pushFollow(FOLLOW_procedure_chamada_in_exp_atomica1849);
                    procedure_chamada192 = procedure_chamada();
                    state._fsp--;
                    stream_procedure_chamada.add(procedure_chamada192.getTree());
                    // AST REWRITE
                    // elements: procedure_chamada
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 163:29: -> ^( FUNC_CALL_EXPRESSION procedure_chamada )
                    {
                        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:163:32: ^( FUNC_CALL_EXPRESSION procedure_chamada )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(FUNC_CALL_EXPRESSION, "FUNC_CALL_EXPRESSION"), root_1);
                            adaptor.addChild(root_1, stream_procedure_chamada.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 7:
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:164:11: id_array
                {
                    root_0 = (CommonTree) adaptor.nil();
                    pushFollow(FOLLOW_id_array_in_exp_atomica1869);
                    id_array193 = id_array();
                    state._fsp--;
                    adaptor.addChild(root_0, id_array193.getTree());
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
