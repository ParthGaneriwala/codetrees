public static GAddress geocode(String address, String key) throws IOException {
    // TODO fix the throws exception
    URL url = new URL(URLstr + "&q=" + URLEncoder.encode(address, "UTF-8") + "&key=" + key);
    URLConnection conn = url.openConnection();
    ByteArrayOutputStream output = new ByteArrayOutputStream(1024);
    IOUtils.copy(conn.getInputStream(), output);
    output.close();
    GAddress gaddr = new GAddress();
    gaddr.setUserEnteredAddress(address);
    JSONObject json = JSONObject.fromObject(output.toString());
    // check for error
    Integer returnCode = Integer.valueOf(query(json, "Status.code").toString());
    if (HttpURLConnection.HTTP_OK == returnCode) {
        JSONObject placemark = (JSONObject) query(json, "Placemark[0]");
        final StringBuffer commonId = new StringBuffer("AddressDetails.Country.AdministrativeArea");
        StringBuffer addressId = commonId;
        // Sometimes google doesn't return SubAdministrativeArea (e.g. in the case of geocoding a zipcode, as of 11-12-07)
        if (!StringUtils.isEmpty(query(placemark, commonId + ".SubAdministrativeArea").toString())) {
            addressId.append(".SubAdministrativeArea");
        }
        addressId.append(".Locality");
        gaddr.setFullAddress(query(placemark, "address").toString());
        gaddr.setZipCode(query(placemark, addressId + ".PostalCode.PostalCodeNumber").toString());
        gaddr.setAddress(query(placemark, addressId + ".Thoroughfare.ThoroughfareName").toString());
        gaddr.setCity(query(placemark, addressId + ".LocalityName").toString());
        gaddr.setCounty(query(placemark, commonId + ".SubAdministrativeArea.SubAdministrativeAreaName").toString());
        gaddr.setState(query(placemark, commonId + ".AdministrativeAreaName").toString());
        gaddr.setCountry(query(placemark, "AddressDetails.Country.CountryNameCode").toString());
        gaddr.setAccuracy(Integer.valueOf(query(placemark, "AddressDetails.Accuracy").toString()));
        gaddr.setPoint(Double.parseDouble(query(placemark, "Point.coordinates[1]").toString()), Double.parseDouble(query(placemark, "Point.coordinates[0]").toString()));
    }
    return gaddr;
}
