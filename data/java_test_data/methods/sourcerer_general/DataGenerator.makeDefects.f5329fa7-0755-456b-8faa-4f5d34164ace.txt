private static void makeDefects() {
    final int priorities = Priority.values().length;
    final int statuses = DefectStatus.values().length;
    final int severities = Severity.values().length;
    String defect = "Defect ";
    for (int c = 0; c < defects; c++) {
        User randomUser = allUsers.get(random.nextInt(allUsers.size()));
        Defect newbie = null;
        try {
            newbie = new Defect(defect + c, randomUser);
        }// never occurs.
         catch (ConstraintViolationException e) {
            continue;
        }
        newbie.setPriority(Priority.values()[random.nextInt(priorities)]);
        newbie.setDefectStatus(DefectStatus.values()[random.nextInt(statuses)]);
        newbie.setSeverity(Severity.values()[random.nextInt(severities)]);
        newbie.setProduct(allProducts.get(random.nextInt(allProducts.size())));
        if (random.nextBoolean()) {
            newbie.setTester(testers.get(random.nextInt(testers.size())));
        }
        if (random.nextBoolean()) {
            newbie.setDeveloper(developers.get(random.nextInt(developers.size())));
        }
        if (random.nextBoolean()) {
            Product randomProduct = allProducts.get(random.nextInt(allProducts.size()));
            newbie.setProduct(randomProduct);
            if (random.nextBoolean()) {
                ArrayList<Build> allBuilds = randomProduct.getBuildList().getArrayList();
                if (allBuilds.size() > 0) {
                    newbie.setBuild(allBuilds.get(random.nextInt(allBuilds.size())));
                }
            }
            if (random.nextBoolean()) {
                ArrayList<Module> allModules = randomProduct.getModuleList().getArrayList();
                if (allModules.size() > 0) {
                    newbie.setModule(allModules.get(random.nextInt(allModules.size())));
                }
            }
        }
        // initialize other values
        model.getDefects().add(newbie);
    }
}
