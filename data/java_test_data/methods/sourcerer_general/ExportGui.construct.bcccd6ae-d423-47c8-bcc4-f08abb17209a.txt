public Boolean construct() {
    try {
        // create the separator
        String lSeparator = ";";
        // get the ratiotypes
        String[] lTypes = iQuantitativeValidationSingelton.getReferenceSet().getTypes();
        // get the ratio components
        String[] lComponents = iQuantitativeValidationSingelton.getReferenceSet().getComponents();
        // create the writer
        BufferedWriter out = new BufferedWriter(new FileWriter(lPath));
        ReferenceSet lReferenceSet = iQuantitativeValidationSingelton.getReferenceSet();
        // 1.WRITE THE TITLE
        String lTitle = "accession" + lSeparator + "comment" + lSeparator + "selected" + lSeparator + "validated" + lSeparator + "number of identifications" + lSeparator + "number of different peptides" + lSeparator + "number of ratiogroups" + lSeparator + "protein coverage";
        for (int k = 0; k < lTypes.length; k++) {
            // lTitle = lTitle + lSeparator + lTypes[k] + " protein ratio" + lSeparator + lTypes[k] + " protein ratio SD" + lSeparator + lTypes[k] + " number of peptide ratios used";
            // lTitle = lTitle + lSeparator + lTypes[k] + " protein ratio" + lSeparator + lTypes[k] + " protein ratio SD" + lSeparator + lTypes[k] + " protein ratio MAD" + lSeparator + lTypes[k] + " protein P-value" + lSeparator + lTypes[k] + " protein Z-score" + lSeparator + lTypes[k] + " protein Power" + lSeparator + lTypes[k] + " protein mean Random Z-Score" + lSeparator + lTypes[k] + " protein SD Random Z-Score" + lSeparator + lTypes[k] + " number of peptide ratios used";
            // lTitle = lTitle + lSeparator + lTypes[k] + " protein intensity sum " + lSeparator + lTypes[k] + " protein intensity mean" + lSeparator + lTypes[k] + " protein intensity median" + lSeparator + lTypes[k] + " protein intensity SD" + lSeparator + lTypes[k] + " intensity sum Z-score" + lSeparator + lTypes[k] + " intensity mean Z-score" + lSeparator + lTypes[k] + " intensity median Z-score" + lSeparator + lTypes[k] + " intensity sd Z-score" + lSeparator + lTypes[k] + " original MAD SD" + lSeparator + lTypes[k] + " normalized MAD SD" + lSeparator + lTypes[k] + " original MAD Mean" + lSeparator + lTypes[k] + " normalized MAD Mean" + lSeparator + lTypes[k] + " peptide grouped protein ratio" + lSeparator + lTypes[k] + " ratios valid" + lSeparator + "Number of distinct peptide with one valid " + lTypes[k] + " ratio";
            lTitle = lTitle + lSeparator + lTypes[k] + " protein ratio" + lSeparator + lTypes[k] + " protein ratio SD" + lSeparator + lTypes[k] + " protein Z-score" + lSeparator + lTypes[k] + " number of peptide ratios used";
            lTitle = lTitle + lSeparator + lTypes[k] + " peptide grouped protein ratio" + lSeparator + lTypes[k] + " ratios valid" + lSeparator + "Number of distinct peptide with one valid " + lTypes[k] + " ratio";
        }
        /*String lSources = "";
                    if (iQuantitativeValidationSingelton.isMultipleSources()) {
                        lTitle = lTitle + lSeparator + "Sources used";
                        Vector<Boolean> lSelectedIndices = iQuantitativeValidationSingelton.getSelectedIndexes();
                        for (int i = 0; i < lSelectedIndices.size(); i++) {
                            if (lSelectedIndices.get(i)) {
                                lSources = lSources + (i + 1) + "_";
                            }
                        }
                        lSources = lSources.substring(0, lSources.lastIndexOf("_"));
                    } */
        out.write(lTitle + "\n");
        // 2.WRITE THE PROTEIN RATIOS
        // set the progress bar
        progressBar1.setVisible(true);
        progressBar1.setMaximum(iProteinsToExport.size() + 1);
        progressBar1.setValue(0);
        for (int i = 0; i < iProteinsToExport.size(); i++) {
            progressBar1.setValue(progressBar1.getValue() + 1);
            QuantitativeProtein lProtein = iProteinsToExport.get(i);
            // System.out.print("\n" + i);
            String lResult = "";
            lResult = lResult + lProtein.getAccession() + lSeparator + lProtein.getProteinComment() + lSeparator + lProtein.getSelected() + lSeparator + lProtein.getValidated() + lSeparator + lProtein.getNumberOfIdentifications() + lSeparator + lProtein.getPeptideGroups(true).size() + lSeparator + lProtein.getNumberOfRatioGroups() + lSeparator + lProtein.getProteinCoverage();
            for (int k = 0; k < lTypes.length; k++) {
                // lResult = lResult + lSeparator + lProtein.getProteinRatio(lTypes[k]) + lSeparator + lProtein.getProteinRatioStandardDeviationForType(lTypes[k]) + lSeparator + lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]);
                // lResult = lResult + lSeparator + lProtein.getProteinRatio(lTypes[k]) + lSeparator + lProtein.getProteinRatioStandardDeviationForType(lTypes[k]) + lSeparator + lProtein.getProteinRatioMADForType(lTypes[k]) + lSeparator + lProtein.getProteinPvalue(lTypes[k], -1) + lSeparator + lProtein.getProteinZScore(lTypes[k], -1) + lSeparator + lProtein.getPower(lTypes[k], -1, 1.96) + lSeparator + lReferenceSet.getZscoreForRatioMean(lProtein.getRatioIndexMeanForType(lTypes[k]), lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]), lTypes[k]) + lSeparator + lReferenceSet.getZscoreForRatioSd(lProtein.getRatioIndexSDForType(lTypes[k]), lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]), lTypes[k]) + lSeparator + lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]);
                // lResult = lResult + lSeparator + lProtein.getSummedProteinIntensities(lTypes[k], -1, true) + lSeparator + lProtein.getMeanProteinIntensity(lTypes[k], -1, true) + lSeparator + lProtein.getMedianProteinIntensity(lTypes[k], -1, true) + lSeparator + lProtein.getStandardDeviationProteinIntensities(lTypes[k], -1, true) + lSeparator + lReferenceSet.getZscoreForIntensitySum(lProtein.getSummedProteinIntensities(lTypes[k], -1, true), lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]), lTypes[k]) + lSeparator + lReferenceSet.getZscoreForIntensityMean(lProtein.getMeanProteinIntensity(lTypes[k], -1, true), lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]), lTypes[k]) + lSeparator + lReferenceSet.getZscoreForIntensityMedian(lProtein.getMedianProteinIntensity(lTypes[k], -1, true), lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]), lTypes[k]) + lSeparator + lReferenceSet.getZscoreForIntensitySd(lProtein.getStandardDeviationProteinIntensities(lTypes[k], -1, true), lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]), lTypes[k]) + lSeparator + lProtein.getOriginalMadSD(lTypes[k]) + lSeparator + lProtein.getNormalizedMadSD(lTypes[k]) + lSeparator + lProtein.getOriginalMadMean(lTypes[k]) + lSeparator + lProtein.getNormalizedMadMean(lTypes[k]) + lSeparator + lProtein.getGroupedProteinRatio(lTypes[k]) + lSeparator + lProtein.getNumberOfValidRatioByType(lTypes[k]) + lSeparator + lProtein.getNumberOfDistinctPeptidesWithOneValidRatioByType(lTypes[k]);
                lResult = lResult + lSeparator + lProtein.getProteinRatio(lTypes[k]) + lSeparator + lProtein.getProteinRatioStandardDeviationForType(lTypes[k]) + lSeparator + lProtein.getProteinZScore(lTypes[k], -1) + lSeparator + lProtein.getNumberOfRatiosUsedForProteinMean(lTypes[k]);
                lResult = lResult + lSeparator + lProtein.getGroupedProteinRatio(lTypes[k]) + lSeparator + lProtein.getNumberOfValidRatioByType(lTypes[k]) + lSeparator + lProtein.getNumberOfDistinctPeptidesWithOneValidRatioByType(lTypes[k]);
            }
            /*
                        if (iQuantitativeValidationSingelton.isMultipleSources()) {
                            lResult = lResult + lSeparator + lSources;
                        } */
            out.write(lResult + "\n");
        // System.out.print("   done");
        }
        progressBar1.setVisible(false);
        out.close();
        // show that the saving is done
        JOptionPane.showMessageDialog(new JFrame(), "Saving done", "Info", JOptionPane.INFORMATION_MESSAGE);
        cancelButton.setText("Close");
    } catch (IOException e) {
        // show that the saving is done
        JOptionPane.showMessageDialog(new JFrame(), "Saving with errors: " + e.getMessage(), "Info", JOptionPane.INFORMATION_MESSAGE);
        cancelButton.setText("Close");
        logger.error(e.getMessage(), e);
    }
    return true;
}
