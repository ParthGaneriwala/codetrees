boolean isConsistent(Quartet q) {
    boolean nonDetermination = true;
    boolean consistent = false;
    int k = partK;
    int a = q.nodes[0];
    int b = q.nodes[1];
    int c = q.nodes[2];
    int d = q.nodes[3];
    if (k == -1) {
        sumTable[a][k + 1] = 0;
        sumTable[b][k + 1] = 0;
        sumTable[c][k + 1] = 0;
        sumTable[d][k + 1] = 0;
        k = 0;
    } else {
        sumTable[a][k + 1] = sumTable[a][k];
        sumTable[b][k + 1] = sumTable[b][k];
        sumTable[c][k + 1] = sumTable[c][k];
        sumTable[d][k + 1] = sumTable[d][k];
    }
    int[][] pt = partTable;
    boolean nd1 = false;
    boolean nd2 = false;
    while (nonDetermination) {
        operation_count++;
        sumTable[a][k + 1] = sumTable[a][k] + pt[a][k];
        sumTable[b][k + 1] = sumTable[b][k] + pt[b][k];
        sumTable[c][k + 1] = sumTable[c][k] + pt[c][k];
        sumTable[d][k + 1] = sumTable[d][k] + pt[d][k];
        if (sumTable[a][k + 1] == sumTable[b][k + 1] && sumTable[c][k + 1] == sumTable[d][k + 1] && sumTable[a][k + 1] != sumTable[c][k + 1]) {
            nonDetermination = false;
            consistent = true;
        } else if (pt[a][k] != pt[b][k] && pt[c][k] != pt[d][k]) {
            nonDetermination = false;
            consistent = false;
        } else if (sumTable[c][k + 1] == sumTable[d][k + 1] && sumTable[c][k + 1] != sumTable[a][k + 1] && sumTable[c][k + 1] != sumTable[b][k + 1]) {
            nonDetermination = false;
            consistent = true;
        } else if (pt[c][k] == pt[d][k] && pt[c][k] != pt[a][k] && pt[c][k] != pt[b][k]) {
            nonDetermination = false;
            consistent = true;
        } else if (sumTable[a][k + 1] == sumTable[b][k + 1] && sumTable[a][k + 1] != sumTable[c][k + 1] && sumTable[a][k + 1] != sumTable[d][k + 1]) {
            nonDetermination = false;
            consistent = true;
        } else if (pt[a][k] == pt[b][k] && pt[a][k] != pt[c][k] && pt[a][k] != pt[d][k]) {
            nonDetermination = false;
            consistent = true;
        } else if ((pt[a][k] == 0 && pt[b][k] == 0) || (pt[c][k] == 0 && pt[d][k] == 0)) {
            nonDetermination = false;
            consistent = true;
        } else {
            if ((pt[a][k] != pt[b][k])) {
                nd1 = true;
                sumTable[c][k + 1] = 0;
                sumTable[d][k + 1] = 0;
                if (pt[a][k] == pt[c][k]) {
                    sumTable[a][k + 1] = 0;
                } else {
                    sumTable[b][k + 1] = 0;
                }
            }
            if ((pt[c][k] != pt[d][k])) {
                nd2 = true;
                sumTable[a][k + 1] = 0;
                sumTable[b][k + 1] = 0;
                if (pt[c][k] == pt[a][k]) {
                    sumTable[c][k + 1] = 0;
                } else {
                    sumTable[d][k + 1] = 0;
                }
            }
            if (nd1 && nd2) {
                nonDetermination = false;
                consistent = false;
            }
        }
        k++;
    }
    q.consistent = consistent;
    q.K = k;
    return consistent;
}
