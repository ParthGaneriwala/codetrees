// $ANTLR start "proc_writeint"
public final MyGrammarParser.proc_writeint_return proc_writeint() throws RecognitionException {
    MyGrammarParser.proc_writeint_return retval = new MyGrammarParser.proc_writeint_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token WRITEINT95 = null;
    Token EPAR96 = null;
    Token DPAR98 = null;
    MyGrammarParser.expression_return expression97 = null;
    CommonTree WRITEINT95_tree = null;
    CommonTree EPAR96_tree = null;
    CommonTree DPAR98_tree = null;
    RewriteRuleTokenStream stream_WRITEINT = new RewriteRuleTokenStream(adaptor, "token WRITEINT");
    RewriteRuleTokenStream stream_EPAR = new RewriteRuleTokenStream(adaptor, "token EPAR");
    RewriteRuleTokenStream stream_DPAR = new RewriteRuleTokenStream(adaptor, "token DPAR");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:224:15: ( WRITEINT EPAR expression DPAR -> ^( PROC_WRITEINT expression ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:224:18: WRITEINT EPAR expression DPAR
        {
            WRITEINT95 = (Token) match(input, WRITEINT, FOLLOW_WRITEINT_in_proc_writeint1740);
            stream_WRITEINT.add(WRITEINT95);
            EPAR96 = (Token) match(input, EPAR, FOLLOW_EPAR_in_proc_writeint1742);
            stream_EPAR.add(EPAR96);
            pushFollow(FOLLOW_expression_in_proc_writeint1744);
            expression97 = expression();
            state._fsp--;
            stream_expression.add(expression97.getTree());
            DPAR98 = (Token) match(input, DPAR, FOLLOW_DPAR_in_proc_writeint1746);
            stream_DPAR.add(DPAR98);
            // AST REWRITE
            // elements: expression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 224:48: -> ^( PROC_WRITEINT expression )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:224:51: ^( PROC_WRITEINT expression )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(PROC_WRITEINT, "PROC_WRITEINT"), root_1);
                    adaptor.addChild(root_1, stream_expression.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
