public void run() {
    long[] sentence = parser.parseSentence(pair.getSecond());
    ArrayList<String> words = parser.parseSentenceToWords(pair.getSecond());
    Pair<SortedSet<? extends TaggedPath>, Double> result = tagger.evaluateSentence(sentence);
    SortedSet<? extends TaggedPath> nbestTags = result.getFirst();
    double sentenceProb = result.getSecond();
    // ArrayList<ViterbiPath> bestTags = new ArrayList<ViterbiPath>(nbestTags);
    StringBuilder sb = new StringBuilder();
    TaggedPath[] paths = nbestTags.toArray(new TaggedPath[nbestTags.size()]);
    for (int p = paths.length - 1; p > paths.length - 1 - opts.nbest && p >= 0; --p) {
        // nbestTags.last();
        TaggedPath theBest = paths[p];
        int[] tags = theBest.getOrderedTags();
        if (opts.printProb) {
            // p(t | w)
            sb.append(theBest.getLogProb());
            sb.append('\t');
        }
        for (int i = 0; i < tags.length - 1; ++i) {
            sb.append(words.get(i));
            sb.append('/');
            sb.append(tagDictionary.getWord(tags[i]));
            sb.append(' ');
        }
        sb.append('\n');
    /*
					int firstWord = forest.getOrder();
					for(int i=firstWord-1; i<tags.length-1; ++i) {
						sb.append(words.get(i-firstWord+1));
						sb.append('/');
						sb.append(tagDictionary.getWord(tags[i]));
						sb.append(' ');
					}
					sb.append('\n');
*/
    }
    pair.setSecond(sb.substring(0, sb.length() - 1));
    sequencer.putItem(pair);
    if (opts.meminfo) {
        MemoryUsage memuse = memoryBean.getHeapMemoryUsage();
        System.out.printf("MEMUSE: after evaluating sentence %s: %dM/%dM\n", pair.getFirst().toString(), memuse.getUsed() / 1048576, memuse.getMax() / 1048576);
    // System.out.println("STATS: " + eval.getStatistics());
    }
}
