private void paint_board() {
    Graphics2D graphics = (Graphics2D) strategy.getDrawGraphics();
    graphics.setColor(Color.black);
    graphics.fillRect(ORIGIN, ORIGIN, WINDOW_WIDTH, WINDOW_HEIGHT);
    graphics.setColor(Color.white);
    graphics.drawString("Time Remaining:     " + time_left, TEXT_X, TIME_Y);
    graphics.drawString("Chips Remaining:    " + chips_left, TEXT_X, CHIPS_Y);
    int x_pos = TEXT_X + BOX_OFF;
    int y_boot = BOOTS_Y - IBOX_OFF;
    int y_key = KEYS_Y - IBOX_OFF;
    int item = 0;
    graphics.setColor(Color.white);
    graphics.drawString("Player Items", TEXT_X, BOOTS_Y - LINE_DIF);
    graphics.drawString("Boots", TEXT_X, BOOTS_Y);
    graphics.drawString("Keys", TEXT_X, KEYS_Y);
    if (packet.items.containsKey(Types.Item.F_BOOT) && packet.items.get(Types.Item.F_BOOT))
        graphics.setColor(Color.red);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
    if (packet.items.containsKey(Types.Item.R_KEY) && packet.items.get(Types.Item.R_KEY))
        graphics.setColor(Color.red);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
    x_pos += BOX_SPACE;
    if (packet.items.containsKey(Types.Item.W_BOOT) && packet.items.get(Types.Item.W_BOOT))
        graphics.setColor(Color.blue);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
    if (packet.items.containsKey(Types.Item.B_KEY) && packet.items.get(Types.Item.B_KEY))
        graphics.setColor(Color.blue);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
    x_pos += BOX_SPACE;
    if (packet.items.containsKey(Types.Item.I_BOOT) && packet.items.get(Types.Item.I_BOOT))
        graphics.setColor(Color.white);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
    if (packet.items.containsKey(Types.Item.Y_KEY) && packet.items.get(Types.Item.Y_KEY))
        graphics.setColor(Color.yellow);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
    x_pos += BOX_SPACE;
    if (packet.items.containsKey(Types.Item.M_BOOT) && packet.items.get(Types.Item.M_BOOT))
        graphics.setColor(Color.green);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_boot, OFFSET, OFFSET);
    if (packet.items.containsKey(Types.Item.G_KEY) && packet.items.get(Types.Item.G_KEY))
        graphics.setColor(Color.green);
    else
        graphics.setColor(Color.gray);
    graphics.fillRect(x_pos, y_key, OFFSET, OFFSET);
    // Paint board
    int img_y = OFFSET;
    int playerX = player_pos[X][MY_INDEX];
    int playerY = player_pos[Y][MY_INDEX];
    send_packet(playerX - VIEW_LIMIT, playerY - VIEW_LIMIT, null, null, Types.ChangeSet.TILE);
    String[][] tiles = get_tiles();
    int xind = 0;
    for (int x = playerX - VIEW_LIMIT; x <= playerX + VIEW_LIMIT; x++, xind++) {
        int img_x = OFFSET;
        int yind = 0;
        for (int y = playerY - VIEW_LIMIT; y <= playerY + VIEW_LIMIT; y++, yind++) {
            // Send tile request packet with only x and y set
            graphics.drawImage(chips440.main.ResourceCache.getImage(tiles[xind][yind]), img_x, img_y, this);
            for (int player = player_pos[X].length - 1; player >= 0; player--) {
                if (x == player_pos[X][player] && y == player_pos[Y][player])
                    graphics.drawImage(chips440.main.ResourceCache.getImage(player), img_x, img_y, this);
            }
            img_x += IMAGE_SIZE;
        }
        img_y += IMAGE_SIZE;
    }
    strategy.show();
}
