@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    Result result = new Result();
    Object codedValueObjects = parameters.remove(EvaluableConstants.OBS_VALUE_CODED);
    // get the results
    Result resultResults = searchResults(context, patientId, parameters);
    // get the merged results
    parameters.put(EvaluableConstants.OBS_CONCEPT, parameters.get(OBS_MERGED_CONCEPT));
    Result mergedResults = searchResults(context, patientId, parameters);
    // get the test ordered
    parameters.put(EvaluableConstants.OBS_VALUE_CODED, codedValueObjects);
    parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.TESTS_ORDERED));
    Result testResults = searchResults(context, patientId, parameters);
    Integer resultCounter = 0;
    Integer testCounter = 0;
    Integer mergedCounter = 0;
    while (resultCounter < resultResults.size() && testCounter < testResults.size()) {
        Date resultDate = resultResults.get(resultCounter).getResultDate();
        Date testDate = testResults.get(testCounter).getResultDate();
        Result flowsheetResult;
        if (testDate.after(resultDate)) {
            Result currentResult = testResults.get(testCounter++);
            // status of the test is no-result
            // create a copy of the same result as the order result above
            flowsheetResult = duplicateResult(currentResult);
            flowsheetResult.setValueCoded(null);
            flowsheetResult.setResultObject(null);
            // prepare the status of the result
            StringBuilder statusBuilder = new StringBuilder();
            if (StringUtils.isNotEmpty(flowsheetResult.toString()))
                statusBuilder.append(flowsheetResult.toString()).append(" ");
            statusBuilder.append(Status.STATUS_NO_RESULT.getValue());
            // create a copy of the same result as the test result above
            flowsheetResult.setValueText(statusBuilder.toString());
        } else {
            Result currentResult = resultResults.get(resultCounter++);
            // create a copy of the same result as the order result above
            flowsheetResult = duplicateResult(currentResult);
            flowsheetResult.setResultObject(null);
            // search whether we have result for the same date that can be merged together
            Date mergedDate = null;
            if (mergedCounter < mergedResults.size())
                mergedDate = mergedResults.get(mergedCounter).getResultDate();
            if (OpenmrsUtil.nullSafeEquals(mergedDate, flowsheetResult.getResultDate()))
                flowsheetResult.setResultObject(format(mergedResults.get(mergedCounter++)));
            // if this result more than one day after the test was ordered then it's no-order
            if (resultDate.after(DateUtils.addDays(testDate, 1))) {
                // status of the order is no-order
                StringBuilder statusBuilder = new StringBuilder();
                if (StringUtils.isNotEmpty(flowsheetResult.toString()))
                    statusBuilder.append(flowsheetResult.toString()).append(" ");
                statusBuilder.append(Status.STATUS_NO_ORDER.getValue());
                flowsheetResult.setValueText(statusBuilder.toString());
            } else
                testCounter++;
        }
        result.add(flowsheetResult);
    }
    while (resultCounter < resultResults.size()) {
        Result currentResult = resultResults.get(resultCounter++);
        Result flowsheetResult = duplicateResult(currentResult);
        flowsheetResult.setResultObject(null);
        // prepare the status of the result
        StringBuilder statusBuilder = new StringBuilder();
        if (StringUtils.isNotEmpty(flowsheetResult.toString()))
            statusBuilder.append(flowsheetResult.toString()).append(" ");
        statusBuilder.append(Status.STATUS_NO_ORDER.getValue());
        flowsheetResult.setValueText(statusBuilder.toString());
        // get the result to be merged
        Date mergedDate = null;
        if (mergedCounter < mergedResults.size())
            mergedDate = mergedResults.get(mergedCounter).getResultDate();
        if (OpenmrsUtil.nullSafeEquals(mergedDate, flowsheetResult.getResultDate()))
            flowsheetResult.setResultObject(format(mergedResults.get(mergedCounter++)));
        result.add(flowsheetResult);
    }
    while (testCounter < testResults.size()) {
        Result currentResult = testResults.get(testCounter++);
        // create a copy of the same result as the order result above
        Result flowsheetResult = duplicateResult(currentResult);
        flowsheetResult.setValueCoded(null);
        flowsheetResult.setResultObject(null);
        // prepare the status of the result
        StringBuilder statusBuilder = new StringBuilder();
        if (StringUtils.isNotEmpty(flowsheetResult.toString()))
            statusBuilder.append(flowsheetResult.toString()).append(" ");
        statusBuilder.append(Status.STATUS_NO_RESULT.getValue());
        // create a copy of the same result as the test result above
        flowsheetResult.setValueText(statusBuilder.toString());
        // remove the value coded because we don't want to display the name of the test ordered
        result.add(flowsheetResult);
    }
    result = FlowsheetUtils.slice(result);
    Collections.reverse(result);
    return result;
}
