public String doView(RenderRequest request, RenderResponse response) throws Exception {
    // The JSP to show upon success
    String defaultView = VIEW_PAGE;
    // Determine the project container to use
    Project project = findProject(request);
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-badges-admin")) {
        throw new PortletException("Unauthorized to view in this project");
    }
    // Determine the badge being added
    int badgeId = Integer.parseInt(request.getParameter("id"));
    // Determine the database connection
    Connection db = useConnection(request);
    // Make sure the badge matches the project category
    Badge badge = BadgeUtils.loadBadge(badgeId);
    BadgeCategory badgeCategory = new BadgeCategory(db, badge.getCategoryId());
    if (badgeCategory.getProjectCategoryId() != project.getCategoryId()) {
        throw new PortletException("Badge category does not match listing category id");
    }
    request.setAttribute(BADGE, badge);
    boolean recordInserted = false;
    // @todo move this to a BadgeUtils for adding/removing badges
    // Make sure the link does not already exist, then insert the badge
    ProjectBadgeList projectBadgeList = new ProjectBadgeList();
    projectBadgeList.setProjectId(project.getId());
    projectBadgeList.setBadgeId(badge.getId());
    projectBadgeList.buildList(db);
    if (projectBadgeList.size() == 0 && (user.getAccessAdmin() || !badge.getSystemAssigned())) {
        ProjectBadge projectBadge = new ProjectBadge();
        projectBadge.setProjectId(project.getId());
        projectBadge.setBadgeId(badge.getId());
        recordInserted = projectBadge.insert(db);
        projectBadge = new ProjectBadge(db, projectBadge.getId());
        request.setAttribute(PROJECT_BADGE, projectBadge);
        if (recordInserted) {
            // trigger the workflow
            PortalUtils.processInsertHook(request, projectBadge);
        }
    }
    // Count the number of members for this badge
    BadgeList badgeList = new BadgeList();
    badgeList.add(badge);
    Map<Integer, Integer> memberCountMap = badgeList.findBadgeMemberCount(db);
    request.setAttribute(BADGE_MEMBER_COUNT_MAP, memberCountMap);
    request.setAttribute(BADGE_MEMBER_COUNT, String.valueOf(memberCountMap.get(badge.getId())));
    // JSP view
    return defaultView;
}
