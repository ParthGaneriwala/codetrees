public String saveAddQuantPackageDetail() {
    System.out.println("PakageDetailAction -> saveAddQuantPackageDetail()");
    Long idCutPocess = (Long) getSession().getAttribute("idCutProcess");
    CutProcess cutProcess = cutProcessManager.get(idCutPocess);
    PackageDetail packageDetailAux = packageDetailManager.get(packageDetail.getId());
    if (packageDetailAux.getStock() >= newQuantityUsed) {
        packageDetailAux.setStock(packageDetailAux.getStock() - newQuantityUsed);
        AsignationCut asignationCut = new AsignationCut();
        asignationCut.setPackageDetail(packageDetailAux);
        asignationCut.setCutProcess(cutProcess);
        asignationCut.setQuantityUsed(newQuantityUsed);
        asignationCut.setPriceQuantUsedFail(0.0D);
        asignationCut.setTotalQuantUsedFail(0.0D);
        asignationCut.setPriceQuantUsedFail(0.0D);
        asignationCut.setQuantityUsedFail(0.0D);
        asignationCutManager.save(asignationCut);
        packageDetailAux = packageDetailManager.save(packageDetailAux);
        PurchaseDetail purchaseDetail = packageDetailAux.getPurchaseDetail();
        purchaseDetail.setCurrentQuantity(purchaseDetail.getCurrentQuantity() - newQuantityUsed);
        StorageMaterial storageMaterial = packageDetailAux.getStorageMaterial();
        storageMaterial.decrementStok(newQuantityUsed);
        storageMaterialManager.save(storageMaterial);
        System.out.println("PakageDetailAction -> end saveAddQuantPackageDetail()");
        id = idCutPocess;
        return SUCCESS;
    } else {
        return ERROR;
    }
}
