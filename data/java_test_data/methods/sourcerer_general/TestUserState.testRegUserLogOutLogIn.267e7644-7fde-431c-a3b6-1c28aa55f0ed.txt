@Test
@DirtiesContext
public void testRegUserLogOutLogIn() throws Exception {
    configureMinimalGame();
    // U1 no real base, first level
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.createUser("U1", "test", "test", "test");
    userService.login("U1", "test");
    movableService.getGameInfo();
    // Verify
    List<UserState> userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    UserState userStateTest = getRegUserState("U1");
    Assert.assertTrue(userStateTest.isOnline());
    Assert.assertNotNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.login("U1", "test");
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertTrue(userStateTest.isOnline());
    Assert.assertNotNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.login("U1", "test");
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertTrue(userStateTest.isOnline());
    Assert.assertNotNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    userService.logout();
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    userStates = userService.getAllUserStates();
    Assert.assertEquals(1, userStates.size());
    userStateTest = getRegUserState("U1");
    Assert.assertFalse(userStateTest.isOnline());
    Assert.assertNull(userStateTest.getSessionId());
    Assert.assertEquals(userStateTest.getCurrentAbstractLevel().getLevel().getName(), TEST_LEVEL_1_SIMULATED);
}
