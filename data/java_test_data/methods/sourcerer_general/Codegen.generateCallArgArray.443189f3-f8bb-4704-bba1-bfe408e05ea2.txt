private void generateCallArgArray(Node node, Node argChild, boolean directCall) {
    int argCount = 0;
    for (Node child = argChild; child != null; child = child.getNext()) {
        ++argCount;
    }
    // load array object to set arguments
    if (argCount == 1 && itsOneArgArray >= 0) {
        cfw.addALoad(itsOneArgArray);
    } else {
        addNewObjectArray(argCount);
    }
    // Copy arguments into it
    for (int i = 0; i != argCount; ++i) {
        // which we need to avoid
        if (!isGenerator) {
            cfw.add(ByteCode.DUP);
            cfw.addPush(i);
        }
        if (!directCall) {
            generateExpression(argChild, node);
        } else {
            // If this has also been a directCall sequence, the Number
            // flag will have remained set for any parameter so that
            // the values could be copied directly into the outgoing
            // args. Here we want to force it to be treated as not in
            // a Number context, so we set the flag off.
            int dcp_register = nodeIsDirectCallParameter(argChild);
            if (dcp_register >= 0) {
                dcpLoadAsObject(dcp_register);
            } else {
                generateExpression(argChild, node);
                int childNumberFlag = argChild.getIntProp(Node.ISNUMBER_PROP, -1);
                if (childNumberFlag == Node.BOTH) {
                    addDoubleWrap();
                }
            }
        }
        // load the argument index and assign the value to the args array.
        if (isGenerator) {
            short tempLocal = getNewWordLocal();
            cfw.addAStore(tempLocal);
            cfw.add(ByteCode.CHECKCAST, "[Ljava/lang/Object;");
            cfw.add(ByteCode.DUP);
            cfw.addPush(i);
            cfw.addALoad(tempLocal);
            releaseWordLocal(tempLocal);
        }
        cfw.add(ByteCode.AASTORE);
        argChild = argChild.getNext();
    }
}
