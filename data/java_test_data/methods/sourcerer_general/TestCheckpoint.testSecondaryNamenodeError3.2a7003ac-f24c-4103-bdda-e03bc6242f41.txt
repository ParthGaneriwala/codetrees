private void testSecondaryNamenodeError3(Configuration conf) throws IOException {
    System.out.println("Starting testSecondaryNamenodeError 31");
    Path file1 = new Path("checkpointzz.dat");
    MiniDFSCluster cluster = new MiniDFSCluster(conf, numDatanodes, false, null);
    cluster.waitActive();
    FileSystem fileSys = cluster.getFileSystem();
    try {
        assertTrue(!fileSys.exists(file1));
        // 
        // Make the checkpoint fail after rolling the edit log.
        // 
        SecondaryNameNode secondary = startSecondaryNameNode(conf);
        ErrorSimulator.setErrorSimulation(0);
        try {
            // this should fail
            secondary.doCheckpoint();
            assertTrue(false);
        } catch (IOException e) {
        }
        ErrorSimulator.clearErrorSimulation(0);
        // secondary namenode crash!
        secondary.shutdown();
        // start new instance of secondary and verify that
        // a new rollEditLog suceedes inspite of the fact that
        // edits.new already exists.
        // 
        secondary = startSecondaryNameNode(conf);
        // this should work correctly
        secondary.doCheckpoint();
        secondary.shutdown();
        // 
        // Create a new file
        // 
        writeFile(fileSys, file1, replication);
        checkFile(fileSys, file1, replication);
    } finally {
        fileSys.close();
        cluster.shutdown();
    }
    // 
    // Restart cluster and verify that file exists.
    // Then take another checkpoint to verify that the
    // namenode restart accounted for the twice-rolled edit logs.
    // 
    System.out.println("Starting testSecondaryNamenodeError 32");
    cluster = new MiniDFSCluster(conf, numDatanodes, false, null);
    cluster.waitActive();
    fileSys = cluster.getFileSystem();
    try {
        checkFile(fileSys, file1, replication);
        cleanupFile(fileSys, file1);
        SecondaryNameNode secondary = startSecondaryNameNode(conf);
        secondary.doCheckpoint();
        secondary.shutdown();
    } finally {
        fileSys.close();
        cluster.shutdown();
    }
}
