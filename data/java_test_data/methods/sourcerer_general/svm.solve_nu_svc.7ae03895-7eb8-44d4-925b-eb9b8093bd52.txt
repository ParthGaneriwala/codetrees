private static void solve_nu_svc(svm_problem prob, svm_parameter param, double[] alpha, Solver.SolutionInfo si) {
    int i;
    int l = prob.l;
    double nu = param.nu;
    byte[] y = new byte[l];
    for (i = 0; i < l; i++) if (prob.y[i] > 0)
        y[i] = +1;
    else
        y[i] = -1;
    double sum_pos = nu * l / 2;
    double sum_neg = nu * l / 2;
    for (i = 0; i < l; i++) if (y[i] == +1) {
        alpha[i] = Math.min(1.0, sum_pos);
        sum_pos -= alpha[i];
    } else {
        alpha[i] = Math.min(1.0, sum_neg);
        sum_neg -= alpha[i];
    }
    double[] zeros = new double[l];
    for (i = 0; i < l; i++) zeros[i] = 0;
    Solver_NU s = new Solver_NU();
    s.Solve(l, new SVC_Q(prob, param, y), zeros, y, alpha, 1.0, 1.0, param.eps, si, param.shrinking);
    double r = si.r;
    svm.info("C = " + 1 / r + "\n");
    for (i = 0; i < l; i++) alpha[i] *= y[i] / r;
    si.rho /= r;
    si.obj /= (r * r);
    si.upper_bound_p = 1 / r;
    si.upper_bound_n = 1 / r;
}
