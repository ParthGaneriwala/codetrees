/**
 * Auto generated method signature
 * @see com.sforce.soap.enterprise.SforceService#merge
 * @param merge403
 *
 * @param sessionHeader405
 *
 * @param assignmentRuleHeader406
 *
 * @param mruHeader407
 *
 * @param allowFieldTruncationHeader408
 *
 * @param debuggingHeader409
 *
 * @param packageVersionHeader410
 *
 * @param emailHeader411
 */
public com.sforce.soap.enterprise.MergeResult[] merge(com.sforce.soap.enterprise.MergeRequest[] request404, com.sforce.soap.enterprise.SessionHeader sessionHeader405, com.sforce.soap.enterprise.AssignmentRuleHeader assignmentRuleHeader406, com.sforce.soap.enterprise.MruHeader mruHeader407, com.sforce.soap.enterprise.AllowFieldTruncationHeader allowFieldTruncationHeader408, com.sforce.soap.enterprise.DebuggingHeader debuggingHeader409, com.sforce.soap.enterprise.PackageVersionHeader packageVersionHeader410, com.sforce.soap.enterprise.EmailHeader emailHeader411) throws java.rmi.RemoteException, com.sforce.soap.enterprise.InvalidSObjectFault, com.sforce.soap.enterprise.InvalidIdFault, com.sforce.soap.enterprise.InvalidFieldFault, com.sforce.soap.enterprise.UnexpectedErrorFault {
    try {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
        _operationClient.getOptions().setAction("\"\"");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
        addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
        // create a message context
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        com.sforce.soap.enterprise.Merge dummyWrappedType = null;
        env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), request404, dummyWrappedType, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
        env.build();
        // add the children only if the parameter is not null
        if (sessionHeader405 != null) {
            org.apache.axiom.om.OMElement omElementsessionHeader405 = toOM(sessionHeader405, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
            addHeader(omElementsessionHeader405, env);
        }
        // add the children only if the parameter is not null
        if (assignmentRuleHeader406 != null) {
            org.apache.axiom.om.OMElement omElementassignmentRuleHeader406 = toOM(assignmentRuleHeader406, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
            addHeader(omElementassignmentRuleHeader406, env);
        }
        // add the children only if the parameter is not null
        if (mruHeader407 != null) {
            org.apache.axiom.om.OMElement omElementmruHeader407 = toOM(mruHeader407, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
            addHeader(omElementmruHeader407, env);
        }
        // add the children only if the parameter is not null
        if (allowFieldTruncationHeader408 != null) {
            org.apache.axiom.om.OMElement omElementallowFieldTruncationHeader408 = toOM(allowFieldTruncationHeader408, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
            addHeader(omElementallowFieldTruncationHeader408, env);
        }
        // add the children only if the parameter is not null
        if (debuggingHeader409 != null) {
            org.apache.axiom.om.OMElement omElementdebuggingHeader409 = toOM(debuggingHeader409, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
            addHeader(omElementdebuggingHeader409, env);
        }
        // add the children only if the parameter is not null
        if (packageVersionHeader410 != null) {
            org.apache.axiom.om.OMElement omElementpackageVersionHeader410 = toOM(packageVersionHeader410, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
            addHeader(omElementpackageVersionHeader410, env);
        }
        // add the children only if the parameter is not null
        if (emailHeader411 != null) {
            org.apache.axiom.om.OMElement omElementemailHeader411 = toOM(emailHeader411, optimizeContent(new javax.xml.namespace.QName("urn:enterprise.soap.sforce.com", "merge")));
            addHeader(omElementemailHeader411, env);
        }
        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);
        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);
        // execute the operation client
        _operationClient.execute(true);
        org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
        org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
        java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(), com.sforce.soap.enterprise.MergeResponse.class, getEnvelopeNamespaces(_returnEnv));
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        return getMergeResponseResult((com.sforce.soap.enterprise.MergeResponse) object);
    } catch (org.apache.axis2.AxisFault f) {
        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt != null) {
            if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                // make the fault by reflection
                try {
                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    // message class
                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(faultElt.getQName());
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                    m.invoke(ex, new java.lang.Object[] { messageObject });
                    if (ex instanceof com.sforce.soap.enterprise.InvalidSObjectFault) {
                        throw (com.sforce.soap.enterprise.InvalidSObjectFault) ex;
                    }
                    if (ex instanceof com.sforce.soap.enterprise.InvalidIdFault) {
                        throw (com.sforce.soap.enterprise.InvalidIdFault) ex;
                    }
                    if (ex instanceof com.sforce.soap.enterprise.InvalidFieldFault) {
                        throw (com.sforce.soap.enterprise.InvalidFieldFault) ex;
                    }
                    if (ex instanceof com.sforce.soap.enterprise.UnexpectedErrorFault) {
                        throw (com.sforce.soap.enterprise.UnexpectedErrorFault) ex;
                    }
                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                } catch (java.lang.ClassCastException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            } else {
                throw f;
            }
        } else {
            throw f;
        }
    }
}
