private int prepareFilter(PreparedStatement pst) throws SQLException {
    int i = 0;
    if (uniqueId != null) {
        pst.setString(++i, uniqueId);
    }
    if (groupId > -1) {
        pst.setInt(++i, groupId);
    }
    if (instanceId > -1) {
        pst.setInt(++i, instanceId);
    }
    if (projectId > -1) {
        pst.setInt(++i, projectId);
    }
    if (openProjectsOnly && withProjectDaysComplete > -1) {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -withProjectDaysComplete);
        pst.setTimestamp(++i, new Timestamp(cal.getTimeInMillis()));
    } else {
        if (withProjectDaysComplete > -1) {
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, -withProjectDaysComplete);
            pst.setTimestamp(++i, new Timestamp(cal.getTimeInMillis()));
        }
    }
    if (projectsForUser > -1) {
        pst.setInt(++i, projectsForUser);
        if (invitationPendingOnly) {
            pst.setInt(++i, TeamMember.STATUS_PENDING);
        }
        if (daysLastAccessed > -1) {
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, -daysLastAccessed);
            pst.setTimestamp(++i, new Timestamp(cal.getTimeInMillis()));
        }
        if (includeGuestProjects) {
            pst.setBoolean(++i, true);
        }
    }
    if (requiresMembership != Constants.UNDEFINED) {
        pst.setBoolean(++i, requiresMembership == Constants.TRUE);
    }
    if (daysLastApproved > -1) {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -daysLastApproved);
        pst.setTimestamp(++i, new Timestamp(cal.getTimeInMillis()));
    }
    if (enteredByUser > -1) {
        pst.setInt(++i, enteredByUser);
    }
    if (portalState != Constants.UNDEFINED) {
        pst.setBoolean(++i, (portalState == Constants.TRUE));
    }
    if (portalDefaultOnly) {
        pst.setBoolean(++i, true);
    }
    if (portalKey != null) {
        pst.setString(++i, portalKey);
    }
    if (publicOnly) {
        pst.setBoolean(++i, true);
    }
    if (forParticipant == Constants.TRUE) {
        pst.setBoolean(++i, true);
        pst.setBoolean(++i, true);
    }
    if (categoryId > -1) {
        pst.setInt(++i, categoryId);
    }
    if (subCategory1Id > -1) {
        pst.setInt(++i, subCategory1Id);
    }
    if (subCategory2Id > -1) {
        pst.setInt(++i, subCategory2Id);
    }
    if (subCategory3Id > -1) {
        pst.setInt(++i, subCategory3Id);
    }
    if (includeTemplates != Constants.UNDEFINED) {
        pst.setBoolean(++i, (includeTemplates == Constants.TRUE));
    }
    if (languageId > -1) {
        pst.setInt(++i, languageId);
    }
    if (userRating > -1 && projectsForUser > -1) {
        pst.setInt(++i, userRating);
        pst.setInt(++i, projectsForUser);
    }
    if (title != null) {
        pst.setString(++i, title.toLowerCase());
    }
    if (twitterId != null) {
        pst.setString(++i, twitterId.toLowerCase());
    }
    if (facebookPage != null) {
        pst.setString(++i, facebookPage.toLowerCase());
    }
    if (youtubeChannelId != null) {
        pst.setString(++i, youtubeChannelId.toLowerCase());
    }
    if (ustreamId != null) {
        pst.setString(++i, ustreamId.toLowerCase());
    }
    if (livestreamId != null) {
        pst.setString(++i, livestreamId.toLowerCase());
    }
    if (justintvId != null) {
        pst.setString(++i, justintvId.toLowerCase());
    }
    if (qikId != null) {
        pst.setString(++i, qikId.toLowerCase());
    }
    if (keywords != null) {
        pst.setString(++i, keywords.toLowerCase());
    }
    if (latitude != -1) {
        pst.setDouble(++i, latitude);
    }
    if (longitude != -1) {
        pst.setDouble(++i, longitude);
    }
    if (owner > -1) {
        pst.setInt(++i, owner);
    }
    if (profile != Constants.UNDEFINED) {
        pst.setBoolean(++i, (profile == Constants.TRUE));
    }
    if (profileEnabled != Constants.UNDEFINED) {
        pst.setBoolean(++i, (profileEnabled == Constants.TRUE));
    }
    if (projectIdString != null && projectIdString.length > 0) {
        int count = 0;
        while (count < projectIdString.length) {
            if (StringUtils.isNumber(projectIdString[count])) {
                pst.setInt(++i, Integer.parseInt(projectIdString[count]));
            }
            count++;
        }
    }
    if (excludeProjectIdString != null && excludeProjectIdString.length > 0) {
        int count = 0;
        while (count < excludeProjectIdString.length) {
            if (StringUtils.isNumber(excludeProjectIdString[count])) {
                pst.setInt(++i, Integer.parseInt(excludeProjectIdString[count]));
            }
            count++;
        }
    }
    if (minimumAverageRating != -1) {
        pst.setDouble(++i, minimumAverageRating);
    }
    if (alertRangeStart != null) {
        pst.setTimestamp(++i, alertRangeStart);
    }
    if (alertRangeEnd != null) {
        pst.setTimestamp(++i, alertRangeEnd);
    }
    if (approvalRangeStart != null) {
        pst.setTimestamp(++i, approvalRangeStart);
    }
    if (approvalRangeEnd != null) {
        pst.setTimestamp(++i, approvalRangeEnd);
    }
    return i;
}
