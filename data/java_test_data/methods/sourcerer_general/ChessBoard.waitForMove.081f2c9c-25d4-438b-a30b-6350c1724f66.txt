public void waitForMove() {
    int row = 0, col, row1, col1;
    for (; row >= 0; ) {
        System.out.println("waiting for click1");
        mouse.waitFor("mouse click", null);
        row = (int) Math.floor(mouse.getX() / boxSize);
        col = (int) Math.floor(mouse.getY() / boxSize);
        if (row > 7 || col > 7)
            continue;
        System.out.println("Clicked1 on" + row + ":" + col);
        this.setHighlightColor(row, col);
        repaint();
        if (pieces[row][col] != null) {
            System.out.println("waiting for click2");
            mouse.waitFor("mouse click", null);
            row1 = (int) Math.floor(mouse.getX() / boxSize);
            col1 = (int) Math.floor(mouse.getY() / boxSize);
            System.out.println("Clicked2 on" + row1 + ":" + col1);
            if ((row1 == row) && (col == col1)) {
                this.setDefaultColor(row, col);
                repaint();
                continue;
            } else if (row1 <= 7 && col1 <= 7) {
                MoveResult result;
                Point src = gamePointFromDisplayCoords(row, col);
                Point dst = gamePointFromDisplayCoords(row1, col1);
                try {
                    result = gameSession.sendMove(src, dst);
                    switch(result) {
                        case MOVE_OK:
                            System.err.println("Move accepted!");
                            break;
                        case MOVE_PROMOTES:
                            String typeString = (String) JOptionPane.showInputDialog(frame, "Promote pawn to:\n", "Promotion Required", JOptionPane.QUESTION_MESSAGE, null, new Object[] { "Queen", "Knight", "Rook", "Bishop" }, "Queen");
                            System.err.println("User selected " + typeString + " for promotion");
                            PieceType promotionChoice = null;
                            if ("Queen".equals(typeString)) {
                                promotionChoice = PieceType.QUEEN;
                            } else if ("Knight".equals(typeString)) {
                                promotionChoice = PieceType.KNIGHT;
                            } else if ("Rook".endsWith(typeString)) {
                                promotionChoice = PieceType.ROOK;
                            } else if ("Bishop".equals(typeString)) {
                                promotionChoice = PieceType.BISHOP;
                            } else {
                                // Well, I don't know how you pulled that off--congratulations
                                // I'll make it a Queen anyway
                                promotionChoice = PieceType.QUEEN;
                            }
                            result = gameSession.sendMove(src, dst, promotionChoice);
                            if (MoveResult.MOVE_OK != result) {
                                chatBox.update("Move rejected after promotion: " + result);
                                System.err.println("Move rejected after promotion: " + result);
                            }
                            break;
                        case MOVE_ILLEGAL:
                            chatBox.update("That move is not legal.");
                        // nobreak;
                        case MOVE_INVALID:
                            System.err.println("Move rejected: " + result);
                            break;
                        case GAME_OVER:
                            chatBox.update("This game is over (" + gameSession.getGame().getStatus() + ")");
                            break;
                        case NOT_PLAYING:
                            chatBox.update("You are not a player in this game.");
                            break;
                    }
                } catch (EJBException e) {
                    Throwable t = e.getCausedByException();
                    if (t instanceof java.rmi.AccessException) {
                        chatBox.update("You do not have permission to execute this command.");
                    } else {
                        chatBox.update("Error sending move.");
                    }
                }
            }
        }
        this.setDefaultColor(row, col);
        repaint();
    }
    System.err.println("end of waitformove method");
}
