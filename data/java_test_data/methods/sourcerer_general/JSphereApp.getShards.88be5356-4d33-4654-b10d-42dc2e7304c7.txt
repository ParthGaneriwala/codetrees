public Geometry[] getShards(float range, float size) {
    TriangleArray[] TA = new TriangleArray[2];
    TA[0] = new TriangleArray(3, TriangleArray.COORDINATES | TriangleArray.NORMALS);
    TA[1] = new TriangleArray(3, TriangleArray.COORDINATES | TriangleArray.NORMALS);
    Point3d pt = rndPt3d(range);
    Point3d p1 = new Point3d(pt);
    Point3d p2 = new Point3d(pt.x + size, pt.y + size, pt.z);
    Point3d p3 = new Point3d(pt.x - size, pt.y + size, pt.z);
    // p2.add(rndPt3f(size)); p3.add(rndPt3f(size));
    Vector3d d1 = new Vector3d();
    Vector3d d2 = new Vector3d();
    d1.sub(p2, p1);
    d2.sub(p3, p1);
    Vector3d n1 = new Vector3d();
    n1.add(d1, d2);
    n1.scale(.75f);
    d1.sub(p1, p2);
    d2.sub(p3, p2);
    Vector3d n2 = new Vector3d();
    n2.add(d1, d2);
    n2.scale(.75f);
    d1.sub(p1, p3);
    d2.sub(p2, p3);
    Vector3d n3 = new Vector3d();
    n3.add(d1, d2);
    n3.scale(.75f);
    TA[0].setCoordinate(0, p1);
    TA[0].setNormal(0, new Vector3f(n1));
    TA[0].setCoordinate(1, p2);
    TA[0].setNormal(1, new Vector3f(n2));
    TA[0].setCoordinate(2, p3);
    TA[0].setNormal(2, new Vector3f(n3));
    Point3d np1 = new Point3d();
    np1.add(p1, n1);
    Point3d np2 = new Point3d();
    np2.add(p2, n2);
    Point3d np3 = new Point3d();
    np3.add(p3, n3);
    Vector3d v1 = new Vector3d();
    v1.sub(np1, p1);
    Vector3d v2 = new Vector3d();
    v2.sub(np2, p2);
    Vector3d v3 = new Vector3d();
    v3.sub(np3, p3);
    TA[1].setCoordinate(0, np1);
    TA[1].setNormal(0, new Vector3f(v1));
    TA[1].setCoordinate(1, np2);
    TA[1].setNormal(1, new Vector3f(v2));
    TA[1].setCoordinate(2, np3);
    TA[1].setNormal(2, new Vector3f(v3));
    return TA;
}
