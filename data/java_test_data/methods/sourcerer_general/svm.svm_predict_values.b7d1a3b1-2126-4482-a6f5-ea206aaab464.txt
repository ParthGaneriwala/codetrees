public static double svm_predict_values(svm_model model, svm_node[] x, double[] dec_values) {
    if (model.param.svm_type == svm_parameter.ONE_CLASS || model.param.svm_type == svm_parameter.EPSILON_SVR || model.param.svm_type == svm_parameter.NU_SVR) {
        double[] sv_coef = model.sv_coef[0];
        double sum = 0;
        for (int i = 0; i < model.l; i++) sum += sv_coef[i] * Kernel.k_function(x, model.SV[i], model.param);
        sum -= model.rho[0];
        dec_values[0] = sum;
        if (model.param.svm_type == svm_parameter.ONE_CLASS)
            return (sum > 0) ? 1 : -1;
        else
            return sum;
    } else {
        int i;
        int nr_class = model.nr_class;
        int l = model.l;
        double[] kvalue = new double[l];
        for (i = 0; i < l; i++) kvalue[i] = Kernel.k_function(x, model.SV[i], model.param);
        int[] start = new int[nr_class];
        start[0] = 0;
        for (i = 1; i < nr_class; i++) start[i] = start[i - 1] + model.nSV[i - 1];
        int[] vote = new int[nr_class];
        for (i = 0; i < nr_class; i++) vote[i] = 0;
        int p = 0;
        for (i = 0; i < nr_class; i++) for (int j = i + 1; j < nr_class; j++) {
            double sum = 0;
            int si = start[i];
            int sj = start[j];
            int ci = model.nSV[i];
            int cj = model.nSV[j];
            int k;
            double[] coef1 = model.sv_coef[j - 1];
            double[] coef2 = model.sv_coef[i];
            for (k = 0; k < ci; k++) sum += coef1[si + k] * kvalue[si + k];
            for (k = 0; k < cj; k++) sum += coef2[sj + k] * kvalue[sj + k];
            sum -= model.rho[p];
            dec_values[p] = sum;
            if (dec_values[p] > 0)
                ++vote[i];
            else
                ++vote[j];
            p++;
        }
        int vote_max_idx = 0;
        for (i = 1; i < nr_class; i++) if (vote[i] > vote[vote_max_idx])
            vote_max_idx = i;
        return model.label[vote_max_idx];
    }
}
