public void run() {
    /**
     * A list of files to replace with repository version
     */
    Set<File> filesToOverride = new HashSet<File>();
    // Binary conflicts
    for (Iterator i = updateServerResponse.getBinaryConflicts().iterator(); i.hasNext(); ) {
        File f = (File) i.next();
        // TODO proper check for name - case insensitive file systems
        if (BlueJPackageFile.isPackageFileName(f.getName())) {
            filesToOverride.add(f);
        } else {
            // TODO make the displayed file path relative to project
            int answer = DialogManager.askQuestion(PkgMgrFrame.getMostRecent(), "team-binary-conflict", new String[] { f.getName() });
            if (answer == 0) {
            // keep local version
            } else {
                // use repository version
                filesToOverride.add(f);
            }
        }
    }
    updateServerResponse.overrideFiles(filesToOverride);
    List<String> blueJconflicts = new LinkedList<String>();
    List<String> nonBlueJConflicts = new LinkedList<String>();
    List<Target> targets = new LinkedList<Target>();
    for (Iterator i = updateServerResponse.getConflicts().iterator(); i.hasNext(); ) {
        File file = (File) i.next();
        // Calculate the file base name
        String baseName = file.getName();
        // so it can be ignored.
        if (!BlueJPackageFile.isPackageFileName(baseName)) {
            Target target = null;
            if (baseName.endsWith(".java") || baseName.endsWith(".class")) {
                String pkg = project.getPackageForFile(file);
                if (pkg != null) {
                    String targetId = filenameToTargetIdentifier(baseName);
                    targetId = JavaNames.combineNames(pkg, targetId);
                    target = project.getTarget(targetId);
                }
            } else if (baseName.equals("README.TXT")) {
                String pkg = project.getPackageForFile(file);
                if (pkg != null) {
                    String targetId = ReadmeTarget.README_ID;
                    targetId = JavaNames.combineNames(pkg, targetId);
                    target = project.getTarget(targetId);
                }
            }
            String fileName = makeRelativePath(project.getProjectDir(), file);
            if (target == null) {
                nonBlueJConflicts.add(fileName);
            } else {
                blueJconflicts.add(fileName);
                targets.add(target);
            }
        }
    }
    if (!blueJconflicts.isEmpty() || !nonBlueJConflicts.isEmpty()) {
        project.clearAllSelections();
        project.selectTargetsInGraphs(targets);
        ConflictsDialog conflictsDialog = new ConflictsDialog(project, blueJconflicts, nonBlueJConflicts);
        conflictsDialog.setVisible(true);
    }
}
