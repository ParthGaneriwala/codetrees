public void fillPolygon(int selected, int dist) {
    actPolygon = new Polygon();
    actPolygon = (Polygon) polygonList.get(selected);
    int minY = 0, maxY = 0, pointNumber = 0;
    double ix = 0;
    Point[] points = new Point[actPolygon.getPointNumber()];
    for (int i = 0; i < actPolygon.getPointNumber(); i++) {
        points[i] = actPolygon.getP(i);
        if (i == 0) {
            minY = (int) points[i].y;
            maxY = (int) points[i].y;
        } else if (minY > points[i].y)
            minY = (int) points[i].y;
        else if (maxY < points[i].y)
            maxY = (int) points[i].y;
        System.out.println("Punkt " + i + ": " + actPolygon.getP(i));
    }
    System.out.println("minY: " + minY + "\tmaxY: " + maxY);
    for (int c = minY + 1; c < maxY; c += dist) {
        pointNumber = actPolygon.getPointNumber();
        int[] intersec = new int[pointNumber];
        System.out.println("c = " + c);
        for (int t = 0; t < pointNumber; t++) {
            if (t < pointNumber - 1) {
                if (((points[t].y <= c) && (points[t + 1].y > c)) || ((points[t + 1].y <= c) && (points[t].y > c))) {
                    ix = points[t].x + ((points[t + 1].x - points[t].x) / (double) (points[t + 1].y - points[t].y)) * (c - points[t].y);
                    System.out.println("Corner[" + t + "] und Corner[" + t + "+1]: " + (points[t].x + ((points[t + 1].x - points[t].x) / (double) (points[t + 1].y - points[t].y)) * (c - points[t].y)));
                    intersec[t] = (int) Math.round(ix);
                    System.out.println("intersec[" + t + "]: " + intersec[t]);
                }
            } else {
                if (((points[t].y <= c) && (points[0].y > c)) || ((points[0].y <= c) && (points[t].y > c))) {
                    ix = points[t].x + ((points[0].x - points[t].x) / (double) (points[0].y - points[t].y)) * (c - points[t].y);
                    System.out.println("Corner[" + t + "] und Corner[0]: " + (points[t].x + ((points[0].x - points[t].x) / (double) (points[0].y - points[t].y)) * (c - points[t].y)));
                    intersec[t] = (int) Math.round(ix);
                    System.out.println("intersec[" + t + "]: " + intersec[t]);
                }
            }
        }
        java.util.Arrays.sort(intersec);
        for (int i = 0; i < pointNumber; i++) {
            System.out.println("intersec[" + i + "](sort): " + intersec[i]);
            if (pointNumber % 2 == 0) {
                if (i % 2 == 0) {
                    actLine = new Line(intersec[i], c, intersec[i + 1], c, fillColor);
                    lineList.add(actLine);
                    repaint();
                }
            } else {
                if (i % 2 == 1) {
                    actLine = new Line(intersec[i], c, intersec[i + 1], c, fillColor);
                    lineList.add(actLine);
                    repaint();
                }
            }
        }
    }
}
