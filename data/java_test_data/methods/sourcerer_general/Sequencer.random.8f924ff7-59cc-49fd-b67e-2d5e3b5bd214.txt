protected Point random(final String url, final int width, final int height) {
    Component parent;
    Component grandparent;
    Dimension dim;
    Insets insets;
    int minx;
    int miny;
    int maxx;
    int maxy;
    int rndx;
    int rndy;
    int corner;
    Point ret;
    parent = mThumbelina.getPicturePanel().getParent();
    if (parent instanceof JViewport) {
        // JScrollPane
        grandparent = parent.getParent();
        dim = grandparent.getSize();
    } else
        dim = mThumbelina.getPicturePanel().getSize();
    // JPanel:
    // insets = mThumbelina.getPicturePanel ().getInsets ();
    // dim.width -= (insets.left + insets.right);
    // dim.height -= (insets.top + insets.bottom);
    // minx = insets.left;
    // miny = insets.top;
    minx = 0;
    miny = 0;
    maxx = minx + dim.width;
    maxy = miny + dim.height;
    mRandom.setSeed((((long) (width + height)) << 32) + url.hashCode());
    rndx = (int) (mRandom.nextDouble() * dim.width);
    rndy = (int) (mRandom.nextDouble() * dim.height);
    // the panel has four corners
    corner = (int) (mRandom.nextDouble() * 4);
    ret = new Point(0, 0);
    switch(corner) {
        case // upper left
        0:
            if (rndx + width >= maxx)
                ret.x = maxx - width;
            else
                ret.x = rndx;
            if (rndy + height >= maxy)
                ret.y = maxy - height;
            else
                ret.y = rndy;
            break;
        case // upper right
        1:
            if (rndx - width < minx)
                ret.x = minx;
            else
                ret.x = rndx - width;
            if (rndy + height >= maxy)
                ret.y = maxy - height;
            else
                ret.y = rndy;
            break;
        case // lower right
        2:
            if (rndx - width < minx)
                ret.x = minx;
            else
                ret.x = rndx - width;
            if (rndy - height < miny)
                ret.y = miny;
            else
                ret.y = rndy - height;
            break;
        case // lower left
        3:
            if (rndx + width >= maxx)
                ret.x = maxx - width;
            else
                ret.x = rndx;
            if (rndy - height < miny)
                ret.y = miny;
            else
                ret.y = rndy - height;
            break;
        default:
            throw new IllegalStateException("random corner = " + corner);
    }
    // if it's really large stuff it in the upper left hand corner
    if (ret.x < 0)
        ret.x = 0;
    if (ret.y < 0)
        ret.y = 0;
    return (ret);
}
