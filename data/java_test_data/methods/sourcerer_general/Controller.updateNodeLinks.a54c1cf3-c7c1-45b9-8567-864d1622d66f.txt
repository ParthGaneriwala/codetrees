public void updateNodeLinks(WordNode wn, LinkedHashMap<String, LinkInformation> neighbours, boolean willDelete) {
    LinkedHashMap<String, WordLink> currentLinks = wn.getLinks();
    Vector<String> toRemove = new Vector<String>();
    Vector<String> toAdd = new Vector<String>();
    Vector<String> toChange = new Vector<String>();
    // if it is not in the current corpus, remove all of the 'open' links it has to others.
    if (wn.getFrequency() <= 0) {
        for (Map.Entry<String, WordLink> entry : currentLinks.entrySet()) {
            toRemove.add(entry.getKey());
        }
    } else {
        // build up the list to add
        for (Map.Entry<String, LinkInformation> entry : neighbours.entrySet()) {
            String s = entry.getKey();
            LinkInformation li = entry.getValue();
            if (!currentLinks.containsKey(s) && li.getAffinity() > 0 && wordIndex.lookupCombinedFrequency(s, corpusA, percentageA, corpusB, percentageB) > 0) {
                toAdd.add(s);
            } else if (currentLinks.containsKey(s) && (currentLinks.get(s).getEndRepresentingWord(s).getFrequency() <= 0 | li.getAffinity() <= 0)) {
                // TODO: update this so it checks and is therefore more efficient
                toRemove.add(s);
            } else {
                toChange.add(s);
            }
        }
        // build up the list to remove
        for (Map.Entry<String, WordLink> entry : currentLinks.entrySet()) {
            String s = entry.getKey();
            if (!neighbours.containsKey(s)) {
                toRemove.add(s);
            }
        }
    }
    // First remove those that are not needed.
    for (String s : toRemove) {
        WordNode otherNode = currentLinks.get(s).getEndRepresentingWord(s);
        if (!willDelete) {
            if (otherNode.isNodeOpen() && otherNode.getFrequency() > 0) {
            // not removing links as the other node is open + has multiple links
            } else if (otherNode.isNodeOpen() && otherNode.getFrequency() <= 0) {
                removeLink(currentLinks.get(s), false);
            } else {
                removeLink(currentLinks.get(s), true);
            }
        } else {
            removeLink(currentLinks.get(s), false);
        }
    }
    // Add those that are needed
    for (String s : toAdd) {
        LinkInformation tempInfo = neighbours.get(s);
        int xPosition = (int) ((wn.position().x() - 50) + (Math.random() * 100));
        int yPosition = (int) ((wn.position().y() - 50) + (Math.random() * 100));
        WordNode added = addNodeToSystem(s, xPosition, yPosition, false);
        // now must create a spring between the two
        double offset = 0 - wordIndex.totalMinAffinity;
        double lineLength = 500 - (((tempInfo.getAffinity() + offset) / (wordIndex.totalMaxAffinity + offset)) * 400);
        double lineWidth = (50 - (lineLength / 10)) * 2;
        WordLink tempSpring = new WordLink(wn, added, (int) lineLength, 0.2F, 0.4F, (int) lineWidth);
        wn.addLink(tempSpring);
        added.addLink(tempSpring);
        wn.addNeighbour(added);
        added.addNeighbour(wn);
        physics.addSpring(tempSpring);
    }
    // change the values in the change list
    for (String s : toChange) {
        LinkInformation tempInfo = neighbours.get(s);
        // now must create a spring between the two
        double offset = 0 - wordIndex.totalMinAffinity;
        double lineLength = 500 - (((tempInfo.getAffinity() + offset) / (wordIndex.totalMaxAffinity + offset)) * 400);
        double lineWidth = (50 - (lineLength / 10)) * 2;
        WordLink theSpring = wn.getLinks().get(s);
        if (theSpring != null) {
            theSpring.setRestLength((float) lineLength);
            theSpring.setThickness((int) lineWidth);
        }
    }
}
