@SuppressWarnings("unchecked")
private <T> T constructObject(Node objectParams, Class<?> objectClass, Class<T> castTo) {
    try {
        String staticMethod = STATIC_METHOD_ATTRIB.evaluate(objectParams);
        String staticField = STATIC_FIELD_ATTRIB.evaluate(objectParams);
        String enumVal = ENUM_ATTRIB.evaluate(objectParams);
        Node constructorNode = (Node) CONSTRUCTOR_NODE.evaluate(objectParams, XPathConstants.NODE);
        String textData = TEXT_NODE.evaluate(objectParams).trim();
        Constructor<?> objConstructor;
        Object[] params;
        if (!staticMethod.equals("")) {
            List<Class<?>> parameterTypes = new ArrayList<Class<?>>();
            List<Object> parameters = new ArrayList<Object>();
            NodeList parameterNodes = getParameterNodes(objectParams);
            for (int y = 0; y < parameterNodes.getLength(); y++) {
                Node parameterNode = parameterNodes.item(y);
                Class<?> newCastTo = getParameterType(parameterNode);
                parameterTypes.add(newCastTo);
                Class<?> objClass = getObjectsType(parameterNode);
                parameters.add(constructObject(parameterNode, objClass, newCastTo));
            }
            Method objMethod = objectClass.getMethod(staticMethod, parameterTypes.toArray(new Class<?>[0]));
            if (castTo.isPrimitive())
                return (T) objMethod.invoke(null, parameters.toArray());
            return castTo.cast(objMethod.invoke(null, parameters.toArray()));
        } else if (!staticField.equals("")) {
            Field field = objectClass.getField(staticField);
            return castTo.cast(field.get(null));
        } else if (!enumVal.equals("")) {
            Object[] enums = objectClass.getEnumConstants();
            for (Object e : enums) {
                if (enumVal.equals(e.toString()))
                    return castTo.cast(e);
            }
            throw new RuntimeException("enum not found: " + enumVal);
        } else if (constructorNode != null) {
            List<Class<?>> parameterTypes = new ArrayList<Class<?>>();
            List<Object> parameters = new ArrayList<Object>();
            NodeList parameterNodes = getParameterNodes(constructorNode);
            for (int x = 0; x < parameterNodes.getLength(); x++) {
                Node parameterNode = parameterNodes.item(x);
                Class<?> newCastTo = getParameterType(parameterNode);
                parameterTypes.add(newCastTo);
                Class<?> objClass = getObjectsType(parameterNode);
                parameters.add(initializeObject(parameterNode, objClass, newCastTo));
            }
            objConstructor = objectClass.getConstructor(parameterTypes.toArray(new Class<?>[0]));
            params = parameters.toArray();
        } else if (textData != null && !textData.equals("")) {
            String className = CLASS_NAME_ATTRIB.evaluate(objectParams);
            PrimitiveType primType = PrimitiveType.get(className);
            if (primType != null) {
                if (DEBUG)
                    System.out.println(castTo + " " + textData + " " + primType.cast(textData).getClass());
                return (T) primType.cast(textData);
            }
            objConstructor = objectClass.getConstructor(String.class);
            params = new Object[] { textData };
        } else {
            objConstructor = objectClass.getConstructor();
            params = new Object[0];
        }
        if (DEBUG)
            System.out.println(objConstructor.newInstance(params));
        if (castTo.isPrimitive())
            return (T) objConstructor.newInstance(params);
        return castTo.cast(objConstructor.newInstance(params));
    } catch (Exception e) {
        e.printStackTrace();
        throw new RuntimeException("[Error]: ");
    }
}
