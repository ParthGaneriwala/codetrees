public ActionForward goods(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("entering 'goods' method...");
    }
    request.setAttribute("categories", categoryManager.getTopCategoryList());
    String id = request.getParameter("id");
    id.replace("'", "\"");
    id.replace("=", "");
    String email = request.getParameter("email");
    String commentRank = request.getParameter("comment_rank");
    String content = request.getParameter("content");
    // keep id is not null
    if (id == null || id.trim().length() == 0) {
        ActionMessages errors = new ActionMessages();
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("id.missing"));
        saveErrors(request, errors);
        return new ActionForward("/dispatch.do?page=home");
    }
    // keep there have goods in that id
    Goods goods = goodsManager.getGoods(id);
    if (goods == null) {
        ActionMessages errors = new ActionMessages();
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("goods.missing"));
        saveErrors(request, errors);
        return new ActionForward("/dispatch.do?page=home");
    }
    request.setAttribute("goods", goods);
    Brand brand = goods.getBrand();
    if (brand != null) {
        brand = brandManager.initialize(brand);
        goods.setBrand(brand);
    }
    if ((email != null) && (commentRank != null) && (content != null)) {
        if ((email.length() != 0) && (commentRank.length() != 0) && (content.length() != 0)) {
            Comment comment = new Comment();
            Date currentTime = new Date();
            Timestamp nowTime = new Timestamp(currentTime.getTime());
            comment.setAddTime(nowTime);
            comment.setCommentRank(Integer.parseInt(commentRank));
            comment.setEmail(email);
            comment.setContent(content);
            comment.setCommentType(0);
            comment.setIdValue(Integer.parseInt(id));
            comment.setIpAddress(request.getRemoteAddr());
            comment.setStatus(false);
            comment.setUserName("匿名用户");
            commentManager.saveComment(comment);
            request.setAttribute("createComment", "success");
        } else {
            request.setAttribute("createComment", "false");
        }
    }
    List<Comment> commentList = new ArrayList<Comment>();
    commentList = commentManager.getList("from Comment t where t.commentType = 0 and t.idValue = " + id + " and t.status = true");
    if (commentList.isEmpty()) {
        request.setAttribute("commentList", null);
    } else {
        request.setAttribute("commentList", commentList);
    }
    List<Comment> replyList = new ArrayList<Comment>();
    replyList = commentManager.getList("from Comment t where t.parent is NOT NULL");
    if (replyList.isEmpty()) {
        request.setAttribute("replyList", null);
    } else {
        request.setAttribute("replyList", replyList);
    }
    Set<Gallery> galleries = goods.getGalleries();
    Set<Gallery> _galleries = new HashSet<Gallery>(galleries);
    for (Iterator it = _galleries.iterator(); it.hasNext(); ) {
        Gallery img = (Gallery) it.next();
        img = galleryManager.initialize(img);
        galleries.remove(img);
        galleries.add(img);
    }
    cartInfoShow(request);
    return mapping.findForward("goods");
}
