public void run() {
    // Font used to write framerate.
    MinuetoFont mfoArial16;
    // Text use to display framerate.
    MinuetoImage mitFramerate;
    MinuetoImage mitText;
    // Timer used to calculate framerate.
    MinuetoStopWatch mswWatch;
    // Array of color.
    MinuetoColor[] mcoColor = new MinuetoColor[5];
    // Our random number generator.
    Random ranNumGenerator;
    // Current framerate.
    double dFrameRate;
    // Current number of lines drawn on screen.
    int iNumberLines;
    // Used to calculate the framerate
    int iFrameCount;
    // Temporary integers.
    int i, j, k, x, y, c;
    // Init random number generator.
    ranNumGenerator = new Random();
    // Init the timer.
    mswWatch = new MinuetoStopWatch();
    // Init the font.
    mfoArial16 = new MinuetoFont("Arial", 16, false, false);
    // Prepare the color array.
    mcoColor[0] = MinuetoColor.BLACK;
    mcoColor[1] = MinuetoColor.RED;
    mcoColor[2] = MinuetoColor.GREEN;
    mcoColor[3] = MinuetoColor.BLUE;
    mcoColor[4] = MinuetoColor.WHITE;
    // Init the framerate text (so it's not null on the first frames).
    mitFramerate = new MinuetoText("FPS: 0", mfoArial16, MinuetoColor.BLUE);
    mitText = new MinuetoText(myText, mfoArial16, MinuetoColor.WHITE);
    // Start the timer.
    mswWatch.start();
    // Get reday to count the FPS
    iFrameCount = 0;
    // At first, we draw no lines
    iNumberLines = 0;
    // Game/Rendering loop
    while (isRunning) {
        // Handle all the events in the event queue.
        while (meqQueue.hasNext()) {
            meqQueue.handle();
        }
        mwiPanel.clear(MinuetoColor.BLACK);
        // For every lines we are supposed to draw:
        for (i = 0; i < iNumberLines; i++) {
            // Starting X of the line.
            j = ranNumGenerator.nextInt(640);
            // Starting Y of the line.
            k = ranNumGenerator.nextInt(480);
            // Ending X of the line.
            x = ranNumGenerator.nextInt(640);
            // Ending Y of the line.
            y = ranNumGenerator.nextInt(480);
            // Random color of the line.
            c = ranNumGenerator.nextInt(5);
            // Draw the line.
            mwiPanel.drawLine(mcoColor[c], j, k, x, y);
        }
        // Count this frame
        iFrameCount++;
        // We update the framerate every thread frames.
        if (iFrameCount == 20) {
            mswWatch.stop();
            // Using the timer, we calculate how much time was needed to
            // draw the 20 frames. This gives us our framterate.
            dFrameRate = (double) 20000 / (double) mswWatch.getTime();
            // If our FPS is > 31, then we add some lines.
            if (dFrameRate > 31.0)
                iNumberLines = iNumberLines + (int) Math.round(Math.abs(dFrameRate - 30.0));
            // If our FPS is < 29, then we remove some lines.
            if (dFrameRate < 29.0)
                iNumberLines--;
            // We build the image that will display the framerate and the line count.
            mitFramerate = new MinuetoText("FPS: " + dFrameRate + " Lines: " + iNumberLines, mfoArial16, MinuetoColor.BLUE);
            synchronized (myText) {
                mitText = new MinuetoText(myText, mfoArial16, MinuetoColor.WHITE);
            }
            // And we start counting the frame agains ...
            iFrameCount = 0;
            // ...after having properly reset the counter.
            mswWatch.reset();
            mswWatch.start();
        }
        // We display the framerate and the line count
        mwiPanel.draw(mitFramerate, 0, 0);
        mwiPanel.draw(mitText, mwiPanel.getWidth() / 2 - mitText.getWidth() / 2, mwiPanel.getHeight() / 2 - mitText.getHeight() / 2);
        // Render all graphics in the back buffer.
        mwiPanel.render();
    }
    mwiPanel.close();
    frameWindow.dispose();
    frameWindow = null;
}
