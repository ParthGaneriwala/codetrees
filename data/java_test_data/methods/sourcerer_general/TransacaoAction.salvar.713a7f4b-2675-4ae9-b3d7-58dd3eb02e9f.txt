public ActionForward salvar(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    String forward = FORWARD_TRASACOES;
    ActionMessages errors = new ActionMessages();
    MessageResources msg = Resources.getMessageResources(request);
    PersistenceContext persCtx = factory.createPersistenceContext();
    try {
        persCtx.beginTrans();
        TransacaoForm tranForm = (TransacaoForm) form;
        ItemFinanceiroDAO tranDAO = new ItemFinanceiroDAO(persCtx);
        ContasFacade facade = new ContasFacade(persCtx);
        ItemFinanceiro itemFinanc = null;
        if (tranForm.getId() > 0) {
            itemFinanc = tranDAO.find(tranForm.getId());
        } else {
            itemFinanc = new ItemFinanceiro();
        }
        setFields(tranForm, itemFinanc, tranDAO);
        validateFields(tranForm, errors, msg);
        if (errors.isEmpty()) {
            List<Alerta> alertas = facade.criarItem(itemFinanc);
            // exibe o per�odo referente � transa��o
            Calendar cal = Calendar.getInstance();
            cal.setTime(itemFinanc.getData());
            loadDefaultData(request, tranDAO, cal.get(Calendar.MONTH), cal.get(Calendar.YEAR));
            request.setAttribute("alertas", alertas);
            persCtx.commit();
        } else {
            forward = FORWARD_NOVA_TRANSACAO;
            request.setAttribute("transacao", itemFinanc);
            loadBasicData(request, persCtx);
            saveErrors(request, errors);
        }
    } finally {
        persCtx.close();
    }
    return mapping.findForward(forward);
}
