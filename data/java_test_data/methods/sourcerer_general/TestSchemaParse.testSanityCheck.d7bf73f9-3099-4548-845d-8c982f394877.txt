public void testSanityCheck() throws Exception {
    // All occurrences of "expect" in this method indicate bugs.
    // When fixed, change the value of "expect" to 0:
    int expect = SQL_ABORT;
    // The most basic CREATEs and INSERTs would have already failed
    // in the setup method.
    // Get rid of view early so it doesn't cause dependency problems.
    assertEquals(2, queryRowCount("SELECT i FROM tstview"));
    execSQL("DROP VIEW tstview", 0);
    execSQL("CREATE CACHED TABLE cachtbl (i INT, vc VARCHAR(100))", 0);
    execSQL("SET TABLE tsttbl READONLY true", 0);
    execSQL("SET TABLE tsttbl READONLY false", 0);
    execSQL("INSERT INTO tsttbl VALUES (11, 'eleven')", 1);
    assertEquals(1, queryRowCount("SELECT i FROM tsttbl WHERE i = 1"));
    assertEquals(2, queryRowCount("SELECT i FROM tsttbl WHERE i IN (1, 2, 3)"));
    execSQL("ALTER SEQUENCE tstseq RESTART WITH 13", 0);
    execSQL("ALTER TABLE playtbl RENAME TO renamedtbl", 0);
    execSQL("ALTER TABLE renamedtbl RENAME TO playtbl", 0);
    execSQL("DROP INDEX tstind", 0);
    execSQL("DROP TABLE bigtbl", 0);
    execSQL("DROP SEQUENCE tstseq", 0);
    execSQL("SET FILES LOG SIZE 5", 0);
    // Following syntax is now obsolete.
    execSQL("SET PROPERTY \"hsqldb.first_identity\" 4", SQL_ABORT);
    execSQL("UPDATE tsttbl SET vc = 'eleven' WHERE i = 1", 1);
    execSQL("ALTER TABLE constrainedtbl ADD CONSTRAINT con1 CHECK (i6 > 4)", 0);
    // Can't test text tables in in-memory DB.
    execSQL("COMMIT", 0);
    execSQL("DELETE FROM tsttbl WHERE i < 10", 2);
    assertEquals(1, queryRowCount("SELECT i FROM tsttbl"));
    execSQL("ROLLBACK", 0);
    assertEquals(3, queryRowCount("SELECT i FROM tsttbl"));
    // Remember that inserts must change after adding a column.
    execSQL("ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)", 0);
    execSQL("ALTER TABLE tsttbl DROP COLUMN vco1", 0);
    execSQL("CREATE UNIQUE INDEX tstind ON tsttbl (i)", 0);
    execSQL("SET AUTOCOMMIT true", 0);
    execSQL("SET AUTOCOMMIT false", 0);
    execSQL("SET IGNORECASE true", 0);
    execSQL("SET IGNORECASE false", 0);
    execSQL("SET PASSWORD blah", 0);
    execSQL("SET PASSWORD 'blah'", 0);
    execSQL("SET DATABASE REFERENTIAL INTEGRITY true", 0);
    execSQL("GRANT ALL ON playtbl TO tstuser", 0);
    execSQL("REVOKE ALL ON playtbl FROM tstuser RESTRICT", 0);
    // TODO:  These should not throw a Null Pointer exception.
    execSQL("ALTER INDEX tstind RENAME TO renamedind", 0);
    execSQL("ALTER INDEX renamedind RENAME TO tstind", 0);
    execSQL("ALTER USER tstuser SET PASSWORD frank", 0);
    execSQL("ALTER USER tstuser SET PASSWORD 'frank'", 0);
    execSQL("ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)", 0);
    execSQL("ALTER TABLE tsttbl ALTER COLUMN vco1 RENAME TO j1", 0);
    execSQL("ALTER TABLE constrainedtbl DROP CONSTRAINT con1", 0);
    execSQL("ALTER TABLE foreigntbl DROP CONSTRAINT tstfk", 0);
    execSQL("ALTER TABLE foreigntbl ADD CONSTRAINT tstfk FOREIGN KEY " + "(i7) REFERENCES primarytbl (i8)", 0);
    assertEquals("Sub-query", 1, queryRowCount("SELECT vc FROM tsttbl WHERE i = (\n" + "    SELECT i2 FROM joinedtbl\n" + ")"));
    assertEquals("Join", 1, queryRowCount("SELECT vc FROM tsttbl, joinedtbl WHERE tsttbl.i = joinedtbl.i2\n" + "AND joinedtbl.vc2 = 'zwei'"));
    // Over-specified table names
    assertEquals("Over-specified Query 1", 1, queryRowCount("SELECT tsttbl.i FROM tsttbl WHERE tsttbl.i = 1"));
    assertEquals("Over-specified Query 2", 1, queryRowCount("SELECT tsttbl.i FROM tsttbl WHERE i = 1"));
    assertEquals("Over-specified Query 3", 1, queryRowCount("SELECT i FROM tsttbl WHERE tsttbl.i = 1"));
    // HSQLDB labels, Oracle aliases
    assertEquals("Trivial Label/alias 1", 1, queryRowCount("SELECT i FROM tsttbl ali WHERE i = 1"));
    assertEquals("Trivial Label/alias 2", 1, queryRowCount("SELECT i FROM tsttbl AS ali WHERE i = 1"));
    assertEquals("Trivial Label/alias 3", 1, queryRowCount("SELECT ali.i FROM tsttbl ali WHERE i = 1"));
    assertEquals("Trivial Label/alias 4", 1, queryRowCount("SELECT i FROM tsttbl ali WHERE ali.i = 1"));
    assertEquals("Trivial Label/alias 5", 1, queryRowCount("SELECT ali.i FROM tsttbl ali WHERE ali.i = 1"));
    /**
     * Uncomment when this mixing of aliases and real names is fixed.
     *
     * assertEquals("Mixed Label/aliases 1", 1, queryRowCount(
     * "SELECT tsttbl.i FROM tsttbl ali WHERE i = 1"));
     * assertEquals("Mixed Label/aliases 2", 1, queryRowCount(
     * "SELECT i FROM tsttbl ali WHERE tsttbl.i = 1"));
     * assertEquals("Mixed Label/aliases 3", 1, queryRowCount(
     * "SELECT tsttbl.i FROM tsttbl ali WHERE tsttbl.i = 1"));
     * assertEquals("Mixed Label/aliases 4", 1, queryRowCount(
     * "SELECT tsttbl.i FROM tsttbl ali WHERE ali.i = 1"));
     * assertEquals("Mixed Label/aliases 5", 1, queryRowCount(
     * "SELECT ali.i FROM tsttbl ali WHERE tsttbl.i = 1"));
     */
    assertEquals("Join w/Labels/aliases 1", 1, queryRowCount("SELECT vc FROM tsttbl ali1, joinedtbl ali2\n" + "WHERE i = i2 AND vc2 = 'zwei'"));
    assertEquals("Join w/Labels/aliases 2", 1, queryRowCount("SELECT vc FROM tsttbl ali1, joinedtbl ali2\n" + "WHERE ali1.i = i2 AND ali2.vc2 = 'zwei'"));
    assertEquals("Join w/Labels/aliases 3", 1, queryRowCount("SELECT ali1.vc FROM tsttbl ali1, joinedtbl ali2\n" + "WHERE ali1.i = i2 AND ali2.vc2 = 'zwei'"));
    assertEquals("Join w/Labels/aliases 4", 1, queryRowCount("SELECT ali1.vc FROM tsttbl ali1, joinedtbl ali2\n" + "WHERE i = i2 AND vc2 = 'zwei'"));
    /**
     * Uncomment when this mixing of aliases and real names is fixed.
     * assertEquals("Join w/Mixed Labels/aliases 1", 1, queryRowCount(
     * "SELECT vc FROM tsttbl ali1, joinedtbl ali2\n"
     * + "WHERE tsttbl.i = i2 AND vc2 = 'zwei'"));
     * assertEquals("Join w/Mixed Labels/aliases 2", 1, queryRowCount(
     * "SELECT vc FROM tsttbl ali1, joinedtbl ali2\n"
     * + "WHERE tsttbl.i = i2 AND joinedtbl.vc2 = 'zwei'"));
     * assertEquals("Join w/Mixed Labels/aliases 3", 1, queryRowCount(
     * "SELECT ali1.vc FROM tsttbl ali1, joinedtbl ali2\n"
     * + "WHERE ali1.i = i2 AND joinedtbl.vc2 = 'zwei'"));
     * assertEquals("Join w/Mixed Labels/aliases 4", 1, queryRowCount(
     * "SELECT tsttbl.vc FROM tsttbl ali1, joinedtbl ali2\n"
     * + "WHERE ali1.i = i2 AND ali2.vc2 = 'zwei'"));
     * assertEquals("Join w/Mixed Labels/aliases 5", 1, queryRowCount(
     * "SELECT tsttbl.vc FROM tsttbl ali1, joinedtbl ali2\n"
     * + "WHERE i = i2 AND vc2 = 'zwei'"));
     * assertEquals("Join w/Mixed Labels/aliases 6", 1, queryRowCount(
     * "SELECT tsttbl.vc FROM tsttbl ali1, joinedtbl ali2\n"
     * + "WHERE i = i2 AND joinedtbl.vc2 = 'zwei'"));
     */
    execSQL("CHECKPOINT bad", expect);
    execSQL("INSERT INTO tsttbl(i, vc) VALUES (12, 'twelve')", 1);
    execSQL("CREATE TABLE newtbl AS (SELECT * FROM tsttbl) WITH DATA", 0);
}
