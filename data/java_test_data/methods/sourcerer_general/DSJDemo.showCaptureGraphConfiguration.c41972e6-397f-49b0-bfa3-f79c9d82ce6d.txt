/**
 * Capture device selection:
 */
private int[] showCaptureGraphConfiguration(boolean resolved) {
    final JDialog cgc = new JDialog(this, "dsj - capture device configuration", true);
    cgc.getContentPane().setLayout(new BorderLayout());
    JPanel av = new JPanel(new GridLayout(2, 1));
    JPanel video = new JPanel(new BorderLayout());
    video.setBorder(new javax.swing.border.TitledBorder("Video"));
    GridLayout gl = new GridLayout(0, 1);
    gl.setVgap(5);
    gl.setHgap(5);
    final JComboBox dev = new JComboBox();
    JPanel vUp = new JPanel(gl);
    vUp.setBorder(new javax.swing.border.EmptyBorder(3, 3, 3, 3));
    vUp.add(dev);
    video.add("North", vUp);
    JPanel vidCfg = new JPanel(new BorderLayout());
    JPanel vidLabels = new JPanel(gl);
    vidLabels.setBorder(new javax.swing.border.EmptyBorder(3, 10, 3, 10));
    vidLabels.add(new JLabel("output pin", SwingConstants.CENTER));
    vidLabels.add(new JLabel("format", SwingConstants.CENTER));
    vidLabels.add(new JLabel("custom", SwingConstants.CENTER));
    vidCfg.add("West", vidLabels);
    JPanel vidCtrls = new JPanel(gl);
    vidCtrls.setBorder(new javax.swing.border.EmptyBorder(3, 3, 3, 3));
    final JComboBox pin = new JComboBox();
    vidCtrls.add(pin);
    final JComboBox format = new JComboBox();
    vidCtrls.add(format);
    final JCheckBox useAudio = new JCheckBox("render DV/MPEG/Crossbar audio");
    vidCtrls.add(useAudio);
    vidCfg.add("Center", vidCtrls);
    video.add("Center", vidCfg);
    av.add(video);
    JPanel audio = new JPanel(new BorderLayout());
    audio.setBorder(new javax.swing.border.TitledBorder("Audio"));
    final JComboBox adev = new JComboBox();
    JPanel aUp = new JPanel(gl);
    aUp.setBorder(new javax.swing.border.EmptyBorder(3, 3, 3, 3));
    aUp.add(adev);
    audio.add("North", aUp);
    JPanel audCfg = new JPanel(new BorderLayout());
    JPanel audLabels = new JPanel(gl);
    audLabels.setBorder(new javax.swing.border.EmptyBorder(3, 10, 3, 10));
    audLabels.add(new JLabel("output pin", SwingConstants.CENTER));
    audLabels.add(new JLabel("format", SwingConstants.CENTER));
    audLabels.add(Box.createRigidArea(new Dimension(10, 10)));
    audCfg.add("West", audLabels);
    JPanel audCtrls = new JPanel(gl);
    audCtrls.setBorder(new javax.swing.border.EmptyBorder(3, 3, 3, 3));
    final JComboBox apin = new JComboBox();
    audCtrls.add(apin);
    final JComboBox aformat = new JComboBox();
    audCtrls.add(aformat);
    audCtrls.add(Box.createRigidArea(new Dimension(10, 10)));
    audCfg.add("Center", audCtrls);
    audio.add("Center", audCfg);
    av.add(audio);
    cgc.getContentPane().add("North", Box.createRigidArea(new Dimension(150, 10)));
    cgc.getContentPane().add("Center", av);
    JPanel lower = new JPanel();
    JButton go = new JButton("open");
    go.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            cgc.setVisible(false);
            cgc.dispose();
        }
    });
    JButton cancel = new JButton("cancel");
    cancel.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            dev.setSelectedIndex(dev.getItemCount() - 1);
            adev.setSelectedIndex(adev.getItemCount() - 1);
            cgc.setVisible(false);
            cgc.dispose();
        }
    });
    lower.add(go);
    lower.add(cancel);
    cgc.getContentPane().add("South", lower);
    for (int i = 0; i < dsi[0].length; i++) dev.addItem(dsi[0][i].getName());
    for (int i = 0; i < dsi[1].length; i++) adev.addItem(dsi[1][i].getName());
    if (resolved) {
        dev.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                pin.removeAllItems();
                try {
                    useAudio.setEnabled(dsi[0][dev.getSelectedIndex()].getType() > DSCapture.CaptureDevice.VIDEO || dsi[0][dev.getSelectedIndex()].getCrossBarInfo() != null);
                    for (int i = 0; i < dsi[0][dev.getSelectedIndex()].getDownstreamPins().length; i++) {
                        pin.addItem(dsi[0][dev.getSelectedIndex()].getDownstreamPins()[i].getName());
                    }
                } catch (Exception ae) {
                }
            }
        });
        adev.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                apin.removeAllItems();
                try {
                    for (int i = 0; i < dsi[1][adev.getSelectedIndex()].getDownstreamPins().length; i++) {
                        apin.addItem(dsi[1][adev.getSelectedIndex()].getDownstreamPins()[i].getName());
                    }
                } catch (Exception ae) {
                }
            }
        });
        pin.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                format.setEnabled(false);
                format.removeAllItems();
                try {
                    format.addItem(dsi[0][dev.getSelectedIndex()].getDownstreamPins()[pin.getSelectedIndex()].getDefaultFormat().getDisplayString());
                    for (int i = 0; i < dsi[0][dev.getSelectedIndex()].getDownstreamPins()[pin.getSelectedIndex()].getFormats().length; i++) {
                        DSFilterInfo.DSMediaFormat mf = dsi[0][dev.getSelectedIndex()].getDownstreamPins()[pin.getSelectedIndex()].getFormats()[i];
                        format.addItem(mf.getDisplayString());
                    }
                    format.setSelectedIndex(dsi[0][dev.getSelectedIndex()].getDownstreamPins()[pin.getSelectedIndex()].getPreferredFormat() + 1);
                    format.setEnabled(true);
                } catch (Exception ae) {
                }
            }
        });
        apin.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                aformat.setEnabled(false);
                aformat.removeAllItems();
                try {
                    aformat.addItem(dsi[1][adev.getSelectedIndex()].getDownstreamPins()[apin.getSelectedIndex()].getDefaultFormat().getDisplayString());
                    for (int i = 0; i < dsi[1][adev.getSelectedIndex()].getDownstreamPins()[apin.getSelectedIndex()].getFormats().length; i++) {
                        DSFilterInfo.DSMediaFormat mf = dsi[1][adev.getSelectedIndex()].getDownstreamPins()[apin.getSelectedIndex()].getFormats()[i];
                        aformat.addItem(mf.getDisplayString());
                    }
                    aformat.setSelectedIndex(dsi[1][adev.getSelectedIndex()].getDownstreamPins()[apin.getSelectedIndex()].getPreferredFormat() + 1);
                    aformat.setEnabled(true);
                } catch (Exception ae) {
                }
            }
        });
        format.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (!format.isEnabled())
                    return;
                try {
                    dsi[0][dev.getSelectedIndex()].getDownstreamPins()[pin.getSelectedIndex()].setPreferredFormat(format.getSelectedIndex() - 1);
                } catch (Exception ae) {
                }
            }
        });
        aformat.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (!aformat.isEnabled())
                    return;
                try {
                    dsi[1][adev.getSelectedIndex()].getDownstreamPins()[apin.getSelectedIndex()].setPreferredFormat(aformat.getSelectedIndex() - 1);
                } catch (Exception ae) {
                }
            }
        });
        dev.setSelectedIndex(0);
        adev.setSelectedIndex(0);
    }
    useAudio.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            adev.setSelectedIndex(adev.getItemCount() - 1);
        }
    });
    cgc.pack();
    cgc.setLocation((int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - cgc.getWidth() / 2), (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - cgc.getHeight() / 2));
    if (dsi.length > 2) {
        System.out.println("Some devices are not available at present:");
        for (int i = 0; i < dsi[2].length; i++) System.out.println(dsi[2][i].getName());
    }
    cgc.setVisible(true);
    return new int[] { dev.getSelectedIndex(), adev.getSelectedIndex(), useAudio.isSelected() ? 1 : 0 };
}
