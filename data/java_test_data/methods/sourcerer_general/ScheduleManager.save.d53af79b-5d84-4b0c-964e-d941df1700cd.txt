@Override
public boolean save(Schedule save) {
    // method incomplete
    Element schedules = null;
    Element schedule = null;
    Element semester = null;
    Element cclass = null;
    NodeList schedule_nodes = null;
    NodeList semester_nodes = null;
    Set<AcademicYear> academicYears = null;
    boolean NEW_FILE = false;
    boolean APPEND_FILE = false;
    xmlDoc = null;
    if (save == null)
        return false;
    try {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactoryImpl.newInstance();
        DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
        xmlDoc = docBuilder.parse(super.getSourceFile());
        // TODO - fix it
        APPEND_FILE = true;
        System.out.println("XMLdoc: " + xmlDoc);
    } catch (SAXException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (ParserConfigurationException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    if (!APPEND_FILE) {
        NEW_FILE = true;
        try {
            // Create a XML Document
            DocumentBuilderFactory dbFactory = DocumentBuilderFactoryImpl.newInstance();
            DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
            xmlDoc = docBuilder.newDocument();
        } catch (Exception e) {
            System.out.println("Error " + e);
            return false;
        }
    }
    if (NEW_FILE) {
        // new empty XML file
        // Create the root element
        Date currentTime = new Date();
        schedules = xmlDoc.createElement(TAG_SCHEDULES);
        xmlDoc.appendChild(xmlDoc.createComment("created on: " + new Date()));
        // adjust profile ID creation, look to database that value is unique?
        schedules.setAttribute("profile", new Integer(Math.abs((int) currentTime.getTime())).toString());
    } else {
        // XML file already exists with root
        System.out.println(xmlDoc);
        schedules = (Element) xmlDoc.getElementsByTagName(TAG_SCHEDULES).item(0);
    }
    if (NEW_FILE) {
        // Add to the root Element
        xmlDoc.appendChild(schedules);
    }
    if (NEW_FILE) {
        // Writing to a new file
        schedule = xmlDoc.createElement(TAG_SCHEDULE);
        schedule.setAttribute("id", new Integer(save.getScheduleId()).toString());
        schedule.setAttribute("name", save.getScheduleName());
        schedules.appendChild(schedule);
        System.out.println("New file");
    } else {
        // Appending to an existing file
        NodeList scheduleList = xmlDoc.getElementsByTagName(TAG_SCHEDULE);
        // System.out.println(xmlDoc.getE);
        boolean INLIST = false;
        for (int i = 0; i < scheduleList.getLength(); i++) {
            if (scheduleList.item(i).getAttributes().getNamedItem("id").getNodeValue().equals(new Integer(save.getScheduleId()).toString())) {
                // Schedule object already in xml file, may need to update fields?
                INLIST = true;
                schedule = (Element) scheduleList.item(i);
            }
        }
        if (!INLIST) {
            // New schedule object being added to xml file
            System.out.println("new schedule object!");
            schedule = xmlDoc.createElement(TAG_SCHEDULE);
            schedule.setAttribute("id", new Integer(save.getScheduleId()).toString());
            schedule.setAttribute("name", save.getScheduleName());
            schedules.appendChild(schedule);
            NEW_FILE = true;
        }
    }
    // System.out.println("Schedule: " + schedule.getTextContent());
    schedule_nodes = schedules.getChildNodes();
    academicYears = save.getAcademicYear();
    Iterator<AcademicYear> IterAcademic = academicYears.iterator();
    while (IterAcademic.hasNext()) {
        // go through AcademicYears, need to fix AcademicYear to give an actual year
        AcademicYear currentAcademicYear = IterAcademic.next();
        Collection<ScheduledSemester> semesters = currentAcademicYear.getSemesters();
        Iterator<ScheduledSemester> IterSemester = semesters.iterator();
        boolean flag_newSemester = false;
        while (IterSemester.hasNext()) {
            // go through each ScheduledSemester of an AcademicYear
            ScheduledSemester currentSemester = IterSemester.next();
            if (NEW_FILE) {
                semester = xmlDoc.createElement(TAG_SEMESTER);
                semester.setAttribute("term", currentSemester.getTerm());
                semester.setAttribute("year", new Integer(currentSemester.getYear()).toString());
            } else {
                NodeList tempSemesters = xmlDoc.getElementsByTagName(TAG_SEMESTER);
                boolean found = false;
                for (int i = 0; i < tempSemesters.getLength(); i++) {
                    if ((tempSemesters.item(i).getAttributes().getNamedItem("term").getNodeValue().equalsIgnoreCase(currentSemester.getTerm()) && tempSemesters.item(i).getAttributes().getNamedItem("year").getNodeValue().equals(new Integer(currentSemester.getYear()).toString()))) {
                        found = false;
                    } else {
                        flag_newSemester = true;
                        found = true;
                        semester = (Element) tempSemesters.item(i);
                        break;
                    }
                }
                if (found) {
                    semester = xmlDoc.createElement(TAG_SEMESTER);
                    semester.setAttribute("term", currentSemester.getTerm());
                    semester.setAttribute("year", new Integer(currentSemester.getYear()).toString());
                }
            }
            Collection<Course> courses = currentSemester.getCourses();
            Iterator<Course> IterCourse = courses.iterator();
            while (IterCourse.hasNext()) {
                // go through each Course of a ScheduledSemester
                Course currentCourse = IterCourse.next();
                if (NEW_FILE) {
                    cclass = xmlDoc.createElement(TAG_CLASS);
                    cclass.setAttribute("id", new Integer(currentCourse.getCourseId()).toString());
                    cclass.setTextContent(currentCourse.getDegreeProgram() + currentCourse.getCourseNum());
                    semester.appendChild(cclass);
                } else {
                    NodeList tempCourses = xmlDoc.getElementsByTagName(TAG_CLASS);
                    boolean found = false;
                    for (int i = 0; i < tempCourses.getLength(); i++) {
                        if (!tempCourses.item(i).getAttributes().getNamedItem("id").getNodeValue().equals(new Integer(currentCourse.getCourseId()).toString())) {
                            found = false;
                        } else {
                            cclass = (Element) tempCourses.item(i);
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        cclass = xmlDoc.createElement(TAG_CLASS);
                        cclass.setAttribute("id", new Integer(currentCourse.getCourseId()).toString());
                        cclass.setTextContent(currentCourse.getDegreeProgram() + currentCourse.getCourseNum());
                    }
                }
            }
            // System.out.println(semester.getTextContent());
            if (NEW_FILE || flag_newSemester)
                schedule.appendChild(semester);
        }
    }
    try {
        // generate string and write to file
        FileUtils.writeStringToFile(super.getSourceFile(), this.generateXMLString(xmlDoc));
    } catch (IOException e) {
        e.printStackTrace();
        return false;
    }
    return false;
}
