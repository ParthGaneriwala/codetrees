@Test
public void test1() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultBinaryMaxentDataWriterFactory.class.getName());
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    BufferedReader reader = new BufferedReader(new FileReader(new MaxentClassifierBuilder().getTrainingDataFile(outputDirectory)));
    String line = reader.readLine();
    assertEquals("true hello=1234", line);
    reader.close();
    HideOutput hider = new HideOutput();
    Train.main(outputDirectoryName);
    hider.restoreOutput();
    BinaryMaxentClassifierBuilder builder = new BinaryMaxentClassifierBuilder();
    BinaryMaxentClassifier classifier;
    classifier = builder.loadClassifierFromTrainingDirectory(this.outputDirectory);
    Boolean classification = classifier.classify(createInstance(null, "hello", 1000).getFeatures());
    assertTrue(classification);
    classification = classifier.classify(createInstance(null, "hello", 1).getFeatures());
    assertTrue(classification);
    classification = classifier.classify(createInstance(null, "goodbye", 1).getFeatures());
    assertFalse(classification);
    AnalysisEngine classifierAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, GenericJarClassifierFactory.PARAM_CLASSIFIER_JAR_PATH, outputDirectoryName + "/model.jar");
    jCas.reset();
    classifierAnnotator.process(jCas);
    classifierAnnotator.collectionProcessComplete();
}
