// $ANTLR start "cabecalho"
public final gramaticaMM2Parser.cabecalho_return cabecalho() throws RecognitionException {
    gramaticaMM2Parser.cabecalho_return retval = new gramaticaMM2Parser.cabecalho_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token MODULE7 = null;
    Token SEMICOLON9 = null;
    gramaticaMM2Parser.id_return id8 = null;
    CommonTree MODULE7_tree = null;
    CommonTree SEMICOLON9_tree = null;
    RewriteRuleTokenStream stream_SEMICOLON = new RewriteRuleTokenStream(adaptor, "token SEMICOLON");
    RewriteRuleTokenStream stream_MODULE = new RewriteRuleTokenStream(adaptor, "token MODULE");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:82:11: ( MODULE id SEMICOLON -> ^( HEADER id ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:82:13: MODULE id SEMICOLON
        {
            MODULE7 = (Token) match(input, MODULE, FOLLOW_MODULE_in_cabecalho614);
            stream_MODULE.add(MODULE7);
            pushFollow(FOLLOW_id_in_cabecalho616);
            id8 = id();
            state._fsp--;
            stream_id.add(id8.getTree());
            SEMICOLON9 = (Token) match(input, SEMICOLON, FOLLOW_SEMICOLON_in_cabecalho618);
            stream_SEMICOLON.add(SEMICOLON9);
            // AST REWRITE
            // elements: id
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 83:1: -> ^( HEADER id )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:83:5: ^( HEADER id )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(HEADER, "HEADER"), root_1);
                    adaptor.addChild(root_1, stream_id.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
