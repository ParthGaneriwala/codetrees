@Test
public void testUpdateResponse() {
    Set<Long> yes = new HashSet<Long>();
    yes.addAll(Arrays.asList(new Long[] { 1L, 3L, 5L, 7L, 9L }));
    Set<Long> no = new HashSet<Long>();
    no.addAll(Arrays.asList(new Long[] { 2L, 4L, 6L, 8L, 10L }));
    VotableString n1 = new VotableString();
    n1.setVal("eclipse");
    n1.setV1(yes);
    n1.setV0(no);
    VotableString n2 = new VotableString();
    n2.setVal("jbuilder");
    n2.setV0(yes);
    n2.setV1(no);
    List<VotableString> names = Arrays.asList(new VotableString[] { n1, n2 });
    VotableString d = new VotableString();
    d.setVal("----------------------------------------------");
    d.setV1(yes);
    d.setV0(no);
    List<VotableString> des = Arrays.asList(new VotableString[] { d });
    Feature2 f = new Feature2();
    f.setDscs(des);
    f.setId(3L);
    f.setNames(names);
    f.setRels(yes);
    f.setV0(no);
    f.setOpt0(yes);
    f.setOpt1(no);
    f.setV1(yes);
    BinaryRelation2 b = new BinaryRelation2();
    b.setId(1L);
    b.setLeft(999L);
    b.setRight(333L);
    b.setType(Resources.BIN_REL_EXCLUDES);
    b.setV0(no);
    b.setV1(yes);
    UpdateResponse response = new UpdateResponse();
    response.setBinaries(Arrays.asList(new BinaryRelation2[] { b }));
    response.setFeatures(Arrays.asList(new Feature2[] { f, f }));
    response.setName(Resources.RSP_SUCCESS);
    response.setRequesterId(11L);
    response.setRequestId(3L);
    response.setRequestName(Resources.REQ_UPDATE);
    try {
        logger.info(ProtocolUtil.ResponseToJson(response));
    } catch (Exception e) {
        logger.info(e);
        assertTrue(false);
    }
}
