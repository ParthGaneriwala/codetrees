public void drawHex(Graphics graphics, TerrainType[][] t) {
    // Draws the Terrain (1th layer)
    Graphics2D canvas = (Graphics2D) graphics;
    // determines size of the tile.
    int tileSize = (int) (MAX_TILE_SIZE / zoomFactor);
    int x = tileSize;
    int y = tileSize;
    int columns = t.length;
    int rows = t[0].length;
    int initX = x;
    int initY = y;
    AffineTransform normal = AffineTransform.getScaleInstance(1 / zoomFactor, 1 / zoomFactor);
    BufferedImageOp normalBuffer = new AffineTransformOp(normal, AffineTransformOp.TYPE_BILINEAR);
    for (int col = 0; col < columns; ++col) {
        for (int row = 0; row < rows; ++row) {
            TerrainType activeTile = t[col][row];
            BufferedImage tilePic = null;
            if (activeTile == TerrainType.GRASS)
                tilePic = ImageDatabase.getSprite("GRASSHEX");
            else if (activeTile == TerrainType.SWAMP)
                tilePic = ImageDatabase.getSprite("SWAMPHEX");
            else if (activeTile == TerrainType.HILL)
                tilePic = ImageDatabase.getSprite("HILLHEX");
            canvas.drawImage(tilePic, normalBuffer, x, y);
            if (ViewBuffer.getCursor().getX() == row && ViewBuffer.getCursor().getY() == col) {
                Composite original = canvas.getComposite();
                float alpha = 0.4f;
                int type = AlphaComposite.SRC_OVER;
                AlphaComposite composite = AlphaComposite.getInstance(type, alpha);
                canvas.setComposite(composite);
                Color c = canvas.getColor();
                canvas.setColor(new Color(255, 128, 0));
                // call selection here
                canvas.setColor(new Color(0, 0, 255));
                canvas.fillOval(x, y, tileSize, tileSize);
                canvas.setComposite(original);
                canvas.setColor(c);
            }
            // temp only for location tiles
            Color c = canvas.getColor();
            canvas.setColor(new Color(0, 0, 255));
            String l = "(" + row + "," + col + ")";
            canvas.drawString(l, x, y);
            canvas.setColor(c);
            x += 3 * tileSize / 4;
            if (row % 2 == 0)
                y -= tileSize / 2;
            else
                y += tileSize / 2;
        }
        x = initX;
        y = initY += tileSize;
    }
}
