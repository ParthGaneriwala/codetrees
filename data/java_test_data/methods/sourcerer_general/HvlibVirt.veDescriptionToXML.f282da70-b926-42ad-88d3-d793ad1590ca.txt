private String veDescriptionToXML(VEDescription vmD) {
    StorageSettings hd = (StorageSettings) vmD.getStorage().get(0);
    Element root = new Element("domain");
    root.setAttribute("type", "qemu");
    Document doc = new Document(root);
    Element name_vm = new Element("name");
    name_vm.addContent(vmD.getName());
    root.addContent(name_vm);
    Element memory = new Element("memory");
    memory.addContent(String.valueOf(vmD.getMemorySettings().getSize()));
    root.addContent(memory);
    Element cpu_sett = new Element("cpu");
    cpu_sett.addContent(String.valueOf(vmD.getCpu().getNumCpu()));
    root.addContent(cpu_sett);
    Element os = new Element("os");
    Element type = new Element("type");
    switch(vmD.getCpu().getArchitecture()) {
        case X86:
            type.setAttribute("arch", "i686");
            break;
        case X86_64:
            type.setAttribute("arch", "x86_64");
            break;
    }
    type.setAttribute("machine", "pc");
    type.setText("hvm");
    os.addContent(type);
    Element boot = new Element("boot");
    boot.setAttribute("dev", "hd");
    os.addContent(boot);
    root.addContent(os);
    Element devices = new Element("devices");
    // Element emulator = new Element("emulator");
    // emulator.setText("/usr/bin/qemu-system-x86_64");
    // devices.addContent(emulator);
    Element disk = new Element("disk");
    disk.setAttribute("type", "file");
    disk.setAttribute("device", "disk");
    Element source = new Element("source");
    // Temporary settings
    // source.setAttribute("file", "/home/sabayonuser/software/testbed/clever/img/custom_debian.img");
    source.setAttribute("file", hd.getDiskPath());
    disk.addContent(source);
    Element target = new Element("target");
    target.setAttribute("dev", "hda");
    disk.addContent(target);
    devices.addContent(disk);
    // Element interf = new Element("interface");
    // interf.setAttribute("type", "network");
    // Element source_net = new Element("source");
    // source_net.setAttribute("network", "default");
    // source_net.setAttribute("network", "none");
    // interf.addContent(source_net);
    // devices.addContent(interf);
    Element graphics = new Element("graphics");
    graphics.setAttribute("type", "vnc");
    graphics.setAttribute("port", "-1");
    devices.addContent(graphics);
    root.addContent(devices);
    XMLOutputter xout = new XMLOutputter();
    Format f = Format.getPrettyFormat();
    xout.setFormat(f);
    return (xout.outputString(doc));
}
