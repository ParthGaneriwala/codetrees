public DefaultTreeModel createMomentTree() {
    createBinaryCoverages();
    float[][] raster = DissUtils.coverageToMatrix(binaries[0]);
    classifier.setRaster(raster);
    double[] probs = classifier.classifyProb();
    ClassifiedRaster cr = new ClassifiedRaster();
    cr.setRaster(raster);
    BeliefFunction bf = new BeliefFunction(classifier.getClassNames());
    bf.addSingletons(probs, classifier.getClassNames());
    cr.setBeliefFunction(bf);
    cr.setZInvs(classifier.getZInvs());
    cr.setTempString("root");
    DefaultMutableTreeNode root = new DefaultMutableTreeNode(cr);
    DefaultTreeModel model = new DefaultTreeModel(root);
    System.out.println("finished the root.");
    // now go and create direct children, grandchildren, etc.
    for (int i = 0; i < binaries.length; i++) {
        ImageBreaker ib = new ImageBreaker();
        System.out.println("working with binary # " + i);
        ib.setImage(binaries[i]);
        ib.isolateClusters();
        float[][][] rasters = ib.getRasterArrays();
        boolean[] isBackground = ib.getIsBackground();
        GridCoverage2D[] segments = ib.getClusterImages();
        for (int j = 0; j < rasters.length; j++) {
            System.out.println("raster # " + j);
            if (!(isBackground[j])) {
                classifier.setRaster(rasters[j]);
                double[] childProbs = classifier.classifyProb();
                ClassifiedRaster crx = new ClassifiedRaster();
                crx.setRaster(rasters[j]);
                BeliefFunction bfx = new BeliefFunction(classifier.getClassNames());
                bfx.addSingletons(childProbs, classifier.getClassNames());
                crx.setBeliefFunction(bfx);
                crx.setZInvs(classifier.getZInvs());
                crx.setTempString(i + "-" + j);
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(crx);
                DefaultMutableTreeNode parent = findParent(node, model, root);
                model.insertNodeInto(node, parent, parent.getChildCount());
                System.out.println("added another node to the tree");
            }
        }
    }
    return model;
}
