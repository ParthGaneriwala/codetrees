private void testVariation(String filebase, Random random, RDFReader rdfRdr, RDFWriter rdfWtr) throws FileNotFoundException, IOException {
    Model m1 = createMemModel();
    Model m2;
    String fileName = "t" + (fileNumber * 1000) + ".rdf";
    String baseUriRead;
    if (fileNumber < baseUris.length)
        baseUriRead = baseUris[fileNumber];
    else
        baseUriRead = "http://foo.com/Hello";
    InputStream rdr = new FileInputStream(filebase + fileName);
    m1.read(rdr, baseUriRead);
    rdr.close();
    for (int j = 0; j < repetitionsJ; j++) {
        String baseUriWrite = j % 2 == 0 ? baseUriRead : "http://bar.com/irrelevant";
        int cn = (int) m1.size();
        if ((j % 2) == 0 && j > 0)
            prune(m1, random, 1 + cn / 10);
        if ((j % 2) == 0 && j > 0)
            expand(m1, random, 1 + cn / 10);
        tmpOut = new ByteArrayOutputStream();
        rdfWtr.write(m1, tmpOut, baseUriWrite);
        tmpOut.flush();
        tmpOut.close();
        m2 = createMemModel();
        // empty(m2);
        InputStream in = new ByteArrayInputStream(tmpOut.toByteArray());
        rdfRdr.read(m2, in, baseUriWrite);
        in.close();
        Model s1 = m1;
        Model s2 = m2;
        /*
        	System.err.println("m1:");
        	m1.write(System.err,"N-TRIPLE");
        	System.err.println("m2:");
        	
        	m2.write(System.err,"N-TRIPLE");
        	System.err.println("=");
        	*/
        // assertTrue(
        // "Comparison of file written out, and file read in.",
        // s1.isIsomorphicWith(s2));
        assertIsoModels("Comparison of file written out, and file read in.", s1, s2);
        // Free resources explicitily.
        tmpOut.reset();
        tmpOut = null;
    }
    if (showProgress) {
        System.out.print("+");
        System.out.flush();
    }
}
