public synchronized void remove(Connection db) throws SQLException {
    boolean autoCommit = db.getAutoCommit();
    try {
        if (autoCommit) {
            db.setAutoCommit(false);
        }
        PreparedStatement pst;
        // Get the current position of the item to remove if not known
        if (position == -1) {
            buildRecord(db);
        }
        RequirementMapList mapList = new RequirementMapList();
        mapList.setProjectId(projectId);
        mapList.setRequirementId(requirementId);
        mapList.buildList(db);
        RequirementMapItem thisItem = mapList.getItem(position);
        // Move the children left
        Iterator i = thisItem.getChildren().iterator();
        while (i.hasNext()) {
            RequirementMapItem child = (RequirementMapItem) i.next();
            child.move(db, LEFT, false, mapList);
        }
        // Delete the requested item
        if (position > -1) {
            pst = db.prepareStatement("DELETE FROM project_requirements_map " + "WHERE project_id = ? " + "AND requirement_id = ? " + "AND position = ? ");
            pst.setInt(1, projectId);
            pst.setInt(2, requirementId);
            pst.setInt(3, thisItem.getPosition());
            pst.execute();
            pst.close();
        }
        // Shift all the other items up
        if (position > -1) {
            pst = db.prepareStatement("UPDATE project_requirements_map " + "SET position = position - 1 " + "WHERE project_id = ? " + "AND requirement_id = ? " + "AND position > ? ");
            pst.setInt(1, projectId);
            pst.setInt(2, requirementId);
            pst.setInt(3, position);
            pst.execute();
            pst.close();
        }
        if (autoCommit) {
            db.commit();
        }
    } catch (Exception e) {
        if (autoCommit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (autoCommit) {
            db.setAutoCommit(true);
        }
    }
}
