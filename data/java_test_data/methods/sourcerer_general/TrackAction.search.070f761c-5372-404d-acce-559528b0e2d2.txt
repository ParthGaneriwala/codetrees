public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'search' method");
    }
    TrackForm trackForm = initManufacturerList(form);
    // Exceptions are caught by ActionExceptionHandler
    String list = request.getParameter("list");
    String type = request.getParameter("type");
    String m = request.getParameter("m");
    request.setAttribute("type", type);
    request.setAttribute("m", m);
    String sql = null;
    StringBuffer sqlBuff = new StringBuffer(62);
    List datas = new ArrayList();
    sqlBuff.append(" select m.company, t.createdDate, v.userName, v.company, v.email, v.mobile ");
    sqlBuff.append(" from TrackHis t,  Manufacturer m, Visitor v");
    sqlBuff.append(" where ");
    // sqlBuff.append ("       t.readerId = 'W1A001'");
    sqlBuff.append("       t.readerId = m.manufacturerId");
    sqlBuff.append("   and t.tagId = v.tagId");
    if (StringUtils.isNotEmpty(m) && !"null".equals(m)) {
        sqlBuff.append("   and t.readerId = '" + m + "'");
    } else if (StringUtils.isNotEmpty(trackForm.getManufacturer())) {
        sqlBuff.append("   and t.readerId = '" + trackForm.getManufacturer() + "'");
    }
    // to_days(t.created_date) = TO_DAYS(NOW())
    // SimpleDateFormat sdf = new  SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String begin = null;
    if (trackForm.getBegDate() != null && !trackForm.getBegDate().trim().equals("")) {
        begin = trackForm.getBegDate() + " " + (trackForm.getBegTime() == null || trackForm.getBegTime().trim().equals("") ? "00:00:00" : trackForm.getBegTime());
    }
    String end = null;
    if (trackForm.getEndDate() != null && !trackForm.getEndDate().trim().equals("")) {
        end = trackForm.getEndDate() + " " + (trackForm.getEndTime() == null || trackForm.getEndTime().trim().equals("") ? "00:00:00" : trackForm.getEndTime());
    }
    if (begin != null && end != null) {
        sqlBuff.append("createdDate > '" + begin + "' and createdDate < '" + end + "'");
    } else if (end != null) {
        sqlBuff.append("createdDate < '" + end + "'");
    } else if (begin != null) {
        sqlBuff.append("createdDate > '" + begin + "'");
    }
    sql = sqlBuff.toString();
    if (sql.indexOf("=") == -1 && sql.indexOf("<") == -1 && sql.indexOf(">") == -1) {
        sql += " 1 = 1 ";
    }
    if (sql.trim().lastIndexOf("and") == sql.trim().length() - 3) {
        sql = sql.substring(0, sql.lastIndexOf("and"));
    }
    // System.out.println("++++++++sql = " + sql);
    TrackHisManager mgr = (TrackHisManager) getBean("trackHisManager");
    datas = mgr.getTrackHiss(sql.trim());
    Enumeration names = request.getParameterNames();
    int pageNo = 1;
    int pageSize = 50;
    int pageStartRow = 0;
    int pageEndRow = 0;
    int totalSize = 0;
    List<TrackForm> tracks = new ArrayList<TrackForm>();
    while (names.hasMoreElements()) {
        String parameter = (String) names.nextElement();
        if (parameter.matches("d-[0-9]+-p")) {
            pageNo = Integer.parseInt(request.getParameter(parameter));
            break;
        }
    }
    if (datas != null) {
        totalSize = datas.size();
        pageStartRow = (pageNo - 1) * pageSize;
        pageEndRow = Math.min(pageNo * pageSize, totalSize);
        for (int i = pageStartRow; i < pageEndRow; i++) {
            TrackForm track = new TrackForm();
            // m.company, t.createdDate, v.userName, v.company, v.email, v.mobile
            Object[] o = (Object[]) datas.get(i);
            track.setManufacturer(o[0].toString());
            track.setCreatedDate(formateCreatedDate((Date) o[1]));
            track.setVisitorName(o[2].toString());
            track.setVisitorCompany(o[3].toString());
            track.setVisitorEmail(o[4].toString());
            track.setVisitorTelphone(o[5].toString());
            tracks.add(track);
        }
        request.setAttribute("list", list);
        request.setAttribute(Constants.TRACK_LIST, tracks);
        request.setAttribute("totalSize", totalSize);
    }
    // return a forward to the user list definition
    return mapping.findForward("list");
}
