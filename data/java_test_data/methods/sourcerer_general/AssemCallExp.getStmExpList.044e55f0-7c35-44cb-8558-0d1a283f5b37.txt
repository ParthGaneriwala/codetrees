private StmExpList getStmExpList(Vector expStms) {
    int numArgs = expStms.size();
    AssemSeq seqStm = null;
    Stack expStack = new Stack();
    for (int i = 0; i < numArgs; i++) {
        AssemSeqExp seqExp = (AssemSeqExp) expStms.elementAt(i);
        AssemStm stm = seqExp.getStm();
        AssemExp exp = seqExp.getExp();
        if (seqStm == null) {
            // Entered loop for the first time
            seqStm = new AssemSeq(stm, null);
        } else {
            // Check if the current stm commutes with the previous exp
            // Get the previous exp
            AssemExp prevExp = (AssemExp) expStack.pop();
            if (commutes(stm, prevExp)) {
                seqStm = new AssemSeq(seqStm, stm);
            } else {
                Temp temp = new Temp();
                AssemTemp assemTemp = new AssemTemp(temp);
                AssemMove moveStm = new AssemMove(assemTemp, prevExp);
                seqStm = new AssemSeq(seqStm, new AssemSeq(moveStm, stm));
                prevExp = assemTemp;
            }
            // Push back the prev. exp
            expStack.push(prevExp);
        }
        expStack.push(exp);
    }
    // Create the expList from the stack created in the loop above
    AssemExpList expList = null;
    while (!expStack.isEmpty()) {
        AssemExp exp = (AssemExp) expStack.pop();
        expList = new AssemExpList(exp, expList);
    }
    StmExpList stmExpList = new StmExpList(seqStm, expList);
    return stmExpList;
}
