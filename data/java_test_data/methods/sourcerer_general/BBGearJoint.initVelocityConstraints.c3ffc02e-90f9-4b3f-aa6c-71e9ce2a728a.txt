public void initVelocityConstraints(final BBTimeStep step) {
    BBBody g1 = m_ground1;
    BBBody g2 = m_ground2;
    BBBody b1 = m_bodyA;
    BBBody b2 = m_bodyB;
    float K = 0.0f;
    m_J.setZero();
    if (m_revolute1 != null) {
        m_J.angular1 = -1.0f;
        K += b1.m_invI;
    } else {
        BBVec2 ug = mul(g1.getTransform().R, m_prismatic1.m_localXAxis1);
        BBVec2 r = mul(b1.getTransform().R, sub(m_localAnchor1, b1.getLocalCenter()));
        float crug = cross(r, ug);
        m_J.linear1 = ug.neg();
        m_J.angular1 = -crug;
        K += b1.m_invMass + b1.m_invI * crug * crug;
    }
    if (m_revolute2 != null) {
        m_J.angular2 = -m_ratio;
        K += m_ratio * m_ratio * b2.m_invI;
    } else {
        BBVec2 ug = mul(g2.getTransform().R, m_prismatic2.m_localXAxis1);
        BBVec2 r = mul(b2.getTransform().R, sub(m_localAnchor2, b2.getLocalCenter()));
        float crug = cross(r, ug);
        m_J.linear2 = mul(-m_ratio, ug);
        m_J.angular2 = -m_ratio * crug;
        K += m_ratio * m_ratio * (b2.m_invMass + b2.m_invI * crug * crug);
    }
    // Compute effective mass.
    m_mass = K > 0.0f ? 1.0f / K : 0.0f;
    if (step.warmStarting) {
        // Warm starting.
        b1.m_linearVelocity.add(mul(b1.m_invMass * m_impulse, m_J.linear1));
        b1.m_angularVelocity += b1.m_invI * m_impulse * m_J.angular1;
        b2.m_linearVelocity.add(mul(b2.m_invMass * m_impulse, m_J.linear2));
        b2.m_angularVelocity += b2.m_invI * m_impulse * m_J.angular2;
    } else {
        m_impulse = 0.0f;
    }
}
