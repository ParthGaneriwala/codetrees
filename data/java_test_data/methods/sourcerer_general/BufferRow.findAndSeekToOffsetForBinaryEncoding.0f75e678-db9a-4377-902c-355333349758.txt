private int findAndSeekToOffsetForBinaryEncoding(int index) throws SQLException {
    if (index == 0) {
        this.lastRequestedIndex = 0;
        this.lastRequestedPos = this.homePosition;
        this.rowFromServer.setPosition(this.homePosition);
        return 0;
    }
    if (index == this.lastRequestedIndex) {
        this.rowFromServer.setPosition(this.lastRequestedPos);
        return this.lastRequestedPos;
    }
    int startingIndex = 0;
    if (index > this.lastRequestedIndex) {
        if (this.lastRequestedIndex >= 0) {
            startingIndex = this.lastRequestedIndex;
        } else {
            // First-time "scan"
            startingIndex = 0;
            this.lastRequestedPos = this.homePosition;
        }
        this.rowFromServer.setPosition(this.lastRequestedPos);
    } else {
        this.rowFromServer.setPosition(this.homePosition);
    }
    for (int i = startingIndex; i < index; i++) {
        if (this.isNull[i]) {
            continue;
        }
        int curPosition = this.rowFromServer.getPosition();
        switch(this.metadata[i].getMysqlType()) {
            case MysqlDefs.FIELD_TYPE_NULL:
                // for dummy binds
                break;
            case MysqlDefs.FIELD_TYPE_TINY:
                this.rowFromServer.setPosition(curPosition + 1);
                break;
            case MysqlDefs.FIELD_TYPE_SHORT:
            case MysqlDefs.FIELD_TYPE_YEAR:
                this.rowFromServer.setPosition(curPosition + 2);
                break;
            case MysqlDefs.FIELD_TYPE_LONG:
            case MysqlDefs.FIELD_TYPE_INT24:
                this.rowFromServer.setPosition(curPosition + 4);
                break;
            case MysqlDefs.FIELD_TYPE_LONGLONG:
                this.rowFromServer.setPosition(curPosition + 8);
                break;
            case MysqlDefs.FIELD_TYPE_FLOAT:
                this.rowFromServer.setPosition(curPosition + 4);
                break;
            case MysqlDefs.FIELD_TYPE_DOUBLE:
                this.rowFromServer.setPosition(curPosition + 8);
                break;
            case MysqlDefs.FIELD_TYPE_TIME:
                this.rowFromServer.fastSkipLenByteArray();
                break;
            case MysqlDefs.FIELD_TYPE_DATE:
                this.rowFromServer.fastSkipLenByteArray();
                break;
            case MysqlDefs.FIELD_TYPE_DATETIME:
            case MysqlDefs.FIELD_TYPE_TIMESTAMP:
                this.rowFromServer.fastSkipLenByteArray();
                break;
            case MysqlDefs.FIELD_TYPE_TINY_BLOB:
            case MysqlDefs.FIELD_TYPE_MEDIUM_BLOB:
            case MysqlDefs.FIELD_TYPE_LONG_BLOB:
            case MysqlDefs.FIELD_TYPE_BLOB:
            case MysqlDefs.FIELD_TYPE_VAR_STRING:
            case MysqlDefs.FIELD_TYPE_VARCHAR:
            case MysqlDefs.FIELD_TYPE_STRING:
            case MysqlDefs.FIELD_TYPE_DECIMAL:
            case MysqlDefs.FIELD_TYPE_NEW_DECIMAL:
            case MysqlDefs.FIELD_TYPE_GEOMETRY:
            case MysqlDefs.FIELD_TYPE_BIT:
                this.rowFromServer.fastSkipLenByteArray();
                break;
            default:
                throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                "MysqlIO.97") + this.metadata[i].getMysqlType() + Messages.getString("MysqlIO.98") + (i + 1) + // $NON-NLS-1$ //$NON-NLS-2$
                Messages.getString("MysqlIO.99") + this.metadata.length + // $NON-NLS-1$
                Messages.getString("MysqlIO.100"), SQLError.SQL_STATE_GENERAL_ERROR, this.exceptionInterceptor);
        }
    }
    this.lastRequestedIndex = index;
    this.lastRequestedPos = this.rowFromServer.getPosition();
    return this.lastRequestedPos;
}
