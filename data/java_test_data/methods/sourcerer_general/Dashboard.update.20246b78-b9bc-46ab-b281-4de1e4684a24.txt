public int update(Connection db) throws SQLException {
    if (this.getId() == -1) {
        throw new SQLException("ID was not specified");
    }
    if (!isValid()) {
        return -1;
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        // Update existing dashboard levels
        int currentLevel = DashboardList.queryCurrentLevel(db, id);
        int maxLevel = DashboardList.queryMaxLevel(db, projectId);
        if (level > maxLevel + 1) {
            level = maxLevel + 1;
        }
        PreparedStatement pst;
        if (level < currentLevel) {
            // Update any dashboards that need to be shifted
            pst = db.prepareStatement("UPDATE project_dashboard " + "SET dashboard_level = dashboard_level + 1 " + "WHERE project_id = ? " + "AND dashboard_level >= ? " + "AND dashboard_level <= ? ");
            pst.setInt(1, projectId);
            pst.setInt(2, level);
            pst.setInt(3, currentLevel);
            pst.executeUpdate();
            pst.close();
        } else if (level > currentLevel) {
            // Update any dashboards that need to be shifted
            pst = db.prepareStatement("UPDATE project_dashboard " + "SET dashboard_level = dashboard_level - 1 " + "WHERE project_id = ? " + "AND dashboard_level >= ? " + "AND dashboard_level <= ? ");
            pst.setInt(1, projectId);
            pst.setInt(2, currentLevel);
            pst.setInt(3, level);
            pst.executeUpdate();
            pst.close();
        }
        // Update the record
        pst = db.prepareStatement("UPDATE project_dashboard " + "SET dashboard_name = ?, dashboard_level = ?, project_id = ?, portal = ?, enabled = ? " + (entered != null ? ", entered = ? " : "") + ", modified = CURRENT_TIMESTAMP " + "WHERE modified = ? ");
        int i = 0;
        pst.setString(++i, name);
        pst.setInt(++i, level);
        pst.setInt(++i, projectId);
        pst.setBoolean(++i, portal);
        pst.setBoolean(++i, enabled);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        pst.setTimestamp(++i, modified);
        int updateCount = pst.executeUpdate();
        pst.close();
        if (commit) {
            db.commit();
        }
        return updateCount;
    } catch (Exception e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
}
