public Dimension repositionHorizontal() {
    final int maxRows = getMaxRows();
    final int maxCols = getMaxCols();
    int[] colDelta = new int[maxRows];
    int[] colWidth = new int[maxRows];
    int[] rowDelta = new int[maxCols];
    int[] rowHeight = new int[maxCols];
    // since we are inverting the grid.
    for (int i = maxCols - 1; i >= 0; i--) {
        rowHeight[i] = getMaxColHeight(i);
        if (i == maxCols - 1)
            rowDelta[i] = mLayoutPrefs.getMarginTop();
        else
            rowDelta[i] = rowHeight[i + 1] + rowDelta[i + 1] + mLayoutPrefs.getInterNodeSpacing();
    }
    // since we are inverting the grid.
    for (int i = 0; i < maxRows; i++) {
        colWidth[i] = getMaxRowWidth(i);
        if (i == 0)
            colDelta[i] = mLayoutPrefs.getMarginLeft();
        else
            colDelta[i] = colWidth[i - 1] + colDelta[i - 1] + mLayoutPrefs.getInterLevelSpacing();
    }
    // Process all container elements within grid to assign proper coordinates
    for (Iterator iter = mGridData.iterator(); iter.hasNext(); ) {
        AeGridElement gridElement = (AeGridElement) iter.next();
        AeGraphFigure nodeFig = gridElement.getNode().getFigure();
        int col = gridElement.getColumn();
        int row = gridElement.getRow();
        int colCenter = Math.max(0, (colWidth[row] - nodeFig.getSize().width) / 2);
        int rowCenter = Math.max(0, (rowHeight[col] - nodeFig.getSize().height) / 2);
        nodeFig.setLocation(new Point(colDelta[row] + colCenter, rowDelta[col] + rowCenter));
    }
    // Calculate and return the new size which is based on delta of the last
    // row or column plus the height and width of the elements at that location
    Dimension sz = new Dimension(colDelta[maxRows - 1] + colWidth[maxRows - 1], rowDelta[0] + rowHeight[0]);
    return sz;
}
