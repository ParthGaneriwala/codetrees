protected void processCloudlet(SimEvent ev, int type) {
    int cloudletId = 0;
    int userId = 0;
    int vmId = 0;
    try {
        // if a sender using cloudletXXX() methods
        int[] data = (int[]) ev.getData();
        cloudletId = data[0];
        userId = data[1];
        vmId = data[2];
    }// if a sender using normal send() methods
     catch (ClassCastException c) {
        try {
            Cloudlet cl = (Cloudlet) ev.getData();
            cloudletId = cl.getCloudletId();
            userId = cl.getUserId();
            vmId = cl.getVmId();
        } catch (Exception e) {
            Log.printLine(super.getName() + ": Error in processing Cloudlet");
            Log.printLine(e.getMessage());
            return;
        }
    } catch (Exception e) {
        Log.printLine(super.getName() + ": Error in processing a Cloudlet.");
        Log.printLine(e.getMessage());
        return;
    }
    // begins executing ....
    switch(type) {
        case CloudSimTags.CLOUDLET_CANCEL:
            processCloudletCancel(cloudletId, userId, vmId);
            break;
        case CloudSimTags.CLOUDLET_PAUSE:
            processCloudletPause(cloudletId, userId, vmId, false);
            break;
        case CloudSimTags.CLOUDLET_PAUSE_ACK:
            processCloudletPause(cloudletId, userId, vmId, true);
            break;
        case CloudSimTags.CLOUDLET_RESUME:
            processCloudletResume(cloudletId, userId, vmId, false);
            break;
        case CloudSimTags.CLOUDLET_RESUME_ACK:
            processCloudletResume(cloudletId, userId, vmId, true);
            break;
        default:
            break;
    }
}
