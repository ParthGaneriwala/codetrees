private static void sortInternal(final IndexedSortable s, int p, int r, final Progressable rep, int depth) {
    if (null != rep) {
        rep.progress();
    }
    while (true) {
        if (r - p < 13) {
            for (int i = p; i < r; ++i) {
                for (int j = i; j > p && s.compare(j - 1, j) > 0; --j) {
                    s.swap(j, j - 1);
                }
            }
            return;
        }
        if (--depth < 0) {
            // give up
            alt.sort(s, p, r, rep);
            return;
        }
        // select, move pivot into first position
        fix(s, (p + r) >>> 1, p);
        fix(s, (p + r) >>> 1, r - 1);
        fix(s, p, r - 1);
        // Divide
        int i = p;
        int j = r;
        int ll = p;
        int rr = r;
        int cr;
        while (true) {
            while (++i < j) {
                if ((cr = s.compare(i, p)) > 0)
                    break;
                if (0 == cr && ++ll != i) {
                    s.swap(ll, i);
                }
            }
            while (--j > i) {
                if ((cr = s.compare(p, j)) > 0)
                    break;
                if (0 == cr && --rr != j) {
                    s.swap(rr, j);
                }
            }
            if (i < j)
                s.swap(i, j);
            else
                break;
        }
        j = i;
        // swap pivot- and all eq values- into position
        while (ll >= p) {
            s.swap(ll--, --i);
        }
        while (rr < r) {
            s.swap(rr++, j++);
        }
        // Recurse on smaller interval first to keep stack shallow
        assert i != j;
        if (i - p < r - j) {
            sortInternal(s, p, i, rep, depth);
            p = j;
        } else {
            sortInternal(s, j, r, rep, depth);
            r = i;
        }
    }
}
