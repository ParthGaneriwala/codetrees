// $ANTLR start "value_number"
public final MyGrammarParser.value_number_return value_number() throws RecognitionException {
    MyGrammarParser.value_number_return retval = new MyGrammarParser.value_number_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token NUMBER189 = null;
    MyGrammarParser.value_call_return value_call190 = null;
    CommonTree NUMBER189_tree = null;
    RewriteRuleTokenStream stream_NUMBER = new RewriteRuleTokenStream(adaptor, "token NUMBER");
    RewriteRuleSubtreeStream stream_value_call = new RewriteRuleSubtreeStream(adaptor, "rule value_call");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:289:16: ( ( NUMBER -> ^( VALUE_NUMBER NUMBER ) | value_call -> ^( VALUE_NUMBER value_call ) ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:289:18: ( NUMBER -> ^( VALUE_NUMBER NUMBER ) | value_call -> ^( VALUE_NUMBER value_call ) )
        {
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:289:18: ( NUMBER -> ^( VALUE_NUMBER NUMBER ) | value_call -> ^( VALUE_NUMBER value_call ) )
            int alt36 = 2;
            int LA36_0 = input.LA(1);
            if ((LA36_0 == NUMBER)) {
                alt36 = 1;
            } else if ((LA36_0 == IDENTIFIER)) {
                alt36 = 2;
            } else {
                NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
                throw nvae;
            }
            switch(alt36) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:289:19: NUMBER
                    {
                        NUMBER189 = (Token) match(input, NUMBER, FOLLOW_NUMBER_in_value_number2537);
                        stream_NUMBER.add(NUMBER189);
                        // AST REWRITE
                        // elements: NUMBER
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 289:26: -> ^( VALUE_NUMBER NUMBER )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:289:29: ^( VALUE_NUMBER NUMBER )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE_NUMBER, "VALUE_NUMBER"), root_1);
                                adaptor.addChild(root_1, stream_NUMBER.nextNode());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
                case 2:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:289:52: value_call
                    {
                        pushFollow(FOLLOW_value_call_in_value_number2547);
                        value_call190 = value_call();
                        state._fsp--;
                        stream_value_call.add(value_call190.getTree());
                        // AST REWRITE
                        // elements: value_call
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                        root_0 = (CommonTree) adaptor.nil();
                        // 289:63: -> ^( VALUE_NUMBER value_call )
                        {
                            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:289:66: ^( VALUE_NUMBER value_call )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(VALUE_NUMBER, "VALUE_NUMBER"), root_1);
                                adaptor.addChild(root_1, stream_value_call.nextTree());
                                adaptor.addChild(root_0, root_1);
                            }
                        }
                        retval.tree = root_0;
                    }
                    break;
            }
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
