public void sendDomainRegistration() {
    System.out.println("register server");
    try {
        if (domain.hostPort != null)
            System.out.println("RegistrationDomainThread, sendDomainRegistration(), sending REGISTER" + " (SignIn) in progress to the proxy: " + domain.hostName + ":" + domain.hostPort);
        else
            System.out.println("RegistrationDomainThread, sendDomainRegistration(), sending REGISTER" + " (SignIn) in progress to the proxy: " + domain.hostName);
        SipStack sipStack = proxy.getSipStack();
        String stackIPAddress = sipStack.getIPAddress();
        // Get a default SIP provider for the domain
        SipProvider sipProvider = proxy.getSipProvider();
        MessageFactory messageFactory = proxy.getMessageFactory();
        HeaderFactory headerFactory = proxy.getHeaderFactory();
        AddressFactory addressFactory = proxy.getAddressFactory();
        ProxyUtilities proxyUtilities = proxy.getProxyUtilities();
        // Request-URI:
        SipURI requestURI = null;
        try {
            requestURI = addressFactory.createSipURI(null, domain.hostName);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        requestURI.setMAddrParam(domain.hostName);
        if (domain.hostPort != null)
            requestURI.setPort(Integer.valueOf(domain.hostPort).intValue());
        // Call-ID:
        callIdCounter++;
        CallIdHeader callIdHeader = headerFactory.createCallIdHeader("nist-sip-proxy-register-callId" + callIdCounter);
        // CSeq:
        cseq++;
        CSeqHeader cseqHeader = headerFactory.createCSeqHeader(cseq, "REGISTER");
        Iterator it = sipStack.getListeningPoints();
        if (it == null)
            return;
        ListeningPoint lp = (ListeningPoint) it.next();
        if (lp == null)
            return;
        // To header:
        SipURI toURI = null;
        try {
            toURI = addressFactory.createSipURI(null, domain.from);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        // toURI.setPort(lp.getPort());
        Address toAddress = addressFactory.createAddress(toURI);
        // String toTag=Utils.generateTag();
        ToHeader toHeader = headerFactory.createToHeader(toAddress, null);
        // From Header://*******************error
        SipURI fromURI = addressFactory.createSipURI(null, domain.from);
        // fromURI.setPort(lp.getPort());
        Address fromAddress = addressFactory.createAddress(fromURI);
        String fromTag = proxyUtilities.generateTag();
        FromHeader fromHeader = headerFactory.createFromHeader(fromAddress, fromTag);
        // Via header
        ViaHeader viaHeader = proxy.getStackViaHeader();
        Vector viaList = new Vector();
        viaList.addElement(viaHeader);
        // MaxForwards header:
        MaxForwardsHeader maxForwardsHeader = headerFactory.createMaxForwardsHeader(70);
        Request request = messageFactory.createRequest(requestURI, "REGISTER", callIdHeader, cseqHeader, fromHeader, toHeader, viaList, maxForwardsHeader);
        ClientTransaction clientTransaction = sipProvider.getNewClientTransaction(request);
        if (clientTransaction == null) {
            logger.debug("RegistrationDomainThread, sendDomainRegistration(), " + " ERROR, the client transaction is null for the" + " request" + request);
            return;
        }
        // Contact header:
        ContactHeader contactHeader = proxy.getStackContactHeader();
        request.setHeader(contactHeader);
        clientTransaction.sendRequest();
        logger.debug("RegistrationDomainThread, sendDomainRegistration()," + " REGISTER sent:\n" + request);
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
