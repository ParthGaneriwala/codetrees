private void drawLoader() {
    // We want to compute this image off screen so that partially completed images are never displayed
    Graphics2D g2 = offScreenG2;
    BufferedImage loader = offScreenLoader;
    // Get font info for centering
    Font f = g2.getFont();
    FontMetrics fm = g2.getFontMetrics(f);
    // Clear the image
    g2.setColor(bgColor);
    g2.fillRect(0, 0, loader.getWidth(), loader.getHeight());
    // draw graph as is, centered in the table cell
    int graphX = Math.round((((float) loader.getWidth() - graphImage.getIconWidth()) / 2));
    int graphY = Math.round((((float) loader.getHeight() - graphImage.getIconHeight()) / 2));
    g2.drawImage(graphImage.getImage(), graphX, graphY, this.getImageObserver());
    // Fade background on top to make it look like the graph is fading away while the loading text fades in
    if ((int) (100.0 * fadeInAlpha) < 100) {
        fadeInAlpha += ((1.0 - fadeInAlpha) / 10.0);
    } else {
        fadeInAlpha = 1.0;
    }
    g2.setColor(bgColor);
    g2.setColor(new Color(g2.getColor().getRed(), g2.getColor().getGreen(), g2.getColor().getBlue(), (int) (200.0 * fadeInAlpha)));
    g2.fillRect(0, 0, loader.getWidth(), loader.getHeight());
    // Loading animation
    // radius of the disk
    int r = 20;
    // To draw the animated rotating disk, we must create the Mask, or drawable area, in which we will
    // rotate a triangular polygon around a common center
    // the inner circle is subracted from the outter to create the disk area
    Ellipse2D circOutter = new Ellipse2D.Double((loader.getWidth() / 2) - r, (loader.getHeight() / 2) - r, 2 * r, 2 * r);
    Ellipse2D circInner = new Ellipse2D.Double((loader.getWidth() / 2) - (r / 2), (loader.getHeight() / 2) - (r / 2), r, r);
    Area circInnerArea = new Area(circInner);
    Area diskMask = new Area(circOutter);
    diskMask.subtract(circInnerArea);
    // this variable keeps track of the overall disk
    if (degreesForDisk >= 360) {
        degreesForDisk = 0;
    }
    // To produce the fading effect we must draw consecutively more transparent polygons around the disk
    // this vriable keeps track of the fading polygons
    // at the start of each frame we want to first draw the least transparent polygon in the same position on the rotating kisk
    double degreesForTrail = degreesForDisk;
    // Here we find the center of the table cell
    Point2D center = new Point2D.Double(loader.getWidth() / 2, loader.getHeight() / 2);
    // these two points will represent the outer ends of the polygon, spinning around the center
    Point2D pointOnCircumference1 = new Point2D.Double();
    Point2D pointOnCircumference2 = new Point2D.Double();
    // these are the colors of the spinning disk
    Color markerLeadColor = Color.WHITE;
    Color markerTrailColor = Color.CYAN;
    // In order for the leading portion of the rotating disk to be one color and the trailing portion another we use
    // this weighting variable to slowly change the weighting of the two colors in finding the average between the two
    double markerLeadColorWeighting = 1.0;
    // this is the transparency of the initial polygon which is exponantially decremented to fade away the polygons
    double markerAlpha = 255 * fadeInAlpha;
    // In order for the polygons to cover the disk entirely, the outter polygon points must circle in an orbit that is further
    // than the disk itself, otherwise we would get a flat line between the two points and the resulting circle would not be smooth
    r = r + 10;
    // We will only draw the polygons as long as they are visible
    while (((int) markerAlpha) > 0) {
        // these are the radians of rotation of each of the polygon edges
        double theta1 = 2 * Math.PI * (degreesForTrail / 360);
        // offset by 5 degrees
        double theta2 = 2 * Math.PI * ((degreesForTrail - 6.0) / 360);
        // the outter spinning point locations can be determined by the circle equations here
        pointOnCircumference1.setLocation(((r * Math.cos(theta1))) + center.getX(), ((r * Math.sin(theta1))) + center.getY());
        pointOnCircumference2.setLocation(((r * Math.cos(theta2))) + center.getX(), ((r * Math.sin(theta2))) + center.getY());
        // this is the color with the decrementing alpha
        g2.setColor(new Color((int) ((markerLeadColor.getRed() * markerLeadColorWeighting) + (markerTrailColor.getRed() * (1.0 - markerLeadColorWeighting))), (int) ((markerLeadColor.getGreen() * markerLeadColorWeighting) + (markerTrailColor.getGreen() * (1.0 - markerLeadColorWeighting))), (int) ((markerLeadColor.getBlue() * markerLeadColorWeighting) + (markerTrailColor.getBlue() * (1.0 - markerLeadColorWeighting))), (int) Math.rint(markerAlpha)));
        if ((int) (markerLeadColorWeighting * 100) > 0) {
            markerLeadColorWeighting = markerLeadColorWeighting - (markerLeadColorWeighting / 40);
        }
        // polygons need arrays of x and y values to be drawn, so these are triangles consisting of a center point and two outter points
        int[] xs = { (int) center.getX(), (int) pointOnCircumference1.getX(), (int) pointOnCircumference2.getX() };
        int[] ys = { (int) center.getY(), (int) pointOnCircumference1.getY(), (int) pointOnCircumference2.getY() };
        // the triangle is intersected with the disk first
        Polygon marker = new Polygon(xs, ys, 3);
        Area markerMask = new Area(marker);
        markerMask.intersect(diskMask);
        // and drawn
        g2.fill(markerMask);
        // the alpha of the marker polygon is exponentially decreased
        markerAlpha = markerAlpha - (markerAlpha / 20);
        // the successive, more transparent marker is offset by 2 degrees backward to give the appearance of motion blur
        degreesForTrail -= 2;
    }
    // The successive disk is rotated 15 degrees for an optimal speed given the fps
    degreesForDisk += 15;
    // Loading text
    String loadingText = "LOADING";
    // White outline
    g2.setColor(Color.WHITE);
    g2.setColor(new Color(g2.getColor().getRed(), g2.getColor().getGreen(), g2.getColor().getBlue(), (int) (255.0 * fadeInAlpha)));
    g2.drawString(loadingText, (loader.getWidth() / 2) - (fm.stringWidth(loadingText) / 2) - 1, (loader.getHeight() / 2) + (fontSize / 2) - 1);
    g2.drawString(loadingText, (loader.getWidth() / 2) - (fm.stringWidth(loadingText) / 2) - 1, (loader.getHeight() / 2) + (fontSize / 2) + 1);
    g2.drawString(loadingText, (loader.getWidth() / 2) - (fm.stringWidth(loadingText) / 2) + 1, (loader.getHeight() / 2) + (fontSize / 2) - 1);
    g2.drawString(loadingText, (loader.getWidth() / 2) - (fm.stringWidth(loadingText) / 2) + 1, (loader.getHeight() / 2) + (fontSize / 2) + 1);
    // Red text
    g2.setColor(Color.YELLOW);
    g2.setColor(new Color(g2.getColor().getRed(), g2.getColor().getGreen(), g2.getColor().getBlue(), (int) (255.0 * fadeInAlpha)));
    g2.drawString(loadingText, (loader.getWidth() / 2) - (fm.stringWidth(loadingText) / 2), (loader.getHeight() / 2) + (fontSize / 2));
    // Draw process text and progress bar and text
    // Process
    g2.setColor(fgColor);
    g2.drawString(process, 10, loader.getHeight() - 2);
    // Progress Bar Fill
    g2.setColor(Color.BLUE);
    // The transparency of the bar occilates between 100 and 150 using the sin function and the degrees of the rotating disk
    // completing one period with every turn of the disk
    int progressBarAlpha = 150 - (int) (50.0 * Math.abs(Math.sin(2.0 * Math.PI * (((double) degreesForDisk / 2) / 360.0))));
    g2.setColor(new Color(g2.getColor().getRed(), g2.getColor().getGreen(), g2.getColor().getBlue(), progressBarAlpha));
    g2.fillRect(10, loader.getHeight() - 20, (int) ((((double) progress) / 100) * (loader.getWidth() - 20)), 10);
    // Progress Bar Outline
    g2.setColor(fgColor);
    g2.setColor(new Color(g2.getColor().getRed(), g2.getColor().getGreen(), g2.getColor().getBlue(), 100));
    g2.drawRect(10, loader.getHeight() - 20, loader.getWidth() - 20, 10);
    // Progress Text
    String progressText = progress + "%";
    // We add a black shadow to make it easier to read on top of any background
    g2.setColor(bgColor);
    g2.drawString(progressText, (loader.getWidth() / 2) - (fm.stringWidth(progressText) / 2) + 1, loader.getHeight() - 11);
    g2.setColor(fgColor);
    g2.drawString(progressText, (loader.getWidth() / 2) - (fm.stringWidth(progressText) / 2), loader.getHeight() - 12);
    // Lastly we paint the computed image onto the onscreen picture for display
    onScreenG2.drawImage(offScreenLoader, 0, 0, null);
}
