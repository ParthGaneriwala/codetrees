/**
 * This tests a fileter which gets all posts which rate an author.
 *
 * @throws Exception
 */
@Test
public void testGetAllPostsRatingAnAuthor() throws Exception {
    HttpTester request = new HttpTester();
    HttpTester response = new HttpTester();
    request.setMethod("POST");
    request.setURI("/api/query");
    request.setVersion("HTTP/1.0");
    request.setHeader("Content-Type", "application/x-www-form-urlencoded");
    List<Map> filterList = new ArrayList<Map>();
    Map<String, Object> authorMap = new HashMap<String, Object>();
    authorMap.put("output", "id");
    authorMap.put("used_as", "refers_to_id");
    authorMap.put("type", "='author'");
    Map<String, Object> ratingMap = new HashMap<String, Object>();
    ratingMap.put("type", "='rating'");
    ratingMap.put("output", "id");
    ratingMap.put("used_as", "id");
    ratingMap.put("parents", new Map[] { authorMap });
    filterList.add(ratingMap);
    request.setContent("filters=" + constructJSONString(filterList));
    response.parse(tester.getResponses(request.generate()));
    Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus());
    Assert.assertNotNull(response.getContent());
    List<HashMap> posts = getJSONAsList(response.getContent());
    Map<Integer, IPost> expectedResult = new HashMap<Integer, IPost>();
    Post post1 = new Post(36, 1, 2, "rating", "1", null);
    expectedResult.put(post1.getId(), post1);
    Post post2 = new Post(37, 1, 3, "rating", "2", null);
    expectedResult.put(post2.getId(), post2);
    Post post3 = new Post(38, 1, 4, "rating", "3", null);
    expectedResult.put(post3.getId(), post3);
    Post post4 = new Post(39, 1, 5, "rating", "4", null);
    expectedResult.put(post4.getId(), post4);
    Post post5 = new Post(40, 1, 6, "rating", "5", null);
    expectedResult.put(post5.getId(), post5);
    Post post6 = new Post(41, 2, 1, "rating", "6", null);
    expectedResult.put(post6.getId(), post6);
    Post post7 = new Post(42, 2, 3, "rating", "7", null);
    expectedResult.put(post7.getId(), post7);
    Post post8 = new Post(43, 2, 4, "rating", "8", null);
    expectedResult.put(post8.getId(), post8);
    Post post9 = new Post(44, 2, 5, "rating", "9", null);
    expectedResult.put(post9.getId(), post9);
    Post post10 = new Post(45, 2, 6, "rating", "10", null);
    expectedResult.put(post10.getId(), post10);
    Assert.assertEquals("Unexpected number of posts rating authors encountered.", expectedResult.size(), posts.size());
    for (HashMap post : posts) {
        long postId = (Long) post.get("id");
        IPost expectedPost = expectedResult.get((int) postId);
        Assert.assertNotNull("Received unexpected post id = " + post.get("id"), expectedPost.getId());
        Assert.assertEquals("content did not match.", expectedPost.getContent(), post.get("content"));
        Assert.assertEquals("refersToId did not match.", expectedPost.getRefersToId(), post.get("refers_to_id"));
        Assert.assertEquals("type did not match.", expectedPost.getType(), post.get("type"));
        Assert.assertEquals("authorPostId did not match.", expectedPost.getAuthorPostId(), post.get("author_post_id"));
    }
}
