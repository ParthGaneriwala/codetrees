private void partitionImpl(Context ctx, Collection<S> vocab, HashMap<Dimension<T>, MutableDouble> center) {
    // find two points closest to the center
    double firstVal = Double.POSITIVE_INFINITY;
    double secondVal = Double.POSITIVE_INFINITY;
    S firstWord = null;
    S secondWord = null;
    LinkedList<S> cluster1 = new LinkedList<S>();
    LinkedList<S> cluster2 = new LinkedList<S>();
    HashMap<Dimension<T>, MutableDouble> newCenter1 = null;
    HashMap<Dimension<T>, MutableDouble> newCenter2 = null;
    if (vocab.size() > 2) {
        for (S word : vocab) {
            double dist = distanceToCenter(word, center);
            if (dist < secondVal) {
                if (dist < firstVal) {
                    secondVal = firstVal;
                    secondWord = firstWord;
                    firstVal = dist;
                    firstWord = word;
                } else {
                    secondVal = dist;
                    secondWord = word;
                }
            }
        }
        if (distance(firstWord, secondWord) <= 0.0) {
            // pick an arbitrary second word
            for (S word : vocab) {
                if (word.equals(firstWord) || word.equals(secondWord))
                    continue;
                if (distance(firstWord, word) > 0.0) {
                    secondWord = word;
                    break;
                }
            }
        // System.out.printf("selected '%s' and '%s'\n", firstWord, secondWord);
        }
        HashMap<Dimension<T>, MutableDouble> center1 = wordToVector(firstWord);
        HashMap<Dimension<T>, MutableDouble> center2 = wordToVector(secondWord);
        for (S word : vocab) {
            double dist1 = distanceToCenter(word, center1);
            double dist2 = distanceToCenter(word, center2);
            if (dist1 < dist2) {
                cluster1.add(word);
            } else {
                cluster2.add(word);
            }
        }
        int changed = 1;
        int iteration = 0;
        while (++iteration <= MAX_ITERATIONS && changed > 0) {
            // System.out.printf("Iteration %d/%d\n", iteration, MAX_ITERATIONS);
            changed = 0;
            newCenter1 = ctx.getCenter(cluster1);
            newCenter2 = ctx.getCenter(cluster2);
            LinkedList<S> tmpCluster1 = new LinkedList<S>();
            LinkedList<S> tmpCluster2 = new LinkedList<S>();
            for (ListIterator<S> it = cluster1.listIterator(); it.hasNext(); ) {
                S word = it.next();
                double dist1 = distanceToCenter(word, newCenter1);
                double dist2 = distanceToCenter(word, newCenter2);
                if (dist1 <= dist2) {
                    tmpCluster1.add(word);
                } else {
                    tmpCluster2.add(word);
                    changed++;
                // System.out.printf("changing %s : %g > %g\n", word, dist1, dist2);
                }
            }
            for (ListIterator<S> it = cluster2.listIterator(); it.hasNext(); ) {
                S word = it.next();
                double dist1 = distanceToCenter(word, newCenter1);
                double dist2 = distanceToCenter(word, newCenter2);
                if (dist2 <= dist1) {
                    tmpCluster2.add(word);
                } else {
                    tmpCluster1.add(word);
                    changed++;
                // System.out.printf("changing %s : %g < %g\n", word, dist1, dist2);
                }
            }
            cluster1 = tmpCluster1;
            cluster2 = tmpCluster2;
            // System.out.printf("changed: %d/%d\n", changed, vocab.size());
            if (cluster1.size() == 0 || cluster2.size() == 0) {
                LinkedList<S> cl = cluster1.size() == 0 ? cluster2 : cluster1;
                // System.out.printf("Cannot split %s, split them randomly\n", cl.toString());
                tmpCluster1 = new LinkedList<S>();
                tmpCluster2 = new LinkedList<S>();
                boolean b = true;
                for (S word : cl) {
                    if (b) {
                        tmpCluster1.add(word);
                    } else {
                        tmpCluster2.add(word);
                    }
                    b = !b;
                }
                cluster1 = tmpCluster1;
                cluster2 = tmpCluster2;
            }
        }
    } else if (vocab.size() == 2) {
        Iterator<S> it = vocab.iterator();
        S word1 = it.next();
        S word2 = it.next();
        cluster1.add(word1);
        cluster2.add(word2);
        newCenter1 = wordToVector(word1);
        newCenter2 = wordToVector(word2);
    } else {
        return;
    }
    if (notifyNewCluster(vocab, cluster1, cluster2)) {
        partition(ctx, cluster1, newCenter1);
        partition(ctx, cluster2, newCenter2);
    }
}
