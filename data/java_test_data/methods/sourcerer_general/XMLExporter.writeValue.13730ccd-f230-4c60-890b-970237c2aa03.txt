protected void writeValue(Element element, Object value, Class<?> clazz) throws IOException {
    // write the class unless we can determine that implicitly
    Class<?> cclazz = getClass(value);
    if (cclazz != clazz) {
        element.setAttribute("class", cclazz.getName());
    }
    // see if we can convert the value to a string
    @SuppressWarnings("unchecked") Stringifier<Object> stringifier = Stringifier.getStringifier(cclazz);
    if (stringifier != null) {
        // because empty text nodes are removed, we must include a comment to
        // signify an empty string
        String str = stringifier.toString(value);
        element.appendChild(str.length() == 0 ? _document.createComment("empty") : _document.createTextNode(str));
        return;
    }
    String oindent = _indent;
    Element oelement = _element;
    _element = element;
    _indent = _indent + "  ";
    try {
        appendln();
        // write the outer class information, if applicable
        Object outer = ReflectionUtil.getOuter(value);
        if (outer != null) {
            write("outer", outer, Object.class);
        }
        if (value instanceof Exportable) {
            writeFields((Exportable) value);
        } else if (value instanceof Object[]) {
            @SuppressWarnings("unchecked") Class<Object> ctype = (Class<Object>) cclazz.getComponentType();
            writeEntries((Object[]) value, ctype);
        } else if (value instanceof Collection) {
            writeEntries((Collection) value);
        } else if (value instanceof Map) {
            writeEntries((Map) value);
        } else {
            throw new IOException("Value is not exportable [class=" + cclazz + "].");
        }
    } finally {
        _indent = oindent;
        appendIndent();
        _element = oelement;
    }
}
