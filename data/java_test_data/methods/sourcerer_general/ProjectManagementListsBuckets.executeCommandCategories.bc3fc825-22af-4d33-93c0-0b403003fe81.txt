public String executeCommandCategories(ActionContext context) {
    Connection db = null;
    // Parameters
    String projectId = context.getRequest().getParameter("pid");
    try {
        db = getConnection(context);
        // Load the project
        Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
        if (!hasProjectAccess(context, thisProject.getId(), "project-lists-view")) {
            return "PermissionError";
        }
        context.getRequest().setAttribute("project", thisProject);
        context.getRequest().setAttribute("IncludeSection", "lists_buckets_categories");
        // Build the list of categories
        TaskCategoryList categoryList = new TaskCategoryList();
        categoryList.setProjectId(thisProject.getId());
        categoryList.buildList(db);
        context.getRequest().setAttribute("categoryList", categoryList);
        // Build the list items for the selected category (or all)
        TaskList outlineList = new TaskList();
        outlineList.setProjectId(thisProject.getId());
        outlineList.setComplete(Constants.FALSE);
        outlineList.buildList(db);
        HashMap<Integer, String> taskUrlMap = new HashMap<Integer, String>();
        for (Task t : outlineList) {
            String linkItemUrl = TaskUtils.getLinkItemUrl(getUser(context), ctx(context), t);
            if (linkItemUrl != null) {
                taskUrlMap.put(t.getId(), linkItemUrl);
            }
        }
        context.getRequest().setAttribute("taskUrlMap", taskUrlMap);
        context.getRequest().setAttribute("outlineList", outlineList);
        return ("ProjectCenterOK");
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
}
