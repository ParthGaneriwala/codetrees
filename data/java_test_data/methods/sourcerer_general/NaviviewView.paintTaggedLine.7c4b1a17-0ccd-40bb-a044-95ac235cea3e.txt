@Override
protected void paintTaggedLine(Segment line, int lineIndex, Graphics g, int x, int y, MoeSyntaxDocument document, Color def, Element lineElement) {
    // Painting at such a small font size means the font appears very light.
    // To get around this problem, we paint into a temporary image, then darken
    // the text, and finally copy the temporary image to the output Graphics.
    int lineHeight = metrics.getHeight();
    Rectangle clipBounds = g.getClipBounds();
    BufferedImage img;
    if (g instanceof Graphics2D) {
        img = ((Graphics2D) g).getDeviceConfiguration().createCompatibleImage(clipBounds.width, lineHeight, Transparency.TRANSLUCENT);
    } else {
        img = new BufferedImage(clipBounds.width, lineHeight, BufferedImage.TYPE_INT_ARGB);
    }
    Graphics2D imgG = img.createGraphics();
    imgG.setFont(g.getFont());
    imgG.setColor(g.getColor());
    if (SYNTAX_COLOURING) {
        if (document.getParser() != null) {
            super.paintTaggedLine(line, lineIndex, imgG, x - clipBounds.x, metrics.getAscent(), document, def, lineElement);
        } else {
            paintPlainLine(lineIndex, imgG, x - clipBounds.x, metrics.getAscent());
        }
    } else {
        paintPlainLine(lineIndex, imgG, x - clipBounds.x, metrics.getAscent());
    }
    // Filter the image - adjust alpha channel to darken the image.
    for (int iy = 0; iy < img.getHeight(); iy++) {
        for (int ix = 0; ix < img.getWidth(); ix++) {
            int rgb = img.getRGB(ix, iy);
            Color c = new Color(rgb, true);
            int red = c.getRed();
            int green = c.getGreen();
            int blue = c.getBlue();
            int alpha = c.getAlpha();
            // Make it more opaque
            alpha = darken(alpha);
            img.setRGB(ix, iy, new Color(red, green, blue, alpha).getRGB());
        }
    }
    g.drawImage(img, clipBounds.x, y - metrics.getAscent(), null);
}
