public int find_split(Context cx, Scriptable scope, String target, String separator, Scriptable reObj, int[] ip, int[] matchlen, boolean[] matched, String[][] parensp) {
    int i = ip[0];
    int length = target.length();
    int result;
    int version = cx.getLanguageVersion();
    NativeRegExp re = (NativeRegExp) reObj;
    again: while (true) {
        // imitating C label
        /* JS1.2 deviated from Perl by never matching at end of string. */
        // reuse ip to save object creation
        int ipsave = ip[0];
        ip[0] = i;
        Object ret = re.executeRegExp(cx, scope, this, target, ip, NativeRegExp.TEST);
        if (ret != Boolean.TRUE) {
            // Mismatch: ensure our caller advances i past end of string.
            ip[0] = ipsave;
            matchlen[0] = 1;
            matched[0] = false;
            return length;
        }
        i = ip[0];
        ip[0] = ipsave;
        matched[0] = true;
        SubString sep = this.lastMatch;
        matchlen[0] = sep.length;
        if (matchlen[0] == 0) {
            /*
                 * Empty string match: never split on an empty
                 * match at the start of a find_split cycle.  Same
                 * rule as for an empty global match in
                 * match_or_replace.
                 */
            if (i == ip[0]) {
                /*
                     * "Bump-along" to avoid sticking at an empty
                     * match, but don't bump past end of string --
                     * our caller must do that by adding
                     * sep->length to our return value.
                     */
                if (i == length) {
                    if (version == Context.VERSION_1_2) {
                        matchlen[0] = 1;
                        result = i;
                    } else
                        result = -1;
                    break;
                }
                i++;
                // imitating C goto
                continue again;
            }
        }
        // PR_ASSERT((size_t)i >= sep->length);
        result = i - matchlen[0];
        break;
    }
    int size = (parens == null) ? 0 : parens.length;
    parensp[0] = new String[size];
    for (int num = 0; num < size; num++) {
        SubString parsub = getParenSubString(num);
        parensp[0][num] = parsub.toString();
    }
    return result;
}
