public static int quicksort(Table iTable, File iWorkDir, File iOutputFile, int[] inField, int inOrder, int inMemorySize) throws IOException, RecordException {
    byte[] nPageData;
    File sublist;
    Comparable[][] aOutputBuffer;
    Sort sort = new QuickSort();
    int nPhase = 1;
    int nLength = iTable.getLengthTotal();
    int nRecordAmount = (int) Math.floor((double) inMemorySize / nLength);
    int nRecordMax = iTable.getNbRecords();
    int nCount = (int) Math.ceil((double) nRecordMax / (double) nRecordAmount);
    ProjectGUI.getInstance().update("Memory Execution: " + iTable.getName() + " Quicksort ", 1);
    ProjectGUI.getInstance().update(0, nRecordAmount * nLength, ProjectGUI.getGI(0, 0, 1, nRecordAmount * nLength, iTable));
    for (int i = 0; i < nCount; i++) {
        sublist = getSublistFile(iWorkDir, nPhase, i, iOutputFile, nCount);
        // Get max memory
        nPageData = iTable.readFile(i * nRecordAmount, Math.min(nRecordMax, (i + 1) * nRecordAmount));
        aOutputBuffer = iTable.getAllRecord(nPageData, 0);
        // Quicksort
        if (inOrder == ASC) {
            sort.sort(aOutputBuffer, inField);
        } else if (inOrder == DESC) {
            sort.sortInverse(aOutputBuffer, inField);
        }
        nPageData = iTable.getRawData(aOutputBuffer);
        // Write sublist to file.
        Utils.clear(sublist);
        Utils.write(sublist, iTable.getLengthTotal(), 0, nPageData);
        ProjectGUI.getInstance().hasBreak();
    }
    return Math.max(nCount, 1);
}
