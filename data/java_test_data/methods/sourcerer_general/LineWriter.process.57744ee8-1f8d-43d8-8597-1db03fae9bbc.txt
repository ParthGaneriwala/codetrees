@SuppressWarnings("unchecked")
@Override
public void process(JCas jCas) throws AnalysisEngineProcessException {
    if (!typesInitialized)
        initializeTypes(jCas);
    try {
        if (outputDirectory != null) {
            String id = (new File(ViewURIUtil.getURI(jCas))).getName();
            while (id.endsWith(".")) {
                id = id.substring(0, id.length() - 1);
            }
            out = new PrintStream(new File(outputDirectory, id + fileSuffix));
        }
        if (blockOnDocument) {
            BLOCK_TYPE documentAnnotation = (BLOCK_TYPE) jCas.getDocumentAnnotationFs();
            out.print(blockWriter.writeBlock(jCas, documentAnnotation));
            FSIterator<Annotation> outputAnnotations = jCas.getAnnotationIndex(outputAnnotationType).iterator();
            while (outputAnnotations.hasNext()) {
                ANNOTATION_TYPE outputAnnotation = (ANNOTATION_TYPE) outputAnnotations.next();
                out.println(annotationWriter.writeAnnotation(jCas, outputAnnotation));
            }
        } else if (blockAnnotationType != null) {
            FSIterator<Annotation> blocks = jCas.getAnnotationIndex(blockAnnotationType).iterator();
            while (blocks.hasNext()) {
                BLOCK_TYPE blockAnnotation = (BLOCK_TYPE) blocks.next();
                out.print(blockWriter.writeBlock(jCas, blockAnnotation));
                FSIterator<Annotation> outputAnnotations = jCas.getAnnotationIndex(outputAnnotationType).subiterator(blockAnnotation);
                while (outputAnnotations.hasNext()) {
                    ANNOTATION_TYPE outputAnnotation = (ANNOTATION_TYPE) outputAnnotations.next();
                    out.println(annotationWriter.writeAnnotation(jCas, outputAnnotation));
                }
            }
        } else {
            FSIterator<Annotation> outputAnnotations = jCas.getAnnotationIndex(outputAnnotationType).iterator();
            while (outputAnnotations.hasNext()) {
                ANNOTATION_TYPE outputAnnotation = (ANNOTATION_TYPE) outputAnnotations.next();
                out.println(annotationWriter.writeAnnotation(jCas, outputAnnotation));
            }
        }
        if (outputDirectory != null) {
            out.flush();
            out.close();
        }
    } catch (FileNotFoundException fnfe) {
        throw new AnalysisEngineProcessException(fnfe);
    }
}
