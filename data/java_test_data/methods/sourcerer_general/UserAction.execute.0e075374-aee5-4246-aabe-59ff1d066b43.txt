/*
	 * Generated Methods
	 */
public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
    // TODO Auto-generated method stub
    UserForm userForm = (UserForm) form;
    UserService userService = new UserService();
    ChatUser chatUser = new ChatUser();
    String username = null;
    String action = request.getParameter("action");
    // �޸�����
    if (action.equals("modifyPassword")) {
        username = (String) request.getSession().getAttribute("user");
        chatUser = userService.findByUserName(username);
        if (chatUser.getPassword().equals(userForm.getPassword())) {
            chatUser.setPassword(userForm.getNewpassword());
            userService.modifyInfo(chatUser);
            return mapping.findForward("successfulPassword");
        }
        return mapping.findForward("errorPassword");
    }
    // ��ȡ�û���Ϣ
    if (action.equals("getInfo")) {
        username = (String) request.getSession().getAttribute("user");
        chatUser = userService.findByUserName(username);
        DateFormat dateFormat = new DateFormat();
        userForm.setBirthday(dateFormat.getDateToString(chatUser.getBirthday()));
        userForm.setEmail(chatUser.getEmail());
        userForm.setRealname(chatUser.getRealname());
        userForm.setSex(chatUser.getSex());
        userForm.setUsername(chatUser.getUsername());
        return mapping.findForward("modifyInfo");
    }
    // �޸ĸ�������
    if (action.equals("modifyInfomation")) {
        username = (String) request.getSession().getAttribute("user");
        DateFormat dateFormat = new DateFormat();
        chatUser = userService.findByUserName(username);
        chatUser.setBirthday(dateFormat.StringToDate(userForm.getBirthday()));
        chatUser.setEmail(userForm.getEmail());
        chatUser.setRealname(userForm.getRealname());
        chatUser.setSex(userForm.getSex());
        userService.modifyInfo(chatUser);
        return mapping.findForward("successfulInfo");
    }
    // ע��
    if (action.equals("register")) {
        DateFormat dateFormat = new DateFormat();
        String userName = userForm.getUsername();
        boolean flag = userService.validateUserName(userName);
        if (flag) {
            chatUser.setBirthday(dateFormat.StringToDate(userForm.getBirthday()));
            chatUser.setEmail(userForm.getEmail());
            chatUser.setRealname(userForm.getRealname());
            chatUser.setSex(userForm.getSex());
            chatUser.setPassword(userForm.getPassword());
            chatUser.setStatus("4");
            chatUser.setUsername(userForm.getUsername());
            userService.addUser(chatUser);
            return mapping.findForward("successfulRegister");
        }
        return mapping.findForward("failRegister");
    }
    // ����б�
    if (action.equals("getList")) {
        username = (String) request.getSession().getAttribute("user");
        chatUser = userService.findByUserName(username);
        List online = userService.OnlineList(chatUser);
        request.setAttribute("onlineList", online);
        userForm.setTotalNumber(online.size());
        List friend = userService.FriendsList(chatUser);
        request.setAttribute("friendList", friend);
        userForm.setFriendNumber(friend.size());
        return mapping.findForward("listUser");
    }
    // ��Ӻ���
    if (action.equals("addFriend")) {
        username = (String) request.getSession().getAttribute("user");
        chatUser = userService.findByUserName(username);
        userService.addFriend(chatUser.getUsername(), userForm.getUsername());
        List online = userService.OnlineList(chatUser);
        request.setAttribute("onlineList", online);
        userForm.setTotalNumber(online.size());
        List friend = userService.FriendsList(chatUser);
        request.setAttribute("friendList", friend);
        userForm.setFriendNumber(friend.size());
        return mapping.findForward("listUser");
    }
    // ɾ������
    if (action.equals("deleteFriend")) {
        username = (String) request.getSession().getAttribute("user");
        chatUser = userService.findByUserName(username);
        userService.deleteFriend(chatUser.getUsername(), userForm.getUsername());
        List online = userService.OnlineList(chatUser);
        request.setAttribute("onlineList", online);
        userForm.setTotalNumber(online.size());
        List friend = userService.FriendsList(chatUser);
        request.setAttribute("friendList", friend);
        userForm.setFriendNumber(friend.size());
        return mapping.findForward("listUser");
    }
    return null;
}
