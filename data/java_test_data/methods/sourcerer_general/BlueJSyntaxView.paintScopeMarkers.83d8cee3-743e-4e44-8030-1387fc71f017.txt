protected void paintScopeMarkers(Graphics g, MoeSyntaxDocument document, Shape a, int firstLine, int lastLine, boolean onlyMethods, boolean small) {
    Element map = document.getDefaultRootElement();
    ParsedNode rootNode = document.getParser();
    Rectangle clipBounds = g.getClipBounds();
    if (clipBounds == null) {
        clipBounds = a.getBounds();
    }
    int char_width = metrics.charWidth('m');
    int aboveLine = firstLine - 1;
    List<NodeAndPosition> prevScopeStack = new LinkedList<NodeAndPosition>();
    int curLine = firstLine;
    try {
        ThreeLines lines = new ThreeLines();
        lines.aboveLineSeg = new Segment();
        lines.thisLineSeg = new Segment();
        lines.belowLineSeg = new Segment();
        lines.aboveLineEl = null;
        lines.thisLineEl = map.getElement(firstLine);
        if (aboveLine >= 0) {
            lines.aboveLineEl = map.getElement(aboveLine);
            document.getText(lines.aboveLineEl.getStartOffset(), lines.aboveLineEl.getEndOffset() - lines.aboveLineEl.getStartOffset(), lines.aboveLineSeg);
        }
        lines.belowLineEl = null;
        if (firstLine + 1 < map.getElementCount()) {
            lines.belowLineEl = map.getElement(firstLine + 1);
            document.getText(lines.belowLineEl.getStartOffset(), lines.belowLineEl.getEndOffset() - lines.belowLineEl.getStartOffset(), lines.belowLineSeg);
        }
        document.getText(lines.thisLineEl.getStartOffset(), lines.thisLineEl.getEndOffset() - lines.thisLineEl.getStartOffset(), lines.thisLineSeg);
        getScopeStackAfter(rootNode, 0, lines.thisLineEl.getStartOffset(), prevScopeStack);
        while (curLine <= lastLine) {
            if (prevScopeStack.size() == 0) {
                break;
            }
            drawScopes(a, g, document, lines, char_width, prevScopeStack, small, onlyMethods, 0);
            // Next line
            curLine++;
            if (curLine <= lastLine) {
                lines.aboveLineEl = lines.thisLineEl;
                lines.thisLineEl = lines.belowLineEl;
                if (curLine + 1 < map.getElementCount()) {
                    lines.belowLineEl = map.getElement(curLine + 1);
                } else {
                    lines.belowLineEl = null;
                }
                Segment oldAbove = lines.aboveLineSeg;
                lines.aboveLineSeg = lines.thisLineSeg;
                lines.thisLineSeg = lines.belowLineSeg;
                // recycle the object
                lines.belowLineSeg = oldAbove;
                if (lines.belowLineEl != null) {
                    document.getText(lines.belowLineEl.getStartOffset(), lines.belowLineEl.getEndOffset() - lines.belowLineEl.getStartOffset(), lines.belowLineSeg);
                }
            }
        }
    } catch (BadLocationException ble) {
    }
}
