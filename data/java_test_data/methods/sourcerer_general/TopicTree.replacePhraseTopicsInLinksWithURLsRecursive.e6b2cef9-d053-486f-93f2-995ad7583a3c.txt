private synchronized void replacePhraseTopicsInLinksWithURLsRecursive(Node topicnode) {
    NodeList answers = topicnode.getChildNodes();
    for (int j = 0; j < answers.getLength(); j++) {
        if (answers.item(j).getNodeName().equals("answer")) {
            NodeList languages = answers.item(j).getChildNodes();
            for (int k = 0; k < languages.getLength(); k++) {
                if (languages.item(k).getNodeName().equals("languages")) {
                    NodeList en_de_it = languages.item(k).getChildNodes();
                    for (int l = 0; l < en_de_it.getLength(); l++) {
                        NodeList answer = en_de_it.item(l).getChildNodes();
                        for (int m = 0; m < answer.getLength(); m++) {
                            String str = answer.item(m).getNodeValue();
                            if (str != null && str.contains("linkToPhrases")) {
                                // log.debug(str);
                                // will be re-escaped implicitly
                                str = str.replaceAll("&lt;", "<");
                                str = str.replaceAll("&gt;", ">");
                                // mask any other pointy brackets for now
                                str = str.replaceAll("<option>", "__OPTION__");
                                str = str.replaceAll("</option>", "__/OPTION__");
                                Matcher myMatcher = myPattern.matcher(str);
                                String newstr = "";
                                while (myMatcher.find()) {
                                    if (myMatcher.groupCount() != 4) {
                                        log.debug("Matched " + myMatcher.groupCount() + "  groups!");
                                    } else {
                                        newstr += myMatcher.group(1);
                                        newstr += "<linkToPhrases>";
                                        String xpath_expression = "//topic[@name='" + myMatcher.group(2) + "']" + "/answer/languages/" + en_de_it.item(l).getNodeName() + "/text()" + "[1]";
                                        XPath xpath = XPathFactory.newInstance().newXPath();
                                        NodeList linkedNode = null;
                                        try {
                                            linkedNode = (NodeList) xpath.evaluate(xpath_expression, getRootNode(), XPathConstants.NODESET);
                                        } catch (XPathExpressionException xe) {
                                            log.debug("*** " + xe.toString());
                                        }
                                        if (linkedNode.item(0) == null) {
                                            log.debug("*** ERROR: Could not find PHRASES element using its ID!!! \n" + "Current Link ID: " + myMatcher.group(2) + " ; Offending language: " + en_de_it.item(l).getNodeName());
                                            newstr += "ERROR-IN-PHRASES";
                                        } else {
                                            newstr += linkedNode.item(0).getNodeValue();
                                        }
                                        newstr += "|" + myMatcher.group(3);
                                        newstr += "</linkToPhrases>";
                                        newstr += myMatcher.group(4);
                                    }
                                }
                                newstr = newstr.replaceAll("__OPTION__", "<option>");
                                newstr = newstr.replaceAll("__/OPTION__", "</option>");
                                Text text = getDocument().createTextNode(newstr);
                                en_de_it.item(l).replaceChild(text, answer.item(m));
                            }
                        }
                    }
                }
            }
        } else if (answers.item(j).getNodeName().equals("topic")) {
            replacePhraseTopicsInLinksWithURLsRecursive(answers.item(j));
        }
    }
}
