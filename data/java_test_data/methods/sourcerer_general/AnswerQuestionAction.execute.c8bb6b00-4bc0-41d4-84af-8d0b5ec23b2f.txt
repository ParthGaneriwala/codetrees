public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws ForbesException {
    String id = request.getParameter("id");
    String content = request.getParameter("content");
    String referto = request.getParameter("referto");
    UcMembers user = (UcMembers) request.getSession().getAttribute("CLIENT");
    Ask a = askSearchManager.getAsk(Integer.parseInt(id));
    try {
        if ((int) a.getUserId() != (int) user.getUid()) {
            if (!askAnswerManager.checkIfAnswer(user.getUid(), Integer.parseInt(id))) {
                AskAnswer aa = new AskAnswer();
                aa.setUserId(user.getUid());
                aa.setAsk(a);
                aa.setContent(content);
                aa.setReferTo(referto);
                aa.setUserIp(request.getRemoteAddr());
                aa.setPubdate(new Date());
                aa.setIfAnswer(new Short("0"));
                aa.setLoginName(user.getUsername());
                aa.setAnonymous(new Short("0"));
                aa.setBadRate(new Short("0"));
                aa.setGoodRate(new Short("0"));
                aa.setIfCheck(new Short("0"));
                askAnswerManager.answerQuestion(user, aa);
                request.setAttribute("RESULT_MESSAGE", "SUCCESS");
            } else {
                request.setAttribute("RESULT_MESSAGE", "ALREADY");
            }
        } else {
            request.setAttribute("RESULT_MESSAGE", "SELF");
        }
        return mapping.findForward("ok");
    } catch (Exception e) {
        e.printStackTrace();
        request.setAttribute("RESULT_MESSAGE", "FAIL");
        return mapping.findForward("ok");
    }
}
