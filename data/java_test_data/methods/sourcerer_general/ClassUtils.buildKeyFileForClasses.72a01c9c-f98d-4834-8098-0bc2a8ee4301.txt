public static void buildKeyFileForClasses(final boolean safeMode, final String output) {
    IFilter<String> classFilter = new IFilter<String>() {

        public boolean accept(String str) {
            if (str.startsWith("fr.ifp") && !str.contains("$") && !str.endsWith("ClassKeys") && !str.endsWith("Test") && !str.endsWith("Tests") && !str.endsWith("Exception")) {
                return true;
            }
            return false;
        }
    };
    Set<String> classNames = collectClasses(classFilter);
    Properties props = new Properties();
    long maxValue = 0;
    // Try to read previous prop file, if any
    File propFile = new File(output);
    if (safeMode == true && propFile.exists() == false) {
        throw new IllegalArgumentException();
    }
    if (propFile.exists() == true) {
        FileInputStream is = null;
        try {
            is = new FileInputStream(propFile);
            props.load(is);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        // find already existing max value
        maxValue = Long.MIN_VALUE;
        Enumeration<Object> values = props.elements();
        while (values.hasMoreElements()) {
            Long l = Long.parseLong((String) values.nextElement());
            if (maxValue < l) {
                maxValue = l;
            }
        }
        if (maxValue == Long.MIN_VALUE) {
            maxValue = 0;
        }
    }
    for (String className : classNames) {
        if (className.contains("$")) {
            // Don't mind inner classes
            continue;
        }
        if (props.containsKey(className)) {
            continue;
        }
        // Create class object only to check
        try {
            Class clazz = Class.forName(className);
        } catch (Exception e) {
            e.printStackTrace();
        }
        maxValue++;
        if (safeMode == true) {
            LogUtils.warning("Adding new key for class: " + className);
        }
        props.put(className, String.valueOf(maxValue));
        System.out.println("key: " + className + " val:" + maxValue);
    }
    FileOutputStream os = null;
    try {
        os = new FileOutputStream(propFile);
        props.store(os, "Auto generated file. Please do not modify it!");
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (os != null) {
            try {
                os.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
