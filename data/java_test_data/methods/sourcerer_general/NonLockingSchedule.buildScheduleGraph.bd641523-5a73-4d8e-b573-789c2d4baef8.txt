// [end]
// [start] buildScheduleGraph
@Override
public ScheduleGraph buildScheduleGraph() {
    ScheduleGraph sg = new ScheduleGraph();
    for (String transaccion : getTransactions()) {
        sg.addTransaction(transaccion);
    }
    // para facilitar el recorrido vamos a separar las acciones por items
    Map<String, List<Par<Action, Integer>>> operXItem = new HashMap<String, List<Par<Action, Integer>>>();
    for (String item : getItems()) {
        operXItem.put(item, new LinkedList<Par<Action, Integer>>());
    }
    int i = 1;
    for (Action accion : getActions()) {
        if (!accion.commits()) {
            // el i es el indice en la historia, necesario para armar los ejes
            operXItem.get(accion.getItem()).add(new Par<Action, Integer>(accion, i));
        }
        i = i + 1;
    }
    // usamos un diccionario para wvitar ejes repetidos
    Map<String, Set<String>> ejesYaPuestos = new HashMap<String, Set<String>>();
    for (String transaccion : getTransactions()) {
        ejesYaPuestos.put(transaccion, new HashSet<String>());
    }
    for (String item : getItems()) {
        List<Par<Action, Integer>> operaciones = operXItem.get(item);
        int tam = operaciones.size();
        // recorremos cada accion
        for (int j = 0; j < tam; j++) {
            Action operacionActual = operaciones.get(0).fst;
            String transaccionActual = operacionActual.getTransaction();
            Integer indiceActual = operaciones.get(0).snd;
            // removemos la que ya miramos
            operaciones.remove(0);
            // para ver si genera algun eje
            for (int k = 0; k < operaciones.size(); k++) {
                // tratamos de agregar un eje para la operacion actual,
                // y ademas vemos si hay que seguir agregando
                Action proximaAccion = operaciones.get(k).fst;
                String proximaTransaccion = proximaAccion.getTransaction();
                Integer proximoIndice = operaciones.get(k).snd;
                if (proximaTransaccion == transaccionActual) {
                    /* no estoy en el caso caso donde tengo algo asi w1,r1,r2, tengo que saltar r1 y seguir buscando */
                    if (!operacionActual.writes() && proximaAccion.reads()) {
                        break;
                    }
                } else /* la transaccion que viene ahora es distinta */
                if (operacionActual.writes()) {
                    // pongo el eje si hace falta
                    if (!ejesYaPuestos.get(transaccionActual).contains(proximaTransaccion)) {
                        sg.addArc(new ScheduleArc(transaccionActual, proximaTransaccion, indiceActual, proximoIndice));
                        ejesYaPuestos.get(transaccionActual).add(proximaTransaccion);
                    }
                    // caso write vs read: hay que seguir buscando
                    if (proximaAccion.writes()) {
                        break;
                    }
                } else {
                    // pongo el eje y tengo que parar
                    if (proximaAccion.writes()) {
                        if (!ejesYaPuestos.get(transaccionActual).contains(proximaTransaccion)) {
                            sg.addArc(new ScheduleArc(operacionActual.getTransaction(), proximaTransaccion, indiceActual, proximoIndice));
                            ejesYaPuestos.get(transaccionActual).add(proximaTransaccion);
                        }
                        break;
                    }
                // caso: read vs read
                // sigo sin poner ningun eje
                }
            }
        }
    }
    return sg;
}
