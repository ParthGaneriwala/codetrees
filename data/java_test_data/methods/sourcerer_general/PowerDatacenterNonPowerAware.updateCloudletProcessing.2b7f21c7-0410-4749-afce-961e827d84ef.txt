@Override
protected void updateCloudletProcessing() {
    if (getCloudletSubmitted() == -1 || getCloudletSubmitted() == CloudSim.clock()) {
        CloudSim.cancelAll(getId(), new PredicateType(CloudSimTags.VM_DATACENTER_EVENT));
        schedule(getId(), getSchedulingInterval(), CloudSimTags.VM_DATACENTER_EVENT);
        return;
    }
    double currentTime = CloudSim.clock();
    double timeframePower = 0.0;
    if (currentTime > getLastProcessTime()) {
        double timeDiff = currentTime - getLastProcessTime();
        double minTime = Double.MAX_VALUE;
        Log.printLine("\n");
        for (PowerHost host : this.<PowerHost>getHostList()) {
            Log.formatLine("%.2f: Host #%d", CloudSim.clock(), host.getId());
            double hostPower = 0.0;
            try {
                hostPower = host.getMaxPower() * timeDiff;
                timeframePower += hostPower;
            } catch (Exception e) {
                e.printStackTrace();
            }
            Log.formatLine("%.2f: Host #%d utilization is %.2f%%", CloudSim.clock(), host.getId(), host.getUtilizationOfCpu() * 100);
            Log.formatLine("%.2f: Host #%d energy is %.2f W*sec", CloudSim.clock(), host.getId(), hostPower);
        }
        Log.formatLine("\n%.2f: Consumed energy is %.2f W*sec\n", CloudSim.clock(), timeframePower);
        Log.printLine("\n\n--------------------------------------------------------------\n\n");
        for (PowerHost host : this.<PowerHost>getHostList()) {
            Log.formatLine("\n%.2f: Host #%d", CloudSim.clock(), host.getId());
            // inform VMs to update processing
            double time = host.updateVmsProcessing(currentTime);
            if (time < minTime) {
                minTime = time;
            }
        }
        setPower(getPower() + timeframePower);
        checkCloudletCompletion();
        /**
         * Remove completed VMs *
         */
        for (PowerHost host : this.<PowerHost>getHostList()) {
            for (Vm vm : host.getCompletedVms()) {
                getVmAllocationPolicy().deallocateHostForVm(vm);
                getVmList().remove(vm);
                Log.printLine("VM #" + vm.getId() + " has been deallocated from host #" + host.getId());
            }
        }
        Log.printLine();
        if (!isDisableMigrations()) {
            List<Map<String, Object>> migrationMap = getVmAllocationPolicy().optimizeAllocation(getVmList());
            if (migrationMap != null) {
                for (Map<String, Object> migrate : migrationMap) {
                    Vm vm = (Vm) migrate.get("vm");
                    PowerHost targetHost = (PowerHost) migrate.get("host");
                    PowerHost oldHost = (PowerHost) vm.getHost();
                    if (oldHost == null) {
                        Log.formatLine("%.2f: Migration of VM #%d to Host #%d is started", CloudSim.clock(), vm.getId(), targetHost.getId());
                    } else {
                        Log.formatLine("%.2f: Migration of VM #%d from Host #%d to Host #%d is started", CloudSim.clock(), vm.getId(), oldHost.getId(), targetHost.getId());
                    }
                    targetHost.addMigratingInVm(vm);
                    incrementMigrationCount();
                    /**
                     * VM migration delay = RAM / bandwidth + C    (C = 10 sec) *
                     */
                    send(getId(), vm.getRam() / ((double) vm.getBw() / 8000) + 10, CloudSimTags.VM_MIGRATE, migrate);
                }
            }
        }
        // schedules an event to the next time
        if (minTime != Double.MAX_VALUE) {
            CloudSim.cancelAll(getId(), new PredicateType(CloudSimTags.VM_DATACENTER_EVENT));
            // CloudSim.cancelAll(getId(), CloudSim.SIM_ANY);
            send(getId(), getSchedulingInterval(), CloudSimTags.VM_DATACENTER_EVENT);
        }
        setLastProcessTime(currentTime);
    }
}
