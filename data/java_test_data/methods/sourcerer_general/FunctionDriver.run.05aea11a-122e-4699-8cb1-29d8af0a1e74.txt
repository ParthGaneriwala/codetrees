public void run(Iterator<double[]> samples, boolean printIntermediate) {
    System.out.printf("samples: %s%n", samples);
    DifferenceAccumulator[] reAccumulators = new DifferenceAccumulator[functions.length];
    DifferenceAccumulator[] imAccumulators = new DifferenceAccumulator[functions.length];
    for (int i = 0; i < functions.length; i++) {
        reAccumulators[i] = new DifferenceAccumulator();
        imAccumulators[i] = new DifferenceAccumulator();
    }
    int samplesCount = 0;
    while (samples.hasNext()) {
        boolean sampleHeaderRequired = true;
        boolean sampleFooterRequired = false;
        samplesCount++;
        double[] sample = samples.next();
        for (int i = 0; i < functions.length; i++) {
            double[] result = functions[i].calculate(sample);
            Difference re = Difference.compare(result[0], sample[sample.length - 2]);
            Difference im = Difference.compare(result[1], sample[sample.length - 1]);
            reAccumulators[i].append(re);
            imAccumulators[i].append(im);
            if (printIntermediate && (re.isDifferent() || im.isDifferent())) {
                if (sampleHeaderRequired) {
                    System.out.printf("    sample %d:", samplesCount);
                    for (int j = 0; j < sample.length - 2; j += 2) {
                        System.out.printf(" (%s, %s)", sample[j], sample[j + 1]);
                    }
                    System.out.printf("%n");
                    System.out.printf("        %-20s: (%-24s, %-24s)%n", "expected", sample[sample.length - 2], sample[sample.length - 1]);
                    sampleHeaderRequired = false;
                    sampleFooterRequired = true;
                }
                System.out.printf("        %-20s: (%-24s, %-24s) (%s, %s)%n", functions[i], result[0], result[1], re, im);
            }
        }
        if (printIntermediate && sampleFooterRequired) {
        // System.out.println();
        }
    }
    System.out.printf("samples count = %d%n", samplesCount);
    System.out.printf("    %-20s  %-20s %-20s %-20s %-20s %-20s %-20s %-20s %-20s%n", "function name", "equal count", "wrong sign count", "ulp count", "max ulp diff", "total ulp diff", "underflow count", "overflow count", "invalid count");
    for (int i = 0; i < functions.length; i++) {
        System.out.printf("    %-20s: %-20s %-20s %-20s %-20s %-20s %-20s %-20s %-20s%n", functions[i], String.format("(%d, %d)", reAccumulators[i].equalCount, imAccumulators[i].equalCount), String.format("(%d, %d)", reAccumulators[i].wrongSignCount, imAccumulators[i].wrongSignCount), String.format("(%d, %d)", reAccumulators[i].ulpCount, imAccumulators[i].ulpCount), String.format("(%s, %s)", formatUlpDifference(reAccumulators[i].maxUlpDifference), formatUlpDifference(imAccumulators[i].maxUlpDifference)), String.format("(%s, %s)", formatUlpDifference(reAccumulators[i].totalUlpDifference), formatUlpDifference(imAccumulators[i].totalUlpDifference)), String.format("(%d, %d)", reAccumulators[i].underflowCount, imAccumulators[i].underflowCount), String.format("(%d, %d)", reAccumulators[i].overflowCount, imAccumulators[i].overflowCount), String.format("(%d, %d)", reAccumulators[i].invalidCount, imAccumulators[i].invalidCount));
    }
}
