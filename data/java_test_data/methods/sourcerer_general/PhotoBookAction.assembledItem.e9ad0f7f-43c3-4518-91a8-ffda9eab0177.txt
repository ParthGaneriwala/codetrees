private void assembledItem(Integer productId, Integer count, Map<String, Map<String, String[]>> photoBooks, ShoppingCart cart) {
    StringBuffer info = new StringBuffer();
    Set<Map.Entry<String, Map<String, String[]>>> photoBookSet = photoBooks.entrySet();
    for (Entry photoBook : photoBookSet) {
        String photoBookKey = (String) photoBook.getKey();
        info.append(photoBookKey + ";");
        Map<String, String[]> photoBookValue = (Map<String, String[]>) photoBook.getValue();
        Set<Map.Entry<String, String[]>> templateSet = photoBookValue.entrySet();
        for (Entry template : templateSet) {
            String templateKey = (String) template.getKey();
            info.append(templateKey + ";");
            String[] templateValue = (String[]) template.getValue();
            for (int i = 0; i < templateValue.length; i++) {
                if (i < templateValue.length - 1) {
                    info.append(templateValue[i] + ",");
                } else {
                    info.append(templateValue[i]);
                }
            }
            info.append(";");
        }
        info.append("#");
    }
    Product product = productService.findById(productId);
    logger.debug("photoIds:" + cart.getPhotoIds().toString());
    logger.debug("照片书制作信息：" + info.toString());
    System.out.println("photoIds:" + cart.getPhotoIds().toString());
    System.out.println("照片书制作信息：" + info.toString());
    Item item = new Item(product, count, IConstants.ITEM_TYPE1, cart.getPhotoIds().toString(), info.toString(), "photobook");
    cart.getItems().add(item);
}
