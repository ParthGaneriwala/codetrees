@SuppressWarnings("unchecked")
public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException {
    String className = UTF8.readString(in);
    Class<?> declaredClass = PRIMITIVE_NAMES.get(className);
    if (declaredClass == null) {
        try {
            declaredClass = conf.getClassByName(className);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("readObject can't find class " + className, e);
        }
    }
    Object instance;
    if (declaredClass.isPrimitive()) {
        if (declaredClass == Boolean.TYPE) {
            // boolean
            instance = Boolean.valueOf(in.readBoolean());
        } else if (declaredClass == Character.TYPE) {
            // char
            instance = Character.valueOf(in.readChar());
        } else if (declaredClass == Byte.TYPE) {
            // byte
            instance = Byte.valueOf(in.readByte());
        } else if (declaredClass == Short.TYPE) {
            // short
            instance = Short.valueOf(in.readShort());
        } else if (declaredClass == Integer.TYPE) {
            // int
            instance = Integer.valueOf(in.readInt());
        } else if (declaredClass == Long.TYPE) {
            // long
            instance = Long.valueOf(in.readLong());
        } else if (declaredClass == Float.TYPE) {
            // float
            instance = Float.valueOf(in.readFloat());
        } else if (declaredClass == Double.TYPE) {
            // double
            instance = Double.valueOf(in.readDouble());
        } else if (declaredClass == Void.TYPE) {
            // void
            instance = null;
        } else {
            throw new IllegalArgumentException("Not a primitive: " + declaredClass);
        }
    } else if (declaredClass.isArray()) {
        // array
        int length = in.readInt();
        instance = Array.newInstance(declaredClass.getComponentType(), length);
        for (int i = 0; i < length; i++) {
            Array.set(instance, i, readObject(in, conf));
        }
    } else if (declaredClass == String.class) {
        // String
        instance = UTF8.readString(in);
    } else if (declaredClass.isEnum()) {
        // enum
        instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in));
    } else {
        // Writable
        Class instanceClass = null;
        String str = "";
        try {
            str = UTF8.readString(in);
            instanceClass = conf.getClassByName(str);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("readObject can't find class " + str, e);
        }
        Writable writable = WritableFactories.newInstance(instanceClass, conf);
        writable.readFields(in);
        instance = writable;
        if (instanceClass == NullInstance.class) {
            // null
            declaredClass = ((NullInstance) instance).declaredClass;
            instance = null;
        }
    }
    if (objectWritable != null) {
        // store values
        objectWritable.declaredClass = declaredClass;
        objectWritable.instance = instance;
    }
    return instance;
}
