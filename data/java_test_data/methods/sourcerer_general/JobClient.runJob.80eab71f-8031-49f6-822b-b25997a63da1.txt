public static RunningJob runJob(JobConf job) throws IOException {
    JobClient jc = new JobClient(job);
    boolean error = true;
    RunningJob running = null;
    String lastReport = null;
    final int MAX_RETRIES = 5;
    int retries = MAX_RETRIES;
    TaskStatusFilter filter;
    try {
        filter = getTaskOutputFilter(job);
    } catch (IllegalArgumentException e) {
        LOG.warn("Invalid Output filter : " + e.getMessage() + " Valid values are : NONE, FAILED, SUCCEEDED, ALL");
        throw e;
    }
    try {
        running = jc.submitJob(job);
        JobID jobId = running.getID();
        LOG.info("Running job: " + jobId);
        int eventCounter = 0;
        boolean profiling = job.getProfileEnabled();
        Configuration.IntegerRanges mapRanges = job.getProfileTaskRange(true);
        Configuration.IntegerRanges reduceRanges = job.getProfileTaskRange(false);
        while (true) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
            try {
                if (running.isComplete()) {
                    break;
                }
                running = jc.getJob(jobId);
                String report = (" map " + StringUtils.formatPercent(running.mapProgress(), 0) + " reduce " + StringUtils.formatPercent(running.reduceProgress(), 0));
                if (!report.equals(lastReport)) {
                    LOG.info(report);
                    lastReport = report;
                }
                TaskCompletionEvent[] events = running.getTaskCompletionEvents(eventCounter);
                eventCounter += events.length;
                for (TaskCompletionEvent event : events) {
                    TaskCompletionEvent.Status status = event.getTaskStatus();
                    if (profiling && (status == TaskCompletionEvent.Status.SUCCEEDED || status == TaskCompletionEvent.Status.FAILED) && (event.isMap ? mapRanges : reduceRanges).isIncluded(event.idWithinJob())) {
                        downloadProfile(event);
                    }
                    switch(filter) {
                        case NONE:
                            break;
                        case SUCCEEDED:
                            if (event.getTaskStatus() == TaskCompletionEvent.Status.SUCCEEDED) {
                                LOG.info(event.toString());
                                displayTaskLogs(event.getTaskAttemptId(), event.getTaskTrackerHttp());
                            }
                            break;
                        case FAILED:
                            if (event.getTaskStatus() == TaskCompletionEvent.Status.FAILED) {
                                LOG.info(event.toString());
                                // Displaying the task diagnostic information
                                TaskAttemptID taskId = event.getTaskAttemptId();
                                String[] taskDiagnostics = jc.jobSubmitClient.getTaskDiagnostics(taskId);
                                if (taskDiagnostics != null) {
                                    for (String diagnostics : taskDiagnostics) {
                                        System.err.println(diagnostics);
                                    }
                                }
                                // Displaying the task logs
                                displayTaskLogs(event.getTaskAttemptId(), event.getTaskTrackerHttp());
                            }
                            break;
                        case KILLED:
                            if (event.getTaskStatus() == TaskCompletionEvent.Status.KILLED) {
                                LOG.info(event.toString());
                            }
                            break;
                        case ALL:
                            LOG.info(event.toString());
                            displayTaskLogs(event.getTaskAttemptId(), event.getTaskTrackerHttp());
                            break;
                    }
                }
                retries = MAX_RETRIES;
            } catch (IOException ie) {
                if (--retries == 0) {
                    LOG.warn("Final attempt failed, killing job.");
                    throw ie;
                }
                LOG.info("Communication problem with server: " + StringUtils.stringifyException(ie));
            }
        }
        if (!running.isSuccessful()) {
            throw new IOException("Job failed!");
        }
        LOG.info("Job complete: " + jobId);
        running.getCounters().log(LOG);
        error = false;
    } finally {
        if (error && (running != null)) {
            running.killJob();
        }
        jc.close();
    }
    return running;
}
