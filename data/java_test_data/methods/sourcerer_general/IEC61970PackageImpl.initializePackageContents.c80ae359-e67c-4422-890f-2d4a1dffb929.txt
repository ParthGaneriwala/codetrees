public void initializePackageContents() {
    if (isInitialized)
        return;
    isInitialized = true;
    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    // Obtain other dependent packages
    DomainPackage theDomainPackage = (DomainPackage) EPackage.Registry.INSTANCE.getEPackage(DomainPackage.eNS_URI);
    InfCorePackage theInfCorePackage = (InfCorePackage) EPackage.Registry.INSTANCE.getEPackage(InfCorePackage.eNS_URI);
    CorePackage theCorePackage = (CorePackage) EPackage.Registry.INSTANCE.getEPackage(CorePackage.eNS_URI);
    OperationalLimitsPackage theOperationalLimitsPackage = (OperationalLimitsPackage) EPackage.Registry.INSTANCE.getEPackage(OperationalLimitsPackage.eNS_URI);
    TopologyPackage theTopologyPackage = (TopologyPackage) EPackage.Registry.INSTANCE.getEPackage(TopologyPackage.eNS_URI);
    WiresPackage theWiresPackage = (WiresPackage) EPackage.Registry.INSTANCE.getEPackage(WiresPackage.eNS_URI);
    LoadModelPackage theLoadModelPackage = (LoadModelPackage) EPackage.Registry.INSTANCE.getEPackage(LoadModelPackage.eNS_URI);
    GenerationDynamicsPackage theGenerationDynamicsPackage = (GenerationDynamicsPackage) EPackage.Registry.INSTANCE.getEPackage(GenerationDynamicsPackage.eNS_URI);
    ProductionPackage theProductionPackage = (ProductionPackage) EPackage.Registry.INSTANCE.getEPackage(ProductionPackage.eNS_URI);
    OutagePackage theOutagePackage = (OutagePackage) EPackage.Registry.INSTANCE.getEPackage(OutagePackage.eNS_URI);
    ProtectionPackage theProtectionPackage = (ProtectionPackage) EPackage.Registry.INSTANCE.getEPackage(ProtectionPackage.eNS_URI);
    EquivalentsPackage theEquivalentsPackage = (EquivalentsPackage) EPackage.Registry.INSTANCE.getEPackage(EquivalentsPackage.eNS_URI);
    MeasPackage theMeasPackage = (MeasPackage) EPackage.Registry.INSTANCE.getEPackage(MeasPackage.eNS_URI);
    SCADAPackage theSCADAPackage = (SCADAPackage) EPackage.Registry.INSTANCE.getEPackage(SCADAPackage.eNS_URI);
    ControlAreaPackage theControlAreaPackage = (ControlAreaPackage) EPackage.Registry.INSTANCE.getEPackage(ControlAreaPackage.eNS_URI);
    ContingencyPackage theContingencyPackage = (ContingencyPackage) EPackage.Registry.INSTANCE.getEPackage(ContingencyPackage.eNS_URI);
    StateVariablesPackage theStateVariablesPackage = (StateVariablesPackage) EPackage.Registry.INSTANCE.getEPackage(StateVariablesPackage.eNS_URI);
    // Add subpackages
    getESubpackages().add(theDomainPackage);
    getESubpackages().add(theInfCorePackage);
    getESubpackages().add(theCorePackage);
    getESubpackages().add(theOperationalLimitsPackage);
    getESubpackages().add(theTopologyPackage);
    getESubpackages().add(theWiresPackage);
    getESubpackages().add(theLoadModelPackage);
    getESubpackages().add(theGenerationDynamicsPackage);
    getESubpackages().add(theProductionPackage);
    getESubpackages().add(theOutagePackage);
    getESubpackages().add(theProtectionPackage);
    getESubpackages().add(theEquivalentsPackage);
    getESubpackages().add(theMeasPackage);
    getESubpackages().add(theSCADAPackage);
    getESubpackages().add(theControlAreaPackage);
    getESubpackages().add(theContingencyPackage);
    getESubpackages().add(theStateVariablesPackage);
    // Create type parameters
    // Set bounds for type parameters
    // Add supertypes to classes
    // Initialize classes and features; add operations and parameters
    initEClass(iec61970CIMVersionEClass, IEC61970CIMVersion.class, "IEC61970CIMVersion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIEC61970CIMVersion_Date(), theDomainPackage.getAbsoluteDateTime(), null, "date", null, 0, 1, IEC61970CIMVersion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getIEC61970CIMVersion_Version(), theDomainPackage.getString(), null, "version", null, 0, 1, IEC61970CIMVersion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    // Create resource
    createResource(eNS_URI);
}
