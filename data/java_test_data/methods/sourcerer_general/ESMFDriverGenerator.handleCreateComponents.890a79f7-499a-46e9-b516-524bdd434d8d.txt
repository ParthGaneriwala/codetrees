private void handleCreateComponents() {
    // create gridded components
    for (ESMFComponent comp : griddedComponents) {
        FunctionReference frGridCompCreate = fomFactory.createFunctionReference("ESMF_GridCompCreate");
        frGridCompCreate.addActualArgumentWithNamedConstant("name", "\"" + comp.getName() + "\"");
        // set up an explicit petList
        ESMFVirtualMachine vm = compToVm.get(comp);
        if (vm != null && vm.getPet().size() > 0) {
            int[] petIds = vm.getPetIDs();
            ArrayConstructor ac = fomFactory.createArrayConstructor(petIds);
            frGridCompCreate.addActualArgumentWithExpression("petList", ac);
        }
        frGridCompCreate.addActualArgumentWithNamedConstant("rc", VAR_LOCAL_RC);
        AssignmentStatement as = fomFactory.createAssignmentStatement(compToName.get(comp), frGridCompCreate);
        mp.addExecutionPartConstruct(as);
        addErrorCheckAndFinalize();
    }
    // create couplers
    for (ESMFComponent cpl : couplerComponents) {
        FunctionReference frCplCompCreate = fomFactory.createFunctionReference("ESMF_CplCompCreate");
        frCplCompCreate.addActualArgumentWithNamedConstant("name", "\"" + cpl.getName() + "\"");
        // set up an explicit petList
        ESMFVirtualMachine vm = compToVm.get(cpl);
        if (vm != null && vm.getPet().size() > 0) {
            int[] petIds = vm.getPetIDs();
            ArrayConstructor ac = fomFactory.createArrayConstructor(petIds);
            frCplCompCreate.addActualArgumentWithExpression("petList", ac);
        }
        frCplCompCreate.addActualArgumentWithNamedConstant("rc", VAR_LOCAL_RC);
        AssignmentStatement as = fomFactory.createAssignmentStatement(compToName.get(cpl), frCplCompCreate);
        mp.addExecutionPartConstruct(as);
        addErrorCheckAndFinalize();
    }
    mp.addExecutionPartSpacer();
    // register gridded components
    for (ESMFComponent comp : griddedComponents) {
        CallStatement cs = fomFactory.createCallStatement("ESMF_GridCompSetServices");
        cs.addActualArgumentWithNamedConstant(null, compToName.get(comp));
        cs.addActualArgumentWithNamedConstant(null, compToRegister.get(comp));
        cs.addActualArgumentWithNamedConstant(null, VAR_LOCAL_RC);
        mp.addExecutionPartConstruct(cs);
        addErrorCheckAndFinalize();
    }
    // register couplers
    for (ESMFComponent cpl : couplerComponents) {
        CallStatement cs = fomFactory.createCallStatement("ESMF_CplCompSetServices");
        cs.addActualArgumentWithNamedConstant(null, compToName.get(cpl));
        cs.addActualArgumentWithNamedConstant(null, compToRegister.get(cpl));
        cs.addActualArgumentWithNamedConstant(null, VAR_LOCAL_RC);
        mp.addExecutionPartConstruct(cs);
        addErrorCheckAndFinalize();
    }
    mp.addExecutionPartSpacer();
}
