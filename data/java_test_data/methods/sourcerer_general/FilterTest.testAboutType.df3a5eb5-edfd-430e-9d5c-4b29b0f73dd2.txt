/**
 * return all the message posts that are about UCSD
 */
@Test
public void testAboutType() throws Exception {
    JSONWriter writer = new JSONWriter();
    List filterList = new ArrayList();
    HashMap messageMap = new HashMap();
    messageMap.put("output", "id");
    messageMap.put("used_as", "id");
    messageMap.put("type", "='message'");
    HashMap ratedByMap = new HashMap();
    ratedByMap.put("type", "='about'");
    ratedByMap.put("output", "refers_to_id");
    ratedByMap.put("used_as", "id");
    // might add = before ucsd..
    ratedByMap.put("content", " = 'UCSD'");
    messageMap.put("parents", new Map[] { ratedByMap });
    filterList.add(messageMap);
    String jsonString = writer.write(filterList);
    Filter filter = new Filter(jsonString);
    Collection<IPost> posts = repository.getPosts(filter);
    Map<Integer, IPost> expectedResult = new HashMap<Integer, IPost>();
    Post post1 = new Post(20, 3, 0, "message", "CSE 210 is the best grad course at UCSD", null);
    expectedResult.put(post1.getId(), post1);
    Post post2 = new Post(7, 1, 0, "message", "UCSD fees are way to high!", null);
    expectedResult.put(post2.getId(), post2);
    Assert.assertEquals("Unexpected number of posts returned.", expectedResult.size(), posts.size());
    for (IPost post : posts) {
        IPost expectedPost = expectedResult.get(post.getId());
        Assert.assertNotNull("Received unexpected post id = " + post.getId(), expectedPost);
        Assert.assertEquals("content did not match.", expectedPost.getContent(), post.getContent());
        Assert.assertEquals("refersToId did not match.", expectedPost.getRefersToId(), post.getRefersToId());
        Assert.assertEquals("type did not match.", expectedPost.getType(), post.getType());
        Assert.assertEquals("authorPostId did not match.", expectedPost.getAuthorPostId(), post.getAuthorPostId());
    }
}
