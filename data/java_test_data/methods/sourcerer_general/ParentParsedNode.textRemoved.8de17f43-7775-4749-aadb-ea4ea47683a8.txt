public void textRemoved(Document document, int nodePos, int delPos, int length) {
    int endPos = delPos + length;
    NodeAndPosition child = getNodeTree().findNodeAtOrAfter(delPos, nodePos);
    if (child != null && child.getPosition() < delPos) {
        // Remove the end portion (or middle) of the child node
        int childEndPos = child.getPosition() + child.getSize();
        if (childEndPos > endPos) {
            // Remove the middle of the child node
            child.getNode().textRemoved(document, child.getPosition() + nodePos, delPos, length);
            NodeTree childTree = child.getNode().getContainingNodeTree();
            childTree.setNodeSize(childTree.getNodeSize() - length);
            reparseNode(document, nodePos, 0);
            ((MoeSyntaxDocument) document).documentChanged();
            return;
        } else {
            // Remove the end portion of the child node
            // how much is removed
            int rlength = childEndPos - delPos;
            child.getNode().textRemoved(document, child.getPosition() + nodePos, delPos, rlength);
            NodeTree childTree = child.getNode().getContainingNodeTree();
            childTree.setNodeSize(childTree.getNodeSize() - length);
            length -= rlength;
            endPos -= rlength;
        }
        child = getNodeTree().findNodeAtOrAfter(delPos, nodePos);
    }
    if (child != null) {
        int childPos = child.getPosition();
        int childLen = child.getSize();
        while (childPos + childLen < endPos) {
            // The whole child should be removed
            child.getNode().getContainingNodeTree().remove();
            child = getNodeTree().findNodeAtOrAfter(delPos, nodePos);
            if (child == null) {
                break;
            }
            childPos = child.getPosition();
            childLen = child.getSize();
        }
        if (child != null) {
            if (childPos < endPos) {
                int slideLen = childPos - delPos;
                child.getNode().getContainingNodeTree().slideNode(-slideLen);
                length -= slideLen;
                child.getNode().textRemoved(document, childPos, delPos, length - slideLen);
                child.getNode().getContainingNodeTree().setNodeSize(child.getSize() - length);
            } else {
                child.getNode().getContainingNodeTree().slideNode(-length);
            }
        }
    }
    reparseNode(document, nodePos, 0);
    ((MoeSyntaxDocument) document).documentChanged();
}
