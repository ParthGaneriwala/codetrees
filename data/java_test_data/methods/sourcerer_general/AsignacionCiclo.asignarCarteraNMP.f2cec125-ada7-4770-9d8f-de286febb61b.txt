private List<Llamada__c> asignarCarteraNMP(ID idEmpresa, String metodoPago, List<Cobro> cobros, List<Agente> agentes, List<Agente> agentesEmpresa, Date fechaInicioCiclo, Date fechaFinCiclo, ID idCiclo, List<Mora> moras) throws Exception {
    try {
        List<Llamada__c> newLlamadas = new ArrayList<Llamada__c>();
        // Paso 1. Ordenar la lista de cobros
        if (metodoPago == null) {
            throw new Exception("La empresa no tiene el metodo de pago definido");
        }
        if (metodoPago.equals(Empresa.METODO_PAGO_SALDO_MINIMO)) {
            Collections.sort(cobros, new CobroTarjetaCreditoComparator());
        } else {
            Collections.sort(cobros, new CobroPrestamoComparator());
        }
        // Paso 2. Obtiene los feriados
        List<Date> feriados = this.obtenerFeriados();
        Date fechaRealInicioCiclo = this.obtenerFechaRealInicioCiclo(fechaInicioCiclo, feriados);
        // Paso 3. Inicializa los dias de cobro del agente
        for (Agente agente : agentes) {
            if (agente.getDiasCobro().size() == 0) {
                DiaAgente dia = new DiaAgente(fechaRealInicioCiclo);
                if (agente.getDiasCobro().size() == 0) {
                    agente.getDiasCobro().add(dia);
                }
            }
        }
        // Paso 4. Asignar cobros a agentes
        Integer indexCobro = 0;
        for (Iterator<Cobro> iterCobro = cobros.iterator(); iterCobro.hasNext(); ) {
            Cobro cobro = iterCobro.next();
            logger.info("----------------------------------------------------------------------------");
            logger.info("----------------------------------------------------------------------------");
            logger.info("Asignando cobro " + (indexCobro + 1) + ": " + cobro.getCobro__c().getName() + "  saldo " + cobro.getCobro__c().getSaldo_total_pr_stamo__c() + " (" + cobro.getCobro__c().getId() + ").");
            if (!cobro.isAsignado()) {
                // Cobros del mismo cliente, se marcan en la lista con asignado = true
                List<Cobro> cobrosAdicionales = this.obtenerCobrosMismoCliente(cobros, indexCobro);
                // Se hace una sola lista
                List<Cobro> cobrosAgendar = cobrosAdicionales;
                cobrosAgendar.add(0, cobro);
                // Busca el agente que estaba llevando los cobros
                Agente agente = null;
                boolean esAgenteCiclo = true;
                ID idAgente = this.obtenerAgenteCobro(cobrosAgendar);
                if (idAgente != null) {
                    if (this.esAgenteActivo(idAgente, agentes)) {
                        // Lo busca entre los agentes del ciclo
                        agente = this.obtenerAgente(idAgente, agentes);
                    } else {
                        if (this.esAgenteActivo(idAgente, agentesEmpresa)) {
                            // Lo busca en todos los agentes de la empresa
                            agente = this.obtenerAgente(idAgente, agentesEmpresa);
                            esAgenteCiclo = false;
                        }
                    }
                }
                // Verifica si debe mantener el gestor durante los diferentes moras
                if (agente == null) {
                    // Verifica si para la mora del cobro debe mantenerse el agente anterior
                    if (morasMantienenAGente.containsKey(cobrosAgendar.get(0).getCobro__c().getConf_Info_Mora__c().getID())) {
                        // Verifica si existe en el ciclo anterior un agente q ve este cobro
                        for (Cobro cobroTemp : cobrosAgendar) {
                            if (cobrosAgenteAnteriores.containsKey(String.valueOf(cobroTemp.getCobro__c().getNumero_Cuenta__c()))) {
                                idAgente = cobrosAgenteAnteriores.get(String.valueOf(cobroTemp.getCobro__c().getNumero_Cuenta__c()));
                                if (this.esAgenteActivo(idAgente, agentes)) {
                                    agente = this.obtenerAgente(idAgente, agentes);
                                    break;
                                }
                            }
                        }
                    }
                }
                // Si agente es nulo debe buscar un nuevo agente desde la cola de agentes
                if (agente == null && agentes.size() > 0) {
                    // Ordena por nivel de mora para asï¿½, buscar un agente que vea la mora mas alta
                    if (cobrosAgendar.size() > 1) {
                        Collections.sort(cobrosAgendar, new NivelMoraComparator());
                    }
                    // Indicar que continua con el siguiente cobro
                    boolean continuarBuscando = true;
                    ID categoriaMoraMayor = cobrosAgendar.get(0).getCobro__c().getConf_Info_Mora__c();
                    for (int i = 0; i < cobrosAgendar.size() && continuarBuscando; i++) {
                        Cobro cobroBuscar = cobrosAgendar.get(i);
                        logger.info("	Producto = " + namesProductos.get(cobroBuscar.getCobro__c().getInfo_Cuenta__r().getRecordTypeId().getID()));
                        logger.info("	Moras    = " + namesMoras.get(cobroBuscar.getCobro__c().getConf_Info_Mora__c().getID()));
                        logger.info("	");
                        logger.info("	Agentes:");
                        // Busca al agente, se empieza desde el agente que tiene menos cobros asignados
                        Collections.sort(agentes, new NumCobrosAgenteComparator());
                        for (Iterator<Agente> iterA = agentes.iterator(); iterA.hasNext(); ) {
                            Agente agenteTemp = iterA.next();
                            logger.debug("		Agente = " + agenteTemp.getName());
                            logger.debug("		Maximo Ciclo = " + agenteTemp.getMaximoCobrosCiclo());
                            logger.debug("		Carga Asignada = " + agenteTemp.getNumGestionesAsignadas());
                            for (Agente.ProductoAgente producto : agenteTemp.getProductos()) {
                                logger.debug("			Producto = " + producto.getIdProducto());
                                logger.debug("				Carga Maxima = " + producto.getMaximoGestiones());
                                logger.debug("				Carga Asignada = " + producto.getGestiones());
                            }
                            // if (agenteTemp.tieneCupoParaCobros(cobrosAgendar.size()) && esValidoProducto(cobrosAgendar.get(0),agenteTemp)) {
                            if (agenteTemp.tieneCupoParaCobros(cobrosAgendar.size())) {
                                int resultado = esValidoProductoMora(cobroBuscar, agenteTemp, cobrosAgendar.size());
                                if (resultado == Constantes.PRODUCTO_MORA_VALIDOS) {
                                    agente = agenteTemp;
                                    break;
                                } else {
                                    if (resultado == Constantes.PRODUCTO_MORA_SIN_CUPO) {
                                        logger.debug("			Cobros(" + cobrosAgendar.size() + ") exceden la carga por producto");
                                    } else {
                                        if (resultado == Constantes.PRODUCTO_INVALIDO) {
                                            logger.debug("			Producto no valido para el agente.");
                                        } else {
                                            if (resultado == Constantes.MORA_INVALIDA) {
                                                logger.debug("			Mora no valida para el agente.");
                                            }
                                        }
                                    }
                                }
                            } else {
                                logger.debug("			Carga maxima cumplida.");
                            }
                        }
                        // end for agentes
                        // if (agente== null && cobrosAgendar.size()>1 && categoriaMoraMayor.getID().equals(cobroBuscar.getCobro__c().getConf_Info_Mora__c().getID())) {
                        continuarBuscando = false;
                        if (agente == null && i + 1 < cobrosAgendar.size()) {
                            if (categoriaMoraMayor.getID().equals(cobrosAgendar.get(i + 1).getCobro__c().getConf_Info_Mora__c().getID())) {
                                continuarBuscando = true;
                            }
                        }
                    }
                    // end for cobros
                    if (agente == null) {
                        logger.info("	No se encuentra agentes ");
                    }
                }
                if (agente == null) {
                    logger.debug("	Buscando Rebalse ");
                    // Busca el rebalse
                    ID idUser = obtenerRebalseMora(moras, cobrosAgendar.get(0).getCobro__c().getConf_Info_Mora__c());
                    if (idUser == null) {
                        boolean usuarioAnterior = this.esParaAgenteYaAsignado(cobrosAgendar);
                        for (Cobro cobroAgendar : cobrosAgendar) {
                            if (usuarioAnterior) {
                                if (!cobroAgendar.isEsNuevo()) {
                                    idUser = cobroAgendar.getCobro__c().getOwnerId();
                                    break;
                                }
                            } else {
                                if (cobroAgendar.isEsNuevo()) {
                                    idUser = cobroAgendar.getCobro__c().getOwnerId();
                                    break;
                                }
                            }
                        }
                    }
                    // Crea una llamada para el primer dia
                    for (Cobro cobroAgendar : cobrosAgendar) {
                        cobroAgendar.setAsignado(true);
                        cobroAgendar.getCobro__c().setAgente__c(null);
                        cobroAgendar.getCobro__c().setIsMarcadorPredictivo__c(false);
                        if (idUser != null) {
                            cobroAgendar.getCobro__c().setOwnerId(idUser);
                        }
                        if (cobroAgendar.isEsNuevo()) {
                            cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                            // Crea la llamada.
                            newLlamadas.add(this.crearLlamada(idEmpresa, cobro.getCobro__c().getOwnerId(), null, cobroAgendar.getCobro__c(), fechaRealInicioCiclo, cobroAgendar.getIdRecordTypeLlamada()));
                        }
                    }
                } else {
                    logger.info("	AGENTE ASIGNADO: " + agente.getName());
                    // Le agrega las llamadas al agente
                    if (esAgenteCiclo) {
                        agente.distribuirCobrosPorProducto(cobrosAgendar);
                    }
                    for (Cobro cobroAgendar : cobrosAgendar) {
                        logger.debug("		Name = " + cobroAgendar.getCobro__c().getName());
                        logger.debug("		id del cobro = " + cobroAgendar.getCobro__c().getId());
                        logger.debug("		INFO AGENTE " + agente.getIdUser() + "-" + agente.getId());
                        cobroAgendar.getCobro__c().setOwnerId(agente.getIdUser());
                        cobroAgendar.getCobro__c().setAgente__c(agente.getId());
                        cobroAgendar.setAsignado(true);
                        cobroAgendar.getCobro__c().setIsMarcadorPredictivo__c(false);
                        logger.debug("		Agente" + cobroAgendar.getCobro__c().getAgente__c());
                        if (esAgenteCiclo) {
                            // Obtiene el ultimo dia de cobro de la lista de dias de cobro
                            DiaAgente diaAgente = agente.getDiasCobro().get(agente.getDiasCobro().size() - 1);
                            int cargaDiariaAgente = this.obtenerCargaDiaAgente(agente.getMaximoCobrosDia(), agente.getMinimoCobrosDia(), agente.getDiasCobro().size(), diaAgente.getFecha());
                            if (cobroAgendar.isEsNuevo()) {
                                cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                                if (diaAgente.getLlamadas().size() < cargaDiariaAgente) {
                                    // Crea una llamada para ese dia
                                    diaAgente.getLlamadas().add(this.crearLlamada(idEmpresa, agente.getIdUser(), agente.getId(), cobroAgendar.getCobro__c(), diaAgente.getFecha(), cobroAgendar.getIdRecordTypeLlamada()));
                                } else {
                                    // Crea otro dï¿½a para el agente
                                    Date sigDia = Util.obtenerSiguienteDiaHabil(diaAgente.getFecha(), feriados);
                                    DiaAgente newDiaAgente = new DiaAgente(sigDia);
                                    // Crea una nueva llamada
                                    newDiaAgente.getLlamadas().add(this.crearLlamada(idEmpresa, agente.getIdUser(), agente.getId(), cobroAgendar.getCobro__c(), newDiaAgente.getFecha(), cobroAgendar.getIdRecordTypeLlamada()));
                                    agente.getDiasCobro().add(newDiaAgente);
                                }
                            }
                        } else {
                            // Se le crean las llamadas para el primer dia del ciclo
                            if (cobroAgendar.isEsNuevo()) {
                                cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                                if (cobroAgendar.isEsNuevo()) {
                                    cobroAgendar.getCobro__c().setTC_Ciclo_Pertenece__c(idCiclo);
                                    // Crea la llamada.
                                    logger.debug("	Cobro para agentes de otro ciclo");
                                    newLlamadas.add(this.crearLlamada(idEmpresa, agente.getIdUser(), agente.getId(), cobroAgendar.getCobro__c(), fechaRealInicioCiclo, cobroAgendar.getIdRecordTypeLlamada()));
                                }
                            }
                        }
                    }
                // for
                }
            } else // end if
            {
                logger.info("Ya asignado previamente.");
            }
            logger.info("----------------------------------------------------------------------------");
            indexCobro++;
        }
        // End for
        // Devuelve la lista de llamadas nuevas
        logger.info("Num Llamadas sin agente " + newLlamadas.size());
        return newLlamadas;
    } catch (Exception e) {
        logger.error(e);
        throw e;
    }
}
