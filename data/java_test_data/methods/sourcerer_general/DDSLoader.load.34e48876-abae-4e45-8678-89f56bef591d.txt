public static void load(File file, Texture2D texture, boolean border) throws IOException {
    ByteBuffer buf = load(file);
    Header header = new Header(buf);
    if ((header.caps2 & (DDSCAPS2_VOLUME | DDSCAPS2_CUBEMAP)) != 0) {
        throw new IOException("Not a 2D texture: " + file);
    }
    if (header.fourCC == null) {
        int width = header.width;
        int height = header.height;
        int format = ((header.pixelFormatFlags & DDPF_ALPHAPIXELS) == 0) ? GL11.GL_RGB : GL11.GL_RGBA;
        int dformat = header.getUncompressedFormat();
        for (int ii = 0, nn = header.getLevels(); ii < nn; ii++) {
            int pitch = width * (format == GL11.GL_RGB ? 3 : 4);
            buf.limit(buf.position() + height * pitch);
            texture.setImage(ii, format, width, height, border, dformat, GL11.GL_UNSIGNED_BYTE, buf);
            width = Math.max(width / 2, 1);
            height = Math.max(height / 2, 1);
            buf.position(buf.limit());
        }
    } else {
        int width = header.width;
        int height = header.height;
        int format = header.getCompressedFormat();
        for (int ii = 0, nn = header.getLevels(); ii < nn; ii++) {
            int size = Math.max(width / 4, 1) * Math.max(height / 4, 1) * (format == EXTTextureCompressionS3TC.GL_COMPRESSED_RGB_S3TC_DXT1_EXT ? 8 : 16);
            buf.limit(buf.position() + size);
            texture.setCompressedImage(ii, format, width, height, border, buf);
            width = Math.max(width / 2, 1);
            height = Math.max(height / 2, 1);
            buf.position(buf.limit());
        }
    }
}
