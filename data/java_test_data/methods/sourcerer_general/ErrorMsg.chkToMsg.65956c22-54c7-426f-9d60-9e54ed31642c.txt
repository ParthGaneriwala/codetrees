private static String chkToMsg(int tag, boolean hasAssocDecl) {
    String r = null;
    // Finally, describe the error
    switch(tag) {
        case TagConstants.CHKARITHMETIC:
            r = ("Possible division by zero");
            Main.expectedException = ArithmeticException.class;
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKARRAYSTORE:
            r = ("Type of right-hand side possibly not a subtype of " + "array element type");
            Main.expectedException = ArrayStoreException.class;
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKASSERT:
            r = ("Possible assertion failure");
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKCLASSCAST:
            r = ("Possible type cast error");
            Main.expectedException = ClassCastException.class;
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKCODEREACHABILITY:
            r = ("Code marked as unreachable may possibly be reached");
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKCONSISTENT:
            r = ("Possible inconsistent added axiom");
            break;
        case TagConstants.CHKCONSTRAINT:
            r = ("Possible violation of object constraint at exit");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKDECREASES_BOUND:
            r = "Negative loop variant function may not lead to loop exit";
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKDECREASES_DECR:
            r = "Loop variant function possible not decreased";
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKDEFINEDNESS:
            r = ("Read of variable when its value may be meaningless");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKINDEXNEGATIVE:
            r = ("Possible negative array index");
            Main.expectedException = ArrayIndexOutOfBoundsException.class;
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKINDEXTOOBIG:
            r = ("Array index possibly too large");
            Main.expectedException = ArrayIndexOutOfBoundsException.class;
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKINITIALLY:
            r = ("Possible violation of initially condition at constructor exit");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKLOOPINVARIANT:
            r = ("Loop invariant possibly does not hold");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKLOOPOBJECTINVARIANT:
            r = ("Object invariant possibly does not hold on loop boundary");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKINITIALIZATION:
            r = ("Possible dynamic use before meaningful assignment of local " + "variable");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKLOCKINGORDER:
            r = ("Possible deadlock");
            break;
        case TagConstants.CHKMODIFIES:
            r = ("Possible violation of modifies clause");
            // Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKNEGATIVEARRAYSIZE:
            r = ("Possible attempt to allocate array of negative length");
            Main.expectedException = NegativeArraySizeException.class;
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKNONNULL:
            r = ("Possible assignment of null to variable declared non_null");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKNONNULLINIT:
            r = ("Field declared non_null possibly not initialized");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKNONNULLRESULT:
            r = "Method declared non_null may return null";
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKNULLPOINTER:
            r = ("Possible null dereference");
            Main.expectedException = NullPointerException.class;
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKOBJECTINVARIANT:
            // It would be nice to split this error into two:
            // *  Possible violation of object invariant at end of body (InvPost)
            // *  Possible violation of object invariant before call (InvPre)
            r = ("Possible violation of object invariant");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKOWNERNULL:
            r = ("Owner ghost field of constructed object possibly non-null");
            Assert.notFalse(!hasAssocDecl);
            break;
        case TagConstants.CHKPOSTCONDITION:
            r = ("Postcondition possibly not established");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKPRECONDITION:
            r = ("Precondition possibly not established");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKSHARING:
            r = ("Possible race condition");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKSHARINGALLNULL:
            r = ("Possible that all monitors are null");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKWRITABLE:
            r = ("Write of variable when disallowed");
            Assert.notFalse(hasAssocDecl);
            break;
        case TagConstants.CHKUNEXPECTEDEXCEPTION:
            r = ("Possible unexpected exception");
            // "strLocDecl" may or may not be null
            break;
        case TagConstants.CHKUNEXPECTEDEXCEPTION2:
            r = ("Possible exception allowed by the specification (perhaps inherited) but not declared by the method's throws clause");
            break;
        case TagConstants.CHKCONSTRUCTORLEAK:
        case TagConstants.CHKINITIALIZERLEAK:
        case TagConstants.CHKUNENFORCEBLEOBJECTINVARIANT:
        case TagConstants.CHKWRITABLEDEFERRED:
        case TagConstants.CHKMODIFIESEXTENSION:
            // this  a syntactic warning, not a semantic check
            // @ unreachable;
            Assert.fail("unexpected error name tag");
            r = TagConstants.toString(tag);
            break;
        default:
            // @ unreachable;
            Assert.fail("Bad tag");
            break;
        case TagConstants.CHKADDINFO:
            r = TagConstants.toString(tag);
        case TagConstants.CHKQUIET:
            break;
    }
    return r;
}
