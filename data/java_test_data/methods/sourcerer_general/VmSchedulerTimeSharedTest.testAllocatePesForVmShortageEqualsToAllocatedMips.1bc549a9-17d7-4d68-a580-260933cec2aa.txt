@Test
public void testAllocatePesForVmShortageEqualsToAllocatedMips() {
    List<Pe> peList = new ArrayList<Pe>();
    peList.add(new Pe(0, new PeProvisionerSimple(3500)));
    VmScheduler vmScheduler = new VmSchedulerTimeShared(peList);
    Vm vm1 = new Vm(0, 0, 170, 1, 0, 0, 0, "", null);
    Vm vm2 = new Vm(1, 0, 2000, 1, 0, 0, 0, "", null);
    Vm vm3 = new Vm(2, 0, 10, 1, 0, 0, 0, "", null);
    Vm vm4 = new Vm(3, 0, 2000, 1, 0, 0, 0, "", null);
    List<Double> mipsShare1 = new ArrayList<Double>();
    mipsShare1.add(170.0);
    List<Double> mipsShare2 = new ArrayList<Double>();
    mipsShare2.add(2000.0);
    List<Double> mipsShare3 = new ArrayList<Double>();
    mipsShare3.add(10.0);
    List<Double> mipsShare4 = new ArrayList<Double>();
    mipsShare4.add(2000.0);
    assertTrue(vmScheduler.allocatePesForVm(vm1, mipsShare1));
    assertEquals(3330, vmScheduler.getAvailableMips(), 0);
    assertEquals(170, vmScheduler.getTotalAllocatedMipsForVm(vm1), 0);
    assertTrue(vmScheduler.allocatePesForVm(vm2, mipsShare2));
    assertEquals(1330, vmScheduler.getAvailableMips(), 0);
    assertEquals(2000, vmScheduler.getTotalAllocatedMipsForVm(vm2), 0);
    assertTrue(vmScheduler.allocatePesForVm(vm3, mipsShare3));
    assertEquals(1320, vmScheduler.getAvailableMips(), 0);
    assertEquals(10, vmScheduler.getTotalAllocatedMipsForVm(vm3), 0);
    assertTrue(vmScheduler.allocatePesForVm(vm4, mipsShare4));
    assertEquals(0, vmScheduler.getAvailableMips(), 0);
    assertEquals(1750, vmScheduler.getTotalAllocatedMipsForVm(vm4), 0);
    vmScheduler.deallocatePesForAllVms();
    assertEquals(3500, vmScheduler.getAvailableMips(), 0);
    assertEquals(3500, vmScheduler.getMaxAvailableMips(), 0);
}
