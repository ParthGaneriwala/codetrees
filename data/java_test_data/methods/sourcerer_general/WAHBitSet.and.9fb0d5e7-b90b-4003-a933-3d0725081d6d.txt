public WAHBitSet and(WAHBitSet other) {
    WAHBitSet ret = new WAHBitSet();
    // ensure that they have the same bit length.
    if (this.numBits() < other.numBits()) {
        this.setBit(other.numBits() - 1, 0);
    } else if (this.numBits() > other.numBits()) {
        other.setBit(numBits() - 1, 0);
    }
    // if there is something in the vector.
    if (vec.size() > 0) {
        // create new run objects and decode them.
        run xrun = new run(vec), yrun = new run(other.vec);
        xrun.decode();
        yrun.decode();
        do {
            // if you finished a run, then get the next one.
            if (xrun.nWords == 0) {
                xrun.inc();
                xrun.decode();
            }
            if (yrun.nWords == 0) {
                yrun.inc();
                yrun.decode();
            }
            if (xrun.isFill()) {
                if (yrun.isFill()) {
                    // both are fills... this is the best.
                    int nWords = Math.min(xrun.nWords, yrun.nWords);
                    ret.appendFill(nWords, xrun.fillWord & yrun.fillWord);
                    xrun.nWords -= nWords;
                    yrun.nWords -= nWords;
                } else {
                    // just cut through the other run
                    chewUpRun(xrun, ret, yrun);
                }
            } else if (yrun.isFill()) {
                // again do the same, with different order.
                chewUpRun(yrun, ret, xrun);
            } else {
                // both are literals, so get the new literal and
                // append it to the return value.
                ret.active.val = xrun.get() & yrun.get();
                ret.appendLiteral();
                yrun.nWords = 0;
                xrun.nWords = 0;
            }
        // till they are not at the end.
        } while (!(xrun.end() && yrun.end()));
    }
    // set the active word.
    ret.active.val = this.active.val & other.active.val;
    ret.active.nbits = this.active.nbits;
    // ensure that the counts are set properly.
    ret.doCount();
    return ret;
}
