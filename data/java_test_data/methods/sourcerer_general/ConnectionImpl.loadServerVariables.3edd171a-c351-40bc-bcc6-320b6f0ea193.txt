private void loadServerVariables() throws SQLException {
    if (getCacheServerConfiguration()) {
        synchronized (serverConfigByUrl) {
            Map cachedVariableMap = (Map) serverConfigByUrl.get(getURL());
            if (cachedVariableMap != null) {
                this.serverVariables = cachedVariableMap;
                this.usingCachedConfig = true;
                return;
            }
        }
    }
    java.sql.Statement stmt = null;
    java.sql.ResultSet results = null;
    try {
        stmt = getMetadataSafeStatement();
        String version = this.dbmd.getDriverVersion();
        if (version != null && version.indexOf('*') != -1) {
            StringBuffer buf = new StringBuffer(version.length() + 10);
            for (int i = 0; i < version.length(); i++) {
                char c = version.charAt(i);
                if (c == '*') {
                    buf.append("[star]");
                } else {
                    buf.append(c);
                }
            }
            version = buf.toString();
        }
        String versionComment = (this.getParanoid() || version == null) ? "" : "/* " + version + " */";
        String query = versionComment + "SHOW VARIABLES";
        if (versionMeetsMinimum(5, 0, 3)) {
            query = versionComment + "SHOW VARIABLES WHERE Variable_name ='language'" + " OR Variable_name = 'net_write_timeout'" + " OR Variable_name = 'interactive_timeout'" + " OR Variable_name = 'wait_timeout'" + " OR Variable_name = 'character_set_client'" + " OR Variable_name = 'character_set_connection'" + " OR Variable_name = 'character_set'" + " OR Variable_name = 'character_set_server'" + " OR Variable_name = 'tx_isolation'" + " OR Variable_name = 'transaction_isolation'" + " OR Variable_name = 'character_set_results'" + " OR Variable_name = 'timezone'" + " OR Variable_name = 'time_zone'" + " OR Variable_name = 'system_time_zone'" + " OR Variable_name = 'lower_case_table_names'" + " OR Variable_name = 'max_allowed_packet'" + " OR Variable_name = 'net_buffer_length'" + " OR Variable_name = 'sql_mode'" + " OR Variable_name = 'query_cache_type'" + " OR Variable_name = 'query_cache_size'" + " OR Variable_name = 'init_connect'";
        }
        results = stmt.executeQuery(query);
        while (results.next()) {
            this.serverVariables.put(results.getString(1), results.getString(2));
        }
        if (versionMeetsMinimum(5, 0, 2)) {
            results = stmt.executeQuery(versionComment + "SELECT @@session.auto_increment_increment");
            if (results.next()) {
                this.serverVariables.put("auto_increment_increment", results.getString(1));
            }
        }
        if (getCacheServerConfiguration()) {
            synchronized (serverConfigByUrl) {
                serverConfigByUrl.put(getURL(), this.serverVariables);
            }
        }
    } catch (SQLException e) {
        throw e;
    } finally {
        if (results != null) {
            try {
                results.close();
            } catch (SQLException sqlE) {
                ;
            }
        }
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException sqlE) {
                ;
            }
        }
    }
}
