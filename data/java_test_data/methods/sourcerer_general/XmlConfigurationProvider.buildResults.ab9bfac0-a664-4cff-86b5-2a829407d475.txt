protected Map buildResults(Element element, PackageConfig packageContext) {
    NodeList resultEls = element.getElementsByTagName("result");
    Map results = new LinkedHashMap();
    for (int i = 0; i < resultEls.getLength(); i++) {
        Element resultElement = (Element) resultEls.item(i);
        if (resultElement.getParentNode().equals(element) || resultElement.getParentNode().getNodeName().equals(element.getNodeName())) {
            String resultName = resultElement.getAttribute("name");
            String resultType = resultElement.getAttribute("type");
            // if you don't specify a name on <result/>, it defaults to "success"
            if (!TextUtils.stringSet(resultName)) {
                resultName = Action.SUCCESS;
            }
            // there is no result type, so let's inherit from the parent package
            if (!TextUtils.stringSet(resultType)) {
                resultType = packageContext.getFullDefaultResultType();
                // now check if there is a result type now
                if (!TextUtils.stringSet(resultType)) {
                    // uh-oh, we have a problem
                    throw new ConfigurationException("No result type specified for result named '" + resultName + "', perhaps the parent package does not specify the result type?", resultElement);
                }
            }
            ResultTypeConfig config = packageContext.getAllResultTypeConfigs().get(resultType);
            if (config == null) {
                throw new ConfigurationException("There is no result type defined for type '" + resultType + "' mapped with name '" + resultName + "'", resultElement);
            }
            String resultClass = config.getClazz();
            // invalid result type specified in result definition
            if (resultClass == null) {
                throw new ConfigurationException("Result type '" + resultType + "' is invalid");
            }
            Map<String, String> resultParams = XmlHelper.getParams(resultElement);
            if (// maybe we just have a body - therefore a default parameter
            resultParams.size() == 0) {
                // if <result ...>something</result> then we add a parameter of 'something' as this is the most used result param
                if (resultElement.getChildNodes().getLength() >= 1) {
                    resultParams = new LinkedHashMap();
                    String paramName = config.getDefaultResultParam();
                    if (paramName != null) {
                        StringBuffer paramValue = new StringBuffer();
                        for (int j = 0; j < resultElement.getChildNodes().getLength(); j++) {
                            if (resultElement.getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
                                String val = resultElement.getChildNodes().item(j).getNodeValue();
                                if (val != null) {
                                    paramValue.append(val);
                                }
                            }
                        }
                        String val = paramValue.toString().trim();
                        if (val.length() > 0) {
                            resultParams.put(paramName, val);
                        }
                    } else {
                        LOG.warn("no default parameter defined for result of type " + config.getName());
                    }
                }
            }
            // create new param map, so that the result param can override the config param
            Map params = new LinkedHashMap();
            Map configParams = config.getParams();
            if (configParams != null) {
                params.putAll(configParams);
            }
            params.putAll(resultParams);
            ResultConfig resultConfig = new ResultConfig(resultName, resultClass, params);
            resultConfig.setLocation(DomHelper.getLocationObject(element));
            results.put(resultConfig.getName(), resultConfig);
        }
    }
    return results;
}
