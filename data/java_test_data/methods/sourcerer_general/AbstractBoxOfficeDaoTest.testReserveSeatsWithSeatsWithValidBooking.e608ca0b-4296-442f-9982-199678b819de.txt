public void testReserveSeatsWithSeatsWithValidBooking() throws Exception {
    Calendar calendar = Calendar.getInstance();
    Date date = calendar.getTime();
    calendar.add(Calendar.MINUTE, 5);
    Date fiveMinutesLater = calendar.getTime();
    calendar.add(Calendar.DAY_OF_YEAR, 7);
    Date aWeekLater = calendar.getTime();
    // populating the database
    dbHelper.insertShow(1, "show1", -1, -1);
    dbHelper.insertPerformance(1, aWeekLater, -1, 1);
    dbHelper.insertPriceBand(1, new BigDecimal(1.0), -1, -1);
    dbHelper.insertBooking(1, 1, date, fiveMinutesLater, new BigDecimal(3.0), -1);
    dbHelper.insertSeat(1, "seat1", -1, -1);
    dbHelper.insertSeat(2, "seat2", 1, -1);
    dbHelper.setRightSeatForSeat(1, 2);
    dbHelper.insertSeat(3, "seat3", 2, -1);
    dbHelper.setRightSeatForSeat(2, 3);
    dbHelper.insertSeatStatus(1, 1, 1, 1);
    dbHelper.insertSeatStatus(1, 2, -1, 1);
    dbHelper.insertSeatStatus(1, 3, -1, 1);
    // creating the cooresponding domain model
    Show show = new Show("show1");
    show.setId(1);
    Performance performance = new Performance(1, show, aWeekLater, null);
    Seat seat1 = new Seat("seat1");
    seat1.setId(1);
    Seat seat2 = new Seat("seat2");
    seat2.setId(2);
    Seat seat3 = new Seat("seat3");
    seat3.setId(3);
    seat1.setRightSide(seat2);
    seat2.setLeftSide(seat1);
    seat2.setRightSide(seat3);
    seat3.setLeftSide(seat2);
    Seat[] seats = new Seat[] { seat1, seat2, seat3 };
    Booking booking = new Booking(3, date, fiveMinutesLater, new BigDecimal(3.0));
    booking.setId(2);
    // executing the tested method
    try {
        dao.reserveSeats(seats, performance, booking);
        fail("Exception RequestedSeatNotAvailableException was expected to be thrown");
    } catch (RequestedSeatNotAvailableException rsnae) {
    // expected behavior
    }
}
