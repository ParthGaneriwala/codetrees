private String sendMessage(UserPreferences up, Post p, String subject, String message, Collection<File> attachments) throws HttpException, IOException {
    Preference smtpServer = up.getPreference("smtpServer");
    if (smtpServer == null || !isValidString(smtpServer.getValue())) {
        return "Email Setting missing: smtpServer";
    }
    final Preference smtpUser = up.getPreference("smtpUser");
    if (smtpUser == null || !isValidString(smtpUser.getValue())) {
        return "Email Setting missing: smtpUser";
    }
    final Preference smtpPassword = up.getPreference("smtpPassword");
    if (smtpPassword == null || !isValidString(smtpPassword.getValue())) {
        return "Email Setting missing: smtpPassword";
    }
    Preference smtpAuth = up.getPreference("smtpAuth");
    Preference smtpPort = up.getPreference("smtpPort");
    Preference fromEmailAddress = up.getPreference("fromEmailAddress");
    Preference bccEmailAddress = up.getPreference("bccEmailAddress");
    try {
        Session session = Session.getDefaultInstance(fillProperties(smtpAuth, smtpServer, smtpPort), new javax.mail.Authenticator() {

            @Override
            protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                return new javax.mail.PasswordAuthentication(smtpUser.getValue(), smtpPassword.getValue());
            }
        });
        MimeMessage msg = new MimeMessage(session);
        if (fromEmailAddress != null && isValidString(fromEmailAddress.getValue())) {
            msg.setFrom(new InternetAddress(fromEmailAddress.getValue()));
        } else {
            msg.setFrom(new InternetAddress(smtpUser.getValue()));
        }
        String to = p.getReplyAddress();
        if (debug && debugToAddress != null) {
            to = debugToAddress;
        }
        msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));
        if (bccEmailAddress != null && isValidString(bccEmailAddress.getValue())) {
            msg.setRecipients(Message.RecipientType.BCC, InternetAddress.parse(bccEmailAddress.getValue(), false));
        }
        msg.setSubject(subject);
        msg.setSentDate(new Date());
        Multipart multipart = new MimeMultipart();
        MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setText(message);
        multipart.addBodyPart(messageBodyPart);
        int i = 1;
        for (File f : attachments) {
            messageBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(f);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(f.getName());
            multipart.addBodyPart(messageBodyPart);
        }
        msg.setContent(multipart);
        Transport.send(msg);
        return "";
    } catch (AuthenticationFailedException e) {
        e.printStackTrace();
        String error = "error:Authentication Failed";
        setPreference(up, "emailSettingsError", error);
        return error;
    } catch (Throwable t) {
        t.printStackTrace();
        String error = "error:" + t.getMessage();
        setPreference(up, "emailSettingsError", error);
        return error;
    }
}
