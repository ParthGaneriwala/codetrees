public void testSaveClassifiedAdEntryEvent() throws Exception {
    // Insert project
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test Description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean result = project.insert(db);
    assertTrue("Project was not inserted", result);
    // add a classified record..
    Classified classified = new Classified();
    classified.setProjectId(project.getId());
    classified.setTitle("Dummy Classified Title");
    classified.setDescription("Dummy Classified Description");
    classified.setEnteredBy(USER_ID);
    classified.setModifiedBy(USER_ID);
    classified.setPublishDate(new Timestamp(System.currentTimeMillis()));
    classified.setExpirationDate(new Timestamp(System.currentTimeMillis() + (60 * 60 * 1000)));
    classified.insert(db);
    assertTrue("Unable to add a classified record", classified.getId() > -1);
    Project userProfile = ProjectUtils.loadProject(workflowUser.getProfileProjectId());
    BusinessProcess thisProcess = (BusinessProcess) processList.get(PROCESS_NAME);
    assertTrue("Process not found...", thisProcess != null);
    context.setPreviousObject(null);
    context.setThisObject(classified);
    context.setProcessName(PROCESS_NAME);
    context.setProcess(thisProcess);
    context.setAttribute("userId", new Integer(USER_ID));
    context.setAttribute("user", WikiLink.generateLink(userProfile));
    context.setAttribute("classified", WikiLink.generateLink(classified));
    workflowManager.execute(context);
    // Now query the database and test to see if a history item was added for the specified test user Id.
    ProjectHistoryList historyList = new ProjectHistoryList();
    historyList.setProjectId(project.getId());
    historyList.setEnteredBy(USER_ID);
    historyList.setLinkObject(ProjectHistoryList.CLASSIFIED_OBJECT);
    historyList.setEventType(ProjectHistoryList.POST_CLASSIFIED_AD_EVENT);
    historyList.setLinkItemId(classified.getId());
    historyList.buildList(db);
    assertTrue("History event was not recorded!", historyList.size() == 1);
    ProjectHistory history = historyList.get(0);
    assertEquals("Recorded event mismatch", "[[|" + userProfile.getId() + ":profile||" + userProfile.getTitle() + "]] " + "@[[|" + project.getId() + ":profile||Project SQL Test]] " + "posted a classified ad [[|" + project.getId() + ":classified-ad|" + classified.getId() + "|Dummy Classified Title]]", history.getDescription());
    // Delete the history item because the test is done (and any other needed objects)
    history.delete(db);
    // delete the classfied record..
    classified.delete(db, (String) null);
    // Delete the project
    boolean deleteResult = project.delete(db, (String) null);
    assertTrue("Project wasn't deleted", deleteResult);
    // Try to find the previously deleted project
    ProjectList projectList = new ProjectList();
    projectList.setProjectId(project.getId());
    projectList.buildList(db);
    assertTrue("Project exists when it shouldn't -- id " + project.getId(), projectList.size() == 0);
}
