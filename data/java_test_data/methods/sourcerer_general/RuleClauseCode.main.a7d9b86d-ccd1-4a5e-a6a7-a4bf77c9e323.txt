public static void main(String[] args) {
    try {
        LPRuleStore store = new LPRuleStore();
        String test1 = "(?a p ?y) <- (?a p2 ?z).";
        String test2 = "(?a p ?y) <- (?a q2 ?z) (?z q2 ?w).";
        String test3 = "(?a p ?a) <- (?z r2 ?w) (?z r2 ?w).";
        String test4 = "(?a p ?a) <- (?z r2 ?w) (?a r2 ?w).";
        String test5 = "(?a p ?y) <- (?a p ?z), (?z p ?y).";
        String test6 = "(?x p C3) <- (C1 r ?x).";
        String test7 = "(?x p ?y) <- (?x r ?y) (?x q ?y).";
        String test8 = "(?x p ?y) <- (?x p ?z) addOne(?z, ?y).";
        String test9 = "(?x p ?y) <- (?x p ?z) sum(?z, 2, ?y).";
        String test10 = "(?x p ?y) <- (?x p ?v), sum(?v 2 ?y).";
        String test11 = "(b p ?y) <- (a ?y ?v).";
        String test12 = "(?x p ?y) <- (?x p foo(?z, ?y)).";
        String test13 = "(?x p foo(?y,?z)) <- (?x q ?y), (?x q ?z).";
        String test14 = "(?x p ?z) <- (?x e ?z), (?z q ?z).";
        String test15 = "(?x p ?y ) <- bound(?x), (?x p ?y).";
        String test16 = "(a p b ) <- unbound(?x).";
        String test17 = "(?a p ?a) <- (?a q class).";
        String test18 = "(?a p ?a) <- (?a s ?a).";
        String test19 = "(?X p ?T) <- (?X rdf:type c), noValue(?X, p), makeInstance(?X, p, ?T).";
        String test20 = "(a p b ) <- unbound(?x).";
        String testLong = "(?P p ?C) <- (?P q ?D), (?D r xsd(?B, ?S1, ?L1)),(?P p ?E), notEqual(?D, ?E) " + "(?E e xsd(?B, ?S2, ?L2)),min(?S1, ?S2, ?S3),min(?L1, ?L2, ?L3), (?C r xsd(?B, ?S3, ?L3)).";
        String test21 = "(?a p ?y) <- (?x s ?y) (?a p ?x).";
        String test22 = "(?C p ?D) <- (?C rb:xsdBase ?BC), (?D rb:xsdBase ?BD), notEqual(?BC, ?BD).";
        store.addRule(Rule.parseRule(test22));
        System.out.println("Code for p:");
        List codeList = store.codeFor(Node.createURI("p"));
        RuleClauseCode code = (RuleClauseCode) codeList.get(0);
        code.print(System.out);
    } catch (Exception e) {
        System.out.println("Problem: " + e);
        e.printStackTrace();
    }
}
