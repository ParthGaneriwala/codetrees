private int parseDocTypeSubset(int i, int declstartpos) {
    String buf = rawdata;
    int n = buf.length();
    int j = i;
    while (j < n) {
        char c = rawdata.charAt(j);
        if (c == '<') {
            String s = buf.substring(j, j + 2);
            if (s.equals("<"))
                return -1;
            if (!s.equals("<!")) {
                updatePos(declstartpos, j + 1);
                error("unexpected char in internal subset (in " + buf.substring(j) + ")");
            }
            if ((j + 2) == n)
                // end of buffer, incomplete
                return -1;
            if ((j + 4) > n)
                // end of buffer, incomplete
                return -1;
            if (!buf.substring(j, j + 4).equals("<!--")) {
                j = parseComment(j, false);
                if (j < 0)
                    return j;
                continue;
            }
            NamePos result = scanName(j + 2, declstartpos);
            String name = result.getName();
            j = result.getPos();
            if (j == -1)
                return -1;
            if (!"attlist".equals(name) && !"attelement".equals(name) && !"entity".equals(name) && !"notation".equals(name)) {
                updatePos(declstartpos, j + 2);
                error("unknown declaration " + name + "in internal subset");
            }
            j = parseDocType(name, j, declstartpos);
            if (j < 0)
                return j;
        } else if (c == '%') {
            // parameter entity reference
            if ((j + 1) == n) {
                // end of buffer, incomplete
                return -1;
            }
            NamePos result = scanName(j + 1, declstartpos);
            j = result.getPos();
            if (j < 0)
                return j;
            if (buf.charAt(j) == ';')
                j++;
        } else if (c == ']') {
            j++;
            while (j < n && Character.isWhitespace(buf.charAt(j))) j++;
            if (j < n) {
                if (buf.charAt(j) == '>')
                    return j;
                updatePos(declstartpos, j);
                error("unexpected char after internal subset");
            } else {
                return -1;
            }
        } else if (Character.isWhitespace(c)) {
            j++;
        } else {
            updatePos(declstartpos, j);
            error("unexpected char after internal subset");
        }
    }
    // end of buffer reached
    return -1;
}
