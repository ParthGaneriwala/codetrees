public void addLink(String word1, String word2, String affinity, String Tscore, String frequency) {
    LinkInformation temp = null;
    Double theAffinity = -1D;
    Double theTScore = -1D;
    Double frequency1 = -1D;
    Double frequency2 = -1D;
    Double frequencyBoth = -1D;
    try {
        Pattern statisticsPattern = Pattern.compile("(\\d+);(\\d+);(\\d+);(\\d+)");
        Matcher matcher = statisticsPattern.matcher(frequency);
        int word1Count = 0;
        int word2Count = 0;
        int combinedCount = 0;
        int totalCountMinusOthers = 0;
        if (matcher.find()) {
            word1Count = Integer.parseInt(matcher.group(1));
            word2Count = Integer.parseInt(matcher.group(2));
            combinedCount = Integer.parseInt(matcher.group(3));
            totalCountMinusOthers = Integer.parseInt(matcher.group(4));
            frequency1 = ((double) word1Count + combinedCount) / ((double) word1Count + word2Count + combinedCount + totalCountMinusOthers);
            frequency2 = ((double) word1Count + combinedCount) / ((double) word1Count + word2Count + combinedCount + totalCountMinusOthers);
            if (frequency1 > maxFrequency) {
                maxFrequency = frequency1;
            }
            if (frequency1 < minFrequency) {
                minFrequency = frequency1;
            }
            if (frequency2 > maxFrequency) {
                maxFrequency = frequency2;
            }
            if (frequency2 < minFrequency) {
                minFrequency = frequency2;
            }
            frequencyBoth = ((double) combinedCount) / ((double) word1Count + word2Count + combinedCount + totalCountMinusOthers);
        } else {
            System.out.println("There was an error calculating the frequency of the words.");
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    try {
        theAffinity = Double.parseDouble(affinity);
    } catch (Exception e) {
    }
    try {
        theTScore = Double.parseDouble(Tscore);
    } catch (Exception e) {
    }
    if (theAffinity > maxAffinity) {
        maxAffinity = theAffinity;
    }
    if (theAffinity < minAffinity) {
        minAffinity = theAffinity;
    }
    if (theTScore > maxTScore) {
        maxTScore = theTScore;
    }
    if (theTScore < minTScore) {
        minTScore = theTScore;
    }
    temp = new LinkInformation(word1, word2, theAffinity, theTScore, frequency1, frequency2, frequencyBoth);
    if (!info.containsKey(word1)) {
        info.put(word1, new LinkedHashMap<String, LinkInformation>());
    }
    if (!info.containsKey(word2)) {
        info.put(word2, new LinkedHashMap<String, LinkInformation>());
    }
    info.get(word1).put(word2, temp);
    info.get(word2).put(word1, temp);
}
