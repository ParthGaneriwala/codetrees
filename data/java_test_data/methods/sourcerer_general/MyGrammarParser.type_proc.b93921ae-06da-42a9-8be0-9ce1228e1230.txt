// $ANTLR start "type_proc"
public final MyGrammarParser.type_proc_return type_proc() throws RecognitionException {
    MyGrammarParser.type_proc_return retval = new MyGrammarParser.type_proc_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DP30 = null;
    Token PVG32 = null;
    Token PVG34 = null;
    MyGrammarParser.type_return type31 = null;
    MyGrammarParser.body_proc_return_return body_proc_return33 = null;
    MyGrammarParser.body_proc_void_return body_proc_void35 = null;
    CommonTree DP30_tree = null;
    CommonTree PVG32_tree = null;
    CommonTree PVG34_tree = null;
    RewriteRuleTokenStream stream_DP = new RewriteRuleTokenStream(adaptor, "token DP");
    RewriteRuleTokenStream stream_PVG = new RewriteRuleTokenStream(adaptor, "token PVG");
    RewriteRuleSubtreeStream stream_body_proc_return = new RewriteRuleSubtreeStream(adaptor, "rule body_proc_return");
    RewriteRuleSubtreeStream stream_body_proc_void = new RewriteRuleSubtreeStream(adaptor, "rule body_proc_void");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:160:10: ( DP type PVG body_proc_return -> ^( TYPE_PROC type body_proc_return ) | PVG body_proc_void -> ^( TYPE_PROC body_proc_void ) )
        int alt8 = 2;
        int LA8_0 = input.LA(1);
        if ((LA8_0 == DP)) {
            alt8 = 1;
        } else if ((LA8_0 == PVG)) {
            alt8 = 2;
        } else {
            NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
            throw nvae;
        }
        switch(alt8) {
            case 1:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:160:14: DP type PVG body_proc_return
                {
                    DP30 = (Token) match(input, DP, FOLLOW_DP_in_type_proc1084);
                    stream_DP.add(DP30);
                    pushFollow(FOLLOW_type_in_type_proc1086);
                    type31 = type();
                    state._fsp--;
                    stream_type.add(type31.getTree());
                    PVG32 = (Token) match(input, PVG, FOLLOW_PVG_in_type_proc1088);
                    stream_PVG.add(PVG32);
                    pushFollow(FOLLOW_body_proc_return_in_type_proc1090);
                    body_proc_return33 = body_proc_return();
                    state._fsp--;
                    stream_body_proc_return.add(body_proc_return33.getTree());
                    // AST REWRITE
                    // elements: type, body_proc_return
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 160:43: -> ^( TYPE_PROC type body_proc_return )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:160:46: ^( TYPE_PROC type body_proc_return )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TYPE_PROC, "TYPE_PROC"), root_1);
                            adaptor.addChild(root_1, stream_type.nextTree());
                            adaptor.addChild(root_1, stream_body_proc_return.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
            case 2:
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:161:7: PVG body_proc_void
                {
                    PVG34 = (Token) match(input, PVG, FOLLOW_PVG_in_type_proc1109);
                    stream_PVG.add(PVG34);
                    pushFollow(FOLLOW_body_proc_void_in_type_proc1111);
                    body_proc_void35 = body_proc_void();
                    state._fsp--;
                    stream_body_proc_void.add(body_proc_void35.getTree());
                    // AST REWRITE
                    // elements: body_proc_void
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
                    root_0 = (CommonTree) adaptor.nil();
                    // 161:26: -> ^( TYPE_PROC body_proc_void )
                    {
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:161:29: ^( TYPE_PROC body_proc_void )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TYPE_PROC, "TYPE_PROC"), root_1);
                            adaptor.addChild(root_1, stream_body_proc_void.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;
                }
                break;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
