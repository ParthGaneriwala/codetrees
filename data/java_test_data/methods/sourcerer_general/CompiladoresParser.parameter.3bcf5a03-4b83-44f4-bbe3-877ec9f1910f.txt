// $ANTLR start "parameter"
public final CompiladoresParser.parameter_return parameter() throws RecognitionException {
    CompiladoresParser.parameter_return retval = new CompiladoresParser.parameter_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token AS45 = null;
    CompiladoresParser.id_return id44 = null;
    CompiladoresParser.type_return type46 = null;
    CommonTree AS45_tree = null;
    RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor, "token AS");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    try {
        dbg.enterRule(getGrammarFileName(), "parameter");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(104, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:104:13: ( id AS type -> ^( type id ) )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:104:15: id AS type
            {
                dbg.location(104, 15);
                pushFollow(FOLLOW_id_in_parameter764);
                id44 = id();
                state._fsp--;
                stream_id.add(id44.getTree());
                dbg.location(104, 18);
                AS45 = (Token) match(input, AS, FOLLOW_AS_in_parameter766);
                stream_AS.add(AS45);
                dbg.location(104, 21);
                pushFollow(FOLLOW_type_in_parameter768);
                type46 = type();
                state._fsp--;
                stream_type.add(type46.getTree());
                // AST REWRITE
                // elements: type, id
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 105:4: -> ^( type id )
                {
                    dbg.location(105, 7);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:105:7: ^( type id )
                    {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        dbg.location(105, 9);
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_type.nextNode(), root_1);
                        dbg.location(105, 14);
                        adaptor.addChild(root_1, stream_id.nextTree());
                        adaptor.addChild(root_0, root_1);
                    }
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(106, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "parameter");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
