/*
	 * arguments:
	 * -e "./exonList/exonParsedUniqChr16" -ref "./chromFa" -pileup "WZ1034.region16.out" -c "16-16" -o "WZ1034.region16.exon" -t 
	 */
public static void main(String[] args) {
    double totalTime;
    double startTime = System.currentTimeMillis();
    parseArguments(args);
    /*
		 * All files should be sorted in chromosomal order
		 */
    try {
        for (int chromosome : chromosomes) {
            double currentTime = 0, totalExonReadTime = 0, totalExprReadTime = 0, totalFPKMCalcTime = 0, totalReadsReadTime = 0, totalSNPsCalcTime = 0, totalRefCalcTime = 0;
            int numberOfExpr = 0, numberOfReads = 0;
            System.out.println("Chromosome " + chromosome);
            System.out.println("Reading exons file....");
            currentTime = System.currentTimeMillis();
            Exons = Exon.readExon(exonFileName, chromosome);
            totalExonReadTime = (System.currentTimeMillis() - currentTime) / 1000F;
            Exon.sortExons(Exons);
            // TODO add chromosome checks
            if (usingPileup) {
                BufferedReader br = new BufferedReader(new FileReader(mappedReadsFileName));
                System.out.println("Reading expression file....");
                ArrayList<Expression> Expressions = new ArrayList<Expression>();
                currentTime = System.currentTimeMillis();
                Expressions = Expression.readExon(expressionFileName, chromosome);
                totalExprReadTime = (System.currentTimeMillis() - currentTime) / 1000F;
                numberOfExpr = Expressions.size();
                System.out.println("Calculating FPKMs....");
                currentTime = System.currentTimeMillis();
                Exon.getFPKM(Expressions, Exons);
                totalFPKMCalcTime = (System.currentTimeMillis() - currentTime) / 1000F;
                // explicitly deleting to free up memory
                Expressions.removeAll(Expressions);
                System.out.println("Reading pileup file, calculating coverage and SNPs....");
                currentTime = System.currentTimeMillis();
                Pileup.readData(Exons, br);
                totalReadsReadTime = (System.currentTimeMillis() - currentTime) / 1000F;
            } else {
                System.out.println("Reading expression file....");
                ArrayList<Expression> Expressions = new ArrayList<Expression>();
                currentTime = System.currentTimeMillis();
                Expressions = Expression.readExon(expressionFileName, chromosome);
                totalExprReadTime = (System.currentTimeMillis() - currentTime) / 1000F;
                numberOfExpr = Expressions.size();
                System.out.println("Calculating FPKMs....");
                currentTime = System.currentTimeMillis();
                Exon.getFPKM(Expressions, Exons);
                totalFPKMCalcTime = (System.currentTimeMillis() - currentTime) / 1000F;
                // explicitly deleting to free up memory
                Expressions.removeAll(Expressions);
                System.out.println("Reading mapped reads SAM file....");
                ArrayList<MappedReads> mappedReads = new ArrayList<MappedReads>();
                currentTime = System.currentTimeMillis();
                mappedReads = MappedReads.readMappedReads(mappedReadsFileName, chromosome);
                totalReadsReadTime = (System.currentTimeMillis() - currentTime) / 1000F;
                MappedReads.sort(mappedReads);
                numberOfReads = mappedReads.size();
                System.out.println("Reading reference genome file....");
                String referenceFileName = referenceDirectory + "/chr" + chromosome + ".fa";
                currentTime = System.currentTimeMillis();
                RandomAccessFile inputReference = new RandomAccessFile(referenceFileName, "r");
                for (Exon e : Exons) {
                    e.getReferenceSequence(inputReference);
                }
                totalRefCalcTime = (System.currentTimeMillis() - currentTime) / 1000F;
                System.out.println("Calculating SNPs....");
                currentTime = System.currentTimeMillis();
                Exon.getSNPs(Exons, mappedReads);
                totalSNPsCalcTime = (System.currentTimeMillis() - currentTime) / 1000F;
                mappedReads.removeAll(mappedReads);
            }
            // Print output
            Writer output = new BufferedWriter(new FileWriter(outputFileName));
            for (Exon e : Exons) {
                // System.out.println(e);
                output.write(e + "\n");
            }
            output.close();
            // prints the timing metrics to std out
            if (printTimingMetrics) {
                double endTime = System.currentTimeMillis();
                totalTime = (endTime - startTime) / 1000F;
                System.out.println("Total Time: " + totalTime);
                System.out.println("Time for reading exons file       : " + totalExonReadTime + ", " + Exons.size());
                System.out.println("Time for reading expression file  : " + totalExprReadTime + ", " + numberOfExpr);
                System.out.println("Time for reading mapped reads file: " + totalReadsReadTime + ", " + numberOfReads);
                System.out.println("Time for getting reference seq    : " + totalRefCalcTime);
                System.out.println("Time for calculating FPKM         : " + totalFPKMCalcTime);
                System.out.println("Time for calculating Num of SNPs  : " + totalSNPsCalcTime);
            }
        }
    } catch (Exception e) {
        System.err.println("Exception: " + e.getMessage());
        e.printStackTrace();
    }
}
