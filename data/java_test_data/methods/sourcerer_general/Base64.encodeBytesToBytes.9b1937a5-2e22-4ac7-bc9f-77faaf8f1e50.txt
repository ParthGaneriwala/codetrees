public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {
    if (source == null)
        throw new NullPointerException("Cannot serialize a null array.");
    if (off < 0)
        throw new IllegalArgumentException("Cannot have negative offset: " + off);
    if (len < 0)
        throw new IllegalArgumentException("Cannot have length offset: " + len);
    if (off + len > source.length)
        throw new IllegalArgumentException(String.format("Cannot have offset of %d and length of %d with array of length %d", off, len, source.length));
    // Compress?
    if ((options & GZIP) > 0) {
        java.io.ByteArrayOutputStream baos = null;
        java.util.zip.GZIPOutputStream gzos = null;
        Base64.OutputStream b64os = null;
        try {
            // GZip -> Base64 -> ByteArray
            baos = new java.io.ByteArrayOutputStream();
            b64os = new Base64.OutputStream(baos, ENCODE | options);
            gzos = new java.util.zip.GZIPOutputStream(b64os);
            gzos.write(source, off, len);
            gzos.close();
        }// end try
         catch (java.io.IOException e) {
            // the finally{} block is called for cleanup.
            throw e;
        } finally // end catch
        {
            try {
                gzos.close();
            } catch (Exception e) {
            }
            try {
                b64os.close();
            } catch (Exception e) {
            }
            try {
                baos.close();
            } catch (Exception e) {
            }
        }
        return baos.toByteArray();
    } else // end if: compress
    // Else, don't compress. Better not to use streams at all then.
    {
        boolean breakLines = (options & DO_BREAK_LINES) > 0;
        // int len43 = len * 4 / 3;
        // byte[] outBuff = new byte[ ( len43 ) // Main 4:3
        // + ( (len % 3) > 0 ? 4 : 0 ) // Account for padding
        // + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines
        // Try to determine more precisely how big the array needs to be.
        // If we get it right, we don't have to do an array copy, and
        // we save a bunch of memory.
        // Bytes needed for actual encoding
        int encLen = len / 3 * 4 + (len % 3 > 0 ? 4 : 0);
        if (breakLines)
            // Plus extra newline characters
            encLen += encLen / MAX_LINE_LENGTH;
        byte[] outBuff = new byte[encLen];
        int d = 0;
        int e = 0;
        int len2 = len - 2;
        int lineLength = 0;
        for (; d < len2; d += 3, e += 4) {
            encode3to4(source, d + off, 3, outBuff, e, options);
            lineLength += 4;
            if (breakLines && lineLength >= MAX_LINE_LENGTH) {
                outBuff[e + 4] = NEW_LINE;
                e++;
                lineLength = 0;
            }
        // end if: end of line
        }
        if (d < len) {
            encode3to4(source, d + off, len - d, outBuff, e, options);
            e += 4;
        }
        // Only resize array if we didn't guess it right.
        if (e < outBuff.length - 1) {
            byte[] finalOut = new byte[e];
            System.arraycopy(outBuff, 0, finalOut, 0, e);
            // );
            return finalOut;
        } else
            // System.err.println("No need to resize array.");
            return outBuff;
    }
// end else: don't compress
}
