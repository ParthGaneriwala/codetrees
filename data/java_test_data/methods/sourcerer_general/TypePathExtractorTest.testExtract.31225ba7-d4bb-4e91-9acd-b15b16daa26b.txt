@Test
public void testExtract() throws Throwable {
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(TypePathExtractorTest.Annotator.class, typeSystemDescription);
    engine.process(jCas);
    engine.collectionProcessComplete();
    FSIndex<Annotation> fsIndex = jCas.getAnnotationIndex(Token.type);
    assertTrue(jCas.getTypeSystem().subsumes(jCas.getTypeSystem().getType("uima.tcas.Annotation"), jCas.getCasType(POSTag.type)));
    Token targetToken = new Token(jCas);
    targetToken.setBegin(0);
    targetToken.setEnd(8);
    Token token1 = (Token) fsIndex.find(targetToken);
    TypePathExtractor typePathExtractor = new TypePathExtractor(Token.class, "lemma/value");
    List<Feature> features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 1);
    TypePathFeature feature = (TypePathFeature) features.get(0);
    assertEquals(feature.getValue().toString(), "wwwwwwww");
    assertEquals(feature.getTypePath(), "lemma/value");
    // test the covered text of the last member of a path (lemma is not a
    // primitive value);
    typePathExtractor = new TypePathExtractor(Token.class, "lemma");
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 1);
    feature = (TypePathFeature) features.get(0);
    assertEquals(feature.getValue().toString(), "www");
    assertEquals(feature.getTypePath(), "lemma");
    targetToken.setBegin(12);
    targetToken.setEnd(14);
    Token token3 = (Token) fsIndex.find(targetToken);
    typePathExtractor = new TypePathExtractor(Token.class, "lemma/begin");
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 1);
    feature = (TypePathFeature) features.get(0);
    assertEquals(feature.getValue(), 1);
    assertEquals(feature.getTypePath(), "lemma/begin");
    typePathExtractor = new TypePathExtractor(Token.class, "posTag", true, true, false);
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 2);
    assertEquals(features.get(0).getValue().toString(), "Wwwwwwww");
    assertEquals(features.get(1).getValue().toString(), "Wwwwwwww");
    typePathExtractor = new TypePathExtractor(Token.class, "posTag", true, true, true);
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 1);
    assertEquals(features.get(0).getValue().toString(), "Wwwwwwww");
    typePathExtractor = new TypePathExtractor(Token.class, "posTag", true, false, false);
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 1);
    assertEquals(features.get(0).getValue().toString(), "Wwwwwwww");
    typePathExtractor = new TypePathExtractor(Token.class, "posTag", false, false, false);
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 1);
    assertEquals(features.get(0).getValue().toString(), "Wwwwwwww");
    typePathExtractor = new TypePathExtractor(Token.class, "lemma/testFS", false, false, false);
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 1);
    assertEquals(features.get(0).getValue().toString(), "A");
    typePathExtractor = new TypePathExtractor(Token.class, "lemma/testFS", false, true, false);
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 3);
    assertEquals(features.get(0).getValue().toString(), "A");
    assertEquals(features.get(1).getValue().toString(), "B");
    assertEquals(features.get(2).getValue().toString(), "A");
    typePathExtractor = new TypePathExtractor(Token.class, "lemma/testFS", false, true, true);
    features = typePathExtractor.extract(jCas, token1);
    assertEquals(features.size(), 2);
    assertEquals(features.get(0).getValue().toString(), "A");
    assertEquals(features.get(1).getValue().toString(), "B");
    typePathExtractor = new TypePathExtractor(Token.class, "depRel/head");
    features = typePathExtractor.extract(jCas, token3);
    assertEquals(features.size(), 1);
    feature = (TypePathFeature) features.get(0);
    assertEquals(feature.getValue().toString(), "Wwwwwwww");
    assertEquals(feature.getTypePath(), "depRel/head");
    typePathExtractor = new TypePathExtractor(Token.class, "depRel/head", true, true, true);
    features = typePathExtractor.extract(jCas, token3);
    assertEquals(features.size(), 2);
    feature = (TypePathFeature) features.get(0);
    assertEquals(feature.getValue().toString(), "Wwwwwwww");
    assertEquals(feature.getTypePath(), "depRel/head");
    feature = (TypePathFeature) features.get(1);
    assertEquals(feature.getTypePath(), "depRel/head");
    assertEquals(feature.getValue().toString(), "ii");
    typePathExtractor = new TypePathExtractor(Token.class, "depRel/head/posTag/value", true, true, true);
    features = typePathExtractor.extract(jCas, token3);
    assertEquals(features.size(), 3);
    assertEquals(features.get(0).getValue().toString(), "pos1");
    assertEquals(features.get(1).getValue().toString(), "pos2");
    assertEquals(features.get(2).getValue().toString(), "pos3");
    // unfortunately, because the "value" of POSTag is a single value, this
    // will return all values for every POSTag even though
    // the posTag of Token is an FSArray. (I was hoping this extractor would
    // return two values pos1 and pos3
    typePathExtractor = new TypePathExtractor(Token.class, "depRel/head/posTag/value", true, false, true);
    features = typePathExtractor.extract(jCas, token3);
    assertEquals(features.size(), 3);
    assertEquals(features.get(0).getValue().toString(), "pos1");
    assertEquals(features.get(1).getValue().toString(), "pos2");
    assertEquals(features.get(2).getValue().toString(), "pos3");
    typePathExtractor = new TypePathExtractor(Token.class, "depRel/head/posTag/value", false, true, true);
    features = typePathExtractor.extract(jCas, token3);
    assertEquals(features.size(), 1);
    assertEquals(features.get(0).getValue().toString(), "pos1");
    typePathExtractor = new TypePathExtractor(Token.class, "depRel/head/posTag/value", false, false, true);
    features = typePathExtractor.extract(jCas, token3);
    assertEquals(features.size(), 1);
    assertEquals(features.get(0).getValue().toString(), "pos1");
}
