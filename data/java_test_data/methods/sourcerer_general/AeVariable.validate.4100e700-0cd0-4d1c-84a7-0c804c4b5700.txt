public void validate(boolean aAllowEmptyPartData) throws AeBpelException {
    Exception cause = null;
    String errorMessage = null;
    try {
        if (isType()) {
            // For simple data, declare doc around it. Complex data must already be in form of a doc
            XMLType datatype = getDefinition().getXMLType();
            AeBPELExtendedWSDLDef def = AeWSDLDefHelper.getWSDLDefinitionForType(getProcess().getProcessPlan(), getDefinition().getType());
            AeXmlValidator validator = new AeXmlValidator(def, getProcess().getEngine().getTypeMapping());
            if (!AeXmlUtil.isComplexOrAny(datatype)) {
                errorMessage = validator.validateSimpleType(getName(), getTypeData(), getType());
            } else if (getTypeData() instanceof Document) {
                errorMessage = validator.validateComplexType((Document) getTypeData(), getType());
            } else if (getTypeData() instanceof Element) {
                errorMessage = validator.validateComplexType((Element) getTypeData(), getType());
            } else {
                Object[] args = { getName(), getType(), getTypeData() };
                // $NON-NLS-1$
                errorMessage = AeMessages.format("AeVariable.ExpectedTypeDocument", args);
            }
        } else if (isElement()) {
            QName runtimeElementQName = mElementData == null ? null : AeXmlUtil.getElementType(mElementData.getDocumentElement());
            AeBPELExtendedWSDLDef def = AeWSDLDefHelper.getWSDLDefinitionForElement(getProcess().getProcessPlan(), runtimeElementQName);
            AeXmlValidator validator = new AeXmlValidator(def, getProcess().getEngine().getTypeMapping());
            errorMessage = validator.validateElement(mElementData, getElement());
        } else if (isMessageType()) {
            AeBPELExtendedWSDLDef def = AeWSDLDefHelper.getWSDLDefinitionForMsg(getProcess().getProcessPlan(), getDefinition().getMessageType());
            AeMessageDataValidator messageValidator = new AeMessageDataValidator(aAllowEmptyPartData, getDefinition().getMessageParts());
            errorMessage = messageValidator.validate(getMessageData(), def, getProcess().getEngine().getTypeMapping());
        }
    } catch (Exception e) {
        cause = e;
        errorMessage = e.getLocalizedMessage();
    }
    if (errorMessage != null) {
        // $NON-NLS-1$
        String msg = AeMessages.format("AeVariable.ERROR_4", new Object[] { getName(), errorMessage });
        IAeFaultFactory factory = AeFaultFactory.getFactory(getProcess().getBPELNamespace());
        throw new AeBpelException(msg, factory.getInvalidVariables(), cause);
    }
}
