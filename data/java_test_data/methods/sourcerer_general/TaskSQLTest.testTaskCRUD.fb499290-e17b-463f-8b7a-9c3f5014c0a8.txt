public void testTaskCRUD() throws SQLException {
    int ownerProjectId;
    int linkProjectId;
    int taskCategoryId;
    int taskId;
    // Insert a project that will contain task
    Project ownerProject = new Project();
    ownerProject.setTitle("TaskSQLTest " + System.currentTimeMillis());
    ownerProject.setShortDescription("Project that contains a task");
    ownerProject.setRequestDate(new Timestamp(System.currentTimeMillis()));
    ownerProject.setEnteredBy(USER_ID);
    ownerProject.setModifiedBy(USER_ID);
    ownerProject.insert(db);
    ownerProjectId = ownerProject.getId();
    assertTrue("Inserted ownerProject did not have an id", ownerProjectId > -1);
    // Insert a project that will link to a task
    Project linkProject = new Project();
    linkProject.setTitle("TaskSQLTest " + System.currentTimeMillis());
    linkProject.setShortDescription("Project that links to a task");
    linkProject.setRequestDate(new Timestamp(System.currentTimeMillis()));
    linkProject.setEnteredBy(USER_ID);
    linkProject.setModifiedBy(USER_ID);
    linkProject.insert(db);
    linkProjectId = linkProject.getId();
    assertTrue("Inserted linkProject did not have an id", linkProjectId > -1);
    // Insert task category
    TaskCategory taskCategory = new TaskCategory();
    taskCategory.setLinkModuleId(Constants.TASK_CATEGORY_PROJECTS);
    taskCategory.setLinkItemId(ownerProjectId);
    taskCategory.setDescription("TaskSQLTest " + System.currentTimeMillis());
    assertTrue("TaskCategory was not inserted", taskCategory.insert(db));
    taskCategoryId = taskCategory.getId();
    LookupList priorityList = new LookupList(db, "lookup_task_priority");
    LookupElement priority = null;
    assertTrue("No priorities exist", priorityList.size() > 0);
    priority = priorityList.get(0);
    // Insert task
    Task task = new Task();
    task.setDescription("Task that links to a project");
    task.setLinkModuleId(Constants.TASK_CATEGORY_PROJECTS);
    task.setLinkItemId(linkProjectId);
    task.setProjectId(ownerProjectId);
    task.setCategoryId(taskCategoryId);
    task.setPriority(priority.getId());
    task.setEnteredBy(USER_ID);
    task.setModifiedBy(USER_ID);
    assertTrue("Task was not inserted", task.insert(db));
    taskId = task.getId();
    assertTrue("Inserted task did not have an id", taskId > -1);
    TaskList taskList = new TaskList();
    taskList.setProjectId(ownerProjectId);
    taskList.setLinkModuleId(Constants.TASK_CATEGORY_PROJECTS);
    taskList.setLinkItemId(linkProjectId);
    taskList.buildList(db);
    assertTrue("Task could not be found", taskList.size() > 0);
    task = null;
    for (Task tmpTask : taskList) {
        if (tmpTask.getId() == taskId) {
            task = tmpTask;
            break;
        }
    }
    assertNotNull("Task could not be found", task);
    // Delete the task
    task.delete(db);
    task = null;
    // Try to find the previously deleted badge project link
    taskList = new TaskList();
    taskList.setProjectId(ownerProjectId);
    taskList.setLinkModuleId(Constants.TASK_CATEGORY_PROJECTS);
    taskList.setLinkItemId(linkProjectId);
    taskList.buildList(db);
    for (Task tmpTask : taskList) {
        assertTrue("Task exists when it shouldn't", tmpTask.getId() != taskId);
    }
    // clean up the task category and projects created
    String basePath = null;
    assertTrue("TaskCategory was not deleted", taskCategory.delete(db));
    assertTrue("linkProject was not deleted", linkProject.delete(db, basePath));
    assertTrue("ownerProject was not deleted", ownerProject.delete(db, basePath));
}
