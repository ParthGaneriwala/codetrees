// $ANTLR start "index"
public final Compila_doresParser.index_return index() throws RecognitionException {
    Compila_doresParser.index_return retval = new Compila_doresParser.index_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LBR117 = null;
    Token RBR119 = null;
    Compila_doresParser.id_return id116 = null;
    Compila_doresParser.expression_return expression118 = null;
    CommonTree LBR117_tree = null;
    CommonTree RBR119_tree = null;
    RewriteRuleTokenStream stream_RBR = new RewriteRuleTokenStream(adaptor, "token RBR");
    RewriteRuleTokenStream stream_LBR = new RewriteRuleTokenStream(adaptor, "token LBR");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:194:2: ( id LBR expression RBR -> ^( INDEX id expression ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:194:4: id LBR expression RBR
        {
            pushFollow(FOLLOW_id_in_index1342);
            id116 = id();
            state._fsp--;
            stream_id.add(id116.getTree());
            LBR117 = (Token) match(input, LBR, FOLLOW_LBR_in_index1344);
            stream_LBR.add(LBR117);
            pushFollow(FOLLOW_expression_in_index1346);
            expression118 = expression();
            state._fsp--;
            stream_expression.add(expression118.getTree());
            RBR119 = (Token) match(input, RBR, FOLLOW_RBR_in_index1348);
            stream_RBR.add(RBR119);
            // AST REWRITE
            // elements: expression, id
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 194:26: -> ^( INDEX id expression )
            {
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:194:29: ^( INDEX id expression )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(INDEX, "INDEX"), root_1);
                    adaptor.addChild(root_1, stream_id.nextTree());
                    adaptor.addChild(root_1, stream_expression.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
