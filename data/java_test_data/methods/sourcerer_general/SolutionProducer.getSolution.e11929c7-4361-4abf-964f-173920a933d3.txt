public WICOutput getSolution() {
    int i, j;
    int posOfInt = 0;
    int min = 0;
    // /*
    for (i = 0; i < N; i++) {
        if (ySet[i] == 0)
            continue;
        j = i;
        while (j < N - 1) {
            if (ySet[j] == ySet[j + 1]) {
                j = j + 1;
                continue;
            } else
                break;
        }
        if (j - i > 0)
            addInterval(i, j, ySet[j]);
        i = j;
    }
    // /*
    for (i = 0; i < N - 2; i++) {
        if ((ySet[i] == 0) || (ySet[i + 1] == 0) || (ySet[i + 2] == 0))
            continue;
        if ((ySet[i] == ySet[i + 2]) && (ySet[i] < ySet[i + 1])) {
            if (status[i] != -1) {
                posOfInt = status[i];
                interval[posOfInt][i + 1] = ySet[i];
                status[i + 1] = posOfInt;
                if (status[i + 2] == -1) {
                    interval[posOfInt][i + 2] = ySet[i];
                    status[i + 2] = posOfInt;
                }
            // System.out.println("Extended Interval ahead to: " + (i + 1) + " " + (i + 2));
            } else if (status[i + 2] != -1) {
                posOfInt = status[i + 2];
                interval[posOfInt][i + 1] = interval[posOfInt][i] = ySet[i + 2];
                status[i + 1] = status[i] = posOfInt;
            // System.out.println("Extended Interval backwards to: " + (i + 1) + " " + (i));
            } else
                addInterval(i, i + 2, ySet[i]);
            addInterval(i + 1, i + 1, ySet[i + 1] - ySet[i + 2]);
        }
    }
    // /*
    for (i = 0; i < N - 2; i++) {
        if ((ySet[i] == 0) || (ySet[i + 1] == 0) || (ySet[i + 2] == 0))
            continue;
        if (ySet[i + 1] == ySet[i + 2] + ySet[i]) {
            // System.out.println("Found 3 pattern b = a + c: " + ySet[i] + ySet[i + 1] + ySet[i + 2]);
            posOfInt = status[i];
            if (posOfInt != -1) {
                interval[posOfInt][i + 1] = ySet[i];
                status[i + 1] = posOfInt;
            } else
                addInterval(i, i + 1, ySet[i]);
            posOfInt = status[i + 2];
            if (posOfInt != -1) {
                interval[posOfInt][i + 1] = ySet[i + 2];
                status[i + 1] = posOfInt;
            } else
                addInterval(i + 1, i + 2, ySet[i + 2]);
        }
    }
    for (i = 0; i < N; i++) {
        if (status[i] == -1) {
            addInterval(i, i, ySet[i]);
        }
    }
    /* Step 6: Convert the interval array into WICOutput object */
    int start, end, index;
    boolean inMiddle = false;
    for (i = 0; i < numK; i++) {
        start = 0;
        end = 0;
        inMiddle = false;
        index = 0;
        for (j = 0; j < N; j++) {
            if ((!inMiddle) && (interval[i][j] > 0)) {
                start = j + 1;
                inMiddle = true;
            }
            if ((inMiddle) && (interval[i][j] == 0)) {
                end = j + 1;
                inMiddle = false;
                index = j - 1;
                break;
            } else if ((inMiddle) && (interval[i][j] != 0) && (j == N - 1)) {
                end = j + 2;
                inMiddle = false;
                index = N - 1;
                break;
            }
        }
        solution.add(new int[] { start, end, interval[i][index] });
    // System.out.println(start + ", " + end + ", " + interval[i][index]);
    }
    /* Optimization of the Output */
    int[] list;
    int[] checklist;
    for (i = 0; i < numK; i++) {
        list = solution.get(i);
        for (j = 0; j < numK; j++) {
            checklist = solution.get(j);
            if ((checklist[0] == list[1]) && (checklist[2] == list[2])) {
            // System.out.println("XXXXXXXXXX: " + " ");
            }
        }
    }
    return new WICOutput(solution, solution.size());
}
