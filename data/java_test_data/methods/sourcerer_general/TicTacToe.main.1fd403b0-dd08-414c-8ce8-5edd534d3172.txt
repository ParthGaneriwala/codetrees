public static void main(String[] args) {
    // SwingUtilities.invokeLater(new Runnable() {
    // public void run() {
    TicTacToe ttt;
    Joshua agent;
    int gameType = 1;
    int plays = 1;
    double exploration = 0.1;
    String logLevels = "00000000";
    int learningType = CHRISConstants.LEARNING_ACTIVE;
    boolean skillControl = false;
    String data = "TTTLearning.data";
    if (args.length == 0) {
        System.out.println("USAGE (default values shown)");
        System.out.println("=====");
        System.out.println("java edu.unisa.chris_examples.joshua game=1 plays=1 [expl=0.1] [log=00000000] [learn=active] [skill=false] [data=TTTLearning.data]");
        System.out.println("====================" + System.getProperty("line.separator"));
        System.out.println("TicTacToe game types");
        System.out.println("1. You Vs Game");
        System.out.println("2. You Vs Joshua");
        System.out.println("3. Joshua Vs Game" + System.getProperty("line.separator"));
        System.out.println("plays = number of games to play against joshua");
        System.out.println("expl = Fractional percentage of how often to explore vs exploit learning");
        System.out.println("learn = active/passive, sets the learning type to use");
        System.out.println("skill = true/false, enables skill control for passive learning");
    }
    StringTokenizer st;
    String argType;
    for (int i = 0; i < args.length; i++) {
        try {
            st = new StringTokenizer(args[i], "=");
            argType = st.nextToken();
            if (argType.equals("game")) {
                gameType = Integer.parseInt(st.nextToken());
            } else if (argType.equals("plays")) {
                plays = Integer.parseInt(st.nextToken());
            } else if (argType.equals("expl")) {
                exploration = Double.parseDouble(st.nextToken());
            } else if (argType.equals("log")) {
                logLevels = st.nextToken();
            } else if (argType.equals("learn")) {
                String tmp = st.nextToken();
                if (tmp.equals("passive"))
                    learningType = CHRISConstants.LEARNING_PASSIVE;
            } else if (argType.equals("skill")) {
                skillControl = Boolean.valueOf(st.nextToken()).booleanValue();
            } else if (argType.equals("data")) {
                logLevels = st.nextToken();
            }
        } catch (Exception e) {
            System.out.println("Invalid argument: " + args[i]);
            System.out.println(e);
            System.exit(1);
        }
    }
    ttt = new TicTacToe(gameType);
    ttt.numPlays = plays;
    if (gameType > 1) {
        if (learningType == CHRISConstants.LEARNING_ACTIVE)
            agent = new Joshua(ttt, logLevels, 1, exploration);
        else
            agent = new Joshua(ttt, logLevels, 1, exploration, skillControl);
        agent.loadLearning(data);
        ttt.setAgent(agent);
    }
    if (gameType == 3) {
        ttt.compete();
    }
}
