private void generateCode(AssemStm stm) {
    int stmType = stm.getStmType();
    if (stmType == AssemStm.MOVE) {
        AssemMove assemMove = (AssemMove) stm;
        AssemExp dstExp = assemMove.getDst();
        AssemExp srcExp = assemMove.getSrc();
        int dstExpType = dstExp.getExpType();
        if (dstExpType == AssemExp.MEM) {
            // The destination is a memory address
            AssemMemory dstMemory = (AssemMemory) dstExp;
            AssemExp memChild = dstMemory.getMemExp();
            int memChildType = memChild.getExpType();
            if (memChildType == AssemExp.BIN_OP) {
                AssemBinOpExp opExp = (AssemBinOpExp) memChild;
                munchMoveMemBinOpDstStm(opExp, srcExp);
            } else if (memChildType == AssemExp.TEMP) {
                AssemTemp assemTemp = (AssemTemp) memChild;
                munchMoveMemTempDstStm(assemTemp.getTemp(), srcExp);
            } else if (memChildType == AssemExp.CONST) {
                AssemConst assemConst = (AssemConst) memChild;
                munchMoveMemConstDstStm(assemConst, srcExp);
            } else if (memChildType == AssemExp.CALL) {
                AssemCallExp callExp = (AssemCallExp) memChild;
                munchMoveMemCallDstStm(callExp, srcExp);
            } else if (memChildType == AssemExp.MEM) {
                AssemMemory memExp = (AssemMemory) memChild;
                munchMoveMemMemDstStm(memExp, srcExp);
            }
        } else {
            // The only other possible destination of a move is a temp
            AssemTemp assemTemp = (AssemTemp) dstExp;
            munchMoveTempDestStm(assemTemp.getTemp(), srcExp);
        }
    } else if (stmType == AssemStm.CJUMP) {
        AssemCJump cjump = (AssemCJump) stm;
        munchCJumpStm(cjump);
    } else if (stmType == AssemStm.JUMP) {
        AssemJump jump = (AssemJump) stm;
        munchJumpStm(jump);
    } else if (stmType == AssemStm.LABEL) {
        AssemLabel lbl = (AssemLabel) stm;
        munchLblStm(lbl);
    }
}
