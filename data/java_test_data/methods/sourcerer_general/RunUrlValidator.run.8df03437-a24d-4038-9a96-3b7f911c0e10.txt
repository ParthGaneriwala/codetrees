public void run() {
    try {
        rs = data.QueryResult();
        while (rs.next()) {
            ListOfUrls.add(UrlNumber, rs.getString(1));
            UrlNumber++;
        }
    } catch (IOException ioe) {
        ioe.printStackTrace();
    } catch (SQLException se) {
        se.printStackTrace();
    }
    try {
        data.closeAll();
    } catch (IOException ioe) {
        ioe.printStackTrace();
    }
    for (int i = 0; i < UrlNumber; i++) {
        urlValid1 = new UrlValidator(ListOfUrls.get(i).toString());
        if (!(urlValid1.exists(httpConfromtimertask))) {
            ListOfBadUrls.add(BadUrlCount, ListOfUrls.get(i).toString());
            BadUrlCount++;
            System.out.println(BadUrlCount + ": Bad URL encountered..");
        }
        if (urlValid1.exists(httpConfromtimertask) == true) {
            try {
                // System.out.println("No Problems with this url: " + i);
                ListofTitles.add(TitleNumber, (urlValid1.readTitle(ListOfUrls.get(i).toString())));
                TitleNumber++;
            // System.out.println("Title Number : "+ TitleNumber);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    for (int j = 0; j < BadUrlCount; j++) {
        // set tempDelQueryHolder to the bad url
        tempDelQueryHolder += ListOfBadUrls.get(j).toString();
        tempDelQueryHolder += "'";
        // concatanate with deletionQuery
        deletionQuery = deletionQuery + tempDelQueryHolder;
        // Before deleting - clean up the index table.
        RemoveBadData = new DataAccessObject("select urlID,title,description from url where link = '" + ListOfBadUrls.get(j).toString() + "'", false);
        int deadURLid = 0;
        String deadTitle = "";
        String deadDescription = "";
        try {
            rs = RemoveBadData.QueryResult();
            while (rs.next()) {
                deadURLid = rs.getInt("urlID");
                deadTitle = rs.getString("title");
                deadDescription = rs.getString("description");
                // call the
                StemmerStopper DelSS = new StemmerStopper();
                // Build the index on the words in title and description.
                // Process Building Index returns a Hashtable.
                Hashtable HT_pass = DelSS.Process_Building_Index(deadTitle + " " + deadDescription);
                DBDriver cleanup = new DBDriver();
                cleanup.onDelete(deadURLid, HT_pass);
                cleanup.closeAll();
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        // pass it to the new DataAccessObject
        RemoveBadData = new DataAccessObject(deletionQuery, false);
        try {
            RemoveBadData.QueryResult();
        } catch (IOException ioe) {
            System.out.println("Couldn't execute delete query: " + deletionQuery);
        }
        try {
            RemoveBadData.closeAll();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
        // reset the deletionQuery back to the base deletionQuery
        deletionQuery = "delete from url where link = ";
        tempDelQueryHolder = "'";
    }
    // retrieve values from the vector for each title and we can store to db from here with query update
    for (int k = 0; k < TitleNumber; k++) {
        System.out.println("Value of k: " + k + " " + ListofTitles.get(k));
    }
    // set url counter and bad url counter back to 0 so that it doesn't trip up the next run.
    BadUrlCount = 0;
    UrlNumber = 0;
    TitleNumber = 0;
}
