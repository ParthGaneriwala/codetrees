private BeanMapping create(BeanInfo bean) {
    Collection<? extends Annotation> annotations = bean.getAnnotations(PrimaryType.class, MixinType.class);
    if (annotations.size() != 1) {
        throw new InvalidMappingException(bean.getClassType(), "Class is not annotated with a primary type of mixin type");
    }
    // 
    Annotation mappingAnnotation = annotations.iterator().next();
    // 
    NameConflictResolution onDuplicate = NameConflictResolution.FAIL;
    NamingPolicy namingPolicy = bean.getAnnotation(NamingPolicy.class);
    if (namingPolicy != null) {
        onDuplicate = namingPolicy.onDuplicate();
    }
    // 
    ClassTypeInfo formatter = null;
    AnnotationInfo formattedBy = bean.getAnnotation(FORMATTED_BY_ANNOTATION_TYPE);
    if (formattedBy != null) {
        AnnotationParameterInfo<ClassTypeInfo> valueParameter = (AnnotationParameterInfo<ClassTypeInfo>) formattedBy.getParameter("value");
        formatter = valueParameter.getValue();
    }
    // 
    NamingPrefix namingPrefix = bean.getAnnotation(NamingPrefix.class);
    String prefix = null;
    if (namingPrefix != null) {
        prefix = namingPrefix.value();
    }
    // 
    NodeTypeKind nodeTypeKind;
    String nodeTypeName;
    boolean orderable;
    boolean abstract_;
    if (mappingAnnotation instanceof PrimaryType) {
        PrimaryType typeAnnotation = (PrimaryType) mappingAnnotation;
        nodeTypeKind = NodeTypeKind.PRIMARY;
        nodeTypeName = typeAnnotation.name();
        orderable = typeAnnotation.orderable();
        abstract_ = typeAnnotation.abstract_();
    } else {
        MixinType typeAnnotation = (MixinType) mappingAnnotation;
        nodeTypeKind = NodeTypeKind.MIXIN;
        nodeTypeName = typeAnnotation.name();
        orderable = false;
        abstract_ = true;
    }
    // 
    return new BeanMapping(bean, nodeTypeKind, nodeTypeName, onDuplicate, formatter, orderable, abstract_, prefix);
}
