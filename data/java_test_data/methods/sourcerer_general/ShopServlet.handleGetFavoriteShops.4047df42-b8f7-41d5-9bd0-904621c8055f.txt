private void handleGetFavoriteShops(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    String streamId = req.getParameter("streamid");
    if (!c2sManagerTracker.containStreamId(streamId)) {
        resp.setContentType("text/html;charset=UTF-8");
        resp.sendError(HttpServletResponse.SC_NOT_FOUND, "invalided streamId");
        return;
    }
    String username = req.getParameter("username").toLowerCase();
    String pageStr = req.getParameter("page");
    String countStr = req.getParameter("count");
    int page = pageStr == null ? 1 : Integer.parseInt(pageStr);
    int count = countStr == null ? 10 : Integer.parseInt(countStr);
    String getTotalStr = req.getParameter("gettotal");
    boolean getTotal = false;
    if (getTotalStr != null) {
        getTotal = true;
    }
    try {
        Object[] result = shopDbhelper.getFavoriteShop(username, page, count, getTotal);
        Integer resultCount = (Integer) result[0];
        UserFavoriteShop[] favoriteShops = (UserFavoriteShop[]) result[1];
        JSONArray commentsJson = new JSONArray();
        for (UserFavoriteShop favoriteShop : favoriteShops) {
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("favoriteShopId", favoriteShop.getId());
            jsonObj.put("shopId", favoriteShop.getShopId());
            jsonObj.put("shopName", favoriteShop.getShopName());
            jsonObj.put("street", favoriteShop.getStreet());
            jsonObj.put("tel", favoriteShop.getTel());
            commentsJson.put(jsonObj);
        }
        JSONObject jsonObj = new JSONObject();
        if (resultCount != null) {
            jsonObj.put("total", resultCount);
        }
        jsonObj.put("shops", commentsJson);
        resp.getWriter().write(jsonObj.toString());
    } catch (Exception e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
}
