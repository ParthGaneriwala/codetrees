/**
 * Test method for
 * {@link controller.AdminController#deleteUser(model.admin.User)}.
 */
public final void testDeleteUser() {
    try {
        controller.deleteUser(null);
        fail();
    } catch (AssertionError e) {
    }
    assertFalse("Can't delete a non-existant user", controller.deleteUser("User1"));
    try {
        controller.getUser(null);
        fail();
    } catch (AssertionError e) {
    }
    assertTrue(controller.addUser("User1"));
    User user = controller.getUser("User1");
    user.addTestGroupAssignment();
    assertFalse("can't change tester role on user who's a defect tester", controller.setTesterRole("User1", false));
    assertFalse("Can't delete a user with a TestGroup assigned", controller.deleteUser("User1"));
    assertEquals("Should have admin and user1", 2, controller.getUsers().size());
    user.removeTestGroupAssignment();
    user.addCommentsCreator();
    assertFalse("can't delete a user who's created a comment", controller.deleteUser("User1"));
    assertEquals(2, controller.getUsers().size());
    user.removeCommentsCreator();
    user.addDefectCreator();
    assertFalse("can't delete a user who's a defect creator", controller.deleteUser("User1"));
    assertEquals(2, controller.getUsers().size());
    user.removeDefectCreator();
    user.addDefectDeveloper();
    assertFalse("can't change defect role on user who's a defect developer", controller.setDeveloperRole("User1", false));
    assertFalse("can't delete a user who's a defect developer", controller.deleteUser("User1"));
    assertEquals(2, controller.getUsers().size());
    user.removeDefectDeveloper();
    user.addDefectTester();
    assertFalse("can't delete a user who's a defect tester", controller.deleteUser("User1"));
    assertEquals(2, controller.getUsers().size());
    user.removeDefectTester();
    assertTrue("should be able to remove a user with no privileges", controller.deleteUser("User1"));
    assertEquals(1, controller.getUsers().size());
}
