private static Assignment populateAssignment(Task task, Requirement requirement, Connection db, int indent, int folderId) throws SQLException {
    Assignment assignment = new Assignment();
    assignment.setProjectId(requirement.getProjectId());
    assignment.setRequirementId(requirement.getId());
    assignment.setIndent(indent);
    assignment.setEnteredBy(requirement.getModifiedBy());
    assignment.setModifiedBy(requirement.getModifiedBy());
    assignment.setFolderId(folderId);
    // Task description
    assignment.setRole(task.getName());
    // Status (Not Started -- default)
    assignment.setStatusId(1);
    Number percentComplete = task.getPercentageComplete();
    assignment.setPercentComplete(percentComplete.intValue());
    if (percentComplete.intValue() > 0) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("   percent: " + percentComplete.toString());
        }
        // In progress
        assignment.setStatusId(2);
        if (percentComplete.intValue() == 100) {
            // Complete
            assignment.setStatusId(5);
        }
    }
    assignment.setPriorityId(2);
    Priority priority = task.getPriority();
    if (priority != null) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("   priority: " + priority.getValue());
        }
        if (priority.getValue() > 0 && priority.getValue() < 500) {
            assignment.setPriorityId(1);
        } else if (priority.getValue() > 500) {
            assignment.setPriorityId(3);
        }
    }
    Date estStartDate = task.getStart();
    if (estStartDate != null) {
        assignment.setEstStartDate(new Timestamp(estStartDate.getTime()));
    }
    Date dueDate = task.getFinish();
    if (dueDate != null) {
        assignment.setDueDate(new Timestamp(dueDate.getTime()));
    }
    Duration estimatedDuration = task.getDuration();
    if (estimatedDuration != null) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("   estimatedLOE: " + estimatedDuration.toString());
        }
        assignment.setEstimatedLoe(estimatedDuration.toString());
    }
    Date startDate = task.getActualStart();
    if (startDate != null) {
        assignment.setStartDate(new Timestamp(startDate.getTime()));
    }
    Date completeDate = task.getActualFinish();
    if (completeDate != null) {
        assignment.setCompleteDate(new Timestamp(completeDate.getTime()));
    }
    Duration actualDuration = task.getActualDuration();
    if (actualDuration != null) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("   actualLOE: " + actualDuration.toString());
        }
        assignment.setActualLoe(actualDuration.toString());
    }
    assignment.setAdditionalNote(task.getNotes());
    // Display who is responsible (or add as users)
    StringBuffer assigned = new StringBuffer();
    for (ResourceAssignment resourceAssigned : task.getResourceAssignments()) {
        Resource resource = resourceAssigned.getResource();
        if (!resource.getNull()) {
            if (System.getProperty("DEBUG") != null) {
                System.out.println("   resource");
                System.out.println("    id: " + resource.getUniqueID());
                System.out.println("    name: " + resource.getName());
                System.out.println("    email: " + resource.getEmailAddress());
            }
            boolean match = false;
            // TODO: lookup and associate if a user of the system
            String resourceEmail = resource.getEmailAddress();
            if (resourceEmail != null) {
                int userId = User.getIdByEmailAddress(db, resourceEmail);
                if (userId > -1) {
                    assignment.addUser(userId);
                    match = true;
                }
            }
            if (!match) {
                String resourceName = resource.getName();
                if (resourceName != null) {
                    if (assigned.length() > 0) {
                        assigned.append(System.getProperty("line.separator"));
                    }
                    assigned.append(resourceName);
                }
            }
        }
    }
    if (assigned.length() > 0) {
        assignment.setResponsible(assigned.toString());
    }
    return assignment;
}
