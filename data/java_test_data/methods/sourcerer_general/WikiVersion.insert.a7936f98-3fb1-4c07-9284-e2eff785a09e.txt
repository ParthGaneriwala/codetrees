public boolean insert(Connection db) throws SQLException {
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO project_wiki_version " + "(" + (id > -1 ? "version_id, " : "") + "wiki_id, content, enabled, read_count, summary, lines_added, lines_changed, lines_deleted, size, lines_total, ");
        if (entered != null) {
            sql.append("entered, ");
        }
        sql.append("enteredby) ");
        sql.append("VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ");
        if (id > -1) {
            sql.append("?, ");
        }
        if (entered != null) {
            sql.append("?, ");
        }
        sql.append("?) ");
        int i = 0;
        // Insert the page
        PreparedStatement pst = db.prepareStatement(sql.toString());
        if (id > -1) {
            pst.setInt(++i, id);
        }
        pst.setInt(++i, wikiId);
        pst.setString(++i, content);
        pst.setBoolean(++i, enabled);
        pst.setInt(++i, readCount);
        pst.setString(++i, summary);
        pst.setInt(++i, linesAdded);
        pst.setInt(++i, linesChanged);
        pst.setInt(++i, linesDeleted);
        pst.setInt(++i, size);
        pst.setInt(++i, linesTotal);
        if (entered != null) {
            pst.setTimestamp(++i, entered);
        }
        pst.setInt(++i, enteredBy);
        pst.execute();
        pst.close();
        if (commit) {
            db.commit();
        }
        id = DatabaseUtils.getCurrVal(db, "project_wiki_version_version_id_seq", id);
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        throw new SQLException(e.getMessage());
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return true;
}
