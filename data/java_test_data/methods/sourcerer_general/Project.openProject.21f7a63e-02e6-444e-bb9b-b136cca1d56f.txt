public static Project openProject(String projectPath, Component parent) {
    String startingPackageName;
    File projectDir;
    File startingDir;
    try {
        startingDir = pathIntoStartingDirectory(projectPath);
    } catch (IOException ioe) {
        Debug.message("could not resolve directory " + projectPath);
        // ioe.printStackTrace();
        return null;
    }
    if (startingDir == null) {
        // Debug.message("attempt to open " + projectPath + " as a project failed");
        return null;
    }
    // right point)
    if (Package.isPackage(startingDir)) {
        File curDir = startingDir;
        File lastDir = null;
        startingPackageName = "";
        while ((curDir != null) && Package.isPackage(curDir)) {
            if (lastDir != null) {
                String lastdirName = lastDir.getName();
                if (!JavaNames.isIdentifier(lastdirName)) {
                    break;
                }
                startingPackageName = "." + lastdirName + startingPackageName;
            }
            lastDir = curDir;
            curDir = curDir.getParentFile();
        }
        if (startingPackageName.length() > 0) {
            if (startingPackageName.charAt(0) == '.') {
                startingPackageName = startingPackageName.substring(1);
            }
        }
        // lastDir is now the directory holding the topmost bluej
        // package file in the directory heirarchy
        projectDir = lastDir;
        if (projectDir == null) {
            projectDir = startingDir;
        }
    } else {
        // Debug.message("no BlueJ package file found in directory " + startingDir);
        return null;
    }
    // check whether it already exists
    Project proj = (Project) projects.get(projectDir);
    if (proj == null) {
        proj = new Project(projectDir);
        projects.put(projectDir, proj);
    }
    if (startingPackageName.equals("")) {
        Package startingPackage = proj.getPackage("");
        while (startingPackage != null) {
            Package sub = startingPackage.getBoringSubPackage();
            if (sub == null) {
                break;
            }
            startingPackage = sub;
        }
        proj.initialPackageName = startingPackage.getQualifiedName();
    } else {
        proj.initialPackageName = startingPackageName;
    }
    if (Config.isWinOSVista()) {
        WriteCapabilities capabilities = FileUtility.getVistaWriteCapabilities(projectDir);
        switch(capabilities) {
            case VIRTUALIZED_WRITE:
                DialogManager.showMessage(parent, "project-is-virtualized");
                break;
            case READ_ONLY:
                DialogManager.showMessage(parent, "project-is-readonly");
                break;
            case NORMAL_WRITE:
                break;
            default:
                break;
        }
    } else if (!projectDir.canWrite()) {
        DialogManager.showMessage(parent, "project-is-readonly");
    }
    ExtensionsManager.getInstance().projectOpening(proj);
    return proj;
}
