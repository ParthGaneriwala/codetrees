public void actionPerformed(ActionEvent evnt) {
    String command = evnt.getActionCommand();
    if (command.equals("check")) {
        String regex = regexArea.getText();
        if (regex.length() > 0) {
            String regexResolved = sh.replaceMacros(regex, "");
            System.out.println(regexResolved);
            Pair[] longestMacros = sh.get3CurrentPatternLongestMacros();
            if ("aca".equals(getSelection(group).getActionCommand())) {
                regexResolved = '"' + regexResolved + '"';
            } else {
                regexResolved = regexResolved.replaceAll("_", "\\\\b");
            }
            regexResolved = regexResolved.replaceAll("&backslash;", "\\\\");
            regexResolved = regexResolved.replaceAll("&dollar;", "\\$");
            regexResolved = regexResolved.replaceAll("&amp;", "&");
            regexResolved = regexResolved.replaceAll("&lt;", "<");
            regexResolved = regexResolved.replaceAll("&gt;", ">");
            String stringToMatch = questionTextArea.getText();
            // remove accents, as in new versions of BoB
            stringToMatch = DialogueManager.removeAccents(stringToMatch);
            // show replaced text in UI
            questionTextArea.setText(stringToMatch);
            Reader reader;
            Bob_Lexer lexer;
            Bob_Parser parser;
            Bob_TreeParser treeparser;
            try {
                reader = new StringReader(regexResolved);
                lexer = new Bob_Lexer(reader);
                parser = new Bob_Parser(lexer);
                parser.setASTNodeClass("it.unibz.lib.bob.check.MyAST");
                treeparser = new Bob_TreeParser();
                treeparser.setASTNodeClass("it.unibz.lib.bob.check.MyAST");
                parser.bExpression();
                MyAST tree = (MyAST) parser.getAST();
                // Fehler zurï¿½cksetzen
                regexArea.setBackground(Color.WHITE);
                textArea.setText("Enter regular expression and corresponding user question, then hit the 'check' button.");
                if (astFrame != null) {
                    astFrame.removeAll();
                    astFrame.setVisible(false);
                }
                astFrame = new ASTFrame("Regular Expression", tree);
                astFrame.setVisible(true);
                if (treeparser.bExpression(tree, stringToMatch) == true) {
                    questionTextArea.setBackground(Color.GREEN);
                } else
                    questionTextArea.setBackground(Color.ORANGE);
            } catch (RecognitionException e) {
                textArea.setText("Error in boolean part of regular expression (i.e., outside of the double quotes): " + e.toString());
                regexArea.setBackground(Color.RED);
            } catch (TokenStreamException e) {
                textArea.setText("Error in boolean part of regular expression (i.e., outside of the double quotes): " + e.toString());
                regexArea.setBackground(Color.RED);
            } catch (ANTLRException e) {
                textArea.setText("Error in boolean part of regular expression (i.e., outside of the double quotes): " + e.toString());
                regexArea.setBackground(Color.RED);
            } catch (Exception e) {
                if (e.getMessage().endsWith("Expression is too large.")) {
                    textArea.setText("Error in Perl regex part of regular expression (i.e., inside the double quotes): Pattern is too complex!\n" + "\nThese are the 3 longest macros used in this pattern (to be removed by hand, or shortened considerably):\n" + longestMacros[0].getMacro() + " -> " + longestMacros[0].getLength() + "\n" + longestMacros[1].getMacro() + " -> " + longestMacros[1].getLength() + "\n" + longestMacros[2].getMacro() + " -> " + longestMacros[2].getLength());
                } else {
                    textArea.setText("Other error in Perl regex part of regular expression (i.e., inside the double quotes):\n" + e.toString());
                }
                regexArea.setBackground(Color.RED);
            }
        }
    }
    if (command.equals("reload")) {
        loadMacroFile();
    }
}
