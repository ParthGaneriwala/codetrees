public void testParseEntryWithSymlink() {
    FTPClientConfig config = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
    config.setDefaultDateFormatStr("yyyy-MM-dd HH:mm");
    UnixFTPEntryParser parser = new UnixFTPEntryParser();
    parser.configure(config);
    FTPFile f = parser.parseFTPEntry("lrwxrwxrwx   1 neeme neeme    23 2005-03-02 18:06 macros");
    assertNotNull("Could not parse entry.", f);
    assertFalse("Is not a directory.", f.isDirectory());
    assertTrue("Is a symbolic link", f.isSymbolicLink());
    assertTrue("Should have user read permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION));
    assertTrue("Should have user write permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION));
    assertTrue("Should have user execute permission.", f.hasPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION));
    assertTrue("Should have group read permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.READ_PERMISSION));
    assertTrue("Should have group write permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.WRITE_PERMISSION));
    assertTrue("Should have group execute permission.", f.hasPermission(FTPFile.GROUP_ACCESS, FTPFile.EXECUTE_PERMISSION));
    assertTrue("Should have world read permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.READ_PERMISSION));
    assertTrue("Should have world write permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.WRITE_PERMISSION));
    assertTrue("Should have world execute permission.", f.hasPermission(FTPFile.WORLD_ACCESS, FTPFile.EXECUTE_PERMISSION));
    assertEquals(1, f.getHardLinkCount());
    assertEquals("neeme", f.getUser());
    assertEquals("neeme", f.getGroup());
    assertEquals("macros", f.getName());
    assertEquals(23, f.getSize());
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.MONTH, Calendar.MARCH);
    cal.set(Calendar.DATE, 2);
    cal.set(Calendar.HOUR_OF_DAY, 18);
    cal.set(Calendar.MINUTE, 06);
    cal.set(Calendar.SECOND, 0);
    cal.set(Calendar.YEAR, 2005);
    assertEquals(df.format(cal.getTime()), df.format(f.getTimestamp().getTime()));
}
