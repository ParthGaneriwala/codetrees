public static void collidePolygonAndCircle(BBManifold manifold, final BBPolygonShape polygon, final BBTransform xf1, final BBCircleShape circle, final BBTransform xf2) {
    manifold.m_pointCount = 0;
    // Compute circle position in the frame of the polygon.
    BBVec2 c = mul(xf2, circle.m_p);
    BBVec2 cLocal = mulT(xf1, c);
    // Find the min separating edge.
    int normalIndex = 0;
    float separation = -FLT_MAX;
    float radius = polygon.m_radius + circle.m_radius;
    int vertexCount = polygon.m_vertexCount;
    final BBVec2[] vertices = polygon.m_vertices;
    final BBVec2[] normals = polygon.m_normals;
    for (int i = 0; i < vertexCount; ++i) {
        float s = dot(normals[i], sub(cLocal, vertices[i]));
        if (s > radius) {
            // Early out.
            return;
        }
        if (s > separation) {
            separation = s;
            normalIndex = i;
        }
    }
    // Vertices that subtend the incident face.
    int vertIndex1 = normalIndex;
    int vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;
    BBVec2 v1 = vertices[vertIndex1];
    BBVec2 v2 = vertices[vertIndex2];
    // If the center is inside the polygon ...
    if (separation < FLT_EPSILON) {
        manifold.m_pointCount = 1;
        manifold.m_type = BBManifold.e_faceA;
        manifold.m_localPlaneNormal = normals[normalIndex];
        manifold.m_localPoint = mul(0.5f, add(v1, v2));
        manifold.m_points[0].m_localPoint = circle.m_p;
        manifold.m_points[0].m_id.key(0);
        return;
    }
    // Compute barycentric coordinates
    float u1 = dot(sub(cLocal, v1), sub(v2, v1));
    float u2 = dot(sub(cLocal, v2), sub(v1, v2));
    if (u1 <= 0.0f) {
        if (distanceSquared(cLocal, v1) > radius * radius) {
            return;
        }
        manifold.m_pointCount = 1;
        manifold.m_type = BBManifold.e_faceA;
        manifold.m_localPlaneNormal = sub(cLocal, v1);
        manifold.m_localPlaneNormal.normalize();
        manifold.m_localPoint = v1;
        manifold.m_points[0].m_localPoint = circle.m_p;
        manifold.m_points[0].m_id.key(0);
    } else if (u2 <= 0.0f) {
        if (distanceSquared(cLocal, v2) > radius * radius) {
            return;
        }
        manifold.m_pointCount = 1;
        manifold.m_type = BBManifold.e_faceA;
        manifold.m_localPlaneNormal = sub(cLocal, v2);
        manifold.m_localPlaneNormal.normalize();
        manifold.m_localPoint = v2;
        manifold.m_points[0].m_localPoint = circle.m_p;
        manifold.m_points[0].m_id.key(0);
    } else {
        BBVec2 faceCenter = mul(0.5f, add(v1, v2));
        separation = dot(sub(cLocal, faceCenter), normals[vertIndex1]);
        if (separation > radius) {
            return;
        }
        manifold.m_pointCount = 1;
        manifold.m_type = BBManifold.e_faceA;
        manifold.m_localPlaneNormal = normals[vertIndex1];
        manifold.m_localPoint = faceCenter;
        manifold.m_points[0].m_localPoint = circle.m_p;
        manifold.m_points[0].m_id.key(0);
    }
}
