public void testNullAsserts() {
    if (!testedDefectFilter) {
        testDefectFilter();
    }
    DefectFilter empty = new DefectFilter();
    try {
        controller.getDefectFilter().getProductSelector().matchesProduct(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getBuildSelector().matchesBuild(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getModuleSelector().matchesModule(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getSeveritySelector().matchesSeverity(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getStatusSelector().matchesDefectStatus(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getPrioritySelector().matchesPriority(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getCreatorSelector().matchesUser(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getTesterSelector().matchesUser(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getDeveloperSelector().matchesUser(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().getIDSelector().matchesID(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.matches(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getProductSelector().matchesProduct(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getBuildSelector().matchesBuild(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getModuleSelector().matchesModule(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getSeveritySelector().matchesSeverity(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getStatusSelector().matchesDefectStatus(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getPrioritySelector().matchesPriority(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getCreatorSelector().matchesUser(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getTesterSelector().matchesUser(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getDeveloperSelector().matchesUser(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.getIDSelector().matchesID(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        empty.matches(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        @SuppressWarnings("unused") SpecificUserSelector noUser = new SpecificUserSelector(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        @SuppressWarnings("unused") SpecificProductSelector noProduct = new SpecificProductSelector(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        @SuppressWarnings("unused") SpecificModuleSelector noModule = new SpecificModuleSelector(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        @SuppressWarnings("unused") SpecificBuildSelector noBuild = new SpecificBuildSelector(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().setProductSelector(UnassignedProductSelector.getInstance());
        controller.getDefectFilter().getProductSelector().matchesProduct(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().setModuleSelector(UnassignedModuleSelector.getInstance());
        controller.getDefectFilter().getModuleSelector().matchesModule(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().setBuildSelector(UnassignedBuildSelector.getInstance());
        controller.getDefectFilter().getBuildSelector().matchesBuild(null);
        fail();
    } catch (AssertionError e) {
    }
    try {
        controller.getDefectFilter().setCreatorSelector(UnassignedUserSelector.getInstance());
        controller.getDefectFilter().getCreatorSelector().matchesUser(null);
        fail();
    } catch (AssertionError e) {
    }
}
