public List<GenTypeClass> getSuperTypes() {
    checkLoaded();
    List rlist = new ArrayList();
    if (JdiUtils.getJdiUtils().genericSignature(rclass) == null) {
        if (rclass instanceof ClassType) {
            ClassType ctClass = (ClassType) rclass;
            // superclass
            Reflective r = new JdiReflective(ctClass.superclass());
            rlist.add(new GenTypeClass(r));
            // interfaces
            List interfaces = ctClass.interfaces();
            for (Iterator i = interfaces.iterator(); i.hasNext(); ) {
                r = new JdiReflective((InterfaceType) i.next());
                rlist.add(new GenTypeClass(r));
            }
            return rlist;
        } else {
            // rclass must be an InterfaceType
            InterfaceType itClass = (InterfaceType) rclass;
            List interfaces = itClass.superinterfaces();
            for (Iterator i = interfaces.iterator(); i.hasNext(); ) {
                Reflective r = new JdiReflective((InterfaceType) i.next());
                rlist.add(new GenTypeClass(r));
            }
            // interfaces with no direct superinterfaces have a supertype of Object
            if (rlist.isEmpty()) {
                rlist.add(new GenTypeClass(new JdiReflective("java.lang.Object", this.rclass)));
            }
            return rlist;
        }
    }
    // A generic signature for a type looks something like:
    // <..type params..>Lbase/class<...>;...interfaces...
    // First, skip over the type params in the supertype:
    StringIterator s = new StringIterator(JdiUtils.getJdiUtils().genericSignature(rclass));
    List l = getTypeParams(s);
    Map declTpars = new HashMap();
    for (Iterator i = l.iterator(); i.hasNext(); ) {
        GenTypeDeclTpar declTpar = (GenTypeDeclTpar) i.next();
        declTpars.put(declTpar.getTparName(), declTpar);
    }
    // go through each base type in turn.
    while (s.hasNext()) {
        // We now have a base.
        GenTypeClass t = (GenTypeClass) fromSignature(s, declTpars, rclass);
        rlist.add(t);
    }
    return rlist;
}
