@Test(timeout = DEFAULT_TEST_TIMEOUT)
public void testRunSameTaskSimultaneously() throws InterruptedException {
    Task task = new Task("name", "groupName", "sysExecJob", false, true, "sleep 5", defaultTimerSchedule);
    taskManager.save(task);
    schedulerManager.runTaskNow(task);
    // give task time to get started
    Thread.sleep(1000);
    assertTrue(taskRunManager.isRunning(task.getId()));
    try {
        schedulerManager.runTaskNow(task);
        fail("Should not be able to run the same task simultaneously");
    } catch (ScheduleException e) {
    // expected
    }
    waitForTask(task);
    assertFalse(taskRunManager.isRunning(task.getId()));
    List<TaskRun> taskRuns = taskRunManager.findByTaskId(task.getId());
    assertEquals(1, taskRuns.size());
    TaskRun taskRun = taskRuns.get(0);
    assertEquals(Status.SUCCESS, taskRun.getStatus());
    // now that task has finished, try run it again
    schedulerManager.runTaskNow(task);
    // give task time to get started
    Thread.sleep(1000);
    assertTrue(taskRunManager.isRunning(task.getId()));
    waitForTask(task);
    assertFalse(taskRunManager.isRunning(task.getId()));
    taskRuns = taskRunManager.findByTaskId(task.getId());
    assertEquals(2, taskRuns.size());
    assertEquals(Status.SUCCESS, taskRuns.get(0).getStatus());
    assertEquals(Status.SUCCESS, taskRuns.get(1).getStatus());
}
