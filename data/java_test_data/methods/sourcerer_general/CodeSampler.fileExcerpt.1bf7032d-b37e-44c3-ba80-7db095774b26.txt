private String fileExcerpt(String fileName, String snippetName, boolean asIs) {
    boolean itFailed = false;
    int iLine = 1;
    StringBuffer result = new StringBuffer();
    if (!asIs)
        result.append("<pre>\n");
    BufferedReader inp = null;
    try {
        inp = new BufferedReader(new FileReader(fileName));
    } catch (FileNotFoundException e) {
        e.printStackTrace();
        System.err.println("FileNotFoundException in " + getName() + " taglet " + "while trying to open the file: " + fileName);
        if (null != snippetName)
            System.err.print(" to retrieve the excerpt named " + snippetName);
        System.exit(0);
    }
    boolean startLineSeen = (null == snippetName);
    boolean endLineSeen = false;
    String commonWhitespacePrefix = null;
    try {
        for (String s = inp.readLine(); s != null; s = inp.readLine()) {
            if (null != snippetName && s.startsWith(BEGIN_SNIPPET + snippetName))
                startLineSeen = true;
            else if (null != snippetName && s.startsWith(END_SNIPPET + snippetName))
                endLineSeen = true;
            else if (s.startsWith(BEGIN_SNIPPET) || s.startsWith(END_SNIPPET))
                continue;
            else if (startLineSeen && !endLineSeen) {
                if (!asIs) {
                    if (null == commonWhitespacePrefix) {
                        // we assume that any whitespace at the beginning of first line is
                        // common to all lines (if first line contains tabs and rest do not (or
                        // visa versa), or if first line is indented more than subsequent lines
                        // (unlikely with most code excerpts) this won't work right. But it
                        // usually works as expected, zapping the common leading whitespace from the excerpt.
                        commonWhitespacePrefix = (s.split("\\S", 2))[0];
                        commonWhitespacePrefix = "^" + commonWhitespacePrefix;
                    }
                    s = s.replaceFirst(commonWhitespacePrefix, "");
                    // directives, I guess)
                    if (s.trim().startsWith("@SuppressWarnings"))
                        s = s.replaceFirst("@SuppressWarnings\\(\"\\w+\"\\)\\s*", "");
                    // needed to support code samples that include HTML
                    s = s.replaceAll("\\&", "&amp;");
                    s = s.replaceAll("\\<", "&lt;");
                    s = s.replaceAll("\\>", "&gt;");
                }
                // else just insert text as is without any special encoding
                result.append(s);
                result.append("\n");
            }
            iLine++;
        }
    } catch (IOException e) {
        e.printStackTrace();
        System.err.println("IOException while trying to read line #" + iLine + " of file " + fileName + " in the " + getName() + " taglet");
        if (null != snippetName)
            System.err.print(" within the excerpt named " + snippetName);
        itFailed = true;
    } finally {
        try {
            inp.close();
        } catch (IOException e) {
            if (!itFailed)
                e.printStackTrace();
            System.err.println("IOException while trying to close the file: " + fileName + " in the " + getName() + " taglet.");
            itFailed = true;
        }
    }
    if (!itFailed && !startLineSeen) {
        itFailed = true;
        System.err.println("Could not find snippet \"" + snippetName + "\" within the " + "file " + fileName + " as referenced in the " + getName() + " taglet");
    }
    if (itFailed)
        System.exit(0);
    if (!asIs)
        result.append("</pre>\n");
    return result.toString();
}
