public void depOperateur() {
    int op = ((Integer) operateurs.pop()).intValue();
    switch(op) {
        case M_PLUS:
            str.append("\n;add");
            str.append("\n\tpop ax");
            str.append("\n\tpop bx");
            str.append("\n\tadd ax,bx");
            str.append("\n\tpush ax");
            break;
        case M_SOUS:
            str.append("\n;sous");
            str.append("\n\tpop bx");
            str.append("\n\tpop ax");
            str.append("\n\tsub ax,bx");
            str.append("\n\tpush ax");
            break;
        case M_MUL:
            str.append("\n;mul");
            str.append("\n\tpop bx");
            str.append("\n\tpop ax");
            str.append("\n\timul ax");
            str.append("\n\tpush ax");
            break;
        case M_DIV:
            str.append("\n;div");
            str.append("\n\tpop bx");
            str.append("\n\tpop ax");
            str.append("\n\tcwd");
            str.append("\n\tidiv ax");
            str.append("\n\tpush ax");
            break;
        case M_MOINS:
            str.append("\n;moins");
            str.append("\n\tpop bx");
            str.append("\n\tmov ax,0");
            str.append("\n\tsub ax,bx");
            str.append("\n\tpush ax");
            break;
        case M_OU:
            str.append("\n;ou");
            str.append("\n\tpop ax");
            str.append("\n\tpop bx");
            str.append("\n\tor ax,bx");
            str.append("\n\tpush ax");
            break;
        case M_AND:
            str.append("\n;et");
            str.append("\n\tpop ax");
            str.append("\n\tpop bx");
            str.append("\n\tand ax,bx");
            str.append("\n\tpush ax");
            break;
        case M_NON:
            str.append("\n;non");
            str.append("\n\tpop ax");
            // � v�rifier!!!!!!
            str.append("\n\tnot ax");
            str.append("\n\tpush ax");
            break;
    }
    // ecriture dans le fichier
    ecrireFichier();
}
