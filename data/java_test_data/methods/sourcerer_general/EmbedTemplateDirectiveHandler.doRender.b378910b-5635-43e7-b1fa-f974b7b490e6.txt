public void doRender(Context context, String directiveName, Object param) throws Exception {
    String templateName = null;
    String templateEncoding = null;
    if (param instanceof String) {
        templateName = (String) param;
    } else if (param instanceof List) {
        // assert(list != null);
        List list = (List) param;
        Assert.assertTrue(list.size() == 2, "EmbedTemplateDirectiveHandler.parameter.error", new Object[] { param });
        Assert.assertTrue(list.get(0) instanceof String, "EmbedTemplateDirectiveHandler.parameter.error", new Object[] { param });
        Assert.assertTrue(list.get(1) instanceof String, "EmbedTemplateDirectiveHandler.parameter.error", new Object[] { param });
        templateName = (String) list.get(0);
        templateEncoding = (String) list.get(1);
    } else {
        Assert.fail("EmbedTemplateDirectiveHandler.parameter.error", new Object[] { param });
    }
    Assert.assertNotEmpty(templateName, "EmbedTemplateDirectiveHandler.template.name.required");
    String zoneName = null;
    int index = templateName.indexOf('#');
    if (index >= 0) {
        zoneName = templateName.substring(index + 1);
        templateName = templateName.substring(0, index);
    }
    Template template;
    if (localizedLookup)
        template = context.getTemplateLoader().getTemplate(templateName, context.getLocale(), templateEncoding);
    else
        template = context.getTemplateLoader().getTemplate(templateName, templateEncoding);
    // assert(template != null);
    templateName = template.getName();
    // 循环内嵌检测
    Assert.assertTrue(context.findTemplate(templateName) == null, "EmbedTemplateDirectiveHandler.cycle.embed", new Object[] { templateName, context.getCurrentTemplate() });
    if (zoneName != null && zoneName.length() > 0) {
        List elements = BlockDirectiveVisitor.findBlockDirectiveElements(template, "zone", zoneName, context);
        Assert.assertNotEmpty(elements, "EmbedTemplateDirectiveHandler.template.zone.not.found", new Object[] { templateName, zoneName });
        DirectiveUtils.renderAll(elements, context);
    } else {
        template.render(context);
    }
}
