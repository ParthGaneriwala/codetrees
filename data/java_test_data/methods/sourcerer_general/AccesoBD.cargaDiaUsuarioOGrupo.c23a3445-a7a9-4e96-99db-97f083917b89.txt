private Dia cargaDiaUsuarioOGrupo(final String sql) throws SQLException {
    Hashtable<Comida.tipoComida, Comida> comidas = new Hashtable<Comida.tipoComida, Comida>();
    st = con.createStatement();
    rs = st.executeQuery(sql);
    while (rs.next()) {
        Hashtable<Plato.tipoPlato, Plato> platos = new Hashtable<Plato.tipoPlato, Plato>();
        Comida.tipoComida tC = Comida.tipoComida.valueOf(rs.getString("hora"));
        Receta rEntrante = creaReceta(rs.getString("receta1"));
        Plato entrante = null;
        if (rEntrante != null) {
            entrante = new Plato(rEntrante, Math.round(rs.getFloat("cantidad1")));
            platos.put(Plato.tipoPlato.entrante, entrante);
        }
        Receta rPrimero = creaReceta(rs.getString("receta2"));
        Plato primero = null;
        if (rPrimero != null) {
            primero = new Plato(rPrimero, Math.round(rs.getFloat("cantidad2")));
            platos.put(Plato.tipoPlato.primero, primero);
        }
        Receta rSegundo = creaReceta(rs.getString("receta3"));
        Plato segundo = null;
        if (rSegundo != null) {
            segundo = new Plato(rSegundo, Math.round(rs.getFloat("cantidad3")));
            platos.put(Plato.tipoPlato.segundo, segundo);
        }
        Receta rPostre = creaReceta(rs.getString("receta4"));
        Plato postre = null;
        if (rPostre != null) {
            postre = new Plato(rPostre, Math.round(rs.getFloat("cantidad4")));
            platos.put(Plato.tipoPlato.postre, postre);
        }
        Comida comida = new Comida(tC, platos);
        comidas.put(tC, comida);
    }
    return new Dia(comidas);
}
