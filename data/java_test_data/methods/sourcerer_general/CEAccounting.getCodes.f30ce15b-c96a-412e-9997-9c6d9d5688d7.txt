@SuppressWarnings("unchecked")
@Override
public List<Code> getCodes(String jobNum) throws Exception {
    Expression e = ExpressionFactory.matchExp(Jccat.JOBNUM_PROPERTY, jobNum);
    e = e.andExp(ExpressionFactory.noMatchExp(Jccat.CATNUM_PROPERTY, null));
    SelectQuery s = new SelectQuery(Jccat.class, e);
    s.addOrdering(Jccat.PHASENUM_PROPERTY, true);
    s.addOrdering(Jccat.CATNUM_PROPERTY, true);
    List<Code> codes = new ArrayList<Code>();
    Hashtable<String, Double> types = new Hashtable<String, Double>();
    double amount;
    Jccat cat;
    Code code;
    String key;
    if (map == null)
        initMap();
    Overhead oh = null;
    for (Iterator<String> i = map.keySet().iterator(); i.hasNext(); ) {
        types.put(i.next(), new Double(0));
    }
    for (Iterator cats = context.performQuery(s).iterator(); cats.hasNext(); ) {
        cat = (Jccat) cats.next();
        if (oh == null)
            oh = new Overhead(cat.getJob());
        for (short i = 1; i <= 16; i++) {
            key = map(i);
            if (key != null) {
                amount = types.get(key);
                amount += cat.getBudgetAmount(i) * (oh.get(i) + 1);
                types.put(key, amount);
            }
        }
        for (Enumeration<String> keys = types.keys(); keys.hasMoreElements(); ) {
            key = keys.nextElement();
            code = new Code();
            code.setCostCode(cat.getCatnum());
            code.setDivision(cat.getPhasenum());
            code.setJobNum(cat.getJobnum());
            code.setName(cat.getName());
            code.setPhaseCode(key);
            code.setAmount(types.get(key));
            codes.add(code);
            types.put(key, 0d);
        }
    }
    return codes;
}
