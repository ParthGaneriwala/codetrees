// $ANTLR start "id_array"
public final gramaticaMM2Parser.id_array_return id_array() throws RecognitionException {
    gramaticaMM2Parser.id_array_return retval = new gramaticaMM2Parser.id_array_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token LEFT_BRACKET209 = null;
    Token RIGHT_BRACKET211 = null;
    gramaticaMM2Parser.id_return id208 = null;
    gramaticaMM2Parser.exp_aritmetica_return exp_aritmetica210 = null;
    CommonTree LEFT_BRACKET209_tree = null;
    CommonTree RIGHT_BRACKET211_tree = null;
    RewriteRuleTokenStream stream_LEFT_BRACKET = new RewriteRuleTokenStream(adaptor, "token LEFT_BRACKET");
    RewriteRuleTokenStream stream_RIGHT_BRACKET = new RewriteRuleTokenStream(adaptor, "token RIGHT_BRACKET");
    RewriteRuleSubtreeStream stream_id = new RewriteRuleSubtreeStream(adaptor, "rule id");
    RewriteRuleSubtreeStream stream_exp_aritmetica = new RewriteRuleSubtreeStream(adaptor, "rule exp_aritmetica");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:182:10: ( id ( LEFT_BRACKET exp_aritmetica RIGHT_BRACKET ) -> ^( ID_ARRAY id exp_aritmetica ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:182:12: id ( LEFT_BRACKET exp_aritmetica RIGHT_BRACKET )
        {
            pushFollow(FOLLOW_id_in_id_array2013);
            id208 = id();
            state._fsp--;
            stream_id.add(id208.getTree());
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:182:15: ( LEFT_BRACKET exp_aritmetica RIGHT_BRACKET )
            // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:182:16: LEFT_BRACKET exp_aritmetica RIGHT_BRACKET
            {
                LEFT_BRACKET209 = (Token) match(input, LEFT_BRACKET, FOLLOW_LEFT_BRACKET_in_id_array2016);
                stream_LEFT_BRACKET.add(LEFT_BRACKET209);
                pushFollow(FOLLOW_exp_aritmetica_in_id_array2018);
                exp_aritmetica210 = exp_aritmetica();
                state._fsp--;
                stream_exp_aritmetica.add(exp_aritmetica210.getTree());
                RIGHT_BRACKET211 = (Token) match(input, RIGHT_BRACKET, FOLLOW_RIGHT_BRACKET_in_id_array2020);
                stream_RIGHT_BRACKET.add(RIGHT_BRACKET211);
            }
            // AST REWRITE
            // elements: id, exp_aritmetica
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 182:58: -> ^( ID_ARRAY id exp_aritmetica )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:182:61: ^( ID_ARRAY id exp_aritmetica )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ID_ARRAY, "ID_ARRAY"), root_1);
                    adaptor.addChild(root_1, stream_id.nextTree());
                    adaptor.addChild(root_1, stream_exp_aritmetica.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
