public String save() throws Exception {
    System.out.println("PaymentsCutAction -> save() ");
    availableAmount = getAvailableAmount();
    if (paymentsCut.getAmount() <= 0 || paymentsCut.getAmount() > availableAmount || paymentsCut.getCode() == null || paymentsCut.getCode().equals("")) {
        errorMessage(getText("paymentsCut.amount") + " " + getText("errors.dynamicdoublerange") + " " + availableAmount + ".");
        return INPUT;
    }
    boolean isNew = (paymentsCut.getId() == null);
    employee = (Employee) getSession().getAttribute("employee");
    periodPaymentEmployee = periodPaymentEmployeeManager.getCurrentPeriodByIdEmployeeAndRole(employee.getId(), employee.getRoleByName("ROLE_EMPLOYEE_CUTTER").getIdRole());
    paymentsCut.setPeriodPaymentEmployee(periodPaymentEmployee);
    if (isNew) {
        paymentsCut = paymentsCutManager.save(paymentsCut);
        List<CutProcess> cutProcessList = cutProcessManager.findByEmployeePay(employee);
        Double cont = paymentsCut.getAmount();
        for (CutProcess cP : cutProcessList) {
            AsignationCutPay a = new AsignationCutPay();
            a.setCutProcess(cP);
            a.setPaymentsCut(paymentsCut);
            if (cP.getTotalCurrentAmount() < cont) {
                a.setAmountPayed(cP.getTotalCurrentAmount());
                asignationCutPayManager.save(a);
                cont = cont - cP.getTotalCurrentAmount();
                cP.setTotalCurrentAmount(0D);
                cutProcessManager.save(cP);
            } else {
                a.setAmountPayed(cont);
                asignationCutPayManager.save(a);
                cP.setTotalCurrentAmount(cP.getTotalCurrentAmount() - cont);
                cutProcessManager.save(cP);
                break;
            }
        }
        BalanceEmployee bE = new BalanceEmployee();
        bE.setPeriodPaymentEmployee(periodPaymentEmployee);
        bE.setPaymentsCut(paymentsCut);
        bE.setTypeBalance(3);
        bE.setObservation(observation);
        bE.setAmountPaid(paymentsCut.getAmount());
        bE.setDateBalance(paymentsCut.getDatePay());
        bE.setBalance(periodPaymentEmployee.getCurrentAmount() - paymentsCut.getAmount());
        bE = balanceEmployeeManager.save(bE);
        periodPaymentEmployee.setCurrentAmount(periodPaymentEmployee.getCurrentAmount() - paymentsCut.getAmount());
        periodPaymentEmployee.setAmountPayment(periodPaymentEmployee.getAmountPayment() + paymentsCut.getAmount());
        periodPaymentEmployeeManager.save(periodPaymentEmployee);
    }
    String key = (isNew) ? "paymentsCut.added" : "paymentsCut.updated";
    saveMessage(getText(key));
    System.out.println("PaymentsCutAction -> end save() ");
    return SUCCESS;
}
