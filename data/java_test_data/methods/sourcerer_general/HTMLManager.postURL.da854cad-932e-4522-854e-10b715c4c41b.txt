private boolean postURL(HttpServletRequest req) {
    String username = req.getParameter("username");
    String title = req.getParameter("title");
    String url = req.getParameter("url");
    System.out.println("URL : " + url);
    String description = req.getParameter("description");
    description = description.replace("'", "\\'");
    System.out.println("replaced:" + description);
    String category = req.getParameter("categorylist");
    String[] categories = category.split("#");
    url = validURL(url);
    UrlValidator uv = new UrlValidator(url);
    if (uv.exists(httpConn)) {
        for (int i = 0; i < categories.length; i++) {
            System.out.println(categories[i]);
        }
        try {
            System.out.println("INSERTING URL");
            String insertURL = "insert into url (link,title,description,timestamp) values ('" + url + "','" + title + "','" + description + "',NOW())";
            System.out.println(insertURL);
            if (db.execute(insertURL)) {
                int index = getIndex(url);
                String urlpostedby = "insert into urlpostedby values ('" + username + "','" + index + "')";
                System.out.println("INSERTING postedby");
                if (db.execute(urlpostedby)) {
                    if (categories.length > 0) {
                        boolean Success = false;
                        for (int i = 0; i < categories.length; i++) {
                            String urlHascategory = "insert into hascategory values ('" + index + "','" + categories[i] + "')";
                            if (db.execute(urlHascategory)) {
                                Success = true;
                            } else {
                                System.out.println("Error in executing the has categories function");
                            }
                        }
                        if (Success) {
                            StemmerStopper SS = new StemmerStopper();
                            DBDriver DB = new DBDriver();
                            // Process_Building_Index returns a Hashtable to be processes by DBDriver
                            DB.Insert_Index_inDB(SS.Process_Building_Index(title + " " + description));
                            DB.closeAll();
                        }
                    }
                    FriendsList FL = new FriendsList();
                    Vector FriendsList = new Vector();
                    FriendsList = FL.retrieveFriends(username);
                    for (int i = 0; i < FriendsList.size(); i++) {
                        RSSGenerator RSS = new RSSGenerator(FriendsList.get(i).toString());
                        RSS.runExample();
                    }
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    } else {
        return false;
    }
}
