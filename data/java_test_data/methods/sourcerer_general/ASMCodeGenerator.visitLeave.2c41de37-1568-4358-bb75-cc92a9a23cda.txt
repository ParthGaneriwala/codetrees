public boolean visitLeave(ArrayVarNode node) {
    newAddressCode(node);
    int n = node.nChildren();
    ASMCodeFragment baseAddr = removeAddressCode(node.child(n - 1));
    ASMCodeFragment[] indices = new ASMCodeFragment[100];
    for (int i = 0; i < n - 1; i++) {
        indices[i] = removeValueCode(node.child(i));
    }
    int offset1 = 4 + 4 * node.child(n - 1).getBinding().getNumberOfDim();
    // row-major!
    if (node.child(n - 1).getBinding().isReference()) {
        code.append(baseAddr);
        code.add(LoadI);
    } else {
        code.append(baseAddr);
    }
    code.add(PushI, offset1);
    // after this the address is the start address of the elements
    code.add(Add);
    // caculate offset2
    code.add(PushI, 0);
    for (int i = 0; i < n - 2; i++) {
        // index1
        code.append(indices[i]);
        code.add(Add);
        if (isMain || node.child(n - 1).getBinding().isReference()) {
            code.add(PushD, "$-main-scope-space");
        } else {
            code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
        }
        // code.add(PushD, "$-main-scope-space");
        if (node.child(n - 1).getBinding().isReference()) {
            // should pass the offset stored before not the offset of this child
            code.add(PushD, "Mem-" + RoutineTable.lookup(uniRoutineCounter).getRoutineName());
            // offset
            code.add(PushI, node.child(n - 1).getBinding().getMemoryLocation().getOffset() + 4);
            code.add(Add);
            code.add(LoadI);
        } else {
            code.add(PushI, node.child(n - 1).getBinding().getMemoryLocation().getOffset());
        }
        code.add(Add);
        // n2
        code.add(PushI, (i + 2) * 4);
        code.add(Add);
        code.add(LoadI);
        code.add(Multiply);
    }
    // indexN
    code.append(indices[n - 2]);
    code.add(Add);
    // now top of stack is the offset2
    code.add(PushI, getSize(node));
    code.add(Multiply);
    code.add(Add);
    return true;
}
