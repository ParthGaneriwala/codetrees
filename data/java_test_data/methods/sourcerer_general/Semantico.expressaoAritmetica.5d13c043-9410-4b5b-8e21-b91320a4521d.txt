public void expressaoAritmetica(String[] expressaoNormal) {
    String[] expressao = Conversor.notacaoPolonesa(expressaoNormal);
    int pilha = 0;
    this.reservarEspacoMemoria("temp");
    this.reservarEspacoMemoria("temp" + pilha);
    for (int i = 0; i < expressao.length; i++) {
        String atual = expressao[i];
        if (ehNumero(atual)) {
            this.constanteParaAcumulador(Integer.valueOf(atual));
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        } else if (!atual.equals(Token.MAIS) && !atual.equals(Token.MENOS) && !atual.equals(Token.BARRA) && !atual.equals(Token.ASTERISCO)) {
            this.memoriaParaAcumulador(atual);
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        } else {
            pilha--;
            this.memoriaParaAcumulador("temp" + pilha);
            pilha--;
            if (atual.equals(Token.MAIS))
                this.soma("temp" + pilha);
            else if (atual.equals(Token.MENOS)) {
                this.acumuladorParaMemoria("temp");
                this.memoriaParaAcumulador("temp" + pilha);
                this.subtracao("temp");
            } else if (atual.equals(Token.BARRA)) {
                this.acumuladorParaMemoria("temp");
                this.memoriaParaAcumulador("temp" + pilha);
                this.divisao("temp");
            } else if (atual.equals(Token.ASTERISCO))
                this.multiplicacao("temp" + pilha);
            this.acumuladorParaMemoria("temp" + pilha);
            pilha++;
            this.reservarEspacoMemoria("temp" + pilha);
        }
    }
}
