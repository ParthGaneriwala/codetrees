public CToken[] commonPrefixSearch(char[] str, int pos) throws IOException {
    int size = 0;
    if (log.isTraceEnabled()) {
        log.trace("input=" + new String(str, pos, str.length - pos));
        log.trace("pos=" + pos);
    }
    if (log.isTraceEnabled()) {
        log.trace("str.length=" + str.length);
        log.trace("pos2=" + pos);
    }
    int n = da.commonPrefixSearch(str, daresult, pos, 0);
    if (log.isTraceEnabled()) {
        log.trace("number of prefix = " + n);
    }
    for (int i = 0; i < n; i++) {
        int k = 0xff & daresult[i];
        int p = daresult[i] >> 8;
        // check p,k; >>
        if (log.isTraceEnabled()) {
            log.trace("token location = " + p);
        }
        // tfd.seek((long)((p+3)*Token.SIZE));
        tfd.seek((int) ((p + 3) * CToken.SIZE));
        for (int j = 0; j < k; j++) {
            result[size] = new CToken();
            result[size].read(tfd);
            // with MkChaDic
            if (log.isTraceEnabled()) {
                log.trace("----found----");
                log.trace("posInfo=" + this.getPosInfo(result[size].posID));
                log.trace("rcAttr2=" + result[size].rcAttr2);
                log.trace("rcAttr1=" + result[size].rcAttr1);
                log.trace("lcAttr=" + result[size].lcAttr);
                log.trace("length=" + result[size].length);
                log.trace("cost=" + result[size].cost);
            }
            size++;
        }
    }
    // null terminate
    result[size] = null;
    return result;
}
