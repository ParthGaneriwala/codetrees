public List<HWChrLog> parseHWChrFile(ErrorFile file) {
    long now = System.currentTimeMillis();
    java.io.BufferedReader br = null;
    int handledLines = file.getHandleLines();
    LOG.info(file.getDestfile() + "已经处理过" + handledLines + "行数据");
    List<HWChrLog> cdrs = new ArrayList<HWChrLog>();
    // 实际处理的个数
    int lastCount = 0;
    try {
        br = new BufferedReader(new java.io.InputStreamReader(new FileInputStream(file.getDestfile())));
        String line = null;
        HWChrLog cdr = null;
        int i = 0;
        while ((line = br.readLine()) != null) {
            try {
                if (line.equals(HWCHR_BASE_STR)) {
                    if (i >= handledLines) {
                        // if(cdr!=null)
                        lastCount++;
                        cdr = new HWChrLog();
                        cdr.setFilesgsn(file.getSgsnid());
                        cdrs.add(cdr);
                    }
                    i++;
                }
                int idx = line.indexOf("]");
                if (idx == -1)
                    continue;
                if (cdr != null) {
                    if (line.indexOf("UTC 日期/时间") != -1) {
                        String time = line.substring(idx + 1).trim();
                        cdr.setTime((int) (df.parse(time).getTime() / 1000));
                    } else if (line.indexOf("MSISDN") != -1) {
                        cdr.setMsisdn(line.substring(idx + 1).trim());
                    } else if (line.indexOf("IMSI") != -1) {
                        cdr.setImsi(line.substring(idx + 1).trim());
                    } else if (line.indexOf("IMEISV") != -1) {
                        cdr.setImei(line.substring(idx + 1).trim());
                    } else if (line.indexOf("流程ID") != -1) {
                        cdr.setFlowid(line.substring(idx + 1).trim());
                    } else if (line.indexOf("触发原因") != -1) {
                        cdr.setTrigreason(line.substring(idx + 1).trim());
                    } else if (line.indexOf("时延") != -1) {
                        cdr.setLazytime(line.substring(idx + 1).trim());
                    } else if (line.indexOf("外部原因") != -1) {
                        cdr.setOutreason(line.substring(idx + 1).trim());
                    } else if (line.indexOf("内部原因") != -1) {
                        cdr.setInnerreason(line.substring(idx + 1).trim());
                    } else if (line.indexOf("APN") != -1 && line.indexOf("允许APN") == -1) {
                        cdr.setApn(line.substring(idx + 1).trim());
                    } else if (line.indexOf("允许APN") != -1) {
                        cdr.setAllowapn(line.substring(idx + 1).trim());
                    } else if (line.indexOf("小区编码") != -1 && line.indexOf("旧小区编码") == -1) {
                        cdr.setCellid(line.substring(idx + 1).trim());
                    } else if (line.indexOf("SGSN") != -1 && line.indexOf("旧侧SGSN地址") == -1) {
                        // System.out.println(line);
                        cdr.setSgsnid(line.substring(idx + 1).trim());
                    } else if (line.indexOf("GGSN") != -1) {
                        cdr.setGgsn(line.substring(idx + 1).trim());
                    } else if (line.indexOf("旧小区编码") != -1) {
                        cdr.setOldcellid(line.substring(idx + 1).trim());
                    } else if (line.indexOf("旧侧SGSN地址") != -1) {
                        cdr.setOldsgsnid(line.substring(idx + 1).trim());
                    } else if (line.indexOf("框号") != -1) {
                        cdr.setKuang(line.substring(idx + 1).trim());
                    } else if (line.indexOf("槽号") != -1) {
                        cdr.setCao(line.substring(idx + 1).trim());
                    }
                }
            } catch (Exception e) {
                System.out.println(file.getDestfile() + ":第" + i + "个区块解析有误" + e);
            }
        }
        file.setHandleLines(handledLines + lastCount);
        System.out.println(file.getDestfile() + "解析时间为:" + (System.currentTimeMillis() - now) + "总共:" + i + "区块,实际处理" + lastCount + "块," + cdrs.size());
    } catch (Exception e) {
        e.printStackTrace();
        System.out.println("解析文件异常:" + e);
    } finally {
        if (br != null)
            try {
                br.close();
            } catch (Exception ee) {
                System.out.println(file + "关闭异常:" + ee);
            }
    }
    return cdrs;
}
