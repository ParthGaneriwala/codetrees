public int yyLex() throws IOException {
    char[] cc_ecs = cc_lexer.ecs;
    char[][] cc_next = cc_lexer.next;
    char[] cc_accept = cc_lexer.accept;
    byte[] buffer = _yyBuffer;
    while (true) {
        // initiate variables necessary for lookup
        _yyBOL = _yyIsNextBOL;
        _yyIsNextBOL = false;
        int cc_matchedState = _yyBaseState + (_yyBOL ? 1 : 0);
        int matchedLength = 0;
        int internalBufferEnd = _yyBufferEnd;
        int lookahead = _yyMatchStart;
        int cc_backupMatchedState = cc_matchedState;
        int cc_backupMatchedLength = 0;
        // the DFA lookup
        while (true) {
            // check buffer status
            if (lookahead < internalBufferEnd) {
                // now okay to process the character
                int cc_toState;
                cc_toState = cc_next[cc_matchedState][cc_ecs[buffer[lookahead] & 0xff]];
                if (cc_toState == 0) {
                    cc_matchedState = cc_backupMatchedState;
                    matchedLength = cc_backupMatchedLength;
                    break;
                }
                cc_matchedState = cc_toState;
                ++lookahead;
                ++matchedLength;
                if (cc_accept[cc_matchedState] > 0) {
                    cc_backupMatchedState = cc_toState;
                    cc_backupMatchedLength = matchedLength;
                }
            } else {
                int lookPos = lookahead - _yyMatchStart;
                boolean refresh = yyRefreshBuffer();
                buffer = _yyBuffer;
                internalBufferEnd = _yyBufferEnd;
                lookahead = _yyMatchStart + lookPos;
                if (!refresh) {
                    // <<EOF>>
                    int cc_toState;
                    cc_toState = cc_next[cc_matchedState][cc_ecs[256]];
                    if (cc_toState != 0)
                        cc_matchedState = cc_toState;
                    else {
                        cc_matchedState = cc_backupMatchedState;
                        matchedLength = cc_backupMatchedLength;
                    }
                    break;
                }
            }
        }
        _yyTextStart = _yyMatchStart;
        _yyMatchStart += matchedLength;
        _yyLength = matchedLength;
        switch(cc_accept[cc_matchedState]) {
            case // {ws}+
            1:
                {
                    m_this.ignoreWhiteSpace();
                }
            case 17:
                break;
            case // \n+
            2:
                {
                    m_this.ignoreWhiteSpace();
                }
            case 18:
                break;
            case // [/][/].*\n
            3:
                {
                    m_this.scanLineComment();
                }
            case 19:
                break;
            case // [/][*]+
            4:
                {
                    m_this.startBlockComment();
                }
            case 20:
                break;
            case // ^{ws}*[*]
            10:
                {
                    m_this.ignoreLeadingStar();
                }
            case 26:
                break;
            case // {ws}*[*]+[/]
            11:
                {
                    m_this.endBlockComment();
                }
            case 27:
                break;
            case // {ws}+
            12:
                {
                    m_this.scanBlockComment();
                }
            case 28:
                break;
            case // [^ \t*/]+
            13:
                {
                    m_this.scanBlockComment();
                }
            case 29:
                break;
            case // .
            14:
                {
                    m_this.scanBlockComment();
                }
            case 30:
                break;
            case // ^{ws}*[^ \t]
            5:
                {
                    return m_this.doneScanning();
                }
            case 21:
                break;
            case // .
            6:
                {
                    return m_this.doneScanning();
                }
            case 22:
                break;
            case // <<EOF>>
            7:
                {
                    return m_this.doneScanning();
                }
            case 23:
                break;
            case // <<EOF>>
            15:
                {
                    return m_this.doneScanning();
                }
            case 31:
                break;
            case // .|\n
            8:
                {
                    // default character action
                    echo();
                }
            case 24:
                break;
            case // <<EOF>>
            9:
                {
                    // default EOF action
                    return 0;
                }
            case 25:
                break;
            default:
                throw new IOException("Internal error in FileHeaderLexer lexer.");
        }
        // specifically used _yyBuffer since it could be changed by user
        if (_yyMatchStart > 0 && _yyBuffer[_yyMatchStart - 1] == '\n')
            _yyIsNextBOL = true;
    }
}
