private static CommandLineArgs readArguments(String[] argv) {
    List<String> simpleArgs = new ArrayList<String>(2);
    Map<String, String> keyToValueMap = new LinkedHashMap<String, String>(1);
    int pos = 0;
    while (pos < argv.length) {
        String s = argv[pos];
        if (s.startsWith("--")) {
            s = s.substring(2);
            String key;
            String value;
            int eqPos = s.indexOf('=');
            if (eqPos == -1) {
                key = s;
                value = null;
            } else {
                key = s.substring(0, eqPos);
                value = s.substring(eqPos + 1);
            }
            keyToValueMap.put(key, value);
            pos++;
        } else {
            simpleArgs.add(s);
            pos++;
        }
    }
    if (simpleArgs.size() != 2) {
        throw new IllegalArgumentException("2 arguments expected: debug socket host and port");
    }
    class CommandLineArgsImpl implements CommandLineArgs {

        public String getHost() {
            return host;
        }

        public int getPort() {
            return port;
        }

        public ProtocolType getProtocolType() {
            return protocolType;
        }

        String host;

        int port;

        ProtocolType protocolType = ProtocolType.SHELL;
    }
    CommandLineArgsImpl result = new CommandLineArgsImpl();
    result.host = simpleArgs.get(0);
    String portStr = simpleArgs.get(1);
    result.port = Integer.parseInt(portStr);
    for (Map.Entry<String, String> entry : keyToValueMap.entrySet()) {
        String key = entry.getKey();
        if ("protocol".equals(key)) {
            result.protocolType = ProtocolType.valueOf(entry.getValue());
        } else {
            throw new IllegalArgumentException("Unknown parameter: " + key);
        }
    }
    return result;
}
