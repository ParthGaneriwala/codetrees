/**
 * Manual filtergraph building
 * ===================================================================================================
 * This is a VERY simple demonstration of some of the lower level functionality in DSGraph. It builds a simple
 * avi playback graph. When digging deeper into this, you will not get around deepend knowledge of
 * DirectShow itself. Make sure to get familiar with GraphEdit and other utilities. The methods DSGraph
 * and DSFilter provide are pure wrapper functions. There is no safety net between your code and what happens in
 * the dsj dll. Things may seem easy at points and lead to immediate shutdown of your PC at others.
 * It is worth considering if what you plan to do can not be done somehow with one of the more
 * complex dsj classes. For example DSMovie will successfully open most mediafiles and lots of stream
 * formats, while this code is basically only capeable of playing back classic avi without "fancy" compression,
 * It will fail on mpg, divX, wmv etc.!
 */
private void buildGraphInCode() {
    running = false;
    if (dsfg != null) {
        try {
            remove(dsfg.asComponent());
        } catch (NullPointerException ne) {
        }
        dsfg.dispose();
    } else
        remove(dd);
    try {
        dsfg = DSGraph.createFilterGraph(DSFiltergraph.RENDER_NATIVE, this);
        DSFilterInfo dsi = DSFilterInfo.filterInfoForName("File Source (Async.)");
        DSFilter fileSource = ((DSGraph) dsfg).addFilterToGraph(dsi);
        fileSource.setParameter("src", showFileDialog("select avi file", FileDialog.LOAD));
        DSFilter[] dsf = ((DSGraph) dsfg).listFilters();
        fileSource = dsf[0];
        DSFilter.DSPin sourceOutput = dsf[0].getPin(0, 0);
        boolean oneStop = false;
        if (oneStop)
            fileSource.renderPin(sourceOutput);
        else {
            DSFilter splitter = ((DSGraph) dsfg).addFilterToGraph(DSFilterInfo.filterInfoForName("AVI Splitter"));
            DSFilter.DSPin splitterInput = splitter.getPin(1, 0);
            boolean success = fileSource.connectDownstream(sourceOutput, splitterInput, true);
            if (!success) {
                System.out.println("Can not connect " + sourceOutput + " & " + splitterInput);
                dsfg.dispose();
                dsfg = null;
                pack();
                return;
            }
            DSFilter.DSPin splitterOutput = splitter.getPin(0, 0);
            DSFilter videoRenderer = ((DSGraph) dsfg).addFilterToGraph(DSFilterInfo.filterInfoForName("Video Renderer"));
            DSFilter.DSPin rendererInput = videoRenderer.getPin(1, 0);
            /**
             * setting the boolean parameter to false instructs DirectShow to add any
             * necassary intermediate filters between the two pins. In this case this may be a
             * decompressor depending on the source file's format and/or a Colorspace Converter.
             */
            success = splitter.connectDownstream(splitterOutput, rendererInput, false);
        }
        /**
         * all done *
         */
        ((DSGraph) dsfg).setupComplete();
        initDisplay();
    } catch (Exception e) {
        System.out.println("\n" + e.toString());
        dsfg.dispose();
        add("Center", dd);
        pack();
        return;
    }
}
