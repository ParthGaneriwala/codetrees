public boolean setParameters(HttpServletRequest request) {
    Timestamp startDate = null;
    Timestamp endDate = null;
    for (Parameter param : this) {
        // For each parameter the user is prompted for, evaluate the answer
        if (param.getIsForPrompting()) {
            param.setValue(request.getParameter(param.getName()));
            // Auto-populate the user's range based on selected type
            if (param.getName().equals("userid_range_source")) {
                if (param.getValue().equals("all")) {
                    // TODO:"All" wouldn't work, need to swap the _where clause
                    addParam("userid_range", "");
                } else if (param.getValue().equals("hierarchy")) {
                    addParam("userid_range", UserUtils.getUserIdRange(request));
                } else {
                    addParam("userid_range", String.valueOf(UserUtils.getUserId(request)));
                }
            }
            // the report
            if (param.getName().startsWith("lookup_")) {
                Parameter whereParam = this.getParameter(param.getName() + "_where");
                if (whereParam != null) {
                    if (!"-1".equals(param.getValue())) {
                        // New case, replace query param with another param and parse
                        Template where = new Template(whereParam.getDescription());
                        where.addParseElement("$P{" + param.getName() + "}", param.getValue());
                        addParam(whereParam.getName(), where.getParsedText());
                    } else {
                        addParam(whereParam.getName(), " ");
                    }
                }
                addParam(param.getName(), param.getValue());
            }
            // HtmlSelect boolean
            if (param.getName().startsWith("boolean_")) {
                Parameter whereParam = this.getParameter(param.getName() + "_where");
                if (whereParam != null) {
                    if ("1".equals(param.getValue())) {
                        // Replace the default with the description value
                        addParam(whereParam.getName(), whereParam.getDescription());
                    } else if ("0".equals(param.getValue())) {
                    // Leave the default
                    } else {
                        // Blank out the default
                        addParam(whereParam.getName(), "");
                    }
                }
                addParam(param.getName(), param.getValue());
            }
            if (param.getName().startsWith("yesno_")) {
                Parameter whereParam = this.getParameter(param.getName() + "_where");
                if (whereParam != null) {
                    if ("1".equals(param.getValue())) {
                        // Replace the default with the description value
                        addParam(whereParam.getName(), whereParam.getDescription());
                    } else if ("0".equals(param.getValue())) {
                    // Leave the default
                    } else {
                        // Blank out the default
                        addParam(whereParam.getName(), "");
                    }
                }
                addParam(param.getName(), param.getValue());
            }
            if (param.getName().startsWith("number_")) {
                try {
                    addParam(param.getName(), String.valueOf(Integer.parseInt(param.getValue())));
                } catch (Exception e) {
                    addParam(param.getName(), "0");
                }
            }
            // Percent lookup uses a range from the HtmlSelectProbabilityRange object
            if (param.getName().startsWith("percent_")) {
                // The range will be specified as -0.01|1.01 for the query
                StringTokenizer st = new StringTokenizer(param.getValue(), "|");
                addParam(param.getName() + "_min", st.nextToken());
                addParam(param.getName() + "_max", st.nextToken());
                // Clean up the name for output on the report
                param.setValue(HtmlSelectProbabilityRange.getValueFromId(param.getValue()));
            }
            // Integer orgid lookup
            if (param.getName().startsWith("orgid")) {
                Parameter whereParam = this.getParameter(param.getName() + "_where");
                if (whereParam != null) {
                    if (!"-1".equals(param.getValue())) {
                        // New case, replace query param with another param and parse
                        Template where = new Template(whereParam.getDescription());
                        where.addParseElement("$P{" + param.getName() + "}", param.getValue());
                        addParam(whereParam.getName(), where.getParsedText());
                    } else {
                        addParam(whereParam.getName(), " ");
                    }
                }
                addParam(param.getName(), param.getValue());
            }
            // Where clause for text fields
            if (param.getName().startsWith("text_")) {
                Parameter whereParam = this.getParameter(param.getName() + "_where");
                if (whereParam != null) {
                    if (!"".equals(param.getValue())) {
                        // New case, replace query param with another param and parse
                        Template where = new Template(whereParam.getDescription());
                        where.addParseElement("$P{" + param.getName() + "}", param.getValue());
                        addParam(whereParam.getName(), where.getParsedText());
                    } else {
                        addParam(whereParam.getName(), " ");
                    }
                }
                addParam(param.getName(), param.getValue());
            }
            try {
                if (param.getName().startsWith("date_")) {
                    if (StringUtils.hasText(param.getValue())) {
                        Timestamp tmpTimestamp = DateUtils.getUserToServerDateTime(TimeZone.getTimeZone(UserUtils.getUserTimeZone(request)), DateFormat.SHORT, DateFormat.LONG, param.getValue(), UserUtils.getUserLocale(request));
                        SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateInstance(DateFormat.SHORT, Locale.getDefault());
                        String date = formatter.format(tmpTimestamp);
                        param.setValue(date);
                        if (param.getName().equals("date_start")) {
                            startDate = tmpTimestamp;
                        }
                        if (param.getName().equals("date_end")) {
                            endDate = tmpTimestamp;
                        }
                    }
                    // Where clause for date fields
                    Parameter whereParam = this.getParameter(param.getName() + "_where");
                    if (whereParam != null) {
                        if (StringUtils.hasText(param.getValue())) {
                            // New case, replace query param with another param and parse (use the calculated value)
                            Template where = new Template(whereParam.getDescription());
                            where.addParseElement("$P{" + param.getName() + "}", param.getValue());
                            addParam(whereParam.getName(), where.getParsedText());
                        } else {
                            addParam(whereParam.getName(), " ");
                        }
                    }
                }
            } catch (Exception e) {
                errors.put(param.getName() + "Error", "no input or invalid date");
            }
        }
        if (System.getProperty("DEBUG") != null) {
            System.out.println("ParameterList-> " + param.getName() + "=" + param.getValue());
        }
    }
    if (startDate != null && endDate != null) {
        if (startDate.after(endDate)) {
            errors.put("date_startError", "The first date cannot be after second date.");
        }
    }
    this.addParam("currency", UserUtils.getUserCurrency(request));
    this.addParam("country", UserUtils.getUserLocale(request).getCountry());
    this.addParam("language", UserUtils.getUserLocale(request).getLanguage());
    this.addParam("userid", String.valueOf(UserUtils.getUserId(request)));
    return !hasErrors();
}
