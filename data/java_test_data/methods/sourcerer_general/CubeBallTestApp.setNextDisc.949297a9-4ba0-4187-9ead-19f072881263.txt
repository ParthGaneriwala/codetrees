public synchronized void setNextDisc(Point3d p, Color3f c) {
    discoShape.setGeometry(null);
    int side = getSide(p);
    // round off
    Point3d fp = new Point3d(p);
    fp.clamp(-cubeSize, cubeSize - .01);
    fp.scale(1 / quadSize);
    fp.x = Math.floor(fp.x);
    fp.y = Math.floor(fp.y);
    fp.z = Math.floor(fp.z);
    // check if already hit
    int X = (int) fp.x + (cageBars / 2);
    int Y = (int) fp.y + (cageBars / 2);
    int Z = (int) fp.z + (cageBars / 2);
    int x = 0, y = 0;
    switch(side) {
        case RIGHT:
        case LEFT:
            x = Y;
            y = Z;
            break;
        case UP:
        case DOWN:
            x = X;
            y = Z;
            break;
        case NEAR:
        case FAR:
            x = X;
            y = Y;
            break;
    }
    int coord = currDisc;
    if (discTab[side][x][y] == NO_DISC) {
        discTab[side][x][y] = coord;
    } else {
        coord = discTab[side][x][y];
    }
    // convert back to coords
    fp.set((X * quadSize) - cubeSize, (Y * quadSize) - cubeSize, (Z * quadSize) - cubeSize);
    // set disc
    Point3d pt = new Point3d();
    for (int i = 0; i < 4; i++) {
        switch(side) {
            case RIGHT:
            case LEFT:
                pt.set(p.x > 0 ? cubeSize : -cubeSize, fp.y + (SQR_PATTERN[i][0] * quadSize), fp.z + (SQR_PATTERN[i][1] * quadSize));
                break;
            case UP:
            case DOWN:
                pt.set(fp.x + (SQR_PATTERN[i][0] * quadSize), p.y > 0 ? cubeSize : -cubeSize, fp.z + (SQR_PATTERN[i][1] * quadSize));
                break;
            case NEAR:
            case FAR:
                pt.set(fp.x + (SQR_PATTERN[i][0] * quadSize), fp.y + (SQR_PATTERN[i][1] * quadSize), p.z > 0 ? cubeSize : -cubeSize);
                break;
        }
        disco.setCoordinate(coord + i, pt);
    }
    // set colors
    Color3f c2 = new Color3f(c == null ? white : c);
    if (c != null)
        c2.scale((float) Math.random());
    Color3f rndCol = new Color3f((float) Math.random(), (float) Math.random(), (float) Math.random());
    if (c == null)
        rndCol.add(white);
    else
        rndCol.add(black);
    rndCol.scale(.5f);
    disco.setColor(coord, cageCols[side]);
    disco.setColor(coord + 1, c2);
    disco.setColor(coord + 2, rndCol);
    disco.setColor(coord + 3, c == null ? cageCols[side] : c);
    // check if complete
    if (coord == currDisc) {
        currDisc += 4;
        if (currDisc >= (numDiscs * 4)) {
            // should only occur once?
            currDisc = 0;
            System.out.println("Disc full!");
        }
    }
    discoShape.setGeometry(disco);
}
