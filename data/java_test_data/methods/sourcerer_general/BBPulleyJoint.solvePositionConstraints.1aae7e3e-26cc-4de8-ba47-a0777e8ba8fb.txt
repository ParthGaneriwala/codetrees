public boolean solvePositionConstraints(float baumgarte) {
    BBBody b1 = m_bodyA;
    BBBody b2 = m_bodyB;
    BBVec2 s1 = m_groundAnchor1;
    BBVec2 s2 = m_groundAnchor2;
    float linearError = 0.0f;
    if (m_state == e_atUpperLimit) {
        BBVec2 r1 = mul(b1.getTransform().R, sub(m_localAnchor1, b1.getLocalCenter()));
        BBVec2 r2 = mul(b2.getTransform().R, sub(m_localAnchor2, b2.getLocalCenter()));
        BBVec2 p1 = add(b1.m_sweep.c, r1);
        BBVec2 p2 = add(b2.m_sweep.c, r2);
        // Get the pulley axes.
        m_u1 = sub(p1, s1);
        m_u2 = sub(p2, s2);
        float length1 = m_u1.length();
        float length2 = m_u2.length();
        if (length1 > linearSlop) {
            m_u1.mul(1.0f / length1);
        } else {
            m_u1.setZero();
        }
        if (length2 > linearSlop) {
            m_u2.mul(1.0f / length2);
        } else {
            m_u2.setZero();
        }
        float C = m_finalant - length1 - m_ratio * length2;
        linearError = max(linearError, -C);
        C = clamp(C + linearSlop, -maxLinearCorrection, 0.0f);
        float impulse = -m_pulleyMass * C;
        BBVec2 P1 = mul(-impulse, m_u1);
        BBVec2 P2 = mul(-m_ratio * impulse, m_u2);
        b1.m_sweep.c.add(mul(b1.m_invMass, P1));
        b1.m_sweep.a += b1.m_invI * cross(r1, P1);
        b2.m_sweep.c.add(mul(b2.m_invMass, P2));
        b2.m_sweep.a += b2.m_invI * cross(r2, P2);
        b1.synchronizeTransform();
        b2.synchronizeTransform();
    }
    if (m_limitState1 == e_atUpperLimit) {
        BBVec2 r1 = mul(b1.getTransform().R, sub(m_localAnchor1, b1.getLocalCenter()));
        BBVec2 p1 = add(b1.m_sweep.c, r1);
        m_u1 = sub(p1, s1);
        float length1 = m_u1.length();
        if (length1 > linearSlop) {
            m_u1.mul(1.0f / length1);
        } else {
            m_u1.setZero();
        }
        float C = m_maxLength1 - length1;
        linearError = max(linearError, -C);
        C = clamp(C + linearSlop, -maxLinearCorrection, 0.0f);
        float impulse = -m_limitMass1 * C;
        BBVec2 P1 = mul(-impulse, m_u1);
        b1.m_sweep.c.add(mul(b1.m_invMass, P1));
        b1.m_sweep.a += b1.m_invI * cross(r1, P1);
        b1.synchronizeTransform();
    }
    if (m_limitState2 == e_atUpperLimit) {
        BBVec2 r2 = mul(b2.getTransform().R, sub(m_localAnchor2, b2.getLocalCenter()));
        BBVec2 p2 = add(b2.m_sweep.c, r2);
        m_u2 = sub(p2, s2);
        float length2 = m_u2.length();
        if (length2 > linearSlop) {
            m_u2.mul(1.0f / length2);
        } else {
            m_u2.setZero();
        }
        float C = m_maxLength2 - length2;
        linearError = max(linearError, -C);
        C = clamp(C + linearSlop, -maxLinearCorrection, 0.0f);
        float impulse = -m_limitMass2 * C;
        BBVec2 P2 = mul(-impulse, m_u2);
        b2.m_sweep.c.add(mul(b2.m_invMass, P2));
        b2.m_sweep.a += b2.m_invI * cross(r2, P2);
        b2.synchronizeTransform();
    }
    return linearError < linearSlop;
}
