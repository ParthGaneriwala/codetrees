// this method is not accessible. It will throw an ParserException if there was
private Token retrieveToken(LookAheadStream source) throws ParserException {
    // This function implements the DFA algorithm and returns a token to the LALR state
    // machine
    // Temporary storage for a character read by the DFA algorithm
    String ch;
    int n, currentDFA;
    // Used to exit a branch search loop. For each state in the DFA
    boolean found;
    // there are a finite number of branches to other states. The code
    // under "Move to next state" searches the branches until one is
    // found containing the character (ch).
    // Used in the main loop. When the next character is not
    boolean done = false;
    // found in the DFA, this variable is set true and the loop
    // exits. In addition, based on whether a matching token
    // could be found, the code either creates an error token or
    // returns the new one.
    // Temporary storage that used to hold the index of the next state in
    int target = 0;
    // the DFA. In other words, the state we are now moving to.
    // Temporary storeage that is used to hold the index in the
    int charSetIndex;
    // Character Set. This isn't really necessary, but it does save
    // code, and thus, sanity! :-)
    // This is the current read-ahead position on the source string.
    int currentPosition;
    // The DFA algorithm uses lookahead logic to analyze the souce
    // string. Basically, I set the value of the value initially
    // to 1 since we are looking at the next character in the
    // input. Each time a character is matched in the algorithm
    // and the DFA State advances, so too does the position in the
    // source input.
    // Whenever a state is found that accepts a token, it is marked.
    int lastAcceptState;
    // Essentially this follows the algorithms desire to find the longest
    // matching token possible.
    // This is set at the same time as the LastAcceptState to
    int lastAcceptPosition;
    // store the read-ahead position in the source that contains the
    // token. For instance, if parsing the string
    Token result = new Token();
    // The first state is almost always #1.
    currentDFA = initialDFAState;
    // Next byte in the input stream
    currentPosition = 1;
    // We have not yet accepted a character string
    lastAcceptState = -1;
    lastAcceptPosition = -1;
    // we need to doubly make sure!
    boolean inWhiteSpaceCharSet = false;
    if (!source.done()) {
        while (!done) {
            // ======= This code searches all the branches of the current DFA state for the next
            // ======= character in the input stream. If found the target state is returned.
            // ======= The InStr() function searches the string pCharacterSetTable.Member(CharSetIndex)
            // ======= starting at position 1 for ch.  The pCompareMode variable determines whether
            // ======= the search is case sensitive.
            ch = source.nextChar();
            if (// End reached, do not match
            ch.equals("")) {
                found = false;
            } else {
                n = 0;
                found = false;
                FAState faTmp = (FAState) pDFA.elementAt(currentDFA);
                while ((n < faTmp.edgeCount()) & (!found)) {
                    charSetIndex = Integer.parseInt(faTmp.edge(n).getChars());
                    String sT = (String) pCharacterSetTable.elementAt(charSetIndex);
                    for (int i = 0; i < sT.length(); i++) {
                        int k = (int) sT.charAt(i);
                        int x = (int) ch.charAt(0);
                        if (k == 10) {
                            // we are in whitespace land
                            inWhiteSpaceCharSet = true;
                            if (x == k) {
                                // token!
                                if (!source.nextCharNotWhitespace()) {
                                    found = true;
                                    target = faTmp.edge(n).getTargetIndex();
                                }
                            }
                        }
                    }
                    boolean checkerFound = false;
                    char checker = ch.charAt(0);
                    char sTChar;
                    for (int i = 0; i < sT.length(); i++) {
                        sTChar = sT.charAt(i);
                        if (pIgnoreCase) {
                            checker = Character.toLowerCase(checker);
                            sTChar = Character.toLowerCase(sTChar);
                        }
                        if (checker == sTChar) {
                            checkerFound = true;
                            // finish the loop quickly
                            i = sT.length();
                        }
                    }
                    if (checkerFound) {
                        found = true;
                        target = faTmp.edge(n).getTargetIndex();
                    }
                    n++;
                }
            }
            if (found) {
                // ======= This code checks whether the target state accepts a token. If so, it sets the
                // ======= appropiate variables so when the algorithm in done, it can return the proper
                // ======= token and number of characters.
                FAState faTmp2 = (FAState) pDFA.elementAt(target);
                if (faTmp2.acceptSymbol != -1) {
                    lastAcceptState = target;
                    lastAcceptPosition = currentPosition;
                }
                currentDFA = target;
                currentPosition++;
            } else // No edge found
            {
                done = true;
                if (// Tokenizer cannot recognize symbol
                lastAcceptState == -1) {
                    if (pCommentLevel == 0) {
                        result.setParentSymbol(kErrorSymbol);
                        result.setData(source.read(1));
                    } else {
                        done = false;
                    }
                } else {
                    FAState faTmp3 = (FAState) pDFA.elementAt(lastAcceptState);
                    result.setParentSymbol(pSymbolTable.getMember(faTmp3.acceptSymbol));
                    result.setData(source.read(lastAcceptPosition));
                }
            }
        }
    } else {
        // End of file reached, create End Token
        result.setData(new String(""));
        result.setParentSymbol(kEndSymbol);
    }
    // ======= Count Carriage Returns and increment the Line Number. This is done for the
    // ======= Developer and is not necessary for the DFA algorithm
    String strTmp = (String) result.getData();
    for (n = 0; n < strTmp.length(); n++) {
        if (strTmp.charAt(n) == '\n') {
            pLineNumber++;
        }
    }
    return result;
}
