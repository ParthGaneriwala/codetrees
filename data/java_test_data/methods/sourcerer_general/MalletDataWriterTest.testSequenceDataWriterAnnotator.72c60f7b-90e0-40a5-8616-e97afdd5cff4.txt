@Test
public void testSequenceDataWriterAnnotator() throws IOException, UIMAException {
    AnalysisEngine engine = AnalysisEngineFactory.createPrimitive(TestAnnotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkSequenceAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultMalletCRFDataWriterFactory.class.getName());
    // create some tokens and sentences
    // add part-of-speech and stems to tokens
    String text = "What if we built a large\r\n, wooden badger?";
    tokenBuilder.buildTokens(jCas, text, "What if we built a large \n, wooden badger ?", "WDT TO PRP VBN DT JJ , JJ NN .");
    engine.process(jCas);
    engine.collectionProcessComplete();
    File trainFile = new MalletCRFClassifierBuilder().getTrainingDataFile(this.outputDirectory);
    BufferedReader input = new BufferedReader(new FileReader(trainFile));
    String line = input.readLine();
    assertNotNull(line);
    assertTrue(line.endsWith(" WDT"));
    assertTrue(line.startsWith("What "));
    line = input.readLine();
    assertNotNull(line);
    assertTrue(line.endsWith(" TO"));
    assertTrue(line.startsWith("if "));
    line = input.readLine();
    assertNotNull(line);
    assertTrue(line.endsWith(" PRP"));
    assertTrue(line.startsWith("we "));
    line = input.readLine();
    assertNotNull(line);
    assertTrue(line.endsWith(" VBN"));
    assertTrue(line.startsWith("built "));
    line = input.readLine();
    assertNotNull(line);
    assertTrue(line.endsWith(" DT"));
    assertTrue(line.startsWith("a "));
    line = input.readLine();
    assertNotNull(line);
    assertTrue(line.endsWith(" JJ"));
    assertTrue(line.startsWith("large "));
    line = input.readLine();
    assertNotNull(line);
    assertEquals("", line.trim());
    line = input.readLine();
    assertNotNull(line);
    assertTrue(line.endsWith(" ,"));
    assertTrue(line.startsWith(", "));
    input.close();
}
