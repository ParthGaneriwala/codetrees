@Test
public void insertarEliminarActualizar() {
    try {
        medicos = medicoDao.getMedicos();
        Assert.assertNotNull(medicos);
        int cantidadInicial = medicos.size();
        // Se prueba el metodo insertar()
        medico = new Medico();
        medico.setNombres("Yelina Isabel");
        medico.setApellidoPaterno("Huaroto");
        medico.setApellidoMaterno("De La Cruz");
        medico.setDireccion("Av. Bolivar 337");
        medico.setEmpresa(empresa);
        medico.setTelefonoFijo("2790623");
        medico.setTelefonoCelular("99846835");
        medico.setNroColegiatura("54875");
        medico.setFechaNacimiento(new Date(new GregorianCalendar(1981, 1, 20, 0, 0, 0).getTimeInMillis()));
        medico.setDepProvDist(new DepProvDist(new UbigeoPK("15", "01", "10"), null, null, null));
        medico.setActivo(Bean.NO_ACTIVO);
        Assert.assertTrue(medicoDao.insertar(medico));
        medicos = null;
        medicos = medicoDao.getMedicos();
        Assert.assertNotNull(medicos);
        int cantidadFinal = medicos.size();
        Assert.assertEquals(cantidadFinal, cantidadInicial + 1);
        // Se prueba el m�todo actualizar();
        medico.setActivo(Bean.ACTIVO);
        Assert.assertTrue(medicoDao.actualizar(medico));
        Integer personaId = medico.getPersonaId();
        medico = null;
        medico = medicoDao.getMedicoPorId(personaId);
        Assert.assertNotNull(medico);
        Assert.assertEquals(medico.getActivo(), Bean.ACTIVO);
        // Se prueba el m�todo eliminar
        Assert.assertTrue(medicoDao.eliminar(medico));
        medicos = null;
        medicos = medicoDao.getMedicos();
        Assert.assertNotNull(medicos);
        cantidadFinal = medicos.size();
        Assert.assertEquals(cantidadFinal, cantidadInicial);
    } catch (Exception e) {
        e.printStackTrace();
        Assert.assertTrue(false);
    }
}
