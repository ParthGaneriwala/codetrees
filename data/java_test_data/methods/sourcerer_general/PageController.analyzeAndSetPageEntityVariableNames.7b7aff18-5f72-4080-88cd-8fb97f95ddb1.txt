public void analyzeAndSetPageEntityVariableNames() {
    // ////// assign ids
    for (PageEntity pageEntity : pageEntities) {
        switch(pageEntity.getType()) {
            case PARAM_PRIMARY_KEY:
            case PARAM_OTHER:
                // Rule 1) Type.PARAM_PRIMARY_KEY:
                // 1a) should create an entity with var name ${entity.id}.
                // Example:
                // ?projectId=foo
                pageEntity.setId(pageEntity.getEntity().getId());
                // Rule 2) Type.PARAM_OTHER: same as param_primary_key
                break;
            case INPUT:
                // Rule 3) Type.INPUT
                // Always create entity with var name ${entity.id}.
                pageEntity.setId(pageEntity.getEntity().getId());
                break;
            case OUTPUT:
                // Type.OUTPUT
                // Rule 4) Create entity name with var ${output.id}
                pageEntity.setId(pageEntity.getOutput().getId());
                break;
            default:
                throw new RuntimeException("Case was added but not implemented, contact developer immediately: " + pageEntity.getType());
        }
    }
    // ////// remove duplicates
    // Rule 1: PARAM supersedes OUTPUT (as PARAM has more info than
    // OUTPUT, namely link to entity primary key)
    {
        List<PageEntity> paramPageEntities = getParamPageEntities();
        // if there is a output page entity with same var name, remove
        // it
        Set<PageEntity> duplicates = new HashSet<PageEntity>();
        for (PageEntity paramPageEntity : paramPageEntities) {
            for (PageEntity duplicateContender : pageEntities) {
                if (duplicateContender.getType() == Type.OUTPUT && duplicateContender.getId().equals(paramPageEntity.getId()) && duplicateContender.getEntity().equals(paramPageEntity.getEntity())) {
                    duplicates.add(duplicateContender);
                    // save info that there is also an associated output
                    paramPageEntity.setOutput(duplicateContender.getOutput());
                }
            }
        }
        // remove all duplicates
        for (PageEntity duplicate : duplicates) {
            pageEntities.remove(duplicate);
        // log.info("Duplicate removed: " + duplicate.getType() + ", " +
        // duplicate.getId());
        }
    }
    // ///////// Rule 2: INPUT vs PARAM: both are mapped to ${entity.id},
    // however, PARAM should supersede input, as PARAM looks up whereas
    // input only edits/updates it
    {
        List<PageEntity> paramPageEntities = getParamPageEntities();
        // if there is a output page entity with same var name, remove
        // it
        Set<PageEntity> duplicates = new HashSet<PageEntity>();
        for (PageEntity paramPageEntity : paramPageEntities) {
            for (PageEntity duplicateContender : pageEntities) {
                if (duplicateContender.getType() == Type.INPUT && duplicateContender.getId().equals(paramPageEntity.getId()) && duplicateContender.getEntity().equals(paramPageEntity.getEntity())) {
                    duplicates.add(duplicateContender);
                    {
                        // save info that there is also an linked inputs
                        Map<Form, List<SingleUserInput>> inputs = new HashMap<Form, List<SingleUserInput>>();
                        for (Form form : page.getForms()) {
                            Map<Entity, List<SingleUserInput>> entityInputs = form.getEntityInputs();
                            if (entityInputs.containsKey(paramPageEntity.getEntity())) {
                                for (SingleUserInput linkedInput : form.getEntityInputs().get(paramPageEntity.getEntity())) {
                                    if (!inputs.containsKey(form)) {
                                        inputs.put(form, new ArrayList<SingleUserInput>());
                                    }
                                    inputs.get(form).add(linkedInput);
                                }
                            }
                        }
                        paramPageEntity.setInputs(inputs);
                    }
                }
            }
        }
        // remove all duplicates
        for (PageEntity duplicate : duplicates) {
            pageEntities.remove(duplicate);
        // log.info("Duplicate removed: " + duplicate.getType() + ", " +
        // duplicate.getId());
        }
    }
    // ///////// Rule 3: more rules as we find them
    // check for duplicates
    List<String> varIds = new ArrayList<String>();
    for (PageEntity pageEntity : pageEntities) {
        if (varIds.contains(pageEntity.getId())) {
            log.error("Duplicate variable in controller: " + pageEntity.getId());
        } else {
            varIds.add(pageEntity.getId());
        }
    }
}
