@SuppressWarnings("fallthrough")
final int getJSDocToken() throws IOException {
    int c;
    stringBufferTop = 0;
    for (; ; ) {
        // eat white spaces
        for (; ; ) {
            charno = -1;
            c = getChar();
            if (c == EOF_CHAR) {
                return Token.EOF;
            } else if (c == '\n') {
                return Token.EOL;
            } else if (!isJSSpace(c)) {
                break;
            }
        }
        switch(c) {
            // annotation, e.g. @type or @constructor
            case '@':
                do {
                    c = getChar();
                    if (isAlpha(c)) {
                        addToString(c);
                    } else {
                        ungetChar(c);
                        this.string = getStringFromBuffer();
                        stringBufferTop = 0;
                        return Token.ANNOTATION;
                    }
                } while (true);
            case '*':
                if (matchChar('/')) {
                    return Token.EOC;
                } else {
                    return Token.STAR;
                }
            case ',':
                return Token.COMMA;
            case '>':
                return Token.GT;
            case '(':
                return Token.LP;
            case ')':
                return Token.RP;
            case '{':
                return Token.LC;
            case '}':
                return Token.RC;
            case '[':
                return Token.LB;
            case ']':
                return Token.RB;
            case '?':
                return Token.QMARK;
            case '!':
                return Token.BANG;
            case ':':
                return Token.COLON;
            case '=':
                return Token.EQUALS;
            case '|':
                matchChar('|');
                return Token.PIPE;
            case '.':
                c = getChar();
                if (c == '<') {
                    return Token.LT;
                } else {
                    if (c == '.') {
                        c = getChar();
                        if (c == '.') {
                            return Token.ELLIPSIS;
                        } else {
                            addToString('.');
                        }
                    }
                    // we may backtrack across line boundary
                    ungetBuffer[ungetCursor++] = c;
                    c = '.';
                }
            default:
                {
                    // recognize a jsdoc string but discard last . if it is followed by
                    // a non-jsdoc comment char, e.g. Array.<
                    int c1 = c;
                    addToString(c);
                    int c2 = getChar();
                    if (!isJSDocString(c2)) {
                        ungetChar(c2);
                        this.string = getStringFromBuffer();
                        stringBufferTop = 0;
                        return Token.STRING;
                    } else {
                        do {
                            c1 = c2;
                            c2 = getChar();
                            if (c1 == '.' && c2 == '<') {
                                ungetChar(c2);
                                ungetChar(c1);
                                this.string = getStringFromBuffer();
                                stringBufferTop = 0;
                                return Token.STRING;
                            } else {
                                if (isJSDocString(c2)) {
                                    addToString(c1);
                                } else {
                                    ungetChar(c2);
                                    addToString(c1);
                                    this.string = getStringFromBuffer();
                                    stringBufferTop = 0;
                                    return Token.STRING;
                                }
                            }
                        } while (true);
                    }
                }
        }
    }
}
