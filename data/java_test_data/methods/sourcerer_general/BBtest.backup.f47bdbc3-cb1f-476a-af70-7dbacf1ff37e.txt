public void backup(int botnr) {
    String filename = "";
    String filename2 = "";
    String filename3 = "";
    Vector<Integer> individualTicket = new Vector<Integer>();
    int IDhere = 0;
    if (botnr == 0) {
        filename = "tomato.bk";
        filename2 = "tomato.b2";
        filename3 = "tomato.b3";
    }
    if (botnr == 1) {
        filename = "flash.bk";
        filename2 = "flash.b2";
        filename3 = "flash.b3";
    }
    if (botnr == 2) {
        filename = "slomato.bk";
        filename2 = "slomato.b2";
        filename3 = "slomato.b3";
    }
    if (botnr == 3) {
        filename = "wildone.bk";
        filename2 = "wildone.b2";
        filename3 = "wildone.b3";
    }
    if (botnr == 4) {
        filename = "cooly.bk";
        filename2 = "cooly.b2";
        filename3 = "cooly.b3";
    }
    if (botnr == 5) {
        filename = "littlepe.bk";
        filename2 = "littlepe.b2";
        filename3 = "littlepe.b3";
    }
    if (botnr == 6) {
        filename = "pear.bk";
        filename2 = "pear.b2";
        filename3 = "pear.b3";
    }
    if (botnr == 7) {
        filename = "ketchup.bk";
        filename2 = "ketchup.b2";
        filename3 = "ketchup.b3";
    }
    if (botnr == 8) {
        filename = "olive.bk";
        filename2 = "olive.b2";
        filename3 = "olive.b3";
    }
    DataOutputStream dosz = null;
    try {
        dosz = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(filename2)));
        for (int i = 0; i < activecount; i++) {
            for (int j = 0; j < Mapbet[i].size(); j++) {
                if (Mapbot[i].elementAt(j) == botnr) {
                    boolean maderun = Maprunner[i].elementAt(j);
                    if (maderun) {
                        int madestyle = Mapfirst[i].elementAt(j);
                        int madeplayer = Mapsecond[i].elementAt(j);
                        float madebet = Mapbet[i].elementAt(j);
                        dosz.writeInt(recoverID[i]);
                        dosz.writeInt(madestyle);
                        dosz.writeInt(madeplayer);
                        dosz.writeFloat(madebet);
                    }
                }
            }
        }
        dosz.writeInt(9998);
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dosz);
    }
    DataOutputStream dos2 = null;
    try {
        dos2 = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(filename3)));
        for (int i = 0; i < activecount; i++) {
            if (Tricastticket[i] == null) {
            // discard
            } else {
                if (Tricastticket[i].size() > 0) {
                    for (int j = 0; j < Tricastticket[i].size(); j++) {
                        individualTicket = (Tricastticket[i].elementAt(j));
                        if (individualTicket.elementAt(0) == botnr) {
                            dos2.writeInt(recoverID[i]);
                            for (int k = 1; k < individualTicket.size(); k++) {
                                int ticketEntry = individualTicket.elementAt(k);
                                dos2.writeInt(ticketEntry);
                            }
                        }
                    }
                }
            }
        }
        dos2.writeInt(9998);
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dos2);
    }
    DataOutputStream dos = null;
    try {
        dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(filename)));
        for (int j = 0; j < countplayers[botnr]; j++) {
            dos.writeBytes(Player[j][botnr]);
            dos.writeByte('\n');
        }
        dos.writeBytes("EndOfFileBBrec");
        dos.writeByte('\n');
    } catch (IOException e) {
        logException(e);
    } finally {
        FileHelper.closeQuietly(dos);
    }
}
