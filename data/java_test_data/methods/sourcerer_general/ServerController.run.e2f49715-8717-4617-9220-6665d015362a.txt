public void run() {
    try {
        proto = new Protocol(client, gl, gb);
        proto.setServer();
    } catch (IOException e) {
        System.err.println("failed to create protocol object: " + e.getMessage());
        return;
    }
    GamePiece p = null;
    active = true;
    while (proto.readProtoMessage()) {
        if (proto.last.equals(Protocol.MESSAGE_TYPES.MOVE) && (p = proto.getPiece()) != null) {
            piece = p;
            gameWon = GameLogic.checkForWin(gb, p.getX(), p.getY());
            if (gameWon)
                wonId = proto.getPlayerId();
            gameStalemate = GameLogic.checkForStalemate(gb);
            broadcast.release();
        } else if (proto.last.equals(Protocol.MESSAGE_TYPES.PLAYER_INFO)) {
            player = proto.getPlayer();
            broadcast.release();
        } else if (proto.last.equals(Protocol.MESSAGE_TYPES.CHAT)) {
            wasChat = true;
            chat = proto.getChat();
            broadcast.release();
        } else if (proto.last.equals(Protocol.MESSAGE_TYPES.READY) && !isGameInProgress() && !this.ready) {
            ServerController.ready = true;
            this.ready = true;
            readyCount++;
            broadcast.release();
        }
    }
    disconnect = true;
    if (!isGameInProgress() && this.ready)
        ServerController.readyCount--;
    dcdId = proto.getPlayerId();
    gl.removePlayer(proto.getPlayerId());
    clients.remove(this);
    proto.close();
    broadcast.release();
}
