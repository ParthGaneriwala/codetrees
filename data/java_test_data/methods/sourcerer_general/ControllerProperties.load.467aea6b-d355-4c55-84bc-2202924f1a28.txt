public boolean load(String thePropertiesPath) {
    String s;
    try {
        s = PApplet.join(ControlP5.papplet.loadStrings(thePropertiesPath), "\n");
    } catch (Exception e) {
        logger.warning(thePropertiesPath + ", file not found.");
        return false;
    }
    System.out.println("loading xml \n" + s);
    try {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        InputSource is = new InputSource();
        is.setCharacterStream(new StringReader(s));
        Document doc = db.parse(is);
        doc.getDocumentElement().normalize();
        NodeList nodeLst = doc.getElementsByTagName("property");
        for (int i = 0; i < nodeLst.getLength(); i++) {
            Node node = nodeLst.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element fstElmnt = (Element) node;
                String myName = getElement(fstElmnt, "name");
                String mySetter = getElement(fstElmnt, "setter");
                String myType = getElement(fstElmnt, "type");
                String myValue = getElement(fstElmnt, "value");
                // String myGetter = getElement(fstElmnt, "getter");
                try {
                    System.out.print("setting controller " + myName + "   ");
                    ControllerInterface ci = controlP5.getController(myName);
                    ci = (ci == null) ? controlP5.getGroup(myName) : ci;
                    System.out.println(ci);
                    Method method;
                    try {
                        Class<?> c = getClass(myType);
                        System.out.println(myType + " / " + c);
                        method = ci.getClass().getMethod(mySetter, new Class[] { c });
                        method.setAccessible(true);
                        method.invoke(ci, new Object[] { getValue(myValue, myType, c) });
                    } catch (Exception e) {
                        logger.severe(e.toString());
                    }
                } catch (Exception e) {
                    logger.warning("skipping a property, " + e);
                }
            }
        }
    } catch (SAXException e) {
        logger.warning("SAXException, " + e);
        return false;
    } catch (IOException e) {
        logger.warning("IOException, " + e);
        return false;
    } catch (ParserConfigurationException e) {
        logger.warning("ParserConfigurationException, " + e);
        return false;
    }
    return true;
}
