private Vector<String> getSentences(String paragraph, Vector<String> sentences) {
    String orig = paragraph.replaceAll("\\s+", " ");
    String linksMasked = maskLinks(orig);
    // //System.out.println(orig) ;
    // //System.out.println(linksMasked) ;
    String[] words = linksMasked.split(" ");
    StringBuffer sentence = new StringBuffer();
    int wordPos = 0;
    for (int i = 0; i < words.length; i++) {
        // Check the existence of a candidate
        int period_pos = words[i].lastIndexOf(".");
        int question_pos = words[i].lastIndexOf(".");
        int exclam_pos = words[i].lastIndexOf("!");
        // Determine the position of the rightmost candidate in the word
        int pos = period_pos;
        char candidate = '.';
        if (question_pos > pos) {
            pos = question_pos;
            candidate = '?';
        }
        if (exclam_pos > pos) {
            pos = exclam_pos;
            candidate = '!';
        }
        // Do the following only if the word has a candidate
        if (pos != -1) {
            String wm1 = null;
            String wm2 = null;
            boolean wm1C = false;
            boolean wm2C = false;
            // Check the previous word
            if (i > 0) {
                wm1 = words[i - 1];
                wm1C = capital(wm1);
                // Check the word before the previous one
                if (i > 1) {
                    wm2 = words[i - 2];
                    wm2C = capital(wm2);
                }
            }
            String wp1 = null;
            String wp2 = null;
            boolean wp1C = false;
            boolean wp2C = false;
            // Check the next words
            if (i < words.length - 1) {
                wp1 = words[i + 1];
                wp1C = capital(wp1);
                if (i < words.length - 2) {
                    wp2 = words[i + 2];
                    wp2C = capital(wp2);
                }
            }
            String prefix = null;
            boolean prefixC = false;
            if (pos > 0) {
                prefix = words[i].substring(0, pos);
                prefixC = capital(prefix);
            }
            String suffix = null;
            boolean suffixC = false;
            if (pos < words[i].length() - 1) {
                suffix = words[i].substring(pos + 1);
                suffixC = capital(suffix);
            }
            // System.out.println(words[i]) ;
            boolean prediction = isBoundary(candidate, wm2, wm1, removeLinkDelimeter(prefix), removeLinkDelimeter(suffix), wp1, wp2, wm2C, wm1C, prefixC, suffixC, wp1C, wp2C);
            // System.out.println(" - " + prediction) ;
            // Append the word to the sentence
            sentence.append(orig.substring(wordPos, wordPos + words[i].length()));
            sentence.append(" ");
            if (prediction) {
                // remove the extra space we added
                if (sentence.length() > 0)
                    sentences.add(sentence.substring(0, sentence.length() - 1));
                else
                    sentences.add("");
                sentence = new StringBuffer();
            }
        } else {
            // If the word doesn't have a candidate, then append the word to the sentence
            sentence.append(orig.substring(wordPos, wordPos + words[i].length()));
            sentence.append(" ");
        }
        wordPos = wordPos + words[i].length() + 1;
    }
    if (sentence.length() > 0)
        sentences.add(sentence.substring(0, sentence.length() - 1));
    return sentences;
}
