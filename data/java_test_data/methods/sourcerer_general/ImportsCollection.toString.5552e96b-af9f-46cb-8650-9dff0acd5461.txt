public String toString() {
    String rr = "";
    // First process the normal (non-wildcard non-static) imports
    Iterator<? extends JavaEntity> i = normalImports.values().iterator();
    while (i.hasNext()) {
        // String importName = ()
        JavaEntity importEntity = i.next();
        // build the statement string
        rr += "import ";
        rr += importEntity.getName() + ";" + Config.nl;
    }
    // Now do the (non-static) wildcard imports
    i = wildcardImports.iterator();
    while (i.hasNext()) {
        PackageOrClass importEntity = (PackageOrClass) i.next();
        rr += "import ";
        rr += importEntity.getName() + ".*;" + Config.nl;
    }
    // Now the static imports (non-wildcard)
    Iterator<String> ii = staticImports.keySet().iterator();
    while (ii.hasNext()) {
        String importName = ii.next();
        List<JavaEntity> l = staticImports.get(importName);
        Iterator<JavaEntity> j = l.iterator();
        while (j.hasNext()) {
            TypeEntity importEntity = j.next().resolveAsType();
            if (importEntity != null) {
                rr += "import static " + importEntity.getName();
                rr += "." + importName + ";" + Config.nl;
            }
        }
    }
    // Finally the wildcard static imports
    Iterator<JavaEntity> iii = staticWildcardImports.iterator();
    while (i.hasNext()) {
        JavaEntity importEntity = iii.next();
        rr += "import static " + importEntity.getName();
        rr += ".*;" + Config.nl;
    }
    return rr;
}
