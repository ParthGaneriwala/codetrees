public void writeRover() {
    JOptionPane.showMessageDialog(new JFrame(), "All the data will be saved in the .rover file and not only your selected data.", "Info", JOptionPane.INFORMATION_MESSAGE);
    progressBar1.setIndeterminate(true);
    try {
        String lFileLocation = null;
        // open file chooser
        JFileChooser fc = new JFileChooser();
        if (iQuantitativeValidationSingelton.getFileLocationOpener() != null) {
            fc.setCurrentDirectory(new File(iQuantitativeValidationSingelton.getFileLocationOpener()));
        }
        int returnVal = fc.showSaveDialog(new JFrame());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            iQuantitativeValidationSingelton.setFileLocationOpener(file.getParent());
            lFileLocation = fc.getSelectedFile().getAbsolutePath();
            if (!lFileLocation.endsWith(".rover")) {
                lFileLocation = lFileLocation + ".rover";
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Save command cancelled by user.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        BufferedWriter out = new BufferedWriter(new FileWriter(lFileLocation));
        out.write("//protein accession, selected, validated\n");
        // write selected proteins
        for (int i = 0; i < iSelectedProteins.size(); i++) {
            String validated = "0";
            if (iSelectedProteins.get(i).getValidated()) {
                validated = "1";
            }
            out.write(iSelectedProteins.get(i).getAccession() + ",1," + validated + "," + iSelectedProteins.get(i).getProteinComment() + "\n");
        }
        // write validated proteins
        for (int i = 0; i < iValidatedProteins.size(); i++) {
            // check if it is not in the selected proteins
            boolean found = false;
            for (int j = 0; j < iSelectedProteins.size(); j++) {
                if (iSelectedProteins.get(j).getAccession().equalsIgnoreCase(iValidatedProteins.get(i).getAccession())) {
                    found = true;
                }
            }
            if (!found) {
                out.write(iValidatedProteins.get(i).getAccession() + ",0,1," + iValidatedProteins.get(i).getProteinComment() + "\n");
            }
        }
        // write commented proteins
        for (int i = 0; i < iQuantitativeValidationSingelton.getCommentedProteins().size(); i++) {
            // the validated and selected proteins are already written
            if (!iQuantitativeValidationSingelton.getCommentedProteins().get(i).getSelected() && !iQuantitativeValidationSingelton.getCommentedProteins().get(i).getValidated()) {
                out.write(iQuantitativeValidationSingelton.getCommentedProteins().get(i).getAccession() + ",0,0," + iQuantitativeValidationSingelton.getCommentedProteins().get(i).getProteinComment() + "\n");
            }
        }
        out.write("//ratio type, ratio, sequence, proteins, valid, comment\n");
        for (int i = 0; i < iQuantitativeValidationSingelton.getValidatedRatios().size(); i++) {
            Ratio lRatio = iQuantitativeValidationSingelton.getValidatedRatios().get(i);
            out.write(iQuantitativeValidationSingelton.getValidatedRatios().get(i).getType() + "," + iQuantitativeValidationSingelton.getValidatedRatios().get(i).getRatio(false) + "," + lRatio.getParentRatioGroup().getPeptideSequence() + "," + lRatio.getParentRatioGroup().getProteinAccessionsAsString() + "|," + lRatio.getValid() + "," + lRatio.getComment() + "\n");
        }
        out.write("//protein, peptide\n");
        for (int i = 0; i < iQuantitativeValidationSingelton.getNotUsedPeptides().size(); i++) {
            out.write(iQuantitativeValidationSingelton.getNotUsedProteins().get(i) + "," + iQuantitativeValidationSingelton.getNotUsedPeptides().get(i) + "\n");
        }
        out.flush();
        out.close();
        // show that the saving is done
        JOptionPane.showMessageDialog(new JFrame(), "Saving done", "Info", JOptionPane.INFORMATION_MESSAGE);
        cancelButton.setText("Close");
    } catch (IOException e) {
        logger.error(e.getMessage(), e);
    }
}
