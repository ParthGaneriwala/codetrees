private void addHeadersToCall(Call call, EndpointReference source, EndpointReference destination, String action, Element[] bodyElements, Element[] extraHeaders) {
    Document doc = XmlUtils.createDocument();
    // Add WS-Addressing headers
    MessageHeaders headers = new MessageHeaders(destination, action);
    // If there's a source EPR, we can provide a wsa:From
    if (source != null) {
        headers.setFromAddress(source);
    }
    // NOTE: The toXML() function adds a containing soap:Header element, so I've got to remove it
    Element museHeaderElement = headers.toXML();
    museHeaderElement.normalize();
    NodeList headerList = museHeaderElement.getChildNodes();
    int headerLength = headerList.getLength();
    SOAPHeaderElement tempElement;
    for (int he = 0; he < headerLength; he++) {
        tempElement = new SOAPHeaderElement((Element) headerList.item(he));
        call.addHeader(tempElement);
    }
    // Add all of the non-WS-A SOAP headers
    SOAPHeaderElement header;
    for (int n = 0; n < extraHeaders.length; ++n) {
        if (extraHeaders[n].getNamespaceURI().equals(WsaConstants.NAMESPACE_URI)) {
            throw new RuntimeException("Duplicate addressing header");
        }
        extraHeaders[n] = (Element) doc.importNode(extraHeaders[n], true);
        header = new SOAPHeaderElement(extraHeaders[n]);
        // Axis will add duplicate actor and mustUnderstand attributes that will
        // cause issues later if we do not remove them explicitly
        String actor = header.getAttributeNS(IAeConstants.SOAP_NAMESPACE_URI, ACTOR_ATTRIBUTE);
        if (actor != null) {
            header.removeAttribute(ACTOR_ATTRIBUTE);
            header.setActor(actor);
        }
        String mustUnderstand = header.getAttributeNS(IAeConstants.SOAP_NAMESPACE_URI, MUST_UNDERSTAND_ATTRIBUTE);
        if (mustUnderstand != null) {
            header.removeAttribute(MUST_UNDERSTAND_ATTRIBUTE);
            header.setMustUnderstand(AeUtil.toBoolean(mustUnderstand));
        }
        call.addHeader(header);
    }
}
