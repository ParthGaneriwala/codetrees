static Object syntaxQuote(Object form) throws Exception {
    Object ret;
    if (Compiler.isSpecial(form))
        ret = RT.list(Compiler.QUOTE, form);
    else if (form instanceof Symbol) {
        Symbol sym = (Symbol) form;
        if (sym.ns == null && sym.name.endsWith("#")) {
            IPersistentMap gmap = (IPersistentMap) GENSYM_ENV.deref();
            if (gmap == null)
                throw new IllegalStateException("Gensym literal not in syntax-quote");
            Symbol gs = (Symbol) gmap.valAt(sym);
            if (gs == null)
                GENSYM_ENV.set(gmap.assoc(sym, gs = Symbol.intern(null, sym.name.substring(0, sym.name.length() - 1) + "__" + RT.nextID() + "__auto__")));
            sym = gs;
        } else if (sym.ns == null && sym.name.endsWith(".")) {
            Symbol csym = Symbol.intern(null, sym.name.substring(0, sym.name.length() - 1));
            csym = Compiler.resolveSymbol(csym);
            sym = Symbol.intern(null, csym.name.concat("."));
        } else if (sym.ns == null && sym.name.startsWith(".")) {
        // Simply quote method names.
        } else
            sym = Compiler.resolveSymbol(sym);
        ret = RT.list(Compiler.QUOTE, sym);
    } else if (isUnquote(form))
        return RT.second(form);
    else if (isUnquoteSplicing(form))
        throw new IllegalStateException("splice not in list");
    else if (form instanceof IPersistentCollection) {
        if (form instanceof IPersistentMap) {
            IPersistentVector keyvals = flattenMap(form);
            ret = RT.list(APPLY, HASHMAP, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(keyvals.seq()))));
        } else if (form instanceof IPersistentVector) {
            ret = RT.list(APPLY, VECTOR, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(((IPersistentVector) form).seq()))));
        } else if (form instanceof IPersistentSet) {
            ret = RT.list(APPLY, HASHSET, RT.list(SEQ, RT.cons(CONCAT, sqExpandList(((IPersistentSet) form).seq()))));
        } else if (form instanceof ISeq || form instanceof IPersistentList) {
            ISeq seq = RT.seq(form);
            if (seq == null)
                ret = RT.cons(LIST, null);
            else
                ret = RT.list(SEQ, RT.cons(CONCAT, sqExpandList(seq)));
        } else
            throw new UnsupportedOperationException("Unknown Collection type");
    } else if (form instanceof Keyword || form instanceof Number || form instanceof Character || form instanceof String)
        ret = form;
    else
        ret = RT.list(Compiler.QUOTE, form);
    if (form instanceof IObj && RT.meta(form) != null) {
        // filter line numbers
        IPersistentMap newMeta = ((IObj) form).meta().without(RT.LINE_KEY);
        if (newMeta.count() > 0)
            return RT.list(WITH_META, ret, syntaxQuote(((IObj) form).meta()));
    }
    return ret;
}
