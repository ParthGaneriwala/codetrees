protected int setOneBatchedParameterSet(java.sql.PreparedStatement batchedStatement, int batchedParamIndex, Object paramSet) throws SQLException {
    BindValue[] paramArg = ((BatchedBindValues) paramSet).batchedParameterValues;
    for (int j = 0; j < paramArg.length; j++) {
        if (paramArg[j].isNull) {
            batchedStatement.setNull(batchedParamIndex++, Types.NULL);
        } else {
            if (paramArg[j].isLongData) {
                Object value = paramArg[j].value;
                if (value instanceof InputStream) {
                    batchedStatement.setBinaryStream(batchedParamIndex++, (InputStream) value, (int) paramArg[j].bindLength);
                } else {
                    batchedStatement.setCharacterStream(batchedParamIndex++, (Reader) value, (int) paramArg[j].bindLength);
                }
            } else {
                switch(paramArg[j].bufferType) {
                    case MysqlDefs.FIELD_TYPE_TINY:
                        batchedStatement.setByte(batchedParamIndex++, paramArg[j].byteBinding);
                        break;
                    case MysqlDefs.FIELD_TYPE_SHORT:
                        batchedStatement.setShort(batchedParamIndex++, paramArg[j].shortBinding);
                        break;
                    case MysqlDefs.FIELD_TYPE_LONG:
                        batchedStatement.setInt(batchedParamIndex++, paramArg[j].intBinding);
                        break;
                    case MysqlDefs.FIELD_TYPE_LONGLONG:
                        batchedStatement.setLong(batchedParamIndex++, paramArg[j].longBinding);
                        break;
                    case MysqlDefs.FIELD_TYPE_FLOAT:
                        batchedStatement.setFloat(batchedParamIndex++, paramArg[j].floatBinding);
                        break;
                    case MysqlDefs.FIELD_TYPE_DOUBLE:
                        batchedStatement.setDouble(batchedParamIndex++, paramArg[j].doubleBinding);
                        break;
                    case MysqlDefs.FIELD_TYPE_TIME:
                        batchedStatement.setTime(batchedParamIndex++, (Time) paramArg[j].value);
                        break;
                    case MysqlDefs.FIELD_TYPE_DATE:
                        batchedStatement.setDate(batchedParamIndex++, (Date) paramArg[j].value);
                        break;
                    case MysqlDefs.FIELD_TYPE_DATETIME:
                    case MysqlDefs.FIELD_TYPE_TIMESTAMP:
                        batchedStatement.setTimestamp(batchedParamIndex++, (Timestamp) paramArg[j].value);
                        break;
                    case MysqlDefs.FIELD_TYPE_VAR_STRING:
                    case MysqlDefs.FIELD_TYPE_STRING:
                    case MysqlDefs.FIELD_TYPE_VARCHAR:
                    case MysqlDefs.FIELD_TYPE_DECIMAL:
                    case MysqlDefs.FIELD_TYPE_NEW_DECIMAL:
                        Object value = paramArg[j].value;
                        if (value instanceof byte[]) {
                            batchedStatement.setBytes(batchedParamIndex, (byte[]) value);
                        } else {
                            batchedStatement.setString(batchedParamIndex, (String) value);
                        }
                        if (batchedStatement instanceof ServerPreparedStatement) {
                            BindValue asBound = ((ServerPreparedStatement) batchedStatement).getBinding(batchedParamIndex, false);
                            asBound.bufferType = paramArg[j].bufferType;
                        }
                        batchedParamIndex++;
                        break;
                    default:
                        throw new IllegalArgumentException("Unknown type when re-binding parameter into batched statement for parameter index " + batchedParamIndex);
                }
            }
        }
    }
    return batchedParamIndex;
}
