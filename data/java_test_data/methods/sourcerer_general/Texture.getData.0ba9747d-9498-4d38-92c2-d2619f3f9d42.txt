protected static ByteBuffer getData(BufferedImage image, boolean premultiply, int width, int height, boolean rescale) {
    int iwidth = image.getWidth(), iheight = image.getHeight();
    int ncomps = image.getColorModel().getNumComponents();
    // create a compatible color model
    boolean hasAlpha = (ncomps == 2 || ncomps == 4);
    ComponentColorModel cmodel = new ComponentColorModel(ColorSpace.getInstance(ncomps >= 3 ? ColorSpace.CS_sRGB : ColorSpace.CS_GRAY), hasAlpha, hasAlpha && premultiply, hasAlpha ? Transparency.TRANSLUCENT : Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
    // create the target image
    BufferedImage dest = new BufferedImage(cmodel, Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE, width, height, ncomps, null), cmodel.isAlphaPremultiplied(), null);
    // draw the image into the target buffer, scaling and flipping it in the process
    double xscale, yscale;
    if (rescale && (width != iwidth || height != iheight)) {
        xscale = (double) width / iwidth;
        yscale = -(double) height / iheight;
    } else {
        xscale = +1.0;
        yscale = -1.0;
    }
    AffineTransform xform = AffineTransform.getScaleInstance(xscale, yscale);
    xform.translate(0.0, -iheight);
    Graphics2D graphics = dest.createGraphics();
    try {
        graphics.setComposite(AlphaComposite.Src);
        graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION, rescale ? RenderingHints.VALUE_INTERPOLATION_BILINEAR : RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        graphics.drawRenderedImage(image, xform);
    } finally {
        graphics.dispose();
    }
    // get the pixel data and copy it to a byte buffer
    byte[] rgba = ((DataBufferByte) dest.getRaster().getDataBuffer()).getData();
    ByteBuffer data = BufferUtils.createByteBuffer(width * height * ncomps);
    data.put(rgba).rewind();
    return data;
}
