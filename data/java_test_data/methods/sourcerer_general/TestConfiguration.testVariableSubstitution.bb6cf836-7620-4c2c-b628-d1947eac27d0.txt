public void testVariableSubstitution() throws IOException {
    out = new BufferedWriter(new FileWriter(CONFIG));
    startConfig();
    declareProperty("my.int", "${intvar}", "42");
    declareProperty("intvar", "42", "42");
    declareProperty("my.base", "/tmp/${user.name}", UNSPEC);
    declareProperty("my.file", "hello", "hello");
    declareProperty("my.suffix", ".txt", ".txt");
    declareProperty("my.relfile", "${my.file}${my.suffix}", "hello.txt");
    declareProperty("my.fullfile", "${my.base}/${my.file}${my.suffix}", UNSPEC);
    // check that undefined variables are returned as-is
    declareProperty("my.failsexpand", "a${my.undefvar}b", "a${my.undefvar}b");
    endConfig();
    Path fileResource = new Path(CONFIG);
    conf.addResource(fileResource);
    for (Prop p : props) {
        System.out.println("p=" + p.name);
        String gotVal = conf.get(p.name);
        String gotRawVal = conf.getRaw(p.name);
        assertEq(p.val, gotRawVal);
        if (p.expectEval == UNSPEC) {
            // expansion is system-dependent (uses System properties)
            // can't do exact match so just check that all variables got expanded
            assertTrue(gotVal != null && -1 == gotVal.indexOf("${"));
        } else {
            assertEq(p.expectEval, gotVal);
        }
    }
    // check that expansion also occurs for getInt()
    assertTrue(conf.getInt("intvar", -1) == 42);
    assertTrue(conf.getInt("my.int", -1) == 42);
}
