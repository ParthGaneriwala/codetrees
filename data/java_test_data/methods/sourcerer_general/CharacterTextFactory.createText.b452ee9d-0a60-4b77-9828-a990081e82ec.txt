// documentation inherited
@Override
public Text createText(final String text, final Color4f color, final int effect, final int effectSize, final Color4f effectColor, boolean useAdvance) {
    // get/create glyphs
    final Glyph[] glyphs = new Glyph[text.length()];
    int width = 0;
    for (int ii = 0; ii < glyphs.length; ii++) {
        glyphs[ii] = getGlyph(text.charAt(ii));
        width += glyphs[ii].width;
    }
    final Dimension size = new Dimension(width, _metrics.getHeight());
    // and outlines, if necessary
    final Glyph[] outlines = (effect == OUTLINE) ? new Glyph[text.length()] : null;
    if (effect == OUTLINE) {
        for (int ii = 0; ii < outlines.length; ii++) {
            outlines[ii] = getGlyph(text.charAt(ii), OUTLINE, effectSize);
        }
    }
    return new Text() {

        public int getLength() {
            return glyphs.length;
        }

        public Dimension getSize() {
            return size;
        }

        public int getHitPos(int x, int y) {
            int tx = 0;
            for (int ii = 0; ii < glyphs.length; ii++) {
                int hwidth = glyphs[ii].width / 2;
                tx += hwidth;
                if (x < tx) {
                    return ii;
                }
                tx += (glyphs[ii].width - hwidth);
            }
            return glyphs.length;
        }

        public int getCursorPos(int index) {
            int x = 0;
            for (int ii = 0, nn = Math.min(index, glyphs.length); ii < nn; ii++) {
                x += glyphs[ii].width;
            }
            return x;
        }

        public void render(Renderer renderer, int x, int y, float alpha) {
            // add the descent above the baseline
            y += _metrics.getDescent();
            // multi-pixel outlines go below the character
            if (outlines != null && effectSize > 1) {
                renderGlyphs(renderer, outlines, effectColor, x, y, alpha);
            }
            // as do shadows
            if (effect == SHADOW) {
                renderGlyphs(renderer, glyphs, effectColor, x + effectSize - 1, y - effectSize, alpha);
                x += 1;
            }
            // now draw the characters
            renderGlyphs(renderer, glyphs, color, x, y, alpha);
            // single-pixel outlines go on top of the character
            if (outlines != null && effectSize == 1) {
                renderGlyphs(renderer, outlines, effectColor, x, y, alpha);
            }
        }

        protected void renderGlyphs(Renderer renderer, Glyph[] glyphs, Color4f color, int x, int y, float alpha) {
            float a = color.a * alpha;
            renderer.setColorState(color.r * a, color.g * a, color.b * a, a);
            for (Glyph glyph : glyphs) {
                glyph.render(renderer, x, y);
                x += glyph.width;
            }
        }
    };
}
