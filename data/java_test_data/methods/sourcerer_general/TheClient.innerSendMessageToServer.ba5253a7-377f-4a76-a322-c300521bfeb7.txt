public Object innerSendMessageToServer(String message) throws IOException, ServerWriteOrReadException {
    Object resp = null;
    SSLSocket serverConnection = null;
    ClientServerProtocol parser = new ClientServerProtocol(msgType.SERVER);
    String[] commandPar = parseCommand(message, parser);
    if (commandPar == null) {
        this.logger.print_error("Wrong message to server: " + parser.result);
        throw new IOException("Wrong message to the server");
    }
    // send the command to the server
    try {
        serverConnection = (SSLSocket) sslsocketfactory.createSocket(serverAddress, serverPort);
        serverConnection.setEnabledCipherSuites(enabledCipherSuites);
        serverConnection.setSoTimeout(ClientServerProtocol.timeout);
    } catch (IOException ex) {
        logger.print_error("Connection problems with server: " + ex.getMessage());
        throw ex;
    }
    PrintWriter out = new PrintWriter(serverConnection.getOutputStream(), true);
    // send the message
    String str = ClientServerProtocol.buildCommand(commandPar);
    logger.print_info("Sending your message: " + str + " to the server...");
    out.println(str);
    out.println();
    // checking that there were no errors on sending
    if (out.checkError()) {
        // there was an error
        throw new ServerWriteOrReadException();
    }
    ObjectInputStream response = new ObjectInputStream(serverConnection.getInputStream());
    logger.print_info("READING response from socket...");
    // get server's response
    try {
        if ((resp = response.readObject()) != null) {
            logger.print_info("Server Response is:" + resp);
        } else {
            logger.print_error("Server response is NULL!");
        }
    } catch (SocketTimeoutException e) {
        throw new ServerWriteOrReadException();
    } catch (ClassNotFoundException e) {
    // class will always be found
    }
    if (out != null) {
        out.close();
    }
    if (response != null) {
        response.close();
    }
    if (serverConnection != null) {
        serverConnection.close();
    }
    return resp;
}
