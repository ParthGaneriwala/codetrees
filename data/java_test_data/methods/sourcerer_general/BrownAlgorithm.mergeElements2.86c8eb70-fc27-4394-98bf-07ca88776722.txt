private void mergeElements2(final int[] indices, final int i, final int j, final int numElements, final int totalNumElements) {
    int idx_i = indices[i];
    int idx_j = indices[j];
    int k = numElements - 1;
    int idx_k = indices[k];
    p[idx_i][idx_i] = p[idx_i][idx_i] + p[idx_i][idx_j] + p[idx_j][idx_i] + p[idx_j][idx_j];
    for (int m = 0; m < totalNumElements; ++m) {
        if (m == i || m == j)
            continue;
        int idx_m = indices[m];
        p[idx_m][idx_i] = p[idx_m][idx_i] + p[idx_m][idx_j];
        p[idx_i][idx_m] = p[idx_i][idx_m] + p[idx_j][idx_m];
    }
    if (j < k) {
        p[idx_j] = p[idx_k].clone();
        for (int m = 0; m < totalNumElements; ++m) {
            int idx_m = indices[m];
            p[idx_m][idx_j] = p[idx_m][idx_k];
        }
    }
    // naively recompute the arrays
    pr = new double[pr.length];
    for (int m = 0; m < totalNumElements; ++m) {
        int idx_m = indices[m];
        pl[idx_m] = 0.0;
        for (int l = 0; l < totalNumElements; ++l) {
            int idx_l = indices[l];
            pl[idx_m] += p[idx_m][idx_l];
            pr[idx_l] += p[idx_m][idx_l];
        }
    }
    for (int m = 0; m < totalNumElements; ++m) {
        int idx_m = indices[m];
        for (int l = 0; l < totalNumElements; ++l) {
            int idx_l = indices[l];
            q[idx_m][idx_l] = p[idx_m][idx_l] == 0.0 ? 0.0 : p[idx_m][idx_l] * Math.log(p[idx_m][idx_l] / (pl[idx_m] * pr[idx_l]));
        }
    }
    for (int m = 0; m < totalNumElements; ++m) {
        int idx_m = indices[m];
        s[idx_m] = 0.0;
        for (int l = 0; l < totalNumElements; ++l) {
            int idx_l = indices[l];
            s[idx_m] += q[idx_l][idx_m] + q[idx_m][idx_l];
        }
        s[idx_m] -= q[idx_m][idx_m];
    }
}
