@Override
public void run() {
    super.run();
    boolean retour = true;
    int pourcentToAddToProgressBar = 10;
    // panelCommandSetName
    PanelModificationProfilCommandSetName panelCommandSetName = panelAdvancedOption.getPanelCommandSet();
    if (panelCommandSetName.isChanged()) {
        // le CommandSet à changé
        if (JOptionPane.showConfirmDialog(thisObject, UIString.getUIString("LB_CONFPROFIL_CHANGE_COMMANDESET") + "\n" + UIString.getUIString("LB_CONFPROFIL_CHANGE_CONTINUE"), UIString.getUIString("LB_CONFPROFIL_CHANGE_COMMANDESET_TITLE"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            // On change le commandset si aucune erreur
            String oldCommandSetName = CProfil.getInstance().getCommandSetName().getcommandSetName();
            try {
                panelCommandSetName.validateDataEntry();
                CCommandSet.GetInstance().LoadCommandSetFile(CFilePaths.getCommandSetsFolder() + CProfil.getInstance().getCommandSetName().getcommandSetName());
                uiKeyboard.getCoreKeyboard().flushAllKeysFromClass(CKeyCharacter.class);
            } catch (Exception ex) {
                CProfil.getInstance().getCommandSetName().setcommandSetName(oldCommandSetName);
                CMessageEngine.newError(UIString.getUIString("EX_COMMANDSET_FILE_ERROR") + CProfil.getInstance().getCommandSetName().getcommandSetName(), ex.getMessage());
            }
        } else {
            retour = false;
        }
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelShortcutSetName
    PanelModificationProfilShortcutSetName panelShortcutSetName = panelAdvancedOption.getPanelShortcutSet();
    if (panelShortcutSetName.isChanged()) {
        // le ShortcutSet à changé
        if (JOptionPane.showConfirmDialog(thisObject, UIString.getUIString("LB_CONFPROFIL_CHANGE_SHORTCUTSET") + "\n" + UIString.getUIString("LB_CONFPROFIL_CHANGE_CONTINUE"), UIString.getUIString("LB_CONFPROFIL_CHANGE_SHORTCUTSET_TITLE"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            // On change le shortcutset si aucune erreur
            String oldShortcutSetName = CProfil.getInstance().getShortcutSetName().getShortCutName();
            try {
                panelShortcutSetName.validateDataEntry();
                CShortcutSet.GetInstance().LoadShortcutSetFile(CFilePaths.getShortcutSetsFolder() + CProfil.getInstance().getShortcutSetName().getShortCutName());
                uiKeyboard.getCoreKeyboard().flushAllKeysFromClass(CKeyShortcut.class);
            } catch (Exception ex) {
                CProfil.getInstance().getShortcutSetName().setShortCutName(oldShortcutSetName);
                CMessageEngine.newError(UIString.getUIString("EX_SHORTCUTSET_FILE_ERROR") + CProfil.getInstance().getShortcutSetName().getShortCutName(), ex.getMessage());
            }
        } else {
            retour = false;
        }
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelAdvancedOption
    if (panelAdvancedOption.isChanged()) {
        panelAdvancedOption.validateDataEntry();
        // on prévient l'utilisateur qu'il faudra redémarer
        JOptionPane.showMessageDialog(thisObject, UIString.getUIString("LB_CONFPROFIL_CHANGE_RESTART"), UIString.getUIString("LB_CONFPROFIL_CHANGE_RESTART_TITLE"), JOptionPane.WARNING_MESSAGE);
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelDictionaryName
    if (panelDictionaryName.isChanged()) {
        // le dictionnaire à changé
        // chargement du nouveau dictionnaire
        // on met les données dans le noyau
        panelDictionaryName.validateDataEntry();
        // on vide le dictionnaire
        CDictionary.dispose();
        // on créé le nouveau
        try {
            CDictionary.createInstance(CSettings.getDictionnaryName(), CSettings.getPreferedWords());
        } catch (Exception ex) {
            CMessageEngine.newFatalError(UIString.getUIString("MSG_MAIN_CANT_LOAD_DICTIONNARY_1") + CSettings.getDictionnaryName().getDictionaryName() + UIString.getUIString("MSG_MAIN_CANT_LOAD_DICTIONNARY_2"), ex.getMessage());
        }
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelFont l
    if (panelFont.isChanged()) {
        // la police à changé
        panelFont.validateDataEntry();
        // on recharge le uikeyboard
        uiKeyboard.redrawAllKeys();
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelKeyboardColor l
    if (panelKeyboardColor.isChanged()) {
        // la couleur du clavier à changé
        panelKeyboardColor.validateDataEntry();
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelPreferedWords
    if (panelPreferedWords.isChanged()) {
        // les mots préférés ont changés
        panelPreferedWords.validateDataEntry();
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelSound l
    if (panelSound.isChanged()) {
        // les option de son ont changés
        panelSound.validateDataEntry();
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelTransparency l
    if (panelTransparency.isChanged()) {
        // la transparence à changé
        panelTransparency.validateDataEntry();
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelLangueUI
    if (panelLangueUI.isChanged()) {
        // la langueUI à changé
        panelLangueUI.validateDataEntry();
        // on prévient l'utilisateur qu'il faudra redémarer
        JOptionPane.showMessageDialog(thisObject, UIString.getUIString("LB_CONFPROFIL_CHANGE_RESTART"), UIString.getUIString("LB_CONFPROFIL_CHANGE_RESTART_TITLE"), JOptionPane.WARNING_MESSAGE);
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    // panelNavigation
    if (panelNavigation.isChanged()) {
        // le type de navigation à changé
        panelNavigation.validateDataEntry();
        // si on est en défilement et qu'il a coché moveMouseOnEntered
        if (CSettings.getNavigation().isMoveMouseOnEntered() && CSettings.getNavigation().getTypeNavigation() == TNavigationType.DEFILEMENT) {
            MouseMoveEngine.getInstance().listen();
        } else {
            MouseMoveEngine.getInstance().unListen();
        }
    }
    progressBarApply.setValue(progressBarApply.getValue() + pourcentToAddToProgressBar);
    EndThread(retour);
}
