private void save() {
    if (turnable) {
        DbTurnableType turnableType = dbBaseItemType.getDbTurnableType();
        if (turnableType == null) {
            turnableType = new DbTurnableType();
            dbBaseItemType.setDbTurnableType(turnableType);
        }
        turnableType.setImageCount(imageCount);
    } else {
        dbBaseItemType.setDbTurnableType(null);
    }
    if (movable) {
        DbMovableType movableType = dbBaseItemType.getDbMovableType();
        if (movableType == null) {
            movableType = new DbMovableType();
            dbBaseItemType.setDbMovableType(movableType);
        }
        movableType.setSpeed(speed);
        movableType.setTerrainType(SurfaceType.LAND);
    } else {
        dbBaseItemType.setDbMovableType(null);
    }
    if (weapon) {
        DbWeaponType weaponType = dbBaseItemType.getDbWeaponType();
        if (weaponType == null) {
            weaponType = new DbWeaponType();
            dbBaseItemType.setDbWeaponType(weaponType);
        }
        weaponType.setRange(weaponRange);
        weaponType.setDamage(damage);
        weaponType.setReloadTime(weaponReloadTime);
        weaponType.setMuzzlePointX_0(weaponMuzzlePointX_0);
        weaponType.setMuzzlePointY_0(weaponMuzzlePointY_0);
        weaponType.setMuzzlePointX_90(weaponMuzzlePointX_90);
        weaponType.setMuzzlePointY_90(weaponMuzzlePointY_90);
        weaponType.setStretchMuzzleFlashToTarget(weaponMuzzleStretch);
        if (weaponMuzzleImage != null) {
            ImageIcon image = new ImageIcon(weaponMuzzleImage.getBytes());
            weaponType.setMuzzleFlashWidth(image.getIconWidth());
            weaponType.setMuzzleFlashLength(image.getIconHeight());
            DbItemTypeData itemTypeImage = new DbItemTypeData();
            itemTypeImage.setContentType(weaponMuzzleImage.getContentType());
            itemTypeImage.setData(weaponMuzzleImage.getBytes());
            weaponType.setDbMuzzleImage(itemTypeImage);
        }
        if (weaponSound != null) {
            DbItemTypeData sound = new DbItemTypeData();
            sound.setContentType(weaponSound.getContentType());
            sound.setData(weaponSound.getBytes());
            weaponType.setDbSound(sound);
        }
    } else {
        dbBaseItemType.setDbWeaponType(null);
    }
    if (launcher) {
        DbLauncherType dbLauncherType = dbBaseItemType.getDbLauncherType();
        if (dbLauncherType == null) {
            dbLauncherType = new DbLauncherType();
            dbBaseItemType.setDbLauncherType(dbLauncherType);
        }
        dbLauncherType.setProgress(launcherProgress);
        if (launcherDbProjectileItemType != null) {
            dbLauncherType.setDbProjectileItemType(ItemsUtil.getProjectileItemType4Id(launcherDbProjectileItemType, projectileItemTypes));
        }
    } else {
        dbBaseItemType.setDbLauncherType(null);
    }
    if (factory) {
        DbFactoryType factoryType = dbBaseItemType.getDbFactoryType();
        if (factoryType == null) {
            factoryType = new DbFactoryType();
            dbBaseItemType.setDbFactoryType(factoryType);
        }
        factoryType.setAbleToBuild(ItemsUtil.stringToItemTypes(factoryAbleToBuild, baseItemTypes));
        factoryType.setProgress(factoryProgress);
    } else {
        dbBaseItemType.setDbFactoryType(null);
    }
    if (harvester) {
        DbHarvesterType harvesterType = dbBaseItemType.getDbHarvesterType();
        if (harvesterType == null) {
            harvesterType = new DbHarvesterType();
            dbBaseItemType.setDbHarvesterType(harvesterType);
        }
        harvesterType.setProgress(harvesterProgress);
        harvesterType.setRange(harvesterRange);
    } else {
        dbBaseItemType.setDbHarvesterType(null);
    }
    if (consumer) {
        DbConsumerType consumerType = dbBaseItemType.getDbConsumerType();
        if (consumerType == null) {
            consumerType = new DbConsumerType();
            dbBaseItemType.setDbConsumerType(consumerType);
        }
        consumerType.setWattage(consumerWattage);
    } else {
        dbBaseItemType.setDbConsumerType(null);
    }
    if (builder) {
        DbBuilderType builderType = dbBaseItemType.getDbBuilderType();
        if (builderType == null) {
            builderType = new DbBuilderType();
            dbBaseItemType.setDbBuilderType(builderType);
        }
        builderType.setProgress(builderProgress);
        builderType.setRange(builderRange);
        builderType.setAbleToBuild(ItemsUtil.stringToItemTypes(builderAbleToBuild, baseItemTypes));
    } else {
        dbBaseItemType.setDbBuilderType(null);
    }
    if (generator) {
        DbGeneratorType generatorType = dbBaseItemType.getDbGeneratorType();
        if (generatorType == null) {
            generatorType = new DbGeneratorType();
            dbBaseItemType.setDbGeneratorType(generatorType);
        }
        generatorType.setWattage(generatorWattage);
    } else {
        dbBaseItemType.setDbGeneratorType(null);
    }
    if (itemContainer) {
        DbItemContainerType dbItemContainerType = dbBaseItemType.getDbItemContainerType();
        if (dbItemContainerType == null) {
            dbItemContainerType = new DbItemContainerType();
            dbBaseItemType.setDbItemContainerType(dbItemContainerType);
        }
        dbItemContainerType.setAbleToContain(ItemsUtil.stringToItemTypes(itemContainerAbleToContain, baseItemTypes));
        dbItemContainerType.setMaxCount(itemContainerMaxCount);
        dbItemContainerType.setRange(itemContainerRange);
    } else {
        dbBaseItemType.setDbItemContainerType(null);
    }
    if (house) {
        DbHouseType dbHouseType = new DbHouseType();
        dbHouseType.setSpace(space);
        dbBaseItemType.setDbHouseType(dbHouseType);
    } else {
        dbBaseItemType.setDbHouseType(null);
    }
    if (special) {
        DbSpecialType specialType = dbBaseItemType.getDbSpecialType();
        if (specialType == null) {
            specialType = new DbSpecialType();
            dbBaseItemType.setDbSpecialType(specialType);
        }
        specialType.setString(specialString);
    } else {
        dbBaseItemType.setDbSpecialType(null);
    }
    Html5ImagesUploadConverter html5ImagesUploadConverter = new Html5ImagesUploadConverter(imageFileField, dbBaseItemType);
    if (!html5ImagesUploadConverter.isEmpty()) {
        dbBaseItemType.setItemTypeImages(html5ImagesUploadConverter.getImages());
        ImageIcon image = new ImageIcon(html5ImagesUploadConverter.getFirst().getData());
        dbBaseItemType.setHeight(image.getIconHeight());
        dbBaseItemType.setWidth(image.getIconWidth());
    }
    itemService.saveDbItemType(dbBaseItemType);
}
