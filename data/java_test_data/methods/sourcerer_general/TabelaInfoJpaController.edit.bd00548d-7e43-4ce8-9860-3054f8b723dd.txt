public void edit(TabelaInfo tabelaInfo) throws NonexistentEntityException, Exception {
    EntityManager em = null;
    try {
        em = getEntityManager();
        em.getTransaction().begin();
        TabelaInfo persistentTabelaInfo = em.find(TabelaInfo.class, tabelaInfo.getId());
        Set<QuantidadeItem> quantidadesOld = persistentTabelaInfo.getQuantidades();
        Set<QuantidadeItem> quantidadesNew = tabelaInfo.getQuantidades();
        Set<QuantidadeItem> attachedQuantidadesNew = new HashSet<QuantidadeItem>();
        for (QuantidadeItem quantidadesNewQuantidadeItemToAttach : quantidadesNew) {
            quantidadesNewQuantidadeItemToAttach = em.getReference(quantidadesNewQuantidadeItemToAttach.getClass(), quantidadesNewQuantidadeItemToAttach.getId());
            attachedQuantidadesNew.add(quantidadesNewQuantidadeItemToAttach);
        }
        quantidadesNew = attachedQuantidadesNew;
        tabelaInfo.setQuantidades(quantidadesNew);
        tabelaInfo = em.merge(tabelaInfo);
        for (QuantidadeItem quantidadesOldQuantidadeItem : quantidadesOld) {
            if (!quantidadesNew.contains(quantidadesOldQuantidadeItem)) {
                quantidadesOldQuantidadeItem.setTabelaInfo(null);
                quantidadesOldQuantidadeItem = em.merge(quantidadesOldQuantidadeItem);
            }
        }
        for (QuantidadeItem quantidadesNewQuantidadeItem : quantidadesNew) {
            if (!quantidadesOld.contains(quantidadesNewQuantidadeItem)) {
                TabelaInfo oldTabelaInfoOfQuantidadesNewQuantidadeItem = quantidadesNewQuantidadeItem.getTabelaInfo();
                quantidadesNewQuantidadeItem.setTabelaInfo(tabelaInfo);
                quantidadesNewQuantidadeItem = em.merge(quantidadesNewQuantidadeItem);
                if (oldTabelaInfoOfQuantidadesNewQuantidadeItem != null && !oldTabelaInfoOfQuantidadesNewQuantidadeItem.equals(tabelaInfo)) {
                    oldTabelaInfoOfQuantidadesNewQuantidadeItem.getQuantidades().remove(quantidadesNewQuantidadeItem);
                    oldTabelaInfoOfQuantidadesNewQuantidadeItem = em.merge(oldTabelaInfoOfQuantidadesNewQuantidadeItem);
                }
            }
        }
        em.getTransaction().commit();
    } catch (Exception ex) {
        String msg = ex.getLocalizedMessage();
        if (msg == null || msg.length() == 0) {
            long id = tabelaInfo.getId();
            if (findTabelaInfo(id) == null) {
                throw new NonexistentEntityException("The tabelaInfo with id " + id + " no longer exists.");
            }
        }
        throw ex;
    } finally {
        if (em != null) {
            em.close();
        }
    }
}
