public void testCheckAvailabilityForBookingWithUnavailableSeats() throws Exception {
    Calendar cal = Calendar.getInstance();
    Date now = cal.getTime();
    cal.add(Calendar.MINUTE, -10);
    Date tenMinutesEarlier = cal.getTime();
    cal.add(Calendar.MINUTE, 5);
    Date fiveMinutesEarlier = cal.getTime();
    cal.add(Calendar.MINUTE, 10);
    Date fiveMinutesFromNow = cal.getTime();
    cal.add(Calendar.DAY_OF_YEAR, 7);
    Date aWeekLater = cal.getTime();
    // populating the databaes
    dbHelper.insertShow(1, "show1", -1, -1);
    dbHelper.insertPerformance(1, aWeekLater, -1, 1);
    dbHelper.insertPriceBand(1, new BigDecimal(1.0), -1, -1);
    dbHelper.insertBooking(1, 3, tenMinutesEarlier, fiveMinutesEarlier, new BigDecimal(5.0), -1);
    dbHelper.insertBooking(2, 1, now, fiveMinutesFromNow, new BigDecimal(4.0), -1);
    dbHelper.insertSeat(1, "seat1", -1, -1);
    dbHelper.insertSeat(2, "seat2", 1, -1);
    dbHelper.setRightSeatForSeat(1, 2);
    dbHelper.insertSeat(3, "seat3", 2, -1);
    dbHelper.setRightSeatForSeat(2, 3);
    dbHelper.insertSeatStatus(1, 1, 1, 1);
    dbHelper.insertSeatStatus(1, 2, 1, 1);
    dbHelper.insertSeatStatus(1, 3, 2, 1);
    // creating the domain model
    Address address = new Address("country", "city", "street", "1234");
    Purchase purchase = new Purchase("abc", now, "john", "xxx", "john@mail.com", address, address);
    Booking booking = new Booking(3, now, fiveMinutesFromNow, new BigDecimal(5.0));
    booking.setId(1);
    booking.setPurchase(purchase);
    // executing the tested method
    boolean result = dao.checkAvailabilityForBooking(booking);
    beforeAssertions();
    // assertions
    assertFalse("seat availability", result);
}
