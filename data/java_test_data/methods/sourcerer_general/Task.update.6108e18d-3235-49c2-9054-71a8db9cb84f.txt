public int update(Connection db) throws SQLException {
    String sql = null;
    PreparedStatement pst = null;
    int count = 0;
    if (id == -1) {
        throw new SQLException("Task ID not specified");
    }
    if (!isValid()) {
        return -1;
    }
    boolean commit = db.getAutoCommit();
    try {
        if (commit) {
            db.setAutoCommit(false);
        }
        Task previousTask = new Task(db, id);
        sql = "UPDATE task " + "SET modifiedby = ?, priority = ?, description = ?, notes = ?, " + "sharing = ?, owner = ?, duedate = ?, estimatedloe = ?, " + (estimatedLOEType == -1 ? "" : "estimatedloetype = ?, ") + "functional_area = ?, status = ?, business_value = ?, complexity = ?, target_release = ?, target_sprint = ?, loe_remaining = ?, " + "assigned_priority = ?, " + "modified = CURRENT_TIMESTAMP, complete = ?, completedate = ?, category_id = ? ";
        if (linkModuleId > -1 && linkItemId > -1) {
            sql += ", link_module_id = ?, link_item_id = ? ";
        }
        sql += "WHERE task_id = ? AND modified = ? ";
        int i = 0;
        pst = db.prepareStatement(sql);
        pst.setInt(++i, this.getModifiedBy());
        pst.setInt(++i, this.getPriority());
        pst.setString(++i, this.getDescription());
        pst.setString(++i, this.getNotes());
        pst.setInt(++i, this.getSharing());
        DatabaseUtils.setInt(pst, ++i, this.getOwner());
        pst.setTimestamp(++i, this.getDueDate());
        pst.setDouble(++i, this.getEstimatedLOE());
        if (this.getEstimatedLOEType() != -1) {
            pst.setInt(++i, this.getEstimatedLOEType());
        }
        DatabaseUtils.setInt(pst, ++i, functionalArea);
        DatabaseUtils.setInt(pst, ++i, status);
        DatabaseUtils.setInt(pst, ++i, businessValue);
        DatabaseUtils.setInt(pst, ++i, complexity);
        DatabaseUtils.setInt(pst, ++i, targetRelease);
        DatabaseUtils.setInt(pst, ++i, targetSprint);
        DatabaseUtils.setInt(pst, ++i, loeRemaining);
        DatabaseUtils.setInt(pst, ++i, assignedPriority);
        pst.setBoolean(++i, this.getComplete());
        if (previousTask.getComplete() && this.getComplete()) {
            completeDate = previousTask.getCompleteDate();
        } else if (this.getComplete() && !previousTask.getComplete()) {
            completeDate = new Timestamp(System.currentTimeMillis());
        } else {
            completeDate = null;
        }
        DatabaseUtils.setTimestamp(pst, ++i, completeDate);
        DatabaseUtils.setInt(pst, ++i, categoryId);
        if (linkModuleId > -1 && linkItemId > -1) {
            pst.setInt(++i, linkModuleId);
            pst.setInt(++i, linkItemId);
        }
        pst.setInt(++i, id);
        pst.setTimestamp(++i, this.getModified());
        count = pst.executeUpdate();
        pst.close();
        if (contactId == -1) {
        // processContacts(db, false);
        } else {
            processContacts(db, true);
        }
        // Log the task
        TaskLog taskLog = new TaskLog(this);
        taskLog.insert(db);
        if (commit) {
            db.commit();
        }
    } catch (SQLException e) {
        if (commit) {
            db.rollback();
        }
        e.printStackTrace();
        throw e;
    } finally {
        if (commit) {
            db.setAutoCommit(true);
        }
    }
    return count;
}
