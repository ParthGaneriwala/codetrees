public static void main(String[] args) {
    int width = 800;
    int height = 600;
    int depth = 16;
    try {
        DisplayMode[] modes = Display.getAvailableDisplayModes();
        for (DisplayMode currentMode : modes) {
            if (currentMode.getWidth() == width && currentMode.getHeight() == height && currentMode.getBitsPerPixel() == depth) {
                Display.setDisplayMode(currentMode);
                break;
            }
        }
        Display.setTitle("GameTest");
        Display.setLocation(10, 10);
        Display.create();
        Display.sync(100);
        // Reset The Projection Matrix
        glLoadIdentity();
        GLU.gluPerspective(45, 16 / 9, 0, 10);
    } catch (Exception e) {
        Sys.alert("Erreur", "Une erreur est survenue lors de la crï¿½ation de l'affichage : " + e);
        System.exit(1);
    }
    initVBO();
    Timer t = new Timer();
    while (!Display.isCloseRequested()) {
        glClear(GL_COLOR_BUFFER_BIT);
        glLoadIdentity();
        GLU.gluPerspective(45, 16 / 9, 0, 100);
        glBegin(GL_TRIANGLES);
        glVertex3f(-0.39f, 0f, -1f);
        glVertex3f(-0.41f, 0f, -1f);
        glVertex3f(-0.41f, 0.1f, -1f);
        glEnd();
        keyBoard();
        iteration++;
        glRotatef(yAngleDeg, 0, 1, 0);
        glTranslatef(posX, posY, posZ);
        if (useDisplay == 0) {
            drawNormal();
            Display.setTitle("Normal");
        } else if (useDisplay == 1) {
            drawVBO();
            Display.setTitle("VBO");
        }
        glColor3f(1, 1, 1);
        glBegin(GL_TRIANGLES);
        glVertex3f(-0.015f, -0.01f, -0.01f);
        glVertex3f(-0.01f, -0.01f, -0.01f);
        glVertex3f(-0.01f, 0.01f, -0.01f);
        glEnd();
        Timer.tick();
        totalTime += (t.getTime() - lastTime) * 1000;
        lastTime = t.getTime();
        Display.setTitle(Display.getTitle() + " - AVG : " + Math.round(totalTime / iteration));
        Display.update();
    }
}
