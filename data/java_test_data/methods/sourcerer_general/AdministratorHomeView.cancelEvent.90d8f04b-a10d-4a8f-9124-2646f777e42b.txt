// GEN-LAST:event_btnCancelEventActionPerformed
private void cancelEvent() {
    Collection<Integer> custIDList = new ArrayList<Integer>();
    Event tempEvent = new Event();
    tempEvent.setName((String) this.lscnEvent.getSelectedValue());
    Collection<Event> events = DAOFactory.getInstance().getEventDAO().getEventsDO(tempEvent);
    if (events.size() != 0) {
        Iterator<Event> eventIter = events.iterator();
        while (eventIter.hasNext()) {
            Event event = eventIter.next();
            event.setCancelled(true);
            // event.setName((String) this.lscnEvent.getSelectedValue());
            event.setName(event.getName().replaceAll("'", "''"));
            DAOFactory.getInstance().getEventDAO().updateEvent(event);
            Order order = new Order();
            order.setEventID(event.getEventID());
            Collection<Order> orders = DAOFactory.getInstance().getOrderDAO().getOrdersDO(order);
            Iterator<Order> orderIter = orders.iterator();
            while (orderIter.hasNext()) {
                Order tempOrd = orderIter.next();
                int customerID = tempOrd.getCustomerID();
                if (custIDList.isEmpty() || !custIDList.contains(customerID)) {
                    custIDList.add(customerID);
                    double cost = tempOrd.getCost();
                    Bankcard bankcard = new Bankcard();
                    bankcard.setCustomerID(customerID);
                    DAOFactory.getInstance().getBankcardDAO().findBankcard(bankcard);
                    bankcard.setBalance(bankcard.getBalance() + cost);
                    Customer customer = new Customer();
                    customer.setCustomerID(customerID);
                    DAOFactory.getInstance().getCustomerDAO().findCustomer(customer);
                    PremiumCustomer pc = new PremiumCustomer();
                    pc.setCustomerID(customerID);
                    if (DAOFactory.getInstance().getPremiumCustomerDAO().findPremiumCustomer(pc) != null)
                        pc.setPoints(pc.getPoints() - (int) cost / 5);
                    List<String> emailaddr = new ArrayList<String>();
                    emailaddr.add(customer.getEmailAddress());
                    Email email = new Email();
                    email.setEmailAddress(emailaddr);
                    email.setSubject("Refund Notice");
                    email.setMessage("Dear " + customer.getLastName() + ", We have refunded " + cost + " to your bank card because event " + event.getName() + "has been cancelled");
                    try {
                        EmailSender emailSender = new EmailSender();
                        emailSender.sendSSLMessage(email);
                    } catch (AddressException ex) {
                        Logger.getLogger(AdministratorHomeView.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MessagingException ex) {
                        Logger.getLogger(AdministratorHomeView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        JOptionPane.showMessageDialog(null, "Event has been cancalled", "Cancel events", JOptionPane.INFORMATION_MESSAGE);
    }
}
