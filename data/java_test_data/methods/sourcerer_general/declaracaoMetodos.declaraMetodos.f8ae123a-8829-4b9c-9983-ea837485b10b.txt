public boolean declaraMetodos(TabelaSimbolos tabelaSimbolos) {
    parametros verificaParametros = new parametros();
    declaracaoStructs verificaDeclaracaoStruct = new declaracaoStructs(tabelaSimbolos);
    declaracaoVariaveis verificaDeclaracaoVariaveis = new declaracaoVariaveis(tabelaSimbolos);
    declaracaoPonteiros verificaDeclaracaoPonteiros = new declaracaoPonteiros(tabelaSimbolos);
    cmd verificaCmd = new cmd();
    chamadaDeFuncao verificaChamadaDeFuncao = new chamadaDeFuncao(tabelaSimbolos);
    if (tabelaSimbolos.getTipo().equals("palavra") || tabelaSimbolos.getTipo().equals("identificador")) {
        tabelaSimbolos.soConsome();
        if (tabelaSimbolos.getLookahead().equals("*"))
            tabelaSimbolos.reconhecer("*");
        else if (tabelaSimbolos.getTipo().equals("identificador")) {
            // Reconhece o identificador
            tabelaSimbolos.soConsome();
            if (// Reconhece o parenteses abrindo (
            tabelaSimbolos.reconhecer("("))
                if (!tabelaSimbolos.getLookahead().equals(")")) {
                    if (// Retorna o ponteiro sobre um ")"
                    verificaParametros.sintaxeParametros(tabelaSimbolos)) // Retorna o ponteiro sobre um ")"
                    {
                    } else
                        return false;
                }
            if (!tabelaSimbolos.reconhecer(")"))
                this.recuperaErro(tabelaSimbolos.getLinha(), tabelaSimbolos, "Erro: ) esperado na linha: ", sincronizadores);
            else if (!tabelaSimbolos.reconhecer("{"))
                this.recuperaErro(tabelaSimbolos.getLinha(), tabelaSimbolos, " Erro: { esperado na linha: ", sincronizadores);
            TabelaErros.getInstance().imprimeTabela();
            while (tabelaSimbolos.getLookahead().equals("typedef") || tabelaSimbolos.getLookahead().equals("struct") || Tipos.apenasCompara(tabelaSimbolos)) {
                // e o else if seguinte, caso não tenha, venha direto o struct
                if (tabelaSimbolos.getLookahead().equals("typedef")) {
                    if (tabelaSimbolos.superLookahead(1).equals("struct")) {
                        verificaDeclaracaoStruct.declaraStructs();
                    } else if (Tipos.apenasCompara(tabelaSimbolos)) {
                        verificaDeclaracaoVariaveis.declaraVariaveis();
                    } else
                        this.recuperaErro(0, tabelaSimbolos, "Erro: estrutura typedef mal formada  na linha: ", sincronizadoresDeclaracoes);
                } else if (tabelaSimbolos.getLookahead().equals("struct")) {
                    verificaDeclaracaoStruct.declaraStructs();
                } else if (Tipos.apenasCompara(tabelaSimbolos)) {
                    if (tabelaSimbolos.superTipo(1).equals("identificador"))
                        verificaDeclaracaoVariaveis.declaraVariaveis();
                    else if (tabelaSimbolos.superLookahead(1).equals("*"))
                        verificaDeclaracaoPonteiros.declaraPonteiros();
                    else
                        this.recuperaErro(0, tabelaSimbolos, "Erro: estrutura typedef mal formada  na linha: ", sincronizadoresDeclaracoes);
                }
            // esse else foi retirado pois ele impossibilitava do fecho: {<declaracaoStructs> | <declaracaoVariaveis> | <declaracaoPonteiros>}
            // ser vazio
            // else
            // return false;
            }
            // {<cmd>}
            while (tabelaSimbolos.getLookahead().equals("*") | tabelaSimbolos.getLookahead().equals("printf") | tabelaSimbolos.getLookahead().equals("scanf") | tabelaSimbolos.getLookahead().equals("do") | tabelaSimbolos.getLookahead().equals("while") | tabelaSimbolos.getLookahead().equals("for") | tabelaSimbolos.getLookahead().equals("if") | tabelaSimbolos.getTipo().equals("identificador")) {
                verificaCmd.sintaxeCmd(tabelaSimbolos);
            }
            if (tabelaSimbolos.reconhecer("return")) {
                System.out.println(tabelaSimbolos.getLookahead());
                System.out.println(tabelaSimbolos.getTipo());
                System.out.println(tabelaSimbolos.superLookahead(1));
                System.out.println(tabelaSimbolos.superTipo(1));
                if (tabelaSimbolos.getTipo().equals("numero"))
                    tabelaSimbolos.reconhecer(tabelaSimbolos.getLookahead());
                else // COnsertar. Aqui tem que retornar verdadeiro se o elemento for um boolean
                if (tabelaSimbolos.getLookahead().equals("true") | tabelaSimbolos.getLookahead().equals("false"))
                    tabelaSimbolos.reconhecer(tabelaSimbolos.getLookahead());
                else // essa condição ja esta sendo atendida no else if seguinte.
                if (tabelaSimbolos.getTipo().equals("frase")) {
                    // Consertar. Tem que retornar verdadeiro se o elemento for um caracter
                    tabelaSimbolos.soConsome();
                } else if (tabelaSimbolos.getTipo().equals("identificador") && tabelaSimbolos.superLookahead(1).equals(";")) {
                    tabelaSimbolos.reconhecer(tabelaSimbolos.getLookahead());
                } else if (tabelaSimbolos.getTipo().equals("numero") || tabelaSimbolos.getTipo().equals("identificador") || tabelaSimbolos.getLookahead().equals("(")) {
                    if (verificaChamadaDeFuncao.chamaFuncao()) {
                    } else
                        return false;
                } else {
                    ErroTabela erro = new ErroTabela(tabelaSimbolos.getLinha(), "Falta ou um número ou um identificador ou um (");
                    // Tabela de Erros ja contem o erro. Isso que será impresso na tela.
                    TabelaErros.getInstance().getTabelaErros().add(erro);
                    return false;
                }
                if (tabelaSimbolos.getLookahead().equals(";")) {
                    tabelaSimbolos.reconhecer(";");
                } else {
                    ErroTabela erro = new ErroTabela(tabelaSimbolos.getLinha(), "Falta um ;");
                    // Tabela de Erros ja contem o erro. Isso que será impresso na tela.
                    TabelaErros.getInstance().getTabelaErros().add(erro);
                    return false;
                }
            } else {
                ErroTabela erro = new ErroTabela(tabelaSimbolos.getLinha(), "Falta o return");
                // Tabela de Erros ja contem o erro. Isso que será impresso na tela.
                TabelaErros.getInstance().getTabelaErros().add(erro);
                return false;
            }
            if (tabelaSimbolos.reconhecer("}")) {
                return true;
            } else {
                ErroTabela erro = new ErroTabela(tabelaSimbolos.getLinha(), "Falta um }");
                // Tabela de Erros ja contem o erro. Isso que será impresso na tela.
                TabelaErros.getInstance().getTabelaErros().add(erro);
                return false;
            }
        } else {
            ErroTabela erro = new ErroTabela(tabelaSimbolos.getLinha(), "Deveria ser um identificador");
            // Tabela de Erros ja contem o erro. Isso que será impresso na tela.
            TabelaErros.getInstance().getTabelaErros().add(erro);
            return false;
        }
    } else {
        ErroTabela erro = new ErroTabela(tabelaSimbolos.getLinha(), "Deveria ser um identificador ou palavra reservada");
        // Tabela de Erros ja contem o erro. Isso que será impresso na tela.
        TabelaErros.getInstance().getTabelaErros().add(erro);
        return false;
    }
    return true;
}
