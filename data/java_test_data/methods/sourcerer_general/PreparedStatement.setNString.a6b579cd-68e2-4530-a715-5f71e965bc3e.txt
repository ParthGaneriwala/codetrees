public void setNString(int parameterIndex, String x) throws SQLException {
    if (this.charEncoding.equalsIgnoreCase("UTF-8") || this.charEncoding.equalsIgnoreCase("utf8")) {
        setString(parameterIndex, x);
        return;
    }
    // if the passed string is null, then set this column to null
    if (x == null) {
        setNull(parameterIndex, java.sql.Types.CHAR);
    } else {
        int stringLength = x.length();
        // Ignore sql_mode=NO_BACKSLASH_ESCAPES in current implementation.
        // Add introducer _utf8 for NATIONAL CHARACTER
        StringBuffer buf = new StringBuffer((int) (x.length() * 1.1 + 4));
        buf.append("_utf8");
        buf.append('\'');
        for (int i = 0; i < stringLength; ++i) {
            char c = x.charAt(i);
            switch(c) {
                case 0:
                    /* Must be escaped for 'mysql' */
                    buf.append('\\');
                    buf.append('0');
                    break;
                case '\n':
                    /* Must be escaped for logs */
                    buf.append('\\');
                    buf.append('n');
                    break;
                case '\r':
                    buf.append('\\');
                    buf.append('r');
                    break;
                case '\\':
                    buf.append('\\');
                    buf.append('\\');
                    break;
                case '\'':
                    buf.append('\\');
                    buf.append('\'');
                    break;
                case '"':
                    /* Better safe than sorry */
                    if (this.usingAnsiMode) {
                        buf.append('\\');
                    }
                    buf.append('"');
                    break;
                case '\032':
                    /* This gives problems on Win32 */
                    buf.append('\\');
                    buf.append('Z');
                    break;
                default:
                    buf.append(c);
            }
        }
        buf.append('\'');
        String parameterAsString = buf.toString();
        byte[] parameterAsBytes = null;
        if (!this.isLoadDataQuery) {
            parameterAsBytes = StringUtils.getBytes(parameterAsString, this.connection.getCharsetConverter("UTF-8"), "UTF-8", this.connection.getServerCharacterEncoding(), this.connection.parserKnowsUnicode(), getExceptionInterceptor());
        } else {
            // Send with platform character encoding
            parameterAsBytes = parameterAsString.getBytes();
        }
        setInternal(parameterIndex, parameterAsBytes);
        this.parameterTypes[parameterIndex - 1 + getParameterIndexOffset()] = -9;
    /* Types.NVARCHAR */
    }
}
