private void doDownload(boolean needParts) {
    if (source.getDownload().isComplete()) {
        System.out.println(rnd + " " + (System.currentTimeMillis() - transferStart) + " alreadyDone");
        return;
    }
    int chunk = source.getMostWantedChunkNum();
    if (chunk == 0) {
        if (needParts) {
        }
        System.out.println(rnd + " " + (System.currentTimeMillis() - transferStart) + " Peer doesn't have any needed parts.");
        noNeededParts = true;
        source.setNoNeededParts(true);
        source.setNextRetry(System.currentTimeMillis() + (dInfo.getNoNeededPartsRetry() * 1000));
    } else {
        if (gap2[1] - gap2[0] == 0 || gap3[1] - gap3[0] == 0)
            newStream = true;
        if (newStream) {
            long[] wholeGap = source.getDownload().getTaggedGap(chunk, bSize * 3);
            if (wholeGap[0] % 1024 != 0) {
                wholeGap[0] = 1024 * (wholeGap[0] / 1024);
            }
            // System.out.println(rnd + " " + (System.currentTimeMillis() - transferStart) + " New Stream reqqued...");
            int gapSize = (int) (wholeGap[1] - wholeGap[0]);
            gap = new long[2];
            gap2 = new long[2];
            gap3 = new long[2];
            if (gapSize < bSize) {
                gap = wholeGap;
                gap2[0] = 0;
                gap2[1] = 0;
                gap3[0] = 0;
                gap3[1] = 0;
                lastRequestedBlockSize = (int) (gap[1] - gap[0]);
                newBlockSize = (int) (wholeGap[1] - wholeGap[0]);
                newStream = true;
            } else if (gapSize < bSize * 2) {
                gap[0] = wholeGap[0];
                gap[1] = wholeGap[0] + bSize;
                gap2[0] = gap[1];
                gap2[1] = wholeGap[1];
                gap3 = source.getDownload().getTaggedGap(chunk, bSize);
                if (gap3[0] % 1024 != 0) {
                    gap3[0] = 1024 * (gap3[0] / 1024);
                }
                if (gap3[1] - gap3[0] > 0) {
                    taggedGaps.addGap(gap3);
                    source.getDownload().getUntaggedGaps().removeGap(gap3);
                    newStream = false;
                }
                newBlockSize = (int) (gap3[1] - gap3[0]);
                lastRequestedBlockSize = (int) (gap3[1] - gap3[0]);
            } else {
                gap[0] = wholeGap[0];
                gap[1] = wholeGap[0] + bSize;
                gap2[0] = gap[1];
                gap2[1] = gap2[0] + bSize;
                gap3[0] = gap2[1];
                gap3[1] = wholeGap[1];
                lastRequestedBlockSize = (int) (gap3[1] - gap3[0]);
                newStream = false;
                newBlockSize = (int) (wholeGap[1] - wholeGap[0]);
            }
            taggedGaps.addGap(wholeGap);
            source.getDownload().getUntaggedGaps().removeGap(wholeGap);
        } else {
            gap = gap2;
            gap2 = gap3;
            gap3 = source.getDownload().getTaggedGap(chunk, bSize);
            if (gap3[0] % 1024 != 0) {
                gap3[0] = 1024 * (gap3[0] / 1024);
            }
            if (gap3[1] - gap3[0] > 0) {
                taggedGaps.addGap(gap3);
                source.getDownload().getUntaggedGaps().removeGap(gap3);
            }
            newBlockSize = (int) (gap3[1] - gap3[0]);
            /*				if (newBlockSize < bSize)
										newStream = true;
					*/
            lastRequestedBlockSize = (int) (gap3[1] - gap3[0]);
        }
        // System.out.println(
        // rnd + " " + (System.currentTimeMillis() - transferStart) + " Requesting parts: " + gap[0] + "-" + gap[1] + " " + gap2[0] + "-" + gap2[1] + " " + gap3[0] + "-" + gap3[1]);
        requestedBytes += newBlockSize;
        blockBytes = 0;
        lastBlockRequest = totalBytesReceived;
        transfering = true;
        addOutPacket(CreateDonkeyPacket.partRequest(fileHash, gap[0], gap2[0], gap3[0], gap[1], gap2[1], gap3[1]));
    }
}
