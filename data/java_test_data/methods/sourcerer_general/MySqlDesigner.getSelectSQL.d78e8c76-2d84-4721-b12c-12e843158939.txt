public String getSelectSQL(Database db, Column[] columns, String[] tables, Join[] joinOperations, Filter[] filterBoundaries, Filter[] filters, Order[] orders, int pageIndex, int pageSize) throws SQLException {
    // indicates whether column names should be qualified (i.e. table.column) or not (i.e. column)
    final boolean qualified = tables.length > 1;
    /* start designing sql */
    StringBuilder sql = new StringBuilder();
    /* append SELECT */
    sql.append("SELECT ");
    for (int i = 0; i < columns.length; i++) {
        // iterate columns
        // get current column
        Column column = columns[i];
        if (i > 0) {
            // a column has already been appended
            // append comma
            sql.append(", ");
        }
        if (qualified) {
            // column names must be qualified
            // append column
            sql.append("`" + column.getTable() + "`." + column.getName());
        } else {
            // column names can be unqualified
            // append column
            sql.append("`" + column.getName() + "`");
        }
    }
    /* append FROM */
    // append the first table in source
    sql.append(" FROM `" + tables[0] + "`");
    for (int i = 1; i < tables.length; i++) {
        // iterate tables starting from the second table in source
        final String table1 = tables[i - 1];
        final String table2 = tables[i];
        switch(joinOperations[i - 1]) {
            case INNER:
                {
                    sql.append(" INNER JOIN");
                    break;
                }
            case OUTER:
                {
                    sql.append(" OUTER JOIN");
                    break;
                }
            case LEFT:
                {
                    sql.append(" LEFT OUTER JOIN");
                    break;
                }
            case RIGHT:
                {
                    sql.append(" RIGHT OUTER JOIN");
                    break;
                }
        }
        sql.append(" `" + table2 + "`");
        sql.append(" ON");
        String[][] onColumns = db.getDatabaseMetaInfo().getForeignKeyColumns(table1, table2);
        for (int j = 0; j < onColumns.length; j++) {
            sql.append(" `" + table1 + "`." + onColumns[j][0] + " = `" + table2 + "`." + onColumns[j][1]);
            if (j < (onColumns.length - 1)) {
                sql.append(" AND");
            }
        }
    }
    /* append WHERE */
    if (filters.length != 0 || filterBoundaries.length != 0) {
        // query contains filter or filterBoundaries
        sql.append(" WHERE ");
        if (filters.length != 0 && filterBoundaries.length > 1) {
            // query contains filter and more than one filterBoundaries
            sql.append("(");
        }
        for (int i = 0; i < filterBoundaries.length; i++) {
            // iterate filter boundaries
            // get current filter boundary
            Filter filter = filterBoundaries[i];
            if (qualified) {
                // column names must be qualified
                sql.append("`" + filter.getTable() + "`." + filter.getColumn());
            } else {
                // column names can be unqualified
                sql.append("`" + filter.getColumn() + "`");
            }
            sql.append(" = ?");
            if (i < (filterBoundaries.length - 1)) {
                // more filter boundaries exist
                // append AND to sql
                sql.append(" AND ");
            }
        }
        if (filters.length != 0 && filterBoundaries.length > 1) {
            // query contains filter and more than one filterBoundaries
            sql.append(")");
        }
        if (filters.length != 0 && filterBoundaries.length != 0) {
            // query contains filter and filterBoundaries
            // append AND to sql
            sql.append(" AND ");
        }
        if (filters.length > 1 && filterBoundaries.length != 0) {
            // query contains filterBoundaries and more than one filters
            sql.append("(");
        }
        for (int i = 0; i < filters.length; i++) {
            // iterate filter
            // get current filter
            Filter filter = filters[i];
            if (qualified) {
                // column names must be qualified
                sql.append("`" + filter.getTable() + "`." + filter.getColumn());
            } else {
                // column names can be unqualified
                sql.append("`" + filter.getColumn() + "`");
            }
            sql.append(" = ?");
            if (i < (filters.length - 1)) {
                // more filters exist
                // append comma to sql
                sql.append(" AND ");
            }
        }
        if (filters.length > 1 && filterBoundaries.length != 0) {
            // query contains filterBoundaries and more than one filters
            sql.append(")");
        }
    }
    /* append ORDER BY */
    if (orders.length != 0) {
        // query contains order statements
        sql.append(" ORDER BY ");
        for (int i = 0; i < orders.length; i++) {
            // iterate orders
            // get current order statement
            Order order = orders[i];
            if (qualified) {
                // column names must be qualified
                // use table.column format to distinguish the columns
                sql.append("`" + order.getTable() + "`." + order.getColumn());
            } else {
                // column names can be unqualified
                sql.append("`" + order.getColumn() + "`");
            }
            if (order.isAsc()) {
                sql.append(" ASC");
            } else {
                sql.append(" DESC");
            }
            if (i < (orders.length - 1)) {
                // more orders exist
                // append comma to the sql
                sql.append(", ");
            }
        }
    }
    /* append LIMIT */
    sql.append(" LIMIT " + String.valueOf(pageIndex - 1) + "," + String.valueOf(pageSize) + ";");
    /* return String */
    return sql.toString();
}
