public Collection<Probe> computeProbes() {
    DAInfo dai = ((HasDAInfo) Main.v().getAbcExtension()).getDependentAdviceInfo();
    // build a mapping from the names of strong advice to their shadows
    Map<String, List<Shadow>> strongAdviceNameToShadows = new HashMap<String, List<Shadow>>();
    for (String strongAdviceName : strongAdviceNameToVars.keySet()) {
        strongAdviceNameToShadows.put(strongAdviceName, new ArrayList<Shadow>());
    }
    for (int i = 0; i < numStrongShadows; i++) {
        Shadow s = shadows[i];
        assert dai.isDependentAdvice(s.getAdviceDecl());
        if (s.isEnabled()) {
            String strongAdviceName = dai.replaceForHumanReadableName(dai.qualifiedNameOfAdvice(s.getAdviceDecl()));
            strongAdviceNameToShadows.get(strongAdviceName).add(s);
        }
    }
    List<String> strongAdviceNames = new ArrayList<String>(strongAdviceNameToVars.keySet());
    Set<Set<Shadow>> strongProbes = new HashSet<Set<Shadow>>();
    // List<String> symbolStack = new LinkedList<String>();
    List<Shadow> shadowStack = new LinkedList<Shadow>();
    List<Shadow> shadowsOfFirstStrongAdvice = strongAdviceNameToShadows.get(strongAdviceNames.get(0));
    // no shadows at all!?
    if (shadowsOfFirstStrongAdvice.isEmpty()) {
        return Collections.emptySet();
    } else {
        // for every shadow of the first strong advice...
        for (Shadow shadowOfFirstStrongAdvice : shadowsOfFirstStrongAdvice) {
            // ...initialize stack with that shadow...
            shadowStack.add(shadowOfFirstStrongAdvice);
            // ...and try to find compatible shadows for other strong symbols
            Shadow lastShadow = null;
            do {
                Shadow shadow = shadowStack.get(shadowStack.size() - 1);
                String symbol = dai.replaceForHumanReadableName(dai.qualifiedNameOfAdvice(shadow.getAdviceDecl()));
                boolean addedShadow = false;
                // is there a "next strong symbol"?
                if (strongAdviceNames.indexOf(symbol) + 1 < strongAdviceNames.size()) {
                    String succSymbol = strongAdviceNames.get(strongAdviceNames.indexOf(symbol) + 1);
                    // is there a compatible shadow with that symbol name?
                    List<Shadow> succShadows = strongAdviceNameToShadows.get(succSymbol);
                    // find first compatible shadow
                    if (!succShadows.isEmpty()) {
                        int lastNodeIndex = (lastShadow == null) ? -1 : succShadows.indexOf(lastShadow);
                        if (lastNodeIndex + 1 < succShadows.size()) {
                            List<Shadow> remainingSuccShadows = succShadows.subList(lastNodeIndex + 1, succShadows.size());
                            for (Shadow succShadow : remainingSuccShadows) {
                                if (compatibleWithAll(succShadow, shadowStack)) {
                                    // found compatible shadow, add to stack
                                    shadowStack.add(succShadow);
                                    addedShadow = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (shadowStack.size() == strongAdviceNames.size()) {
                    strongProbes.add(new HashSet<Shadow>(shadowStack));
                    lastShadow = shadowStack.remove(shadowStack.size() - 1);
                } else {
                    if (addedShadow) {
                        lastShadow = null;
                    } else {
                        lastShadow = shadowStack.remove(shadowStack.size() - 1);
                    }
                }
            } while (!shadowStack.isEmpty());
        }
    }
    if (Debug.v().debugDA) {
        System.err.println("Minimal activation sets for this probe: " + strongProbes.size());
    }
    Set<Probe> probes = new HashSet<Probe>();
    for (Set<Shadow> strongProbe : strongProbes) {
        assert !strongProbe.isEmpty();
        Set<Shadow> probeShadows = new HashSet<Shadow>(strongProbe);
        // for all strong AND weak shadows
        for (int i = 0; i < shadows.length; i++) {
            // if the i-th shadow is enabled
            if (shadows[i].isEnabled()) {
                // see if the shadow is compatible to all strong shadows
                boolean compatibleToAllStrongShadows = true;
                for (Shadow shadow : strongProbe) {
                    int j = shadowToIndex.get(shadow);
                    if (!get(j, i)) {
                        compatibleToAllStrongShadows = false;
                    }
                }
                if (compatibleToAllStrongShadows) {
                    // add the shadow to the probe
                    probeShadows.add(shadows[i]);
                }
            }
        }
        probes.add(new Probe(probeShadows));
    }
    return probes;
}
