public void testDeleteProjectWiki() throws Exception {
    String title = "Test Delete Wiki";
    // Create a project
    {
        // Add Meta Info with fields required
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        api.setTransactionMeta(meta);
        // The minimum number of fields for a successful project insert
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.setShareKey(true);
        record.addField("title", title);
        record.addField("shortDescription", "API Test Project short description");
        record.addField("requestDate", "2008-01-24 00:00:00 -0400");
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        api.save(record);
    }
    // Add Wikis for that Project
    {
        // Test submitting a "Home" Wiki -- one without a subject
        DataRecord record = new DataRecord();
        record.setName("wiki");
        record.addField("projectId", "$C{project.id}");
        record.setAction(DataRecord.INSERT);
        record.addField("subject", "");
        record.addField("content", "API Test ProjectWiki Content");
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        api.save(record);
    }
    {
        // Test submitting another Wiki page
        DataRecord record = new DataRecord();
        record.setName("wiki");
        record.addField("projectId", "$C{project.id}");
        record.setAction(DataRecord.INSERT);
        record.addField("subject", "Project Wiki Test");
        record.addField("content", "API Test ProjectWiki Content");
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        api.save(record);
    }
    // Process the complete transaction
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    int projectId = Integer.parseInt(api.getResponseValue("id"));
    assertTrue(projectId > -1);
    // Look and see if the Wiki exists...
    {
        // Add Meta Info with fields required
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        meta.add("projectId");
        meta.add("subject");
        api.setTransactionMeta(meta);
        // Ask the API to send the just inserted project wiki back
        DataRecord record = new DataRecord();
        record.setName("wikiList");
        record.setAction(DataRecord.SELECT);
        record.addField("projectId", projectId);
        api.save(record);
    }
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    assertTrue(api.getRecordCount() == 2);
    int wikiId1 = api.getRecords().get(0).getValueAsInt("id");
    assertTrue(wikiId1 > -1);
    assertTrue(api.getRecords().get(0).getValue("subject").equals(""));
    int wikiId2 = api.getRecords().get(1).getValueAsInt("id");
    assertTrue(wikiId2 > -1);
    assertTrue(api.getRecords().get(1).getValue("subject").equals("Project Wiki Test"));
    assertTrue(wikiId1 != wikiId2);
    // Delete the wikis with returned wikiId
    {
        // Test submitting another Wiki page
        DataRecord record = new DataRecord();
        record.setName("wiki");
        record.setAction(DataRecord.DELETE);
        record.addField("id", wikiId1);
        api.save(record);
    }
    {
        // Test submitting another Wiki page
        DataRecord record = new DataRecord();
        record.setName("wiki");
        record.setAction(DataRecord.DELETE);
        record.addField("id", wikiId2);
        api.save(record);
    }
    processTheTransactions(api, packetContext);
    assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
    assertTrue(api.getRecordCount() == 2);
    assertTrue("A deleted record must get an action of 'delete' returned", api.getRecords().get(0).getAction().equals(DataRecord.DELETE));
    assertTrue("A deleted record must get an action of 'delete' returned", api.getRecords().get(1).getAction().equals(DataRecord.DELETE));
    // Delete this test project by querying the database directly
    // The object will delete referenced data
    int count = 0;
    ProjectList projectList = new ProjectList();
    projectList.setEnteredByUser(USER_ID);
    projectList.buildList(db);
    Iterator i = projectList.iterator();
    while (i.hasNext()) {
        Project thisProject = (Project) i.next();
        if (thisProject.getTitle().equals(title)) {
            ++count;
            thisProject.delete(db, null);
        }
    }
    assertTrue("Didn't find a project to delete", count > 0);
}
