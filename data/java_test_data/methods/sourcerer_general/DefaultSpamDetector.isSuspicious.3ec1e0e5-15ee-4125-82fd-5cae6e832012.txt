public boolean isSuspicious(String raw) {
    if (blacklist == null) {
        log.warn("blacklist not initialized. check /properties/spam-blacklist.properties.");
    }
    String lowerCase = raw.toLowerCase();
    Iterator itr = blacklist.keySet().iterator();
    boolean suspicious = false;
    while (!suspicious && itr.hasNext()) {
        String key = (String) itr.next();
        if (Utils.isEqual("maxConsecutiveCapitalWords", key) || Utils.isEqual("validTags", key))
            continue;
        String exp = blacklist.getProperty(key);
        String[] split = exp.split(",");
        for (int i = 0; !suspicious && i < split.length; i++) {
            Pattern p = getPattern(split[i].trim());
            Matcher m = p.matcher(lowerCase);
            suspicious = m.find();
        }
    }
    if (suspicious)
        return true;
    String[] validTags = blacklist.getProperty("validTags").split(",");
    Matcher m = tagPattern1.matcher(lowerCase);
    while (!suspicious && m.find()) {
        String tag = m.group(1).toLowerCase();
        boolean foundValid = false;
        for (int i = 0; !foundValid && i < validTags.length; i++) {
            foundValid = Utils.isEqual(validTags[i].toLowerCase(), tag);
        }
        suspicious = !foundValid;
    }
    if (suspicious)
        return true;
    m = tagPattern2.matcher(lowerCase);
    while (!suspicious && m.find()) {
        String tag = m.group(1).toLowerCase();
        boolean foundValid = false;
        for (int i = 0; !foundValid && i < validTags.length; i++) {
            foundValid = validTags[i].toLowerCase().equals(tag);
        }
        suspicious = !foundValid;
    }
    if (suspicious)
        return true;
    String[] split = raw.split(" ");
    int consecutive = 0;
    int maxConsecutiveCapitalWords = Integer.valueOf(blacklist.getProperty("maxConsecutiveCapitalWords"));
    for (int i = 0; !suspicious && i < split.length; i++) {
        String trimTok = split[i].trim();
        if (trimTok.length() == 0) {
            consecutive = 0;
            continue;
        }
        if (trimTok.toUpperCase().equals(trimTok)) {
            consecutive++;
            suspicious = consecutive > maxConsecutiveCapitalWords;
        } else {
            consecutive = 0;
        }
    }
    return suspicious;
}
