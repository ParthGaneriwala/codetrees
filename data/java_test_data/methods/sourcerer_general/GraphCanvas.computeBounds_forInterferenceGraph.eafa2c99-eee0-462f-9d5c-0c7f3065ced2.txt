private void computeBounds_forInterferenceGraph() {
    double oldminx = minx_;
    double oldminy = miny_;
    minx_ = miny_ = maxx_ = maxy_ = 0;
    Vector<DNode> nodelist = ig.nodes();
    if (nodelist == null)
        return;
    DNode tmpnode = nodelist.get(0);
    DPoint tmppoint;
    Dimension tmpdim;
    if (tmpnode != null) {
        tmppoint = tmpnode.getPosition();
        tmpdim = tmpnode.getBoundingBox();
        minx_ = tmppoint.x - tmpdim.width / 2.0;
        maxx_ = tmppoint.x + tmpdim.width / 2.0;
        miny_ = tmppoint.y - tmpdim.height / 2.0;
        maxy_ = tmppoint.y + tmpdim.height / 2.0;
        for (int index = 1; index < nodelist.size(); index++) {
            tmpnode = nodelist.get(index);
            if (tmpnode != null) {
                tmppoint = tmpnode.getPosition();
                tmpdim = tmpnode.getBoundingBox();
                double w = tmpdim.width / 2.0;
                double h = tmpdim.height / 2.0;
                if (tmppoint.x - w < minx_)
                    minx_ = tmppoint.x - w;
                if (tmppoint.x + w > maxx_)
                    maxx_ = tmppoint.x + w;
                if (tmppoint.y - h < miny_)
                    miny_ = tmppoint.y - h;
                if (tmppoint.y + h > maxy_)
                    maxy_ = tmppoint.y + h;
            }
        }
    }
    // 3D approach.
    double maxdim = Math.abs(maxy_);
    if (Math.abs(miny_) > maxdim)
        maxdim = Math.abs(miny_);
    if (Math.abs(minx_) > maxdim)
        maxdim = Math.abs(minx_);
    if (Math.abs(maxx_) > maxdim)
        maxdim = Math.abs(maxx_);
    maxx_ = maxy_ = maxdim;
    minx_ = miny_ = -maxdim;
    width_ = height_ = 2.0 * maxdim;
}
