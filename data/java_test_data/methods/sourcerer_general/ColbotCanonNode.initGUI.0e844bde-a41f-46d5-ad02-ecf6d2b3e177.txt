private void initGUI() {
    Container content = getContentPane();
    Chart2D chart = new Chart2D();
    chart.getAxisX().setRangePolicy(new RangePolicyFixedViewport(new Range(-90, 90)));
    chart.getAxisY().setRangePolicy(new RangePolicyFixedViewport(new Range(0, _laserScanMaxRange)));
    _laserScanTrace = new Trace2DSimple("Laser Scans");
    _laserScanTrace.setColor(Color.RED);
    chart.addTrace(_laserScanTrace);
    _laserScanDiffTrace = new Trace2DSimple("Laser Scans Diffs");
    _laserScanDiffTrace.setColor(Color.BLUE);
    chart.addTrace(_laserScanDiffTrace);
    content.add(chart, BorderLayout.CENTER);
    JButton fireS = new JButton("Fire");
    fireS.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            setServoTo('F', Math.toRadians(9));
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            setServoTo('F', Math.toRadians(39));
        }
    });
    content.add(fireS, BorderLayout.EAST);
    JSlider panS = new JSlider(-90, 90, 0);
    panS.addChangeListener(new ChangeListener() {

        public void stateChanged(ChangeEvent evt) {
            JSlider slider = (JSlider) evt.getSource();
            if (!slider.getValueIsAdjusting()) {
                int value = slider.getValue();
                setServoTo('P', Math.toRadians(value));
            }
        }
    });
    panS.setBorder(BorderFactory.createTitledBorder("Canon Pan"));
    panS.setMajorTickSpacing(10);
    panS.setMinorTickSpacing(1);
    panS.setPaintTicks(true);
    panS.setPaintLabels(true);
    content.add(panS, BorderLayout.NORTH);
    JSlider tiltS = new JSlider(-90, 90, 0);
    tiltS.addChangeListener(new ChangeListener() {

        public void stateChanged(ChangeEvent evt) {
            JSlider slider = (JSlider) evt.getSource();
            if (!slider.getValueIsAdjusting()) {
                int value = slider.getValue();
                setServoTo('T', Math.toRadians(value));
            }
        }
    });
    tiltS.setBorder(BorderFactory.createTitledBorder("Canon Tilt"));
    tiltS.setMajorTickSpacing(10);
    tiltS.setMinorTickSpacing(1);
    tiltS.setPaintTicks(true);
    tiltS.setPaintLabels(true);
    content.add(tiltS, BorderLayout.SOUTH);
    final JCheckBox motorS = new JCheckBox("Canon Motor");
    motorS.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            setMotorTo((motorS.isSelected() ? 200 : 0));
        }
    });
    content.add(motorS, BorderLayout.WEST);
    pack();
}
