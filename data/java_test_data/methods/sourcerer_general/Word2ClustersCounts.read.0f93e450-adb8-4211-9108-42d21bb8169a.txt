private CompactReadOnlyInt2IntHashMap[][] read() throws IOException {
    RandomAccessFile raf = new RandomAccessFile(file, "r");
    byte[] buf = new byte[(int) raf.length()];
    raf.readFully(buf);
    raf.close();
    CompactReadOnlyInt2IntHashMap[][] theHashCounts = new CompactReadOnlyInt2IntHashMap[nrDataFiles][];
    GrowingIntArray[][] theClusters = new GrowingIntArray[nrDataFiles][];
    GrowingIntArray[][] theCounts = new GrowingIntArray[nrDataFiles][];
    for (int fold = 0; fold < nrDataFiles; ++fold) {
        theHashCounts[fold] = new CompactReadOnlyInt2IntHashMap[nrModels];
        theClusters[fold] = new GrowingIntArray[nrModels];
        theCounts[fold] = new GrowingIntArray[nrModels];
        for (int lmNum = 0; lmNum < nrModels; ++lmNum) {
            theClusters[fold][lmNum] = new GrowingIntArray(5);
            theCounts[fold][lmNum] = new GrowingIntArray(5);
        }
    }
    int position = 0;
    while (position < buf.length) {
        int fold = PackedInteger.readInt(buf, position);
        int len = PackedInteger.getReadIntLength(buf, position);
        position += len;
        int lmNum = PackedInteger.readInt(buf, position);
        len = PackedInteger.getReadIntLength(buf, position);
        position += len;
        int cluster = PackedInteger.readInt(buf, position);
        len = PackedInteger.getReadIntLength(buf, position);
        position += len;
        int count = PackedInteger.readInt(buf, position);
        len = PackedInteger.getReadIntLength(buf, position);
        position += len;
        theClusters[fold][lmNum].add(cluster);
        theCounts[fold][lmNum].add(count);
    }
    buf = null;
    for (int fold = 0; fold < nrDataFiles; ++fold) {
        for (int lmNum = 0; lmNum < nrModels; ++lmNum) {
            theHashCounts[fold][lmNum] = new CompactReadOnlyInt2IntHashMap(theClusters[fold][lmNum].array(), theCounts[fold][lmNum].array());
            theClusters[fold][lmNum] = null;
            theCounts[fold][lmNum] = null;
        }
    }
    return theHashCounts;
}
