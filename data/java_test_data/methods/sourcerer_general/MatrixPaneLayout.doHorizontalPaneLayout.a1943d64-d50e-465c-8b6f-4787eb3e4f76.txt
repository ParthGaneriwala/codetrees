public void doHorizontalPaneLayout(final List<NodeItem> children, final List<NodeItem> rowList, final double width, final Rectangle2D availableRectangle) {
    int numberOfChildren = children.size();
    double x = availableRectangle.getX();
    double y = availableRectangle.getY();
    double availableWidth = availableRectangle.getMaxX() - availableRectangle.getMinX();
    double widthPerChild = availableWidth / numberOfChildren;
    double heightPerChild = availableRectangle.getHeight();
    double childArea = 0;
    NodeItem node = null;
    Iterator<NodeItem> rowIter = children.iterator();
    while (rowIter.hasNext()) {
        node = rowIter.next();
        childArea = +node.getDouble(TreeMapLayout.AREA);
    }
    // set node positions and dimensions
    int rowIndex = 0;
    double widthAlreadyAdded = 0;
    rowIter = children.iterator();
    while (rowIter.hasNext()) {
        node = (NodeItem) rowIter.next();
        NodeItem parent = (NodeItem) node.getParent();
        if (// doesn't work at this time
        weightedDistribution) {
            int multiplier = rowIndex == 0 ? 0 : 1;
            double thisNodeWidth = node.getDouble(TreeMapLayout.AREA) / heightPerChild;
            double areaFactor = (thisNodeWidth + widthAlreadyAdded) / childArea;
            double new_x = x + multiplier * (thisNodeWidth + widthAlreadyAdded);
            treeMapLayout.setX(node, parent, x + (multiplier * (thisNodeWidth + widthAlreadyAdded)) + 2 * rowIndex * treeMapLayout.getFrameWidth());
            treeMapLayout.setY(node, parent, y);
            node.setBounds(node.getX(), node.getY(), thisNodeWidth, heightPerChild);
            widthAlreadyAdded = +thisNodeWidth;
        } else {
            treeMapLayout.setX(node, parent, x + rowIndex * widthPerChild);
            treeMapLayout.setY(node, parent, y);
            node.setBounds(node.getX(), node.getY(), widthPerChild, heightPerChild);
        }
        rowIndex++;
    }
// availableRectangle.setRect(x + rowIndex * lengthPerChild, y, availableRectangle.getWidth() - rowIndex * lengthPerChild, availableRectangle.getHeight());
// return availableRectangle;
}
