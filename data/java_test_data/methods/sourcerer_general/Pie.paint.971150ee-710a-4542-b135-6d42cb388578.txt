// constructor
public void paint(Graphics g) {
    int startDeg = 0;
    int arcDeg;
    int arcDegCount = 0;
    int x, y;
    double angleRad;
    // shadow, down and to the right 3 pixels
    g.setColor(shadowColor);
    g.fillOval(pieBorderWidth + shadowOffset, pieBorderWidth + shadowOffset, pieDiameter, pieDiameter);
    // "other" is gray
    g.setColor(otherColor);
    g.fillOval(pieBorderWidth, pieBorderWidth, pieDiameter, pieDiameter);
    int wci = 0;
    int i;
    for (i = 0; i < this.wedges.length; i++) {
        // draw wedges
        arcDeg = (int) Math.round(((this.wedges[i].frac / total) * 360));
        arcDegCount += arcDeg;
        if ((i + 1) == this.wedges.length & arcDegCount != 360) {
            // Avoid a gray wedge due to roundoff.
            arcDeg += (360 - arcDegCount);
        }
        if (this.wedges[i].color != null) {
            g.setColor(this.wedges[i].color);
        } else {
            g.setColor(wedgeColor[wci++]);
        }
        g.fillArc(pieBorderWidth, pieBorderWidth, pieDiameter, pieDiameter, startDeg, arcDeg);
        if (wci >= wedgeColor.length) {
            // Rotate colors.  Don't reuse 0 in case first and last are same.
            wci = 1;
        }
        startDeg += arcDeg;
    }
    // draw wedges
    // Do labels so they go on top of the wedges.
    startDeg = 0;
    for (i = 0; i < this.wedges.length; i++) {
        arcDeg = (int) Math.round(((this.wedges[i].frac / total) * 360));
        if (arcDeg > minLabeledWedge) {
            // Don't label small wedges.
            g.setColor(textColor);
            angleRad = (float) (startDeg + (arcDeg / 2)) * java.lang.Math.PI / 180.0;
            x = pieCenterPos + (int) ((pieRadius / 1.3) * java.lang.Math.cos(angleRad));
            y = pieCenterPos - (int) ((pieRadius / 1.3) * java.lang.Math.sin(angleRad)) + // 5 is about half the height of the text
            5;
            g.drawString(this.wedges[i].label, x, y);
        }
        // don't label small wedges
        startDeg += arcDeg;
    }
// for
}
