private void getTransform() {
    Matrix Am = new Matrix(12, 12);
    int count = 1;
    while (!Am.lu().isNonsingular()) {
        System.out.println("Count: " + count);
        oldPoints_ = this.getPoints(oldBundle_, 4 * count);
        double[] pt1 = oldPoints_[0 + 4 * (count - 1)].getPosition();
        double[] pt2 = oldPoints_[1 + 4 * (count - 1)].getPosition();
        double[] pt3 = oldPoints_[2 + 4 * (count - 1)].getPosition();
        double[] pt4 = oldPoints_[3 + 4 * (count - 1)].getPosition();
        for (int i = 0; i < 4; i++) {
            System.out.println("Old Point " + i);
            for (int j = 0; j < 3; j++) {
                System.out.print(oldPoints_[i + 4 * (count - 1)].getPosition()[j] + " ");
            }
            System.out.println();
        }
        double[][] A = { { pt1[0], pt1[1], pt1[2], 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, pt1[0], pt1[1], pt1[2], 1, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, pt1[0], pt1[1], pt1[2], 1 }, { pt2[0], pt2[1], pt2[2], 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, pt2[0], pt2[1], pt2[2], 1, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, pt2[0], pt2[1], pt2[2], 1 }, { pt3[0], pt3[1], pt3[2], 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, pt3[0], pt3[1], pt3[2], 1, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, pt3[0], pt3[1], pt3[2], 1 }, { pt4[0], pt4[1], pt4[2], 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, pt4[0], pt4[1], pt4[2], 1, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, pt4[0], pt4[1], pt4[2], 1 } };
        System.out.println("Array constructed");
        for (int i = 0; i < 12; i++) {
            for (int j = 0; j < 12; j++) {
                System.out.print(A[i][j] + " ");
            }
            System.out.println();
        }
        Am = new Matrix(A);
        count++;
    }
    count--;
    System.out.println(4 * count);
    newPoints_ = this.getPoints(newBundle_, 4 * count);
    for (int i = 0; i < newPoints_.length; i++) {
        double[] temp = newPoints_[i].getPosition();
        for (int j = 0; j < temp.length; j++) {
            System.out.print(temp[j] + " ");
        }
        System.out.println();
    }
    double[] B = new double[12];
    for (int i = 0; i < 4; i++) {
        System.out.println("Using Point " + (4 * (count - 1) + i));
        double[] pt = newPoints_[i + 4 * (count - 1)].getPosition();
        for (int j = 0; j < 3; j++) {
            B[i * 3 + j] = pt[j];
            System.out.print(pt[j] + " ");
        }
        System.out.println();
    }
    Matrix Bm = new Matrix(B, 12);
    Matrix Xm = Am.solve(Bm);
    double[][] X = Xm.getArrayCopy();
    double[][] pt = { { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 1 } };
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 4; j++) {
            pt[i][j] = X[i * 4 + j][0];
        }
    }
    pointTransform_ = new Matrix(pt);
}
