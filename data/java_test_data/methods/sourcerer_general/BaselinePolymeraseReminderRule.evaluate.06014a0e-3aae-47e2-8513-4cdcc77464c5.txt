@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    Result result = new Result();
    Patient patient = Context.getPatientService().getPatient(patientId);
    if (patient.getBirthdate() != null) {
        Calendar calendar = Calendar.getInstance();
        // 18 months after birth date
        calendar.setTime(patient.getBirthdate());
        calendar.add(Calendar.MONTH, 18);
        Date eighteenMonths = calendar.getTime();
        // 6 weeks after birth date
        calendar.setTime(patient.getBirthdate());
        calendar.add(Calendar.WEEK_OF_YEAR, 6);
        Date sixWeeks = calendar.getTime();
        if (sixWeeks.before(new Date()) && eighteenMonths.after(new Date())) {
            ValidPolymeraseRule validPolymeraseRule = new ValidPolymeraseRule();
            // only pull the positive and negative results
            parameters.put(EvaluableConstants.OBS_FETCH_SIZE, 1);
            parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.POSITIVE, EvaluableNameConstants.NEGATIVE));
            parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.HIV_DNA_POLYMERASE_CHAIN_REACTION_QUALITATIVE));
            Result validPolymeraseResults = validPolymeraseRule.eval(context, patientId, parameters);
            if (CollectionUtils.isEmpty(validPolymeraseResults)) {
                // get the latest test ordered
                parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.TESTS_ORDERED));
                parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.HIV_DNA_POLYMERASE_CHAIN_REACTION_QUALITATIVE));
                ObsWithRestrictionRule obsWithRestrictionRule = new ObsWithStringRestrictionRule();
                Result testResults = obsWithRestrictionRule.eval(context, patientId, parameters);
                calendar.setTime(patient.getBirthdate());
                calendar.add(Calendar.WEEK_OF_YEAR, 4);
                Date fourWeeks = calendar.getTime();
                calendar.setTime(new Date());
                calendar.add(Calendar.MONTH, -6);
                Date sixMonthsAgo = calendar.getTime();
                // if no test or the test was ordered more than six months ago, then show the reminder
                if (CollectionUtils.isEmpty(testResults) || testResults.getResultDate().before(sixMonthsAgo) || testResults.getResultDate().before(fourWeeks))
                    result.add(new Result(String.valueOf(parameters.get(ReminderParameters.DISPLAYED_REMINDER_TEXT))));
            }
        }
    }
    return result;
}
