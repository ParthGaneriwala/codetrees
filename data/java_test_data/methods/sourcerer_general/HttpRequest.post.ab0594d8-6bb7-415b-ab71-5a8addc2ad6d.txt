public String post(String actionUrl, Map<String, String> params, Map<String, File> files) {
    Log.d(LOG_TAG, actionUrl);
    String BOUNDARY = java.util.UUID.randomUUID().toString();
    String PREFIX = "--", LINEND = "\r\n";
    String MULTIPART_FROM_DATA = "multipart/form-data";
    String CHARSET = "UTF-8";
    String rtstr = "";
    HttpURLConnection conn = null;
    try {
        URL uri = new URL(actionUrl);
        conn = (HttpURLConnection) uri.openConnection();
        // ������ʱ��
        conn.setReadTimeout(5 * 1000);
        // ��������
        conn.setDoInput(true);
        // �������
        conn.setDoOutput(true);
        // ������ʹ�û���
        conn.setUseCaches(false);
        conn.setRequestMethod("POST");
        conn.setRequestProperty("connection", "keep-alive");
        conn.setRequestProperty("Charsert", "UTF-8");
        conn.setRequestProperty("Content-Type", MULTIPART_FROM_DATA + ";boundary=" + BOUNDARY);
        // ������ƴ�ı����͵Ĳ���
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, String> entry : params.entrySet()) {
            sb.append(PREFIX);
            sb.append(BOUNDARY);
            sb.append(LINEND);
            sb.append("Content-Disposition: form-data; name=\"" + entry.getKey() + "\"" + LINEND);
            sb.append("Content-Type: text/plain; charset=" + CHARSET + LINEND);
            sb.append("Content-Transfer-Encoding: 8bit" + LINEND);
            sb.append(LINEND);
            sb.append(entry.getValue());
            sb.append(LINEND);
        }
        DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());
        outStream.write(sb.toString().getBytes());
        // �����ļ�����
        if (files != null)
            for (Map.Entry<String, File> file : files.entrySet()) {
                StringBuilder sb1 = new StringBuilder();
                sb1.append(PREFIX);
                sb1.append(BOUNDARY);
                sb1.append(LINEND);
                sb1.append("Content-Disposition: form-data; name=\"file\"; filename=\"" + file.getKey() + "\"" + LINEND);
                sb1.append("Content-Type: application/octet-stream; charset=" + CHARSET + LINEND);
                sb1.append(LINEND);
                outStream.write(sb1.toString().getBytes());
                InputStream is = new FileInputStream(file.getValue());
                byte[] buffer = new byte[1024];
                int len = 0;
                while ((len = is.read(buffer)) != -1) {
                    outStream.write(buffer, 0, len);
                }
                is.close();
                outStream.write(LINEND.getBytes());
            }
        // ���������־
        byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINEND).getBytes();
        outStream.write(end_data);
        outStream.flush();
        // �õ���Ӧ��
        int res = conn.getResponseCode();
        InputStream in = null;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        if (res == 200) {
            in = conn.getInputStream();
            byte[] tmpb = new byte[1024];
            int len;
            while ((len = in.read(tmpb)) != -1) {
                baos.write(tmpb, 0, len);
            }
        } else {
            return "-" + res;
        }
        outStream.close();
        rtstr = baos.toString();
    } catch (Exception e) {
    } finally {
        conn.disconnect();
    }
    return rtstr;
}
