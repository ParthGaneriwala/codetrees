public void loadHodge(String filename) {
    if (!HodgeMachine.isRunning())
        startHodge();
    // getMainFrame().getImage(filename);
    Image img = // getImage?
    Toolkit.getDefaultToolkit().createImage(filename);
    // kludge ahead...
    long t = System.currentTimeMillis();
    while (img.getWidth(this) < 0 && (System.currentTimeMillis() - t < 10000)) {
        Thread.yield();
    }
    int w = img.getWidth(this);
    int h = img.getHeight(this);
    if (w < 0 || h < 0) {
        updateStatusTxt("Oops, not a valid graphics file: " + filename);
        return;
    }
    int dim = Math.max(w, h);
    if (dim > MAX_HODGE_SIZE)
        dim = MAX_HODGE_SIZE;
    System.out.println("Image: " + img.getClass() + ", width: " + w + ", height: " + h);
    PixelGrabber pixGrab = new PixelGrabber(img, 0, 0, dim, dim, true);
    try {
        pixGrab.grabPixels();
    } catch (InterruptedException ignore) {
    }
    updateStatusTxt("Grabbing pixels... " + filename);
    while ((pixGrab.getStatus() & ImageObserver.ALLBITS) == 0) {
        Thread.yield();
    }
    if ((pixGrab.getStatus() & ImageObserver.ABORT) != 0) {
        updateStatusTxt("image fetch aborted or errored");
        return;
    }
    updateStatusTxt("Performing Pixel Hodgification...");
    Object pixArray = null;
    while (pixArray == null) {
        pixArray = pixGrab.getPixels();
    }
    int[] pixels = (int[]) pixArray;
    HodgeMachine.loadPixels(dim, dim, pixels);
    updateStatusTxt(" loaded!");
    LSB_Vars[LSB_DIM].setValue(dim);
    paintAll(getGraphics());
}
