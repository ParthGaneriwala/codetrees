// end encodeBytes
public static String encodeBytes(byte[] source, int off, int len, int options) {
    // Isolate options
    int dontBreakLines = (options & DONT_BREAK_LINES);
    int gzip = (options & GZIP);
    // Compress?
    if (gzip == GZIP) {
        java.io.ByteArrayOutputStream baos = null;
        java.util.zip.GZIPOutputStream gzos = null;
        Base64.OutputStream b64os = null;
        try {
            // GZip -> Base64 -> ByteArray
            baos = new java.io.ByteArrayOutputStream();
            b64os = new Base64.OutputStream(baos, ENCODE | dontBreakLines);
            gzos = new java.util.zip.GZIPOutputStream(b64os);
            gzos.write(source, off, len);
            gzos.close();
        }// end try
         catch (java.io.IOException e) {
            e.printStackTrace();
            return null;
        } finally // end catch
        {
            try {
                gzos.close();
            } catch (Exception e) {
            }
            try {
                b64os.close();
            } catch (Exception e) {
            }
            try {
                baos.close();
            } catch (Exception e) {
            }
        }
        // Return value according to relevant encoding.
        try {
            return new String(baos.toByteArray(), PREFERRED_ENCODING);
        }// end try
         catch (java.io.UnsupportedEncodingException uue) {
            return new String(baos.toByteArray());
        }
    // end catch
    } else // end if: compress
    // Else, don't compress. Better not to use streams at all then.
    {
        // Convert option to boolean in way that code likes it.
        boolean breakLines = dontBreakLines == 0;
        int len43 = len * 4 / 3;
        byte[] outBuff = new byte[// Main 4:3
        (len43) + // Account for padding
        ((len % 3) > 0 ? 4 : 0) + // New lines
        (breakLines ? (len43 / MAX_LINE_LENGTH) : 0)];
        int d = 0;
        int e = 0;
        int len2 = len - 2;
        int lineLength = 0;
        for (; d < len2; d += 3, e += 4) {
            encode3to4(source, d + off, 3, outBuff, e);
            lineLength += 4;
            if (breakLines && lineLength == MAX_LINE_LENGTH) {
                outBuff[e + 4] = NEW_LINE;
                e++;
                lineLength = 0;
            }
        // end if: end of line
        }
        if (d < len) {
            encode3to4(source, d + off, len - d, outBuff, e);
            e += 4;
        }
        // Return value according to relevant encoding.
        try {
            return new String(outBuff, 0, e, PREFERRED_ENCODING);
        }// end try
         catch (java.io.UnsupportedEncodingException uue) {
            return new String(outBuff, 0, e);
        }
    // end catch
    }
// end else: don't compress
}
