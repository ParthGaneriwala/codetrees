public void moveSelection(SObject leader, int x, int y) {
    int index;
    Point d;
    SObject object;
    boolean checkpoint = false;
    Vector dependents;
    if (!move) {
        /*
             * Move started. Checkpoint the objects that are move candidates.
             */
        move = true;
        checkpoint = true;
        transaction(0);
    }
    /*
         * First we grab the dependents of the leader and tell each dependent to 
         * save some current state before the leader is moved.  We save the move
         * state only during the first move (checkpoint). 
         */
    dependents = leader.dependents();
    if (checkpoint)
        checkpoint(dependents, 0);
    if (checkpoint)
        saveDependentsMoveState(leader, dependents);
    /*
         * Move the leader to see how much the delta was.  Checkpoint if
         * necessary
         */
    if (checkpoint)
        checkpoint(leader, 0);
    leader.setMoveContext(selection);
    d = place(leader, x, y);
    /*
         * Now that we have a delta, move the dependents
         */
    if (d != null)
        moveDependents(leader, dependents, d.x, d.y);
    /*
         * Apply the move delta to all other selected items IF the leader was
         * part of the selected items.  Checkpoint the selection if necessary.
         */
    if (selection.contains(leader) && d != null) {
        for (index = 0; index < selection.size(); index++) {
            if (selection.get(index) != leader) {
                /*
                     * First checkpoint/move dependents
                     */
                object = (SObject) selection.get(index);
                dependents = object.dependents();
                if (checkpoint)
                    checkpoint(dependents, 0);
                if (checkpoint)
                    saveDependentsMoveState(object, dependents);
                /*
                     * Then checkpoint/move the object itself
                     */
                if (checkpoint)
                    checkpoint(object, 0);
                object.move(d.x, d.y);
                /*
                     * Move the dependents
                     */
                moveDependents(object, dependents, d.x, d.y);
            }
        }
    }
}
