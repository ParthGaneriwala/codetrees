// $ANTLR start "until_statement"
public final CompiladoresParser.until_statement_return until_statement() throws RecognitionException {
    CompiladoresParser.until_statement_return retval = new CompiladoresParser.until_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token DO98 = null;
    Token EOL99 = null;
    Token LOOP101 = null;
    Token UNTIL102 = null;
    CompiladoresParser.block_return block100 = null;
    CompiladoresParser.expression_return expression103 = null;
    CommonTree DO98_tree = null;
    CommonTree EOL99_tree = null;
    CommonTree LOOP101_tree = null;
    CommonTree UNTIL102_tree = null;
    RewriteRuleTokenStream stream_DO = new RewriteRuleTokenStream(adaptor, "token DO");
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleTokenStream stream_UNTIL = new RewriteRuleTokenStream(adaptor, "token UNTIL");
    RewriteRuleTokenStream stream_LOOP = new RewriteRuleTokenStream(adaptor, "token LOOP");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
    try {
        dbg.enterRule(getGrammarFileName(), "until_statement");
        if (getRuleLevel() == 0) {
            dbg.commence();
        }
        incRuleLevel();
        dbg.location(148, 1);
        try {
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:148:18: ( DO ( EOL )+ block LOOP UNTIL expression -> ^( LOOP ( block )* ^( TEST expression ) ) )
            dbg.enterAlt(1);
            // /home/CIN/fmm/Desktop/grammar/Compiladores.g:148:20: DO ( EOL )+ block LOOP UNTIL expression
            {
                dbg.location(148, 20);
                DO98 = (Token) match(input, DO, FOLLOW_DO_in_until_statement1181);
                stream_DO.add(DO98);
                dbg.location(148, 23);
                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:148:23: ( EOL )+
                int cnt24 = 0;
                try {
                    dbg.enterSubRule(24);
                    loop24: do {
                        int alt24 = 2;
                        try {
                            dbg.enterDecision(24);
                            int LA24_0 = input.LA(1);
                            if ((LA24_0 == EOL)) {
                                alt24 = 1;
                            }
                        } finally {
                            dbg.exitDecision(24);
                        }
                        switch(alt24) {
                            case 1:
                                dbg.enterAlt(1);
                                // /home/CIN/fmm/Desktop/grammar/Compiladores.g:148:23: EOL
                                {
                                    dbg.location(148, 23);
                                    EOL99 = (Token) match(input, EOL, FOLLOW_EOL_in_until_statement1183);
                                    stream_EOL.add(EOL99);
                                }
                                break;
                            default:
                                if (cnt24 >= 1)
                                    break loop24;
                                EarlyExitException eee = new EarlyExitException(24, input);
                                dbg.recognitionException(eee);
                                throw eee;
                        }
                        cnt24++;
                    } while (true);
                } finally {
                    dbg.exitSubRule(24);
                }
                dbg.location(148, 28);
                pushFollow(FOLLOW_block_in_until_statement1186);
                block100 = block();
                state._fsp--;
                stream_block.add(block100.getTree());
                dbg.location(148, 35);
                LOOP101 = (Token) match(input, LOOP, FOLLOW_LOOP_in_until_statement1189);
                stream_LOOP.add(LOOP101);
                dbg.location(148, 40);
                UNTIL102 = (Token) match(input, UNTIL, FOLLOW_UNTIL_in_until_statement1191);
                stream_UNTIL.add(UNTIL102);
                dbg.location(148, 46);
                pushFollow(FOLLOW_expression_in_until_statement1193);
                expression103 = expression();
                state._fsp--;
                stream_expression.add(expression103.getTree());
                // AST REWRITE
                // elements: LOOP, block, expression
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
                root_0 = (CommonTree) adaptor.nil();
                // 149:4: -> ^( LOOP ( block )* ^( TEST expression ) )
                {
                    dbg.location(149, 7);
                    // /home/CIN/fmm/Desktop/grammar/Compiladores.g:149:7: ^( LOOP ( block )* ^( TEST expression ) )
                    {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        dbg.location(149, 9);
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_LOOP.nextNode(), root_1);
                        dbg.location(149, 14);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:149:14: ( block )*
                        while (stream_block.hasNext()) {
                            dbg.location(149, 14);
                            adaptor.addChild(root_1, stream_block.nextTree());
                        }
                        stream_block.reset();
                        dbg.location(149, 21);
                        // /home/CIN/fmm/Desktop/grammar/Compiladores.g:149:21: ^( TEST expression )
                        {
                            CommonTree root_2 = (CommonTree) adaptor.nil();
                            dbg.location(149, 23);
                            root_2 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(TEST, "TEST"), root_2);
                            dbg.location(149, 28);
                            adaptor.addChild(root_2, stream_expression.nextTree());
                            adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_0, root_1);
                    }
                }
                retval.tree = root_0;
            }
            retval.stop = input.LT(-1);
            retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
        } finally {
        }
        dbg.location(150, 4);
    } finally {
        dbg.exitRule(getGrammarFileName(), "until_statement");
        decRuleLevel();
        if (getRuleLevel() == 0) {
            dbg.terminate();
        }
    }
    return retval;
}
