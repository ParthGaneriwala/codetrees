public void onCommand(String teller, String cmd, String msg) throws ConversionException, InvocationTargetException {
    int numParams = argConverter.length;
    Object[] params = new Object[numParams];
    int paramPos = 0;
    int paramEnd = numParams - 1;
    if (tellerConverter != null) {
        params[0] = tellerConverter.convert(teller);
        paramPos++;
    }
    String[] userArgs = msg.split(" +", numParams - paramPos);
    int argPos = 0;
    int argEnd = userArgs.length - 1;
    if (argEnd >= 0) {
        userArgs[argEnd] = userArgs[argEnd].trim();
        if (userArgs[argEnd].isEmpty()) {
            argEnd--;
        }
    }
    if ((argEnd - argPos) < (paramEnd - paramPos)) {
        // Too few user args, use null for tail values.
        if (tailConverter != null) {
            params[paramEnd] = tailConverter.convert(null);
            paramEnd--;
        }
        int lastParam = (argEnd - argPos) + paramPos;
        while (paramEnd > lastParam) {
            params[paramEnd] = argConverter[paramEnd].convert(null);
            paramEnd--;
        }
    } else if (tailConverter != null) {
        // We can handle an arbitrary number of args.
        params[paramEnd] = tailConverter.convert(userArgs[argEnd]);
        paramEnd--;
        argEnd--;
    } else if (argEnd >= 0 && userArgs[argEnd].indexOf(' ') >= 0) {
        // Too many args.
        throw new ConversionException("Command has too many inputs.");
    }
    for (; argPos <= argEnd; argPos++, paramPos++) {
        String arg = userArgs[argPos];
        params[paramPos] = argConverter[paramPos].convert(arg);
    }
    try {
        method.invoke(target, params);
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    }
}
