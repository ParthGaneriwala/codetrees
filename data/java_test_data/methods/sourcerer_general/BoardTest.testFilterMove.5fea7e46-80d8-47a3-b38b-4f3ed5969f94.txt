@Test
public void testFilterMove() {
    ArrayList<BoardPoint> moves = board.filterMove(0, 1, 0, 3);
    assertTrue(moves.contains(new BoardPoint(0, 2)));
    assertTrue(moves.contains(new BoardPoint(0, 3)));
    assertTrue(moves.size() == 2);
    // sets up player 1 queen
    board.getGrid()[0][3].setPiece(new Queen());
    board.getGrid()[0][3].getPiece().setPlayer(true);
    board.getGrid()[0][3].setOccupied(true);
    moves = board.filterMove(0, 3, 0, 6);
    assertTrue(moves.contains(new BoardPoint(0, 4)));
    assertTrue(moves.contains(new BoardPoint(0, 5)));
    assertTrue(moves.contains(new BoardPoint(0, 6)));
    assertTrue(moves.size() == 3);
    // sets up player 1 queen
    board.getGrid()[1][3].setPiece(new Pawn());
    board.getGrid()[1][3].getPiece().setPlayer(true);
    board.getGrid()[1][3].setOccupied(true);
    moves = board.filterMove(0, 3, 7, 3);
    assertTrue(moves.isEmpty());
    moves = board.filterMove(0, 3, 1, 4);
    assertTrue(moves.size() == 1);
    moves = board.filterMove(0, 3, 1, 5);
    assertTrue(moves.isEmpty());
}
