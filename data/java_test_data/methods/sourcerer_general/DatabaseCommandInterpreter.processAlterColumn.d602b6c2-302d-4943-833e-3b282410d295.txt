private void processAlterColumn(Table t) throws HsqlException {
    String columnName = tokenizer.getSimpleName();
    int columnIndex = t.getColumnNr(columnName);
    Column column = t.getColumn(columnIndex);
    String token = tokenizer.getSimpleToken();
    switch(Token.get(token)) {
        case Token.RENAME:
            {
                tokenizer.getThis(Token.T_TO);
                processAlterColumnRename(t, column);
                return;
            }
        case Token.DROP:
            {
                tokenizer.getThis(Token.T_DEFAULT);
                TableWorks tw = new TableWorks(session, t);
                tw.setColDefaultExpression(columnIndex, null);
                return;
            }
        case Token.SET:
            {
                // 4-8-2005 MarcH and HuugO ALTER TABLE <tablename> ALTER COLUMN <column name> SET [NOT] NULL support added
                token = tokenizer.getSimpleToken();
                if (token.equals(Token.T_NOT)) {
                    tokenizer.getThis(Token.T_NULL);
                    TableWorks tw = new TableWorks(session, t);
                    tw.setColNullability(column, false);
                } else if (token.equals(Token.T_NULL)) {
                    TableWorks tw = new TableWorks(session, t);
                    tw.setColNullability(column, true);
                } else if (token.equals(Token.T_DEFAULT)) {
                    // alter table alter column set default
                    TableWorks tw = new TableWorks(session, t);
                    int type = column.getType();
                    int length = column.getSize();
                    int scale = column.getScale();
                    Expression expr = processCreateDefaultExpression(type, length, scale);
                    tw.setColDefaultExpression(columnIndex, expr);
                } else {
                    throw Trace.error(Trace.UNEXPECTED_TOKEN, token);
                }
                return;
            }
        case Token.RESTART:
            {
                tokenizer.getThis(Token.T_WITH);
                long identityStart = tokenizer.getBigint();
                int id = t.getIdentityColumn();
                if (id == -1) {
                    throw Trace.error(Trace.OPERATION_NOT_SUPPORTED);
                }
                t.identitySequence.reset(identityStart);
                return;
            }
        default:
            {
                tokenizer.back();
                processAlterColumnType(t, column);
            }
    }
}
