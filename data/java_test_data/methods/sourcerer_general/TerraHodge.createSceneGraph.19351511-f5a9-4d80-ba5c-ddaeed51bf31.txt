public BranchGroup createSceneGraph() {
    blurb("Loading scene...");
    int hodgeDim = engine.getMatrixSize();
    int cells = hodgeDim * hodgeDim;
    int quads = cells * RESOLUTION * RESOLUTION;
    int coords = quads * 4;
    blurb("Quads: " + quads);
    blurb("Coords: " + coords);
    double hodgeMaxLen = hodgeDim * MAX_PLOT_SIZE * TERRAINS;
    BoundingSphere bounds = new BoundingSphere(new Point3d(hodgeMaxLen / 2.0, 0, hodgeMaxLen / 2.0), hodgeMaxLen);
    BranchGroup objRoot = new BranchGroup();
    AmbientLight AL = new AmbientLight(true, white);
    AL.setInfluencingBounds(bounds);
    objRoot.addChild(AL);
    if (FOG) {
        LinearFog fog = new LinearFog(gray, QUAD_SIZE, QUAD_SIZE * TERRAINS);
        fog.setInfluencingBounds(bounds);
        objRoot.addChild(fog);
    }
    float[] hodgeDat = new float[coords * 3];
    float[] hodgeCol = new float[coords * 3];
    terrain = new QuadArray(coords, QuadArray.COORDINATES | QuadArray.TEXTURE_COORDINATE_2 | QuadArray.COLOR_3 | QuadArray.BY_REFERENCE);
    terrain.setCapability(QuadArray.ALLOW_REF_DATA_READ);
    terrain.setCapability(QuadArray.ALLOW_REF_DATA_WRITE);
    terrain.setCoordRefFloat(hodgeDat);
    terrain.setColorRefFloat(hodgeCol);
    float[] texArray = new float[coords * 2];
    // TexCoord2f t1 = new TexCoord2f(0,0);
    // TexCoord2f t2 = new TexCoord2f(1,0);
    // TexCoord2f t3 = new TexCoord2f(0,1);
    // TexCoord2f t4 = new TexCoord2f(1,1);
    // for (int i=0;i<coords*2;i+=8) {
    // texArray[i+0] = t1.x; texArray[i+1] = t1.y;
    // texArray[i+2] = t2.x; texArray[i+3] = t2.y;
    // texArray[i+4] = t3.x; texArray[i+5] = t3.y;
    // texArray[i+6] = t4.x; texArray[i+7] = t4.y;
    // }
    terrain.setTexCoordRefFloat(0, texArray);
    hodgeTGs = new TransformGroup[TERRAINS][TERRAINS];
    for (int x = 0; x < TERRAINS; x++) for (int y = 0; y < TERRAINS; y++) {
        hodgeTGs[x][y] = new TransformGroup();
        hodgeTGs[x][y].setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
        hodgeTGs[x][y].setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
        hodgeTGs[x][y].setCapability(TransformGroup.ALLOW_CHILDREN_READ);
        Shape3D hodgeShape = new Shape3D();
        hodgeShape.setCapability(Shape3D.ALLOW_GEOMETRY_WRITE);
        hodgeShape.setCapability(Shape3D.ALLOW_APPEARANCE_WRITE);
        hodgeShape.setAppearance(getTerrainAppearance());
        hodgeShape.addGeometry(terrain);
        hodgeTGs[x][y].addChild(hodgeShape);
        objRoot.addChild(hodgeTGs[x][y]);
        if (DEBUG)
            blurb("Added terrain: " + x + "," + y);
    }
    translateTerrains();
    outShape = new Shape3D();
    outShape.setCapability(Shape3D.ALLOW_APPEARANCE_WRITE);
    outShape.setCapability(Shape3D.ALLOW_GEOMETRY_WRITE);
    updateOutlands(true);
    objRoot.addChild(outShape);
    starBack = new Background();
    starBack.setCapability(Background.ALLOW_GEOMETRY_WRITE);
    starBack.setCapability(Background.ALLOW_IMAGE_WRITE);
    starBack.setCapability(Background.ALLOW_COLOR_WRITE);
    starBack.setImageScaleMode(Background.SCALE_FIT_MAX);
    starBack.setApplicationBounds(bounds);
    generateBackground();
    objRoot.addChild(starBack);
    blurb("...loaded.");
    return objRoot;
}
