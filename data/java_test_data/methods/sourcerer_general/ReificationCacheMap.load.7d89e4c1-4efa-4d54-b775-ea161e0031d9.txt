public ReificationCache load(Node stmtURI, Triple s, ReificationStatementMask sm, ReificationStatementMask dm) {
    flushAll();
    ReificationStatementMask m = new ReificationStatementMask();
    Triple t;
    boolean hasSubj, hasPred, hasObj, hasType;
    boolean checkSame = sm != null;
    int cnt = 0;
    ResultSetReifIterator it = this.reifier_RDB.m_reif.findReifStmt(stmtURI, false, this.reifier_RDB.my_GID, false);
    while (it.hasNext()) {
        cnt++;
        Triple db = (Triple) it.next();
        ReificationStatementMask n = new ReificationStatementMask();
        hasSubj = !db.getSubject().equals(Node.NULL);
        if (hasSubj && checkSame)
            if (db.getSubject().equals(s.getSubject()))
                sm.setHasSubj();
            else
                dm.setHasSubj();
        hasPred = !db.getPredicate().equals(Node.NULL);
        if (hasPred && checkSame)
            if (db.getPredicate().equals(s.getPredicate()))
                sm.setHasPred();
            else
                dm.setHasPred();
        hasObj = !db.getObject().equals(Node.NULL);
        if (hasObj && checkSame)
            if (db.getObject().equals(s.getObject()))
                sm.setHasObj();
            else
                dm.setHasObj();
        hasType = it.getHasType();
        n.setMask(hasSubj, hasPred, hasObj, hasType);
        if (n.hasNada())
            throw new JenaException("Fragment has no data");
        m.setMerge(n);
    }
    if (cnt == 0)
        // no fragments for subject
        return null;
    if (m.hasSPOT() && (cnt == 1))
        m.setIsStmt();
    inUse[0] = true;
    cache[0] = new ReificationCache(stmtURI, m, cnt);
    return cache[0];
}
