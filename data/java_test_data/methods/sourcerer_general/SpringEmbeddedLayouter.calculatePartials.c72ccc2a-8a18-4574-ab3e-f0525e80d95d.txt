// setupNodeDistanceSprings()
protected PartialDerivatives calculatePartials(PartialDerivatives partials, List partials_list, PotentialEnergy potential_energy, boolean reversed) {
    partials.reset();
    NodeView node_view = partials.getNodeView();
    int node_view_index = ((Integer) nodeIndexToMatrixIndexMap.get(new Integer(node_view.getRootGraphIndex()))).intValue();
    double node_view_radius = node_view.getWidth();
    double node_view_x = node_view.getXPosition();
    double node_view_y = node_view.getYPosition();
    // System.out.println( "index: "+node_view_index+" x: "+node_view_x+" y:" +node_view_y );
    PartialDerivatives other_node_partials = null;
    NodeView other_node_view;
    int other_node_view_index;
    double other_node_view_radius;
    PartialDerivatives furthest_partials = null;
    Iterator iterator;
    if (partials_list == null) {
        iterator = graphView.getNodeViewsIterator();
    } else {
        iterator = partials_list.iterator();
    }
    double delta_x;
    double delta_y;
    double euclidean_distance;
    double euclidean_distance_cubed;
    double distance_from_rest;
    double distance_from_touching;
    double incremental_change;
    while (iterator.hasNext()) {
        if (partials_list == null) {
            other_node_view = (NodeView) iterator.next();
        } else {
            other_node_partials = (PartialDerivatives) iterator.next();
            other_node_view = other_node_partials.getNodeView();
        }
        if (node_view.getRootGraphIndex() == other_node_view.getRootGraphIndex()) {
            // System.out.println( "Nodes are the same. " );
            continue;
        }
        other_node_view_index = ((Integer) nodeIndexToMatrixIndexMap.get(new Integer(other_node_view.getRootGraphIndex()))).intValue();
        other_node_view_radius = other_node_view.getWidth();
        delta_x = (node_view_x - other_node_view.getXPosition());
        delta_y = (node_view_y - other_node_view.getYPosition());
        // System.out.println( "Delta's Calculated: "+delta_y+ "  "+delta_x );
        euclidean_distance = Math.sqrt((delta_x * delta_x) + (delta_y * delta_y));
        euclidean_distance_cubed = Math.pow(euclidean_distance, 3);
        // System.out.println( "Euclidean_Distance: "+euclidean_distance+" Euclidean_Distance_Cubed: "+euclidean_distance_cubed );
        distance_from_touching = (euclidean_distance - (node_view_radius + other_node_view_radius));
        // System.out.println( "Distance_From_Touching: "+distance_from_touching );
        incremental_change = (nodeDistanceSpringScalars[layoutPass] * (nodeDistanceSpringStrengths[node_view_index][other_node_view_index] * (delta_x - ((nodeDistanceSpringRestLengths[node_view_index][other_node_view_index] * delta_x) / euclidean_distance))));
        if (!reversed) {
            partials.x += incremental_change;
        }
        if (other_node_partials != null) {
            incremental_change = (nodeDistanceSpringScalars[layoutPass] * (nodeDistanceSpringStrengths[other_node_view_index][node_view_index] * (-delta_x - ((nodeDistanceSpringRestLengths[other_node_view_index][node_view_index] * -delta_x) / euclidean_distance))));
            if (reversed) {
                other_node_partials.x -= incremental_change;
            } else {
                other_node_partials.x += incremental_change;
            }
        }
        if (distance_from_touching < 0.0) {
            incremental_change = (anticollisionSpringScalars[layoutPass] * (anticollisionSpringStrength * (delta_x - (((node_view_radius + other_node_view_radius) * delta_x) / euclidean_distance))));
            if (!reversed) {
                partials.x += incremental_change;
            }
            if (other_node_partials != null) {
                incremental_change = (anticollisionSpringScalars[layoutPass] * (anticollisionSpringStrength * (-delta_x - (((node_view_radius + other_node_view_radius) * -delta_x) / euclidean_distance))));
                if (reversed) {
                    other_node_partials.x -= incremental_change;
                // System.out.println( "Other_Node_Partials (-): "+other_node_partials.x );
                } else {
                    other_node_partials.x += incremental_change;
                // System.out.println( "Other_Node_Partials (+): "+other_node_partials.x );
                }
            }
        }
        incremental_change = (nodeDistanceSpringScalars[layoutPass] * (nodeDistanceSpringStrengths[node_view_index][other_node_view_index] * (delta_y - ((nodeDistanceSpringRestLengths[node_view_index][other_node_view_index] * delta_y) / euclidean_distance))));
        if (!reversed) {
            partials.y += incremental_change;
        }
        if (other_node_partials != null) {
            incremental_change = (nodeDistanceSpringScalars[layoutPass] * (nodeDistanceSpringStrengths[other_node_view_index][node_view_index] * (-delta_y - ((nodeDistanceSpringRestLengths[other_node_view_index][node_view_index] * -delta_y) / euclidean_distance))));
            if (reversed) {
                other_node_partials.y -= incremental_change;
            } else {
                other_node_partials.y += incremental_change;
            }
        }
        if (distance_from_touching < 0.0) {
            incremental_change = (anticollisionSpringScalars[layoutPass] * (anticollisionSpringStrength * (delta_y - (((node_view_radius + other_node_view_radius) * delta_y) / euclidean_distance))));
            if (!reversed) {
                partials.y += incremental_change;
            }
            if (other_node_partials != null) {
                incremental_change = (anticollisionSpringScalars[layoutPass] * (anticollisionSpringStrength * (-delta_y - (((node_view_radius + other_node_view_radius) * -delta_y) / euclidean_distance))));
                if (reversed) {
                    other_node_partials.y -= incremental_change;
                } else {
                    other_node_partials.y += incremental_change;
                }
            }
        }
        incremental_change = (nodeDistanceSpringScalars[layoutPass] * (nodeDistanceSpringStrengths[node_view_index][other_node_view_index] * (1.0 - ((nodeDistanceSpringRestLengths[node_view_index][other_node_view_index] * (delta_y * delta_y)) / euclidean_distance_cubed))));
        if (reversed) {
            if (other_node_partials != null) {
                other_node_partials.xx -= incremental_change;
            }
        } else {
            partials.xx += incremental_change;
            if (other_node_partials != null) {
                other_node_partials.xx += incremental_change;
            }
        }
        if (distance_from_touching < 0.0) {
            incremental_change = (anticollisionSpringScalars[layoutPass] * (anticollisionSpringStrength * (1.0 - (((node_view_radius + other_node_view_radius) * (delta_y * delta_y)) / euclidean_distance_cubed))));
            if (reversed) {
                if (other_node_partials != null) {
                    other_node_partials.xx -= incremental_change;
                }
            } else {
                partials.xx += incremental_change;
                if (other_node_partials != null) {
                    other_node_partials.xx += incremental_change;
                }
            }
        }
        incremental_change = (nodeDistanceSpringScalars[layoutPass] * (nodeDistanceSpringStrengths[node_view_index][other_node_view_index] * (1.0 - ((nodeDistanceSpringRestLengths[node_view_index][other_node_view_index] * (delta_x * delta_x)) / euclidean_distance_cubed))));
        if (reversed) {
            if (other_node_partials != null) {
                other_node_partials.yy -= incremental_change;
            }
        } else {
            partials.yy += incremental_change;
            if (other_node_partials != null) {
                other_node_partials.yy += incremental_change;
            }
        }
        if (distance_from_touching < 0.0) {
            incremental_change = (anticollisionSpringScalars[layoutPass] * (anticollisionSpringStrength * (1.0 - (((node_view_radius + other_node_view_radius) * (delta_x * delta_x)) / euclidean_distance_cubed))));
            if (reversed) {
                if (other_node_partials != null) {
                    other_node_partials.yy -= incremental_change;
                }
            } else {
                partials.yy += incremental_change;
                if (other_node_partials != null) {
                    other_node_partials.yy += incremental_change;
                }
            }
        }
        incremental_change = (nodeDistanceSpringScalars[layoutPass] * (nodeDistanceSpringStrengths[node_view_index][other_node_view_index] * ((nodeDistanceSpringRestLengths[node_view_index][other_node_view_index] * (delta_x * delta_y)) / euclidean_distance_cubed)));
        if (reversed) {
            if (other_node_partials != null) {
                other_node_partials.xy -= incremental_change;
            }
        } else {
            partials.xy += incremental_change;
            if (other_node_partials != null) {
                other_node_partials.xy += incremental_change;
            }
        }
        if (distance_from_touching < 0.0) {
            incremental_change = (anticollisionSpringScalars[layoutPass] * (anticollisionSpringStrength * (((node_view_radius + other_node_view_radius) * (delta_x * delta_y)) / euclidean_distance_cubed)));
            if (reversed) {
                if (other_node_partials != null) {
                    other_node_partials.xy -= incremental_change;
                }
            } else {
                partials.xy += incremental_change;
                if (other_node_partials != null) {
                    other_node_partials.xy += incremental_change;
                }
            }
        }
        distance_from_rest = (euclidean_distance - nodeDistanceSpringRestLengths[node_view_index][other_node_view_index]);
        incremental_change = (nodeDistanceSpringScalars[layoutPass] * ((nodeDistanceSpringStrengths[node_view_index][other_node_view_index] * (distance_from_rest * distance_from_rest)) / 2));
        if (reversed) {
            if (other_node_partials != null) {
                potential_energy.totalEnergy -= incremental_change;
            }
        } else {
            potential_energy.totalEnergy += incremental_change;
            if (other_node_partials != null) {
                potential_energy.totalEnergy += incremental_change;
            }
        }
        if (distance_from_touching < 0.0) {
            incremental_change = (anticollisionSpringScalars[layoutPass] * ((anticollisionSpringStrength * (distance_from_touching * distance_from_touching)) / 2));
            if (reversed) {
                if (other_node_partials != null) {
                    potential_energy.totalEnergy -= incremental_change;
                }
            } else {
                potential_energy.totalEnergy += incremental_change;
                if (other_node_partials != null) {
                    potential_energy.totalEnergy += incremental_change;
                }
            }
        }
        if (other_node_partials != null) {
            other_node_partials.euclideanDistance = Math.sqrt((other_node_partials.x * other_node_partials.x) + (other_node_partials.y * other_node_partials.y));
            if ((furthest_partials == null) || (other_node_partials.euclideanDistance > furthest_partials.euclideanDistance)) {
                furthest_partials = other_node_partials;
            }
        }
    }
    if (!reversed) {
        partials.euclideanDistance = Math.sqrt((partials.x * partials.x) + (partials.y * partials.y));
    }
    if ((furthest_partials == null) || (partials.euclideanDistance > furthest_partials.euclideanDistance)) {
        furthest_partials = partials;
    }
    return furthest_partials;
}
