public void or(Real a) {
    if ((this.exponent < 0 && this.mantissa != 0) || (a.exponent < 0 && a.mantissa != 0)) {
        makeNan();
        return;
    }
    if ((this.exponent == 0 && this.mantissa == 0) || (a.exponent == 0 && a.mantissa == 0)) {
        if ((this.exponent == 0 && this.mantissa == 0)) {
            this.mantissa = a.mantissa;
            this.exponent = a.exponent;
            this.sign = a.sign;
        }
        ;
        return;
    }
    if ((this.exponent < 0 && this.mantissa == 0) || (a.exponent < 0 && a.mantissa == 0)) {
        if (!(this.exponent < 0 && this.mantissa == 0) && (this.sign != 0))
            // ASSIGN(this,this);
            ;
        else if (!(a.exponent < 0 && a.mantissa == 0) && (a.sign != 0)) {
            {
                this.mantissa = a.mantissa;
                this.exponent = a.exponent;
                this.sign = a.sign;
            }
            ;
        } else
            makeInfinity(sign | a.sign);
        return;
    }
    byte s;
    int e;
    long m;
    if (((this.sign != 0) && exponent <= a.exponent) || ((a.sign == 0) && exponent >= a.exponent)) {
        s = a.sign;
        e = a.exponent;
        m = a.mantissa;
    } else {
        s = sign;
        e = exponent;
        m = mantissa;
        sign = a.sign;
        exponent = a.exponent;
        mantissa = a.mantissa;
    }
    int shift = exponent - e;
    if (shift >= 64 || shift <= -64)
        return;
    if (s != 0)
        m = -m;
    if ((this.sign != 0))
        mantissa = -mantissa;
    if (shift >= 0)
        mantissa |= m >> shift;
    else
        mantissa |= m << (-shift);
    sign = 0;
    if (mantissa < 0) {
        mantissa = -mantissa;
        sign = 1;
    }
    normalize();
}
