private Result sqlExecuteBatch(Result cmd) {
    int csid;
    Record record;
    Result out;
    CompiledStatement cs;
    Expression[] parameters;
    int[] updateCounts;
    int count;
    csid = cmd.getStatementID();
    cs = database.compiledStatementManager.getStatement(this, csid);
    if (cs == null) {
        // invalid sql has been removed already
        return new Result(Trace.runtimeError(Trace.INVALID_PREPARED_STATEMENT, null), null);
    }
    parameters = cs.parameters;
    count = 0;
    updateCounts = new int[cmd.getSize()];
    record = cmd.rRoot;
    while (record != null) {
        Result in;
        Object[] pvals = record.data;
        in = sqlExecuteCompiledNoPreChecks(cs, pvals);
        // esultConstants.EXECUTE_FAILED is encountered in the result
        if (in.mode == ResultConstants.UPDATECOUNT) {
            updateCounts[count++] = in.updateCount;
        } else if (in.isData()) {
            // FIXME:  we don't have what it takes yet
            // to differentiate between things like
            // stored procedure calls to methods with
            // void return type and select statements with
            // a single row/column containg null
            updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
        } else {
            updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);
            break;
        }
        record = record.next;
    }
    out = new Result(ResultConstants.SQLEXECUTE, updateCounts, 0);
    return out;
}
