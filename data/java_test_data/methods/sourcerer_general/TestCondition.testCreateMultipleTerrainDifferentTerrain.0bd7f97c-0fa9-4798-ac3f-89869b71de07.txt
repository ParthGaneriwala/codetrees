@Test
@DirtiesContext
public void testCreateMultipleTerrainDifferentTerrain() throws Exception {
    configureMinimalGame();
    DbRealGameLevel dbRealGameLevel = setupTerritoryLevelMultiple(new Rectangle(0, 0, 10, 10));
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    Id bulldozer = proceedToTerritoryLevel(dbRealGameLevel);
    sendBuildCommand(bulldozer, new Index(200, 200), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendBuildCommand(bulldozer, new Index(400, 400), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendBuildCommand(bulldozer, new Index(600, 600), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    Id factory = getFirstSynItemId(TEST_FACTORY_ITEM_ID);
    sendFactoryCommand(factory, TEST_ATTACK_ITEM_ID);
    waitForActionServiceDone();
    sendFactoryCommand(factory, TEST_ATTACK_ITEM_ID);
    waitForActionServiceDone();
    Assert.assertEquals(TERRITORY_LEVEL, movableService.getGameInfo().getLevel().getName());
    sendBuildCommand(bulldozer, new Index(3000, 3000), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendBuildCommand(bulldozer, new Index(4000, 3000), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    sendBuildCommand(bulldozer, new Index(5000, 3000), TEST_FACTORY_ITEM_ID);
    waitForActionServiceDone();
    Assert.assertEquals(TERRITORY_LEVEL, movableService.getGameInfo().getLevel().getName());
    factory = getFirstSynItemId(TEST_FACTORY_ITEM_ID, new Rectangle(4900, 2900, 200, 200));
    sendFactoryCommand(factory, TEST_ATTACK_ITEM_ID);
    waitForActionServiceDone();
    Assert.assertEquals(TERRITORY_LEVEL, movableService.getGameInfo().getLevel().getName());
    sendFactoryCommand(factory, TEST_ATTACK_ITEM_ID);
    waitForActionServiceDone();
    Assert.assertEquals(LAST_LEVEL, movableService.getGameInfo().getLevel().getName());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
