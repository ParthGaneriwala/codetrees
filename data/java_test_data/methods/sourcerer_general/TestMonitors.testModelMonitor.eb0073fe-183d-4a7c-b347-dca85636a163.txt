public void testModelMonitor() {
    Model base = ModelFactory.createDefaultModel();
    // Constants for model level test
    Resource ar = base.createResource(NS + "a");
    Property pr = base.createProperty(NS + "p");
    Statement s1 = base.createStatement(ar, pr, "1");
    Statement s2 = base.createStatement(ar, pr, "2");
    Statement s3 = base.createStatement(ar, pr, "3");
    Statement s4 = base.createStatement(ar, pr, "4");
    Statement s5 = base.createStatement(ar, pr, "5");
    MonitorModel monitor = new MonitorModel(base);
    RecordingModelListener listener = new RecordingModelListener();
    monitor.register(listener);
    // base data
    base.add(s1);
    base.add(s2);
    base.add(s3);
    // Test changes from empty
    List additions = new ArrayList();
    List deletions = new ArrayList();
    monitor.snapshot(additions, deletions);
    TestUtil.assertIteratorValues(this, additions.iterator(), new Object[] { s1, s2, s3 });
    TestUtil.assertIteratorValues(this, deletions.iterator(), new Object[] {});
    listener.assertHas(new Object[] { "addList", additions, "removeList", deletions });
    listener.clear();
    // Make some new changes
    base.add(s4);
    base.add(s5);
    base.remove(s1);
    base.remove(s2);
    additions.clear();
    deletions.clear();
    monitor.snapshot(additions, deletions);
    TestUtil.assertIteratorValues(this, additions.iterator(), new Object[] { s4, s5 });
    TestUtil.assertIteratorValues(this, deletions.iterator(), new Object[] { s1, s2 });
    TestUtil.assertIteratorValues(this, monitor.listStatements(), new Object[] { s3, s4, s5 });
    listener.assertHas(new Object[] { "addList", additions, "removeList", deletions });
    listener.clear();
}
