public void testInsertAndUpdateProjectFeatures() throws Exception {
    String title = "API Test Project";
    int newProjectId = -1;
    {
        ArrayList<String> meta = new ArrayList<String>();
        meta.add("id");
        api.setTransactionMeta(meta);
        // Insert a new project (features are set when the project is inserted)
        DataRecord record = new DataRecord();
        record.setName("project");
        record.setAction(DataRecord.INSERT);
        record.addField("title", title);
        record.addField("shortDescription", "API Test Project short description");
        record.addField("requestDate", new Date());
        record.addField("enteredBy", USER_ID);
        record.addField("modifiedBy", USER_ID);
        record.addField("groupId", GROUP_ID);
        record.addField("requestedBy", "Project Manager");
        record.addField("showCalendar", true);
        record.addField("showTickets", false);
        record.addField("showDiscussion", true);
        record.addField("showPlan", true);
        record.addField("showLists", true);
        record.addField("showDocuments", true);
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        newProjectId = Integer.parseInt(api.getResponseValue("id"));
        assertTrue(newProjectId > 0);
        Project project = new Project(db, newProjectId);
        assertTrue(project.getFeatures().getShowCalendar());
        assertFalse(project.getFeatures().getShowTickets());
        assertTrue(project.getFeatures().getShowCalendar());
        assertTrue(project.getFeatures().getShowPlan());
        assertTrue(project.getFeatures().getShowLists());
        assertTrue(project.getFeatures().getShowDocuments());
    }
    {
        DataRecord record = new DataRecord();
        record.setName("projectFeatures");
        record.setAction(DataRecord.UPDATE);
        record.addField("id", newProjectId);
        record.addField("modified", new Date());
        record.addField("modifiedBy", USER_ID);
        record.addField("showCalendar", true);
        record.addField("showTickets", true);
        record.addField("showDiscussion", false);
        record.addField("showPlan", true);
        record.addField("showLists", false);
        record.addField("showDocuments", false);
        api.save(record);
        processTheTransactions(api, packetContext);
        assertFalse("API reported a transaction error: " + api.getLastResponse(), api.hasError());
        Project project = new Project(db, newProjectId);
        assertTrue(project.getFeatures().getShowCalendar());
        assertTrue(project.getFeatures().getShowTickets());
        assertFalse(project.getFeatures().getShowDiscussion());
        assertTrue(project.getFeatures().getShowPlan());
        assertFalse(project.getFeatures().getShowLists());
        assertFalse(project.getFeatures().getShowDocuments());
        project.delete(db, null);
    }
}
