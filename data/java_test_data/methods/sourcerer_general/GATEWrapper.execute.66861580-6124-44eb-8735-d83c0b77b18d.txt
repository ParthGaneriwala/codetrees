public void execute() throws ExecutionException {
    // set the user has asked for or if they haven't specified use the default set
    if (inputASName != null && inputASName.equals(""))
        inputASName = null;
    AnnotationSet inputAS = (inputASName == null) ? document.getAnnotations() : document.getAnnotations(inputASName);
    // set the user has asked for or if they haven't specified use the default set
    if (outputASName != null && outputASName.equals(""))
        outputASName = null;
    AnnotationSet outputAS = (outputASName == null) ? document.getAnnotations() : document.getAnnotations(outputASName);
    // Get the set of sentences contained within the current document
    AnnotationSet sentences = inputAS.get(SENTENCE_ANNOTATION_TYPE);
    if (sentences != null && sentences.size() > 0) {
        // assuming there are sentences...
        // get the current time to use as part of the progress feedback
        long startTime = System.currentTimeMillis();
        // tell the user we are just starting to chunk the document
        fireStatusChanged("Chunking " + document.getName());
        fireProgressChanged(0);
        // we are just starting so we haven't processed a document yet
        // so remember this ready for the progress feedback
        int i = 0;
        // Loop through all the sentences
        Iterator sit = sentences.iterator();
        while (sit.hasNext()) {
            // get the current sentence to process
            Annotation sentence = (Annotation) sit.next();
            // Get a sorted list of the tokens within the current sentence
            List tokens = new ArrayList();
            tokens.addAll(inputAS.get(TOKEN_ANNOTATION_TYPE, sentence.getStartNode().getOffset(), sentence.getEndNode().getOffset()));
            Collections.sort(tokens);
            // Create three empty lists to hold the words, pos and chunk
            // tags of the tokens in the current sentence
            List wl = new ArrayList();
            List tl = new ArrayList();
            List pl = new ArrayList();
            // Loop through all the tokens in the current sentence
            Iterator tit = tokens.iterator();
            while (tit.hasNext()) {
                // get the current token to process
                Annotation token = (Annotation) tit.next();
                // add the string spanned by the current token to the list of words
                wl.add(token.getFeatures().get("string"));
                // get the POS tag for the current token
                String pos = (String) token.getFeatures().get(posFeature);
                // add the POS tag to the list of POS tags
                pl.add(pos);
                // get the initial chunk tag for this POS tag
                String chunkTag = (String) chunkTags.get(pos);
                // if the chunk tag is null then use the unknown chunk tag
                if (chunkTag == null)
                    chunkTag = unknownTag;
                // now add the chunk tag to the list of chunk tags
                tl.add(chunkTag);
            }
            // run the chunker over the current sentence and get back
            // an updated list of chunk tags
            tl = c.chunkSentence(wl, tl, pl);
            // a variable to hold the index of the token which
            // starts the current noun chunk
            int start = 0;
            // a flag so we know if we are in an NP or not
            boolean inBaseNP = false;
            // so we can find the noun chunks
            for (int tIndex = 0; tIndex < tl.size(); ++tIndex) {
                // get the current chunk tag
                String ct = (String) tl.get(tIndex);
                if (inBaseNP) {
                    if (ct.equals("B")) {
                        // if the chunk tag is "B" then we are about to start a
                        // new chunk so record the one that has just finished
                        addAnnotation(outputAS, tokens, start, tIndex - 1);
                        // now reset the beginning of the chunk to the current token
                        start = tIndex;
                    } else if (ct.equals("O")) {
                        // if the chunk tag is "O" then we have dropped out
                        // the end of a chunk so add the chunk we just finished
                        addAnnotation(outputAS, tokens, start, tIndex - 1);
                        // now flag that we are outside of any chunk
                        inBaseNP = false;
                    }
                } else {
                    if (ct.equals("B") || ct.equals("I")) {
                        // if the chunk tag is "B" or "I" then we have found
                        // the beginning of a chunk, so....
                        // record the start index
                        start = tIndex;
                        // and flag that we are now inside a chunk
                        inBaseNP = true;
                    }
                }
            }
            if (inBaseNP) {
                // if we got to the end of a sentence and we are still in a
                // noun chunk then we need to close the end and add the annotation
                addAnnotation(outputAS, tokens, start, tl.size() - 1);
            }
            // update the progress stuff to show the precentage of sentences
            // we have processed so far
            fireProgressChanged(i++ * 100 / sentences.size());
        }
        // we have finished! so update the progress and tell
        // the user how long it took to chunk the document
        fireProcessFinished();
        fireStatusChanged(document.getName() + " chunked in " + NumberFormat.getInstance().format((double) (System.currentTimeMillis() - startTime) / 1000) + " seconds!");
    } else {
        // not much we can do
        throw new GateRuntimeException("No sentences to process! Please run a sentence splitter first!");
    }
}
