private void findFile(File fileToLocate, boolean selectFile, boolean reload) {
    if (fileToLocate == null || !fileToLocate.isDirectory()) {
        return;
    }
    // build the canonical path so we can navigate the tree model to
    // find the
    // node
    File file = null;
    try {
        file = fileToLocate.getCanonicalFile();
    } catch (Exception e) {
        return;
    }
    // temporarly disable loading nodes in the background
    useNodeQueue = false;
    TreePath pathToSelect;
    try {
        // split the full path into individual files to locate them in
        // the tree
        // model
        List files = new ArrayList();
        files.add(file);
        while ((file = chooser.getFileSystemView().getParentDirectory(file)) != null) {
            files.add(0, file);
        }
        List path = new ArrayList();
        // start from the root
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getModel().getRoot();
        path.add(node);
        DefaultMutableTreeNode current;
        boolean found = true;
        // found.
        while (files.size() > 0 && found) {
            found = false;
            for (int i = 0, c = node.getChildCount(); i < c; i++) {
                current = (DefaultMutableTreeNode) node.getChildAt(i);
                File f = ((FileTreeNode) current).getFile();
                if (files.get(0).equals(f)) {
                    path.add(current);
                    files.remove(0);
                    node = current;
                    found = true;
                    break;
                }
            }
        }
        // select the path we found, it may be the file we were looking
        // for or a
        // subpath only
        pathToSelect = new TreePath(path.toArray());
        if (pathToSelect.getLastPathComponent() instanceof FileTreeNode && reload) {
            ((FileTreeNode) (pathToSelect.getLastPathComponent())).clear();
            enqueueChildren((FileTreeNode) pathToSelect.getLastPathComponent());
        }
    } finally {
        // re-enable background loading
        useNodeQueue = true;
    }
    if (selectFile) {
        tree.expandPath(pathToSelect);
        tree.setSelectionPath(pathToSelect);
    }
    // scrollPathToVisible(pathToSelect);
    tree.makeVisible(pathToSelect);
}
