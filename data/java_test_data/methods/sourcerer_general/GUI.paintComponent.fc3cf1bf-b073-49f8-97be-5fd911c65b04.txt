// /////////////////////////////////////////////////////////////////////////////////////
// 
// Drawing Functions
// 
public void paintComponent(Graphics g) {
    super.paintComponent(g);
    g.setColor(Color.black);
    // Draw a component if component selected and dragging
    if (drawingComponent) {
        g.drawRect(Math.min(startPoint.x, endPoint.x), Math.min(startPoint.y, endPoint.y), Math.abs(endPoint.x - startPoint.x), Math.abs(endPoint.y - startPoint.y));
    }
    ArrayList<Component> components = frame.getMapManager().getUseCaseMap().getComponents();
    Iterator<Component> itr = components.iterator();
    while (itr.hasNext()) {
        drawComponent(itr.next(), g);
    }
    ArrayList<Node> nodes = frame.getMapManager().getUseCaseMap().getNodes();
    Iterator<Node> nodeItr = nodes.iterator();
    while (nodeItr.hasNext()) {
        Node node = nodeItr.next();
        NodeType nodeType = node.getNodeType();
        if (nodeType == NodeType.START_POINT) {
            drawStartPoint(node, g);
        } else if (nodeType == NodeType.OR_FORK) {
            drawOrFork(node, g);
        } else if (nodeType == NodeType.OR_JOIN) {
            drawOrJoin(node, g);
        } else if (nodeType == NodeType.AND_FORK) {
            drawAndFork(node, g);
        } else if (nodeType == NodeType.AND_JOIN) {
            drawAndJoin(node, g);
        } else if (nodeType == NodeType.RESPONSIBILITY) {
            drawResponsibility(node, g);
        } else if (nodeType == NodeType.END_POINT) {
            drawEndPoint(node, g);
        }
    }
    ArrayList<PathSegment> pathSegments = frame.getMapManager().getUseCaseMap().getPathSegment();
    Iterator<PathSegment> pathSegmentItr = pathSegments.iterator();
    while (pathSegmentItr.hasNext()) {
        PathSegment pathSegment = pathSegmentItr.next();
        drawLine(pathSegment, g);
    }
}
