private void setNumericObject(int parameterIndex, Object parameterObj, int targetSqlType, int scale) throws SQLException {
    Number parameterAsNum;
    if (parameterObj instanceof Boolean) {
        parameterAsNum = ((Boolean) parameterObj).booleanValue() ? Constants.integerValueOf(1) : Constants.integerValueOf(0);
    } else if (parameterObj instanceof String) {
        switch(targetSqlType) {
            case Types.BIT:
                if ("1".equals((String) parameterObj) || "0".equals((String) parameterObj)) {
                    parameterAsNum = Integer.valueOf((String) parameterObj);
                } else {
                    boolean parameterAsBoolean = "true".equalsIgnoreCase((String) parameterObj);
                    parameterAsNum = parameterAsBoolean ? Constants.integerValueOf(1) : Constants.integerValueOf(0);
                }
                break;
            case Types.TINYINT:
            case Types.SMALLINT:
            case Types.INTEGER:
                parameterAsNum = Integer.valueOf((String) parameterObj);
                break;
            case Types.BIGINT:
                parameterAsNum = Long.valueOf((String) parameterObj);
                break;
            case Types.REAL:
                parameterAsNum = Float.valueOf((String) parameterObj);
                break;
            case Types.FLOAT:
            case Types.DOUBLE:
                parameterAsNum = Double.valueOf((String) parameterObj);
                break;
            case Types.DECIMAL:
            case Types.NUMERIC:
            default:
                parameterAsNum = new java.math.BigDecimal((String) parameterObj);
        }
    } else {
        parameterAsNum = (Number) parameterObj;
    }
    switch(targetSqlType) {
        case Types.BIT:
        case Types.TINYINT:
        case Types.SMALLINT:
        case Types.INTEGER:
            setInt(parameterIndex, parameterAsNum.intValue());
            break;
        case Types.BIGINT:
            setLong(parameterIndex, parameterAsNum.longValue());
            break;
        case Types.REAL:
            setFloat(parameterIndex, parameterAsNum.floatValue());
            break;
        case Types.FLOAT:
        case Types.DOUBLE:
            setDouble(parameterIndex, parameterAsNum.doubleValue());
            break;
        case Types.DECIMAL:
        case Types.NUMERIC:
            if (parameterAsNum instanceof java.math.BigDecimal) {
                BigDecimal scaledBigDecimal = null;
                try {
                    scaledBigDecimal = ((java.math.BigDecimal) parameterAsNum).setScale(scale);
                } catch (ArithmeticException ex) {
                    try {
                        scaledBigDecimal = ((java.math.BigDecimal) parameterAsNum).setScale(scale, BigDecimal.ROUND_HALF_UP);
                    } catch (ArithmeticException arEx) {
                        throw SQLError.createSQLException("Can't set scale of '" + scale + "' for DECIMAL argument '" + parameterAsNum + "'", SQLError.SQL_STATE_ILLEGAL_ARGUMENT, getExceptionInterceptor());
                    }
                }
                setBigDecimal(parameterIndex, scaledBigDecimal);
            } else if (parameterAsNum instanceof java.math.BigInteger) {
                setBigDecimal(parameterIndex, new java.math.BigDecimal((java.math.BigInteger) parameterAsNum, scale));
            } else {
                setBigDecimal(parameterIndex, new java.math.BigDecimal(parameterAsNum.doubleValue()));
            }
            break;
    }
}
