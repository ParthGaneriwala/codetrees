final Table SYSTEM_TABLEPRIVILEGES() throws HsqlException {
    Table t = sysTables[SYSTEM_TABLEPRIVILEGES];
    if (t == null) {
        t = createBlankTable(sysTableHsqlNames[SYSTEM_TABLEPRIVILEGES]);
        addColumn(t, "TABLE_CAT", Types.VARCHAR);
        addColumn(t, "TABLE_SCHEM", Types.VARCHAR);
        // not null
        addColumn(t, "TABLE_NAME", Types.VARCHAR, false);
        // not null
        addColumn(t, "GRANTOR", Types.VARCHAR, false);
        // not null
        addColumn(t, "GRANTEE", Types.VARCHAR, false);
        // not null
        addColumn(t, "PRIVILEGE", Types.VARCHAR, 10, false);
        // not null
        addColumn(t, "IS_GRANTABLE", Types.VARCHAR, 3, false);
        // order: TABLE_SCHEM, TABLE_NAME, and PRIVILEGE,
        // added for unique:  GRANTEE, GRANTOR, TABLE_CAT
        // false PK, as TABLE_SCHEM and/or TABLE_CAT may be null
        t.createPrimaryKey(null, new int[] { 1, 2, 5, 4, 3, 0 }, false);
        return t;
    }
    // calculated column values
    String tableCatalog;
    String tableSchema;
    String tableName;
    String grantorName;
    String granteeName;
    String privilege;
    String isGrantable;
    // intermediate holders
    HsqlArrayList users;
    User user;
    String[] tablePrivileges;
    Iterator tables;
    Table table;
    HsqlName accessKey;
    Object[] row;
    // column number mappings
    final int itable_cat = 0;
    final int itable_schem = 1;
    final int itable_name = 2;
    final int igrantor = 3;
    final int igrantee = 4;
    final int iprivilege = 5;
    final int iis_grantable = 6;
    // Initialization
    grantorName = GranteeManager.DBA_ADMIN_ROLE_NAME;
    users = database.getUserManager().listVisibleUsers(session, true);
    tables = allTables();
    // Do it.
    while (tables.hasNext()) {
        table = (Table) tables.next();
        accessKey = table.getName();
        // right, or the special PUBLIC user has some right.
        if (!isAccessibleTable(table)) {
            continue;
        }
        tableName = table.getName().name;
        tableCatalog = ns.getCatalogName(table);
        tableSchema = table.getSchemaName();
        for (int i = 0; i < users.size(); i++) {
            user = (User) users.get(i);
            granteeName = user.getName();
            if (user.isAdmin()) {
                tablePrivileges = UserManager.getRightsArray(UserManager.ALL);
            } else {
                tablePrivileges = user.listGrantedTablePrivileges(accessKey);
            }
            isGrantable = (user.isAdmin()) ? "YES" : "NO";
            for (int j = 0; j < tablePrivileges.length; j++) {
                privilege = (String) tablePrivileges[j];
                row = t.getEmptyRowData();
                row[itable_cat] = tableCatalog;
                row[itable_schem] = tableSchema;
                row[itable_name] = tableName;
                row[igrantor] = grantorName;
                row[igrantee] = granteeName;
                row[iprivilege] = privilege;
                row[iis_grantable] = isGrantable;
                t.insertSys(row);
            }
        }
    }
    t.setDataReadOnly(true);
    return t;
}
