private ArrayList<HalfMove> getMoves(Point from, boolean threatsonly) {
    ArrayList<HalfMove> moves = new ArrayList<HalfMove>();
    ChessPiece moving = at(from);
    if (null == moving) {
        throw new IllegalArgumentException("No piece to move at " + from);
    }
    PieceColor myColor = moving.getColor();
    PieceType t = moving.getType();
    switch(t) {
        case PAWN:
            /* very special cases:
			 * first move
			 * capture
			 * capture en-passant
			 */
            int ydir = PieceColor.WHITE == moving.getColor() ? 1 : -1;
            int simple_y = ydir + from.y;
            if (7 < simple_y || 0 > simple_y) {
                // throw new UnPromotedPawnException(moving.getColor() + " pawn in last rank should have been promoted!");
                System.err.println(moving.getColor() + " pawn in last rank should have been promoted!");
            }
            // capture...
            int column;
            if (from.x > 0) {
                column = from.x - 1;
                Point maybe = new Point(column, simple_y);
                ChessPiece other = at(maybe);
                if (null != other) {
                    if (!other.isColor(myColor)) {
                        MoveType mt = other.getType().equals(PieceType.KING) ? MoveType.CHECKMATE : MoveType.CAPTURE;
                        moves.add(new HalfMove(maybe, mt));
                    }
                } else if (null != passing_pawn_loc) {
                    // passing pawn can't be there if there's a regular capture
                    Point passpoint = new Point(column, from.y);
                    if (passing_pawn_loc.equals(passpoint)) {
                        moves.add(new HalfMove(maybe, MoveType.EN_PASSANT));
                    }
                }
            }
            if (from.x < 7) {
                column = from.x + 1;
                Point maybe = new Point(column, simple_y);
                ChessPiece other = at(maybe);
                if (null != other) {
                    if (!other.isColor(myColor)) {
                        MoveType mt = other.getType().equals(PieceType.KING) ? MoveType.CHECKMATE : MoveType.CAPTURE;
                        moves.add(new HalfMove(maybe, mt));
                    }
                } else if (null != passing_pawn_loc) {
                    Point passpoint = new Point(column, from.y);
                    if (passing_pawn_loc.equals(passpoint)) {
                        moves.add(new HalfMove(maybe, MoveType.EN_PASSANT));
                    }
                }
            }
            // if we only want captures, stop here
            if (threatsonly)
                break;
            // standard
            Point simplemove = new Point(from.x, simple_y);
            if (null == at(simplemove)) {
                moves.add(new HalfMove(simplemove));
                // first move
                Point twomove = new Point(from.x, from.y + 2 * ydir);
                if (moving.firstmove && null == at(twomove)) {
                    moves.add(new HalfMove(twomove, MoveType.PAWN_2MOVE));
                }
            }
            break;
        case KING:
            if (moving.firstmove && !threatsonly && !inCheck(myColor)) {
                // castling possible
                int rank = from.y;
                boolean qcastle_ok = true;
                boolean kcastle_ok = true;
                /*
				 * for each side
				 * 	find the rook and
				 *  	check if it has moved (just check the two squares)
				 *  check if the path between is clear
				 *  check that we are not in check
				 *  	and there's no threat to the intermediate square
				 *  	(that one's a pain)
				 */
                ChessPiece qRook = board[0][rank];
                ChessPiece kRook = board[7][rank];
                if (null == qRook || !qRook.firstmove) {
                    qcastle_ok = false;
                } else {
                    for (int i = 1; i < 4; i++) {
                        if (null != board[i][rank]) {
                            qcastle_ok = false;
                            break;
                        }
                    }
                }
                if (null == kRook || !kRook.firstmove) {
                    kcastle_ok = false;
                } else {
                    if (null != board[5][rank] || null != board[6][rank]) {
                        kcastle_ok = false;
                    }
                }
                // granted, we know now that from.x == 4, but shush
                if (qcastle_ok) {
                    Point halfway = new Point(from.x - 1, rank);
                    if (!threatenedBy(halfway, myColor.reverse())) {
                        moves.add(new HalfMove(new Point(from.x - 2, rank), MoveType.CASTLE));
                    }
                }
                if (kcastle_ok) {
                    Point halfway = new Point(from.x + 1, rank);
                    if (!threatenedBy(halfway, myColor.reverse())) {
                        moves.add(new HalfMove(new Point(from.x + 2, rank), MoveType.CASTLE));
                    }
                }
            }
        case KNIGHT:
        case ROOK:
        case BISHOP:
        case QUEEN:
            Point[][] maybies = ChessPiece.simpleMoveOptions(t, from);
            for (Point[] path : maybies) {
                moves.addAll(filterMoves(path, moving.getColor()));
            }
    }
    return moves;
}
