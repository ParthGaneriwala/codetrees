private void atof(String a, int base) {
    makeZero();
    int length = a.length();
    int index = 0;
    byte tmpSign = 0;
    boolean compl = false;
    while (index < length && a.charAt(index) == ' ') index++;
    if (index < length && a.charAt(index) == '-') {
        tmpSign = 1;
        index++;
    } else if (index < length && a.charAt(index) == '+') {
        index++;
    } else if (index < length && a.charAt(index) == '/') {
        // Input is twos complemented negative number
        compl = true;
        tmpSign = 1;
        index++;
    }
    int d;
    while (index < length && (d = digit(a.charAt(index), base, compl)) >= 0) {
        shiftUp(base);
        add(d);
        index++;
    }
    int exp = 0;
    if (index < length && (a.charAt(index) == '.' || a.charAt(index) == ',')) {
        index++;
        while (index < length && (d = digit(a.charAt(index), base, compl)) >= 0) {
            shiftUp(base);
            add(d);
            exp--;
            index++;
        }
    }
    if (compl)
        add(ONE);
    while (index < length && a.charAt(index) == ' ') index++;
    if (index < length && (a.charAt(index) == 'e' || a.charAt(index) == 'E')) {
        index++;
        int exp2 = 0;
        boolean expNeg = false;
        if (index < length && a.charAt(index) == '-') {
            expNeg = true;
            index++;
        } else if (index < length && a.charAt(index) == '+') {
            index++;
        }
        while (index < length && a.charAt(index) >= '0' && a.charAt(index) <= '9') {
            // This takes care of overflows and makes inf or 0
            if (exp2 < 400000000)
                exp2 = exp2 * 10 + a.charAt(index) - '0';
            index++;
        }
        if (expNeg)
            exp2 = -exp2;
        exp += exp2;
    }
    if (base == 2)
        scalbn(exp);
    else if (base == 8)
        scalbn(exp * 3);
    else if (base == 16)
        scalbn(exp * 4);
    else {
        if (exp > 300000000 || exp < -300000000) {
            // Kludge to be able to enter very large and very small
            // numbers without causing over/underflows
            {
                tmp1.mantissa = TEN.mantissa;
                tmp1.exponent = TEN.exponent;
                tmp1.sign = TEN.sign;
            }
            ;
            if (exp < 0) {
                tmp1.pow(-exp / 2);
                div(tmp1);
            } else {
                tmp1.pow(exp / 2);
                mul(tmp1);
            }
            exp -= exp / 2;
        }
        {
            tmp1.mantissa = TEN.mantissa;
            tmp1.exponent = TEN.exponent;
            tmp1.sign = TEN.sign;
        }
        ;
        if (exp < 0) {
            tmp1.pow(-exp);
            div(tmp1);
        } else if (exp > 0) {
            tmp1.pow(exp);
            mul(tmp1);
        }
    }
    sign = tmpSign;
}
