@SuppressWarnings("unchecked")
public static List convertsToObjectsASBS(ResultSet rs, Class cls) {
    List result = new ArrayList();
    try {
        int columnCount = rs.getMetaData().getColumnCount();
        while (rs.next()) {
            Object item = cls.newInstance();
            for (int i = 1; i <= columnCount; i++) {
                String columnName = rs.getMetaData().getColumnName(i);
                Object value = rs.getObject(i);
                // split from the TIMELOCATION column in data base into instructor, day, time and location.
                if (columnName.equalsIgnoreCase("TIMELOCATION")) {
                    // finish off TIMELOCATION column
                    PropertyDescriptor pd = new PropertyDescriptor(columnName, cls);
                    Method method = pd.getWriteMethod();
                    method.invoke(item, new Object[] { value });
                    // the LOCATION column
                    pd = new PropertyDescriptor("LOCATION", cls);
                    TimeLocationParse tlp = new TimeLocationParse(value.toString());
                    method = pd.getWriteMethod();
                    method.invoke(item, new Object[] { new String(tlp.getLocation()) });
                    // the INSTRUCTOR column
                    pd = new PropertyDescriptor("INSTRUCTOR", cls);
                    tlp = new TimeLocationParse(value.toString());
                    method = pd.getWriteMethod();
                    method.invoke(item, new Object[] { new String(tlp.getInstructor()) });
                    // the TIME column
                    pd = new PropertyDescriptor("TIME", cls);
                    tlp = new TimeLocationParse(value.toString());
                    method = pd.getWriteMethod();
                    method.invoke(item, new Object[] { new String(tlp.getTime()) });
                    // the DAY column
                    pd = new PropertyDescriptor("DAYS", cls);
                    tlp = new TimeLocationParse(value.toString());
                    method = pd.getWriteMethod();
                    method.invoke(item, new Object[] { new String(tlp.getDay()) });
                } else {
                    PropertyDescriptor pd = new PropertyDescriptor(columnName, cls);
                    Method method = pd.getWriteMethod();
                    method.invoke(item, new Object[] { value });
                }
            }
            result.add(item);
        }
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
    return result;
}
