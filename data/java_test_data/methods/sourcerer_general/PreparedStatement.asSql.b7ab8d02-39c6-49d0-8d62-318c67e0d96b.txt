protected String asSql(boolean quoteStreamsAndUnknowns) throws SQLException {
    if (this.isClosed) {
        return "statement has been closed, no further internal information available";
    }
    StringBuffer buf = new StringBuffer();
    try {
        int realParameterCount = this.parameterCount + getParameterIndexOffset();
        Object batchArg = null;
        if (batchCommandIndex != -1)
            batchArg = batchedArgs.get(batchCommandIndex);
        for (int i = 0; i < realParameterCount; ++i) {
            if (this.charEncoding != null) {
                buf.append(new String(this.staticSqlStrings[i], this.charEncoding));
            } else {
                buf.append(new String(this.staticSqlStrings[i]));
            }
            byte[] val = null;
            if (batchArg != null && batchArg instanceof String) {
                buf.append((String) batchArg);
                continue;
            }
            if (batchCommandIndex == -1)
                val = parameterValues[i];
            else
                val = ((BatchParams) batchArg).parameterStrings[i];
            boolean isStreamParam = false;
            if (batchCommandIndex == -1)
                isStreamParam = isStream[i];
            else
                isStreamParam = ((BatchParams) batchArg).isStream[i];
            if ((val == null) && !isStreamParam) {
                if (quoteStreamsAndUnknowns) {
                    buf.append("'");
                }
                // $NON-NLS-1$
                buf.append("** NOT SPECIFIED **");
                if (quoteStreamsAndUnknowns) {
                    buf.append("'");
                }
            } else if (isStreamParam) {
                if (quoteStreamsAndUnknowns) {
                    buf.append("'");
                }
                // $NON-NLS-1$
                buf.append("** STREAM DATA **");
                if (quoteStreamsAndUnknowns) {
                    buf.append("'");
                }
            } else {
                if (this.charConverter != null) {
                    buf.append(this.charConverter.toString(val));
                } else {
                    if (this.charEncoding != null) {
                        buf.append(new String(val, this.charEncoding));
                    } else {
                        buf.append(StringUtils.toAsciiString(val));
                    }
                }
            }
        }
        if (this.charEncoding != null) {
            buf.append(new String(this.staticSqlStrings[this.parameterCount + getParameterIndexOffset()], this.charEncoding));
        } else {
            buf.append(StringUtils.toAsciiString(this.staticSqlStrings[this.parameterCount + getParameterIndexOffset()]));
        }
    } catch (UnsupportedEncodingException uue) {
        throw new RuntimeException(Messages.getString(// $NON-NLS-1$
        "PreparedStatement.32") + this.charEncoding + // $NON-NLS-1$
        Messages.getString("PreparedStatement.33"));
    }
    return buf.toString();
}
