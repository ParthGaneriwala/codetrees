public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException {
    FileSystem localFs = FileSystem.getLocal(conf);
    FileSystem rfs = ((LocalFileSystem) localFs).getRaw();
    Path path = new Path(tmpDir, "data.in");
    IFile.Writer<Text, Text> writer = new IFile.Writer<Text, Text>(conf, rfs, path, Text.class, Text.class, codec);
    for (Pair p : vals) {
        writer.append(new Text(p.key), new Text(p.value));
    }
    writer.close();
    @SuppressWarnings("unchecked") RawKeyValueIterator rawItr = Merger.merge(conf, rfs, Text.class, Text.class, codec, new Path[] { path }, false, conf.getInt("io.sort.factor", 100), tmpDir, new Text.Comparator(), new NullProgress());
    // WritableComparators are not generic
    @SuppressWarnings("unchecked") ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress());
    int i = 0;
    while (valItr.more()) {
        Object key = valItr.getKey();
        String keyString = key.toString();
        // make sure it matches!
        assertEquals(vals[i].key, keyString);
        // must have at least 1 value!
        assertTrue(valItr.hasNext());
        while (valItr.hasNext()) {
            String valueString = valItr.next().toString();
            // make sure the values match
            assertEquals(vals[i].value, valueString);
            // make sure the keys match
            assertEquals(vals[i].key, valItr.getKey().toString());
            i += 1;
        }
        // make sure the key hasn't changed under the hood
        assertEquals(keyString, valItr.getKey().toString());
        valItr.nextKey();
    }
    assertEquals(vals.length, i);
    // make sure we have progress equal to 1.0
    assertEquals(1.0f, rawItr.getProgress().get());
}
