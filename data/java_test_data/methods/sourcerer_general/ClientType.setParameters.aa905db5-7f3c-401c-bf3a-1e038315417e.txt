public void setParameters(HttpServletRequest request) {
    this.type = HTML_BROWSER;
    String wapCheck = request.getHeader("x-up-subno");
    if (wapCheck != null) {
        LOG.trace("WAP String: " + wapCheck);
    }
    if (wapCheck != null) {
        this.type = WAP_BROWSER;
    }
    String header = request.getHeader("USER-AGENT");
    if (header == null) {
        header = request.getHeader("User-Agent");
    }
    if (header == null) {
        header = request.getHeader("user-agent");
    }
    if (header != null) {
        header = header.toLowerCase();
        LOG.trace("Client browser header string: " + header);
        // Determine OS
        if (header.indexOf("linux") > -1) {
            os = LINUX;
        } else if (header.indexOf("mac_powerpc") > -1) {
            os = MAC;
        } else if (header.indexOf("macintosh") > -1) {
            os = MAC;
        }
        if (header.indexOf("msie") > -1) {
            // User-Agent: mozilla/4.0 (compatible; msie 6.0; windows 98; .net clr 1.0.3705)
            // User-Agent: mozilla/4.0 (compatible; msie 5.01; windows nt 5.0)
            this.id = IE;
            // Search for "msie x"
            version = parseVersion(header.substring(header.indexOf("msie ") + 5, header.indexOf(";", header.indexOf("msie "))));
        } else if (header.indexOf("applewebkit") > -1) {
            // User-Agent: mozilla/5.0 (macintosh; u; ppc mac os x; en) applewebkit/125.2 (khtml, like gecko) safari/125.7
            // mozilla/5.0 (macintosh; u; ppc mac os x; en) applewebkit/125.2 (khtml, like gecko) safari/125.8
            this.id = APPLEWEBKIT;
            version = parseVersion(header.substring(header.indexOf("applewebkit") + 12, header.indexOf("(khtml")));
            // Browser Version: 420.0
            if (header.indexOf("mobile") > -1) {
                mobileFound = true;
                mobile = true;
            }
        } else if (header.indexOf("opera") > -1) {
            // Opera likes to impersonate other browsers
            // User-Agent: mozilla/4.0 (compatible; msie 6.0; msie 5.5; windows 98) opera 7.02  [en]
            // User-Agent: mozilla/3.0 (windows 98; u) opera 7.02  [en]
            // User-Agent: opera/9.25 (macintosh; intel mac os x; u; en)
            this.id = OPERA;
            if (header.indexOf("[", header.indexOf("opera")) != -1) {
                version = parseVersion(header.substring(header.indexOf("opera") + 5, header.indexOf("[", header.indexOf("opera"))).trim());
            }
            if (header.indexOf("(", header.indexOf("opera")) != -1) {
                version = parseVersion(header.substring(header.indexOf("opera") + 5, header.indexOf("(", header.indexOf("opera"))).trim());
            }
        } else if (header.indexOf("mozilla") > -1) {
            // User-Agent: mozilla/5.0 (windows; u; win98; en-us; rv:1.0.2) gecko/20030208 netscape/7.02
            if (header.indexOf("gecko/") > -1 && header.indexOf("rv:") > -1) {
                this.id = MOZILLA;
                version = parseVersion(header.substring(header.indexOf("rv:") + 3, header.indexOf(") gecko")));
            } else if (header.indexOf("gecko") > -1) {
                this.id = NETSCAPE;
                version = 6;
            } else {
                // Just make a default
                this.id = NETSCAPE;
                this.version = 4;
            }
        } else {
            this.id = NETSCAPE;
            this.version = 4;
        }
        // Test for a few bots to reduce tracker counts
        if (header.indexOf("Googlebot") > -1) {
            bot = true;
        } else if (header.indexOf("Yahoo! Slurp") > -1) {
            bot = true;
        } else if (header.indexOf("search.msn.com/msnbot") > -1) {
            bot = true;
        } else if (header.indexOf("VoilaBot") > -1) {
            bot = true;
        } else if (header.indexOf("ZyBorg") > -1) {
            bot = true;
        } else if (header.indexOf("FAST-WebCrawler") > -1) {
            bot = true;
        } else if (header.indexOf("DeepIndex") > -1) {
            bot = true;
        } else if (header.indexOf("Ask Jeeves") > -1) {
            bot = true;
        } else if (header.indexOf("Gigabot") > -1) {
            bot = true;
        } else if (header.indexOf("Openbot") > -1) {
            bot = true;
        }
        LOG.trace("Browser Id: " + getBrowserId());
        LOG.trace("Browser Version: " + getBrowserVersion());
        LOG.trace("Browser O/S: " + getOsString());
    }
    String acceptLanguage = request.getHeader("Accept-Language");
    if (acceptLanguage != null) {
        StringTokenizer languages = new StringTokenizer(acceptLanguage, ",");
        if (languages.hasMoreTokens()) {
            String firstLanguage = languages.nextToken();
            if (firstLanguage.indexOf(";") > -1) {
                firstLanguage = firstLanguage.substring(0, firstLanguage.indexOf(";"));
            }
            firstLanguage = firstLanguage.trim();
            try {
                Locale locale = null;
                int index = firstLanguage.indexOf("-");
                if (index > -1) {
                    locale = new Locale(firstLanguage.substring(0, index), firstLanguage.substring(index + 1));
                } else {
                    locale = new Locale(firstLanguage, "");
                }
                language = locale.toString();
                if (language != null) {
                    LOG.trace("Language: " + language);
                }
            } catch (Exception e) {
                language = "en_US";
            }
        }
    }
    // During the logout process, re-use the previous language setting
    if (request.getAttribute("webSiteLanguage") != null) {
        language = (String) request.getAttribute("webSiteLanguage");
    }
    referer = request.getHeader("Referer");
    if (referer != null) {
        LOG.trace("Referer: " + referer);
    }
// TODO: Log this new user's information for reference
}
