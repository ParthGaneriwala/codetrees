protected java.util.Collection handleTransformClassesAndRelationships() {
    Collection associatedClasses = (Collection) this.getAssociationEnds();
    Collection clasesInfArray = new ArrayList();
    for (Iterator iterator = associatedClasses.iterator(); iterator.hasNext(); ) {
        AssociationEndFacade connect = (AssociationEndFacade) iterator.next();
        AsociacionInfo claseInfo = new AsociacionInfo();
        /*Agregamos a la claseInfo la cardinalidad correspondiente a la relacion
             * entre las dos clases*/
        if (connect.isOne2One()) {
            claseInfo.setCardinalidad("$hasOne");
        } else if (connect.isOne2Many()) {
            claseInfo.setCardinalidad("$hasMany");
        } else if (connect.isMany2One()) {
            claseInfo.setCardinalidad("$belongsTo");
        } else if (connect.isMany2Many()) {
            claseInfo.setCardinalidad("$hasAndBelongsToMany");
        }
        UnidadDeDatoFacade claseAsociada = (UnidadDeDatoFacade) connect.getOtherEnd().getType();
        /*Agregamos a la claseInfo el tipo de dato del primaryKey */
        String type = claseAsociada.getIdentificadorUnicoType();
        claseInfo.setPrimaryKeyClaseAsociadaType(type);
        /*Agregamos a la claseInfo el nombre de clase asociada correspondiente*/
        String nombre = claseAsociada.getName();
        claseInfo.setNombreClaseAsociada(nombre);
        /*Agregamos a la claseInfo el nombre del foreign key de la clase asociada correspondiente*/
        String foreignKey = this.getIdentificadorUnicoName() + "_id";
        claseInfo.setForeignKeyClaseAsociada(foreignKey);
        /*Agregamos a la claseInfo el nombre de la JoinTable que se arma al tener relaciones muchos a muchos*/
        String tableName = new String();
        if (this.getName().toLowerCase().compareTo(claseAsociada.getName().toLowerCase()) > 0) {
            tableName = this.getName().toLowerCase() + "_" + claseAsociada.getName().toLowerCase();
        } else {
            tableName = claseAsociada.getName().toLowerCase() + "_" + this.getName().toLowerCase();
        }
        claseInfo.setJoinTableName(tableName);
        /*Agregamos a la claseInfo el nombre del foreign key de la clase asociada correspondiente*/
        String primaryKey = claseAsociada.getIdentificadorUnicoName();
        claseInfo.setPrimaryKeyClaseAsociada(primaryKey);
        /*Agregamos el objeto al ArrayList para poder imprimir luego en el template*/
        clasesInfArray.add(claseInfo);
    }
    return clasesInfArray;
}
