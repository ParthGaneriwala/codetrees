private void UserCommand() {
    // Show the prompt.
    // /////////////////
    System.out.print("\n" + "User> ");
    // Get the input.
    // ///////////////
    char[] command = new char[1024];
    int num = 0;
    try {
        num = keyboard.read(command);
    } catch (IOException e) {
        e.printStackTrace();
        System.exit(1);
    }
    // Setup a tokenizer for the input.
    // /////////////////////////////////
    StreamTokenizer tokenizer = new StreamTokenizer(new StringReader(new String(command, 1, num - 1)));
    // Check what it is.
    // //////////////////
    SpreadMessage msg;
    char[] buffer;
    try {
        switch(command[0]) {
            // JOIN
            case 'j':
                // ////////////////
                if (tokenizer.nextToken() != tokenizer.TT_EOF) {
                    group = new SpreadGroup();
                    group.join(connection, tokenizer.sval);
                    System.out.println("Joined " + group + ".");
                } else {
                    System.err.println("No group name.");
                }
                break;
            // LEAVE
            case 'l':
                // /////////////////
                if (group != null) {
                    group.leave();
                    System.out.println("Left " + group + ".");
                } else {
                    System.out.println("No group to leave.");
                }
                break;
            // SEND
            case 's':
                // Get a new outgoing message.
                // ////////////////////////////
                msg = new SpreadMessage();
                msg.setSafe();
                // ////////////////
                while (tokenizer.nextToken() != tokenizer.TT_EOF) {
                    msg.addGroup(tokenizer.sval);
                }
                // Get the message.
                // /////////////////
                System.out.print("Enter message: ");
                buffer = new char[100];
                num = keyboard.read(buffer);
                msg.setData(new String(buffer, 0, num - 1).getBytes());
                // Send it.
                // /////////
                connection.multicast(msg);
                // Increment the sent message count.
                // //////////////////////////////////
                numSent++;
                // Show how many were sent.
                // /////////////////////////
                System.out.println("Sent message " + numSent + ".");
                break;
            // BURST
            case 'b':
                // Get a new outgoing message.
                // ////////////////////////////
                msg = new SpreadMessage();
                msg.setSafe();
                // ///////////////
                if (tokenizer.nextToken() != tokenizer.TT_EOF) {
                    msg.addGroup(tokenizer.sval);
                } else {
                    System.err.println("No group name.");
                    break;
                }
                // Get the message size.
                // //////////////////////
                System.out.print("Enter the size of each message: ");
                buffer = new char[100];
                num = keyboard.read(buffer);
                int size = Integer.parseInt(new String(buffer, 0, num - 1));
                if (size < 0)
                    size = 20;
                // Send the messages.
                // ///////////////////
                System.out.println("Sending 10 messages of " + size + " bytes.");
                byte[] data = new byte[size];
                for (int i = 0; i < size; i++) {
                    data[i] = 0;
                }
                for (int i = 0; i < 10; i++) {
                    // Increment the sent message count.
                    // //////////////////////////////////
                    numSent++;
                    // Set the message data.
                    // //////////////////////
                    byte[] mess = new String("mess num " + i).getBytes("ISO8859_1");
                    System.arraycopy(mess, 0, data, 0, mess.length);
                    msg.setData(data);
                    // Send the message.
                    // //////////////////
                    connection.multicast(msg);
                    System.out.println("Sent message " + (i + 1) + " (total " + numSent + ").");
                }
                break;
            // RECEIVE
            case 'r':
                if (listening == false) {
                    // Receive a message.
                    // ///////////////////
                    DisplayMessage(connection.receive());
                }
                break;
            // POLL
            case 'p':
                if (listening == false) {
                    // //////
                    if (connection.poll() == true) {
                        System.out.println("There is a message waiting.");
                    } else {
                        System.out.println("There is no message waiting.");
                    }
                }
                break;
            // THREAD
            case 't':
                if (listening) {
                    connection.remove(this);
                    if (rt.threadSuspended)
                        synchronized (rt) {
                            rt.notify();
                            rt.threadSuspended = false;
                        }
                } else {
                    connection.add(this);
                    synchronized (rt) {
                        rt.threadSuspended = true;
                    }
                }
                listening = !listening;
                break;
            // QUIT
            case 'q':
                // Disconnect.
                // ////////////
                connection.disconnect();
                // Quit.
                // //////
                System.exit(0);
                break;
            default:
                // Unknown command.
                // /////////////////
                System.out.println("Unknown command");
                // Show the menu again.
                // /////////////////////
                PrintMenu();
        }
    } catch (Exception e) {
        e.printStackTrace();
        System.exit(1);
    }
}
