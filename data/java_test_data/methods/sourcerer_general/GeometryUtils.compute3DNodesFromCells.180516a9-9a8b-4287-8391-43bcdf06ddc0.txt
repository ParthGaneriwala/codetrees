public static double[][][] compute3DNodesFromCells(double[][][] zc, int ni, int nj, int nk) {
    double[][][] zn = new double[nk + 1][nj + 1][ni + 1];
    // 8 submits
    zn[0][0][0] = zc[0][0][0];
    zn[0][0][ni] = zc[0][0][ni - 1];
    zn[0][nj][0] = zc[0][nj - 1][0];
    zn[0][nj][ni] = zc[0][nj - 1][ni - 1];
    zn[nk][0][0] = zc[nk][0][0];
    zn[nk][0][ni] = zc[nk][0][ni - 1];
    zn[nk][nj][0] = zc[nk][nj - 1][0];
    zn[nk][nj][ni] = zc[nk][nj - 1][ni - 1];
    // X direction
    for (int i = 1; i < ni; i++) {
        zn[0][0][i] = 0.5f * (zc[0][0][i] + zc[0][0][i - 1]);
        zn[0][nj][i] = 0.5f * (zc[0][nj - 1][i] + zc[0][nj - 1][i - 1]);
        zn[nk][0][i] = 0.5f * (zc[nk - 1][0][i] + zc[nk - 1][0][i - 1]);
        zn[nk][nj][i] = 0.5f * (zc[nk - 1][nj - 1][i] + zc[nk - 1][nj - 1][i - 1]);
    }
    // Y direction
    for (int j = 1; j < nj; j++) {
        zn[0][j][0] = 0.5f * (zc[0][j][0] + zc[0][j - 1][0]);
        zn[0][j][ni] = 0.5f * (zc[0][j][ni - 1] + zc[0][j - 1][ni - 1]);
        zn[nk][j][0] = 0.5f * (zc[nk - 1][j][0] + zc[nk - 1][j - 1][0]);
        zn[nk][j][ni] = 0.5f * (zc[nk - 1][j][ni - 1] + zc[nk - 1][j - 1][ni - 1]);
    }
    // Z direction
    for (int k = 1; k < nk; k++) {
        zn[k][0][0] = 0.5f * (zc[k][k][0] + zc[k - 1][0][0]);
        zn[k][0][ni] = 0.5f * (zc[k][0][ni - 1] + zc[k - 1][0][ni - 1]);
        zn[k][nj][0] = 0.5f * (zc[k][nj - 1][0] + zc[k - 1][nj - 1][0]);
        zn[k][nj][ni] = 0.5f * (zc[k][nj - 1][ni - 1] + zc[k - 1][nj - 1][ni - 1]);
    }
    // Horizontal
    for (int j = 1; j < nj; j++) {
        for (int i = 1; i < ni; i++) {
            zn[0][j][i] = 0.25f * (zc[0][j - 1][i - 1] + zc[0][j][i - 1] + zc[0][j - 1][i] + zc[0][j][i]);
            zn[nk][j][i] = 0.25f * (zc[nk - 1][j - 1][i - 1] + zc[nk - 1][j][i - 1] + zc[nk - 1][j - 1][i] + zc[nk - 1][j][i]);
        }
    }
    // Vertical 1
    for (int k = 1; k < nk; k++) {
        for (int i = 1; i < ni; i++) {
            zn[k][0][i] = 0.25f * (zc[k - 1][0][i - 1] + zc[k][0][i - 1] + zc[k - 1][0][i] + zc[k][0][i]);
            zn[k][nj][i] = 0.25f * (zc[k - 1][nj - 1][i - 1] + zc[k][nj - 1][i - 1] + zc[k - 1][nj - 1][i] + zc[k][nj - 1][i]);
        }
    }
    // Vertical 2
    for (int k = 1; k < nj; k++) {
        for (int j = 1; j < nj; j++) {
            zn[k][j][0] = 0.25f * (zc[k - 1][j - 1][0] + zc[k][j - 1][0] + zc[k - 1][j][0] + zc[k][j][0]);
            zn[k][j][ni] = 0.25f * (zc[k - 1][j - 1][ni - 1] + zc[k][j - 1][ni - 1] + zc[k - 1][j][ni - 1] + zc[k][j][ni - 1]);
        }
    }
    // General case
    for (int k = 1; k < nk; k++) {
        for (int j = 1; j < nj; j++) {
            for (int i = 1; i < ni; i++) {
                zn[k][j][i] = 0.125f * (zc[k][j][i] + zc[k][j][i - 1] + zc[k][j - 1][i] + zc[k][j - 1][i - 1] + zc[k - 1][j][i] + zc[k - 1][j][i - 1] + zc[k - 1][j - 1][i] + zc[k - 1][j - 1][i - 1]);
            }
        }
    }
    return zn;
}
