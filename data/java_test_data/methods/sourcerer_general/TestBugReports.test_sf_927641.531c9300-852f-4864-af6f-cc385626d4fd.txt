public void test_sf_927641() {
    String NS = "http://example.org/test#";
    OntModel m0 = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM);
    OntClass c0 = m0.createClass(NS + "C0");
    OntClass c1 = m0.createClass(NS + "C1");
    OntClass c2 = m0.createClass(NS + "C2");
    OntClass c3 = m0.createClass(NS + "C3");
    c0.addSubClass(c1);
    c1.addSubClass(c2);
    c2.addEquivalentClass(c3);
    // now c1 is the direct super-class of c2, even allowing for the equiv with c3
    assertFalse("pass 1: c0 should not be a direct super of c2", c2.hasSuperClass(c0, true));
    assertFalse("pass 1: c3 should not be a direct super of c2", c2.hasSuperClass(c3, true));
    assertFalse("pass 1: c2 should not be a direct super of c2", c2.hasSuperClass(c2, true));
    assertTrue("pass 1: c1 should be a direct super of c2", c2.hasSuperClass(c1, true));
    // second pass - with inference
    m0 = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM_RULE_INF);
    c0 = m0.createClass(NS + "C0");
    c1 = m0.createClass(NS + "C1");
    c2 = m0.createClass(NS + "C2");
    c3 = m0.createClass(NS + "C3");
    c0.addSubClass(c1);
    c1.addSubClass(c2);
    c2.addEquivalentClass(c3);
    // now c1 is the direct super-class of c2, even allowing for the equiv with c3
    assertFalse("pass 2: c0 should not be a direct super of c2", c2.hasSuperClass(c0, true));
    assertFalse("pass 2: c3 should not be a direct super of c2", c2.hasSuperClass(c3, true));
    assertFalse("pass 2: c2 should not be a direct super of c2", c2.hasSuperClass(c2, true));
    assertTrue("pass 2: c1 should be a direct super of c2", c2.hasSuperClass(c1, true));
}
