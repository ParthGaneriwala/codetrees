public void getAllLocallyDeletedFiles(Set files) {
    LinkedList stack = new LinkedList();
    stack.add(projectPath);
    Set tempSet = new HashSet();
    FileFilter reposFilter = getMetadataFilter();
    while (!stack.isEmpty()) {
        File dir = (File) stack.remove(0);
        File[] subDirs = dir.listFiles(new DirectoryFilter());
        for (int i = 0; i < subDirs.length; i++) {
            if (reposFilter.accept(subDirs[i])) {
                stack.add(subDirs[i]);
            }
        }
        try {
            getLocallyDeletedFiles(files, dir);
        } catch (IOException ioe) {
        }
    }
    File delDir = new File(projectPath, "CVS");
    delDir = new File(delDir, "deleted");
    if (delDir.exists()) {
        stack.add(delDir);
    }
    while (!stack.isEmpty()) {
        File dir = (File) stack.remove(0);
        File[] subDirs = dir.listFiles(new DirectoryFilter());
        for (int i = 0; i < subDirs.length; i++) {
            if (reposFilter.accept(subDirs[i])) {
                stack.add(subDirs[i]);
            }
        }
        try {
            getLocallyDeletedFiles(tempSet, dir);
            for (Iterator i = tempSet.iterator(); i.hasNext(); ) {
                File file = (File) i.next();
                // map the file back to the real directory
                String fileStr = file.getPath();
                fileStr = fileStr.substring(delDir.getPath().length());
                file = new File(projectPath, fileStr);
                files.add(file);
            }
            tempSet.clear();
        } catch (IOException ioe) {
        }
    }
}
