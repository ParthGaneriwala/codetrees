public List<NsvcAlarmCdr> parseFile(NsvcAlarmFile file) {
    long now = System.currentTimeMillis();
    java.io.BufferedReader br = null;
    int handledLines = file.getHandleLines();
    LOG.info(file.getDestfile() + "已经处理过" + handledLines + "行数据");
    List<NsvcAlarmCdr> really = new ArrayList<NsvcAlarmCdr>();
    try {
        List<NsvcAlarmCdr> cdrs = new ArrayList<NsvcAlarmCdr>();
        br = new BufferedReader(new java.io.InputStreamReader(new FileInputStream(file.getDestfile())));
        String line = null;
        int i = 0;
        while ((line = br.readLine()) != null) {
            if (line.startsWith("alarm;") && line.indexOf("warning;") != -1) {
                StringTokenizer st = new StringTokenizer(line, ";");
                String type = st.nextToken();
                String pcm = st.nextToken();
                String communication = st.nextToken();
                String _warnning = st.nextToken();
                String date = st.nextToken();
                String reason = st.nextToken();
                String timestamp = st.nextToken();
                String gbindex = st.nextToken();
                String[] gbindexarr = gbindex.split("\\.");
                System.out.println("gbindexarr:::" + gbindexarr);
                if (gbindexarr.length >= 4) {
                    i++;
                    // if (i >= handledLines) {
                    NsvcAlarmCdr cdr = new NsvcAlarmCdr();
                    cdr.setCommunication(communication);
                    cdr.setAlarmdate((int) (df.parse(date).getTime() / 1000));
                    cdr.setGbindex(gbindex);
                    cdr.setPcm(pcm);
                    cdr.setQos(communication);
                    cdr.setReason(reason);
                    cdr.setTimestamp(timestamp);
                    cdr.setSgsnid(file.getSgsnid());
                    cdr.setFile(file.getSrcfilename());
                    cdrs.add(cdr);
                // }
                }
            }
        }
        int lastCount = i - handledLines;
        if (i >= handledLines) {
            for (int k = handledLines; k < i; k++) {
                really.add(cdrs.get(k));
            }
        } else {
            for (int k = 0; k < i; k++) {
                really.add(cdrs.get(k));
            }
        }
        file.setHandleLines(i);
        LOG.info(file.getDestfile() + "解析时间为:" + (System.currentTimeMillis() - now) + "总共:" + i + "区块,实际处理" + lastCount + "块" + cdrs.size());
        cdrs.clear();
        cdrs = null;
    } catch (Exception e) {
        LOG.error("解析文件有误", e);
    } finally {
        if (br != null)
            try {
                br.close();
            } catch (Exception ee) {
                LOG.error(file + "关闭异常", ee);
            }
    }
    return really;
}
