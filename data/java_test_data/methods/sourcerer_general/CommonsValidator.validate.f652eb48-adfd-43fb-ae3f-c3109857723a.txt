public void validate(FacesContext context, UIComponent component, Object value) {
    if (Boolean.FALSE.equals(getServer())) {
        return;
    }
    // check bypassValidation hidden field's value. If true, return without any validation
    Map paramMap = context.getExternalContext().getRequestParameterMap();
    String bypassValue = (String) paramMap.get(CVExtConstants.BYPASS_VALIDATION_FIELDNAME);
    if (Boolean.TRUE.equals(Boolean.valueOf(bypassValue))) {
        return;
    }
    // check activeValidationGroup hidden field's value. If not same as current validator, return without any validation
    String activeValidationGroup = (String) paramMap.get(CVExtConstants.ACTIVE_VALIDATION_GROUP_FIELDNAME);
    if (!activeValidationGroup.equalsIgnoreCase(getGroupId())) {
        if (log.isDebugEnabled())
            log.debug("validator's group[=" + getGroupId() + "] is not equals activevalidationgroup[=" + activeValidationGroup + "] : not validating...");
        return;
    }
    String[] types = getDependencies(getType());
    for (int j = 0; j < types.length; j++) {
        ValidatorAction validatorAction = CommonsValidator.getValidatorAction(types[j]);
        try {
            if (component instanceof EditableValueHolder) {
                vars.put(SUBMITTED_VALUE_VARNAME, ((EditableValueHolder) component).getSubmittedValue());
            } else {
                vars.put(SUBMITTED_VALUE_VARNAME, value);
            }
            Map localVars = null;
            // A map that captures information about a component that might contain state for commons
            // validators properties.  The map is organized by a hierarchy "clientId/validatorType/vars".
            // It is captured at render time.
            Map ids = (Map) component.getAttributes().get(ValidatorInputRenderer.VALIDATOR_CLIENTIDS_ATTR);
            if (ids != null) {
                String clientId = component.getClientId(context);
                Map validatorVars = (Map) ids.get(clientId);
                if (validatorVars != null) {
                    localVars = (Map) validatorVars.get(getType());
                }
            }
            Class validatorClass = loadValidatorClass(validatorAction);
            Class[] paramClasses = this.loadMethodParamClasses(validatorAction);
            Object[] paramValues = this.loadMethodParamValues(context, validatorAction, paramClasses, localVars);
            Method validatorMethod = this.loadValidatorMethod(validatorAction, validatorClass, paramClasses);
            Object validator = null;
            if (!Modifier.isStatic(validatorMethod.getModifiers())) {
                validator = validatorClass.newInstance();
            }
            Boolean r = (Boolean) validatorMethod.invoke(validator, paramValues);
            if (r.equals(Boolean.FALSE)) {
                throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, getErrorMessage(context, validatorAction, localVars), null));
            }
        } catch (IllegalArgumentException e) {
            throw new RuntimeException(messages.getMessage("commonsValidator.intException", new Object[] { getType(), component.getId() }), e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(messages.getMessage("commonsValidator.intException", new Object[] { getType(), component.getId() }), e);
        } catch (InstantiationException e) {
            throw new RuntimeException(messages.getMessage("commonsValidator.intException", new Object[] { getType(), component.getId() }), e);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(messages.getMessage("commonsValidator.intException", new Object[] { getType(), component.getId() }), e);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(messages.getMessage("commonsValidator.intException", new Object[] { getType(), component.getId() }), e);
        } catch (InvocationTargetException e) {
            throw new RuntimeException(messages.getMessage("commonsValidator.intException", new Object[] { getType(), component.getId() }), e);
        } finally {
            vars.remove(SUBMITTED_VALUE_VARNAME);
        }
    }
}
