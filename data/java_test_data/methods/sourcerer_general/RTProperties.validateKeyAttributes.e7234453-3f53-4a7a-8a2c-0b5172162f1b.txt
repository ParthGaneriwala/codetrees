// ------------------------------------------------------------------------
public boolean validateKeyAttributes(PrintStream out, String[] keyAttr) {
    /* nothing to check? */
    if (ListTools.isEmpty(keyAttr)) {
        // all is ok
        return true;
    }
    /* loop through key attributes */
    int error = 0;
    Set<?> argKeys = new HashSet<Object>(this.getPropertyKeys());
    for (int i = 0; i < keyAttr.length; i++) {
        String[] aKey = null;
        boolean mandatory = false;
        // 0=s,1=i,2=f|d,3=b
        int valType = 0;
        int p = this._indexOfKeyValSeparator(keyAttr[i]);
        if (p == 0) {
        // ignore this invalid keyAttr entry
        } else if (p < 0) {
            // optional key
            aKey = StringTools.split(keyAttr[i], ',');
            mandatory = false;
            valType = 0;
        } else {
            aKey = StringTools.split(keyAttr[i].substring(0, p), ',');
            mandatory = (keyAttr[i].charAt(p) == '=') ? true : false;
            String[] attr = StringTools.split(keyAttr[i].substring(p + 1), ',');
            for (int a = 0; a < attr.length; a++) {
                if (attr[a].equals("m")) {
                    mandatory = true;
                } else if (attr[a].equals("o")) {
                    mandatory = false;
                } else if (attr[a].equals("s")) {
                    valType = 0;
                } else if (attr[a].equals("i")) {
                    valType = 1;
                } else if (attr[a].equals("f")) {
                    valType = 2;
                } else if (attr[a].equals("d")) {
                    valType = 2;
                } else if (attr[a].equals("b")) {
                    valType = 3;
                }
            }
        }
        /* remove keys */
        boolean keyFound = false;
        String keyStr = StringTools.join(aKey, ',');
        if (ListTools.isEmpty(aKey)) {
            // invalid keyAttr entry
            continue;
        } else {
            int found = 0;
            for (int k = 0; k < aKey.length; k++) {
                if (this.hasProperty(aKey[k])) {
                    found++;
                }
                argKeys.remove(aKey[k]);
            }
            if (found > 1) {
                if (out != null) {
                    out.println("ERROR: Multiple values found for keys: " + keyStr);
                }
                error++;
            }
            keyFound = (found > 0);
        }
        /* get value */
        String keyValue = this.getString(aKey, null);
        /* blank value? */
        if (StringTools.isBlank(keyValue)) {
            if (mandatory && (!keyFound || (valType != 3))) {
                // mandatory argument/value not specified
                if (out != null) {
                    out.println("ERROR: Mandatory key not specified: " + keyStr);
                }
                error++;
            }
            continue;
        }
        /* check value against type */
        String firstKey = this.getFirstDefinedKey(aKey);
        switch(valType) {
            case // String
            0:
                break;
            case // Integer/Long
            1:
                if (!StringTools.isLong(keyValue, true)) {
                    if (out != null) {
                        out.println("ERROR: Invalid value for key (i): " + firstKey);
                    }
                    error++;
                }
                break;
            case // Float/Double
            2:
                if (!StringTools.isDouble(keyValue, true)) {
                    if (out != null) {
                        out.println("ERROR: Invalid value for key (f): " + firstKey);
                    }
                    error++;
                }
                break;
            case // Boolean
            3:
                if (!StringTools.isBoolean(keyValue, true)) {
                    if (out != null) {
                        out.println("ERROR: Invalid value for key (b): " + firstKey);
                    }
                    error++;
                }
                break;
        }
    }
    /* check for remaining unrecognized keys */
    if (!argKeys.isEmpty()) {
        boolean UNRECOGNIZED_ARGUMENT_ERROR = false;
        for (Object key : argKeys) {
            String ks = key.toString();
            if (ks.startsWith("$")) {
                continue;
            }
            if (UNRECOGNIZED_ARGUMENT_ERROR) {
                if (out != null) {
                    out.println("ERROR: Unrecognized argument specified: " + ks);
                }
                error++;
            } else {
                if (out != null) {
                    out.println("WARNING: Unrecognized argument specified: " + ks);
                }
            }
        }
    }
    /* return validation result */
    return (error == 0);
}
