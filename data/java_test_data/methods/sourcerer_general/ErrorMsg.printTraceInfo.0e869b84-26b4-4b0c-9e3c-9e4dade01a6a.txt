/**
 * Parses <code>s</code> and prints execution trace information to
 * <code>out</code>.
 */
private static void printTraceInfo(/*@ non_null */
String s, /*@ non_null */
PrintStream out) {
    // first parse the String to get its location (the last row-col pair
    // in its sequence of numbers)
    int caret = s.indexOf("^");
    Assert.notFalse(caret != -1);
    int comma = s.indexOf(",");
    Assert.notFalse(comma != -1);
    String temp = s.substring(comma + 1);
    int hash = temp.indexOf("#");
    int iteration = -1;
    if (hash != -1) {
        iteration = toNumber(temp, hash + 1);
        temp = temp.substring(0, hash);
    }
    int loc = getLoc(temp, 0);
    String location = Location.toString(loc);
    s = s.substring(0, caret);
    if (s.equals("RoutineException")) {
        out.println("    Routine call returned exceptionally in " + location + ".");
    } else if (s.equals("FirstOpOnly")) {
        out.println("    Short circuited boolean operation in " + location + ".");
    } else if (s.equals("LoopIter")) {
        if (iteration == -1) {
            out.println("    At the top of arbitrary loop iteration at " + location + ".");
        } else {
            out.println("    Reached top of loop after " + iteration + " iteration" + (iteration == 1 ? "" : "s") + " in " + location + ".");
        }
    } else if (s.equals("FinallyBegin")) {
        out.println("    Abnormal entry to finally clause at " + location + ".");
    } else if (s.equals("FinallyEnd")) {
        out.println("    Resuming abnormal execution path after finally clause at " + location + ".");
    } else if (s.equals("CallReturn")) {
        out.println("    Returned from inlined call at " + location + ".");
    } else {
        if (s.equals("Then") || s.equals("Else")) {
            s += " branch";
        } else if (s.equals("Switch")) {
            s += " case";
        } else if (s.equals("ImplicitReturn")) {
            s = "implicit return";
        }
        out.println("    Executed " + s.toLowerCase() + " in " + location + ".");
    }
}
