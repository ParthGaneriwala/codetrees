public String doView(RenderRequest request, RenderResponse response) throws Exception {
    // The JSP to show upon success
    String defaultView = VIEW_PAGE;
    // Determine the current user
    User thisUser = PortalUtils.getUser(request);
    // General display preferences
    request.setAttribute(TITLE, request.getPreferences().getValue(PREF_TITLE, "Classifieds"));
    String hasMoreURL = request.getPreferences().getValue(PREF_HAS_MORE_URL, null);
    request.setAttribute(HAS_MORE_URL, hasMoreURL);
    request.setAttribute(HAS_MORE_TITLE, request.getPreferences().getValue(PREF_HAS_MORE_TITLE, "more"));
    String limit = request.getPreferences().getValue(PREF_LIMIT, "-1");
    // Check for a specific category
    String categoryName = request.getPreferences().getValue(PREF_CATEGORY, "");
    // Check any generated data
    for (String event : PortalUtils.getDashboardPortlet(request).getConsumeDataEvents()) {
        // Detects if another instance of this portlet is showing categories
        if (event.toLowerCase().equals("category")) {
            categoryName = (String) PortalUtils.getGeneratedData(request, event);
        }
    }
    // Check the current project profile page if a category is not specified
    Project project = null;
    if (!StringUtils.hasText(categoryName)) {
        project = PortalUtils.findProject(request);
    }
    ProjectCategoryList categories = (ProjectCategoryList) request.getAttribute(Constants.REQUEST_TAB_CATEGORY_LIST);
    request.setAttribute(PROJECT_CATEGORY_LIST, categories);
    // Determine the actual category
    int categoryId = -1;
    if (StringUtils.hasText(categoryName)) {
        // Use the current category
        if ("${category}".equals(categoryName)) {
            Project thisProject = PortalUtils.findProject(request);
            if (thisProject != null) {
                categoryName = categories.getValueFromId(thisProject.getCategoryId());
            }
        }
        categoryId = categories.size() > 0 ? categories.getIdFromValue(categoryName) : -1;
    }
    // Determine the database connection to use
    Connection db = PortalUtils.useConnection(request);
    // Classifieds to show - use paged data for sorting
    PagedListInfo pagedListInfo = new PagedListInfo();
    pagedListInfo.setItemsPerPage(limit);
    pagedListInfo.setDefaultSort("entered", "DESC");
    ClassifiedList classifiedList = new ClassifiedList();
    classifiedList.setPagedListInfo(pagedListInfo);
    if (project == null) {
        classifiedList.setInstanceId(PortalUtils.getInstance(request).getId());
    }
    classifiedList.setGroupId(thisUser.getGroupId());
    if (categoryId > -1) {
        classifiedList.setProjectCategoryId(categoryId);
        classifiedList.setOpenProjectsOnly(true);
    } else if (project != null) {
        classifiedList.setProjectId(project.getId());
    }
    if (PortalUtils.getDashboardPortlet(request).isCached()) {
        if (PortalUtils.canShowSensitiveData(request)) {
            // Use the most generic settings since this portlet is cached
            classifiedList.setForParticipant(Constants.TRUE);
        } else {
            // Use the most generic settings since this portlet is cached
            classifiedList.setPublicProjects(Constants.TRUE);
        }
    } else {
        // Use the current user's setting
        thisUser = PortalUtils.getUser(request);
        classifiedList.setForUser(thisUser.getId());
    }
    classifiedList.setCurrentClassifieds(Constants.TRUE);
    classifiedList.setPublished(Constants.TRUE);
    classifiedList.setEnabled(Constants.TRUE);
    classifiedList.buildList(db);
    request.setAttribute(CLASSIFIED_LIST, classifiedList);
    // hide the portlet if there are no records to display
    if (classifiedList.size() == 0) {
        return null;
    }
    // Decide if the url to show more classifieds needs to be displayed
    if (StringUtils.hasText(hasMoreURL) && classifiedList.size() < pagedListInfo.getMaxRecords() && (project == null || ProjectUtils.hasAccess(project.getId(), thisUser, "project-classifieds-view"))) {
        request.setAttribute(HAS_MORE, "true");
    }
    return defaultView;
}
