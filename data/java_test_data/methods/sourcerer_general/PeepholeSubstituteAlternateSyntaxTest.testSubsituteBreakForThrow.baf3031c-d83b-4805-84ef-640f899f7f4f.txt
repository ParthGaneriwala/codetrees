public void testSubsituteBreakForThrow() {
    foldSame("function f() { while(x) { throw Error }}");
    fold("function f() { while(x) { throw Error } throw Error }", "function f() { while(x) { break } throw Error}");
    foldSame("function f() { while(x) { throw Error(1) } throw Error(2)}");
    foldSame("function f() { while(x) { throw Error(1) } return Error(2)}");
    foldSame("function f() { while(x) { throw 5 } }");
    foldSame("function f() { a: { throw 5 } }");
    fold("function f() { while(x) { throw 5}  throw 5}", "function f() { while(x) { break }   throw 5}");
    fold("function f() { while(x) { throw x}  throw x}", "function f() { while(x) { break }   throw x}");
    foldSame("function f() { while(x) { if (y) { throw Error }}}");
    fold("function f() { while(x) { if (y) { throw Error }} throw Error}", "function f() { while(x) { if (y) { break }} throw Error}");
    fold("function f() { while(x) { if (y) { throw 5 }} throw 5}", "function f() { while(x) { if (y) { break    }} throw 5}");
    // It doesn't matter if x is changed between them. We are still throwing
    // x at whatever x value current holds. The whole x = 1 is skipped.
    fold("function f() { while(x) { if (y) { throw x } x = 1} throw x}", "function f() { while(x) { if (y) { break    } x = 1} throw x}");
    // RemoveUnreachableCode would take care of the useless breaks.
    fold("function f() { while(x) { if (y) { throw x } throw x} throw x}", "function f() { while(x) { if (y) {} break }throw x}");
    // A break here only breaks out of the inner loop.
    foldSame("function f() { while(x) { while (y) { throw Error } } }");
    foldSame("function f() { while(1) { throw 7}  throw 5}");
    foldSame("function f() {" + "  try { while(x) {throw f()}} catch (e) { } throw f()}");
    foldSame("function f() {" + "  try { while(x) {throw f()}} finally {alert(1)} throw f()}");
    // Both throws has the same handler
    fold("function f() {" + "  try { while(x) { throw f() } throw f() } catch (e) { } }", "function f() {" + "  try { while(x) { break } throw f() } catch (e) { } }");
    // We can't fold this because it'll change the order of when foo is called.
    foldSame("function f() {" + "  try { while(x) { throw foo() } } finally { alert(1) } " + "  throw foo()}");
    // This is fine, we have no side effect in the throw value.
    fold("function f() {" + "  try { while(x) { throw 1 } } finally { alert(1) } throw 1}", "function f() {" + "  try { while(x) { break    } } finally { alert(1) } throw 1}");
    foldSame("function f() { try{ throw a } finally { a = 2 } throw a; }");
    fold("function f() { switch(a){ case 1: throw a; default: g();} throw a;}", "function f() { switch(a){ case 1: break; default: g();} throw a; }");
}
