public void onClick(View view) {
    if (view instanceof Button) {
        Log.d(TAG, "received onClick for " + ((Button) view).getText());
    }
    Label currentLabel;
    switch(view.getId()) {
        case R.id.cardplayer2_nextHintButton:
            runNextHintAction();
            break;
        case R.id.cardplayer1_nextHintButton:
        case R.id.cardplayer2_replayHintButton:
        case R.id.cardplayer3_replayHintButton:
            // grab the current label and play the current hint index
            currentLabel = cardList.get(cardIndex).getLabels().get(0);
            currentLabel.playHint(hintIndex, activity, null);
            if (hintIndex == 0) {
                // the first hint was played, change the screen to show the
                // replay hint and next hint buttons
                changeGuiState(GuiState.REPLAY_NEXT);
            }
            break;
        case R.id.cardplayer1_answerButton:
        case R.id.cardplayer2_answerButton:
        case R.id.cardplayer3_answerButton:
            changeGuiState(GuiState.RECORDING);
            Toast.makeText(activity, R.string.recording_started, Toast.LENGTH_SHORT).show();
            startRecording();
            // after a certain duration
            break;
        case R.id.cardplayer4_goBackButton:
            changeGuiState(GuiState.INITIAL);
            break;
        case R.id.cardplayer4_doneRecButton:
            hintIndex = 0;
            playAnswerRecordings();
            changeGuiState(GuiState.ANSWER);
            recorder.stop();
            recorder.release();
            break;
        case R.id.cardplayer5_replayMyAnswerButton:
            // TODO: play the recorded audio back (TEMP_OUTPUT_AUDIO_FILE)
            playAudio(R.raw.temp_blah);
            break;
        case R.id.cardplayer5_replayCorrectAnswerButton:
            currentLabel = cardList.get(cardIndex).getLabels().get(0);
            int lastHint = currentLabel.getNumAudioFiles() - 1;
            currentLabel.playHint(lastHint, activity, null);
            break;
        case R.id.cardplayer5_correctAnswerButton:
            CardStat cardStat = new CardStat();
            cardStat.setCardName(cardList.get(cardIndex).getName());
            cardStat.setDeckName(cardList.get(cardIndex).getDeckName());
            cardStat.setNumHintsNeeded(hintIndex);
            // the scoring really hasn't been designed yet, so we'll just
            // set it to 100 for now
            cardStat.setScore(100);
            gameStats.addCardStat(cardStat);
            Toast.makeText(activity, R.string.good_job, Toast.LENGTH_SHORT).show();
            runNextCard();
            break;
        case R.id.cardplayer5_wrongAnswerButton:
            CardStat cardStatWrong = new CardStat();
            cardStatWrong.setCardName(cardList.get(cardIndex).getName());
            cardStatWrong.setDeckName(cardList.get(cardIndex).getDeckName());
            cardStatWrong.setNumHintsNeeded(hintIndex);
            // the scoring really hasn't been designed yet, so we'll just
            // set it to 0 for a wrong answer
            cardStatWrong.setScore(0);
            gameStats.addCardStat(cardStatWrong);
            Toast.makeText(activity, R.string.too_bad, Toast.LENGTH_SHORT).show();
            runNextCard();
            break;
    }
}
