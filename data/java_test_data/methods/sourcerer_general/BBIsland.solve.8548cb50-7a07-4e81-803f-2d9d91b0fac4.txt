public void solve(final BBTimeStep step, final BBVec2 gravity, boolean allowSleep) {
    // Integrate velocities and apply damping.
    for (int i = 0; i < m_bodyCount; ++i) {
        BBBody b = m_bodies[i];
        if (b.isStatic())
            continue;
        // Integrate velocities.
        b.m_linearVelocity.add(mul(step.dt, BBMath.add(gravity, mul(b.m_invMass, b.m_force))));
        b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
        // Reset forces.
        b.m_force.set(0.0f, 0.0f);
        b.m_torque = 0.0f;
        // Apply damping.
        // ODE: dv/dt + c * v = 0
        // Solution: v(t) = v0 * exp(-c * t)
        // Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)
        // v2 = exp(-c * dt) * v1
        // Taylor expansion:
        // v2 = (1.0f - c * dt) * v1
        b.m_linearVelocity.mul(clamp(1.0f - step.dt * b.m_linearDamping, 0.0f, 1.0f));
        b.m_angularVelocity *= clamp(1.0f - step.dt * b.m_angularDamping, 0.0f, 1.0f);
    }
    BBContactSolver contactSolver = new BBContactSolver(step, m_contacts, m_contactCount);
    // initialize velocity constraints.
    contactSolver.initVelocityConstraints(step);
    for (int i = 0; i < m_jointCount; ++i) {
        m_joints[i].initVelocityConstraints(step);
    }
    // solve velocity constraints.
    for (int i = 0; i < step.velocityIterations; ++i) {
        for (int j = 0; j < m_jointCount; ++j) {
            m_joints[j].solveVelocityConstraints(step);
        }
        contactSolver.solveVelocityConstraints();
    }
    // Post-solve (store impulses for warm starting).
    contactSolver.FinalizeVelocityConstraints();
    // Integrate positions.
    for (int i = 0; i < m_bodyCount; ++i) {
        BBBody b = m_bodies[i];
        if (b.isStatic())
            continue;
        // Check for large velocities.
        BBVec2 translation = mul(step.dt, b.m_linearVelocity);
        if (dot(translation, translation) > maxTranslationSquared) {
            translation.normalize();
            b.m_linearVelocity = mul((maxTranslation * step.inv_dt), translation);
        }
        float rotation = step.dt * b.m_angularVelocity;
        if (rotation * rotation > maxRotationSquared) {
            if (rotation < 0.0) {
                b.m_angularVelocity = -step.inv_dt * maxRotation;
            } else {
                b.m_angularVelocity = step.inv_dt * maxRotation;
            }
        }
        // Store positions for continuous collision.
        b.m_sweep.c0 = b.m_sweep.c;
        b.m_sweep.a0 = b.m_sweep.a;
        // Integrate
        b.m_sweep.c.add(mul(step.dt, b.m_linearVelocity));
        b.m_sweep.a += step.dt * b.m_angularVelocity;
        // Compute new transform
        b.synchronizeTransform();
    // Note: shapes are synchronized later.
    }
    // Iterate over constraints.
    for (int i = 0; i < step.positionIterations; ++i) {
        boolean contactsOkay = contactSolver.SolvePositionConstraints(contactBaumgarte);
        boolean jointsOkay = true;
        for (int j = 0; j < m_jointCount; ++j) {
            boolean jointOkay = m_joints[j].solvePositionConstraints(contactBaumgarte);
            jointsOkay = jointsOkay & jointOkay;
        }
        if (contactsOkay & jointsOkay) {
            // Exit early if the position errors are small.
            break;
        }
    }
    report(contactSolver.m_constraints);
    if (allowSleep) {
        float minSleepTime = FLT_MAX;
        final float linTolSqr = linearSleepTolerance * linearSleepTolerance;
        final float angTolSqr = angularSleepTolerance * angularSleepTolerance;
        for (int i = 0; i < m_bodyCount; ++i) {
            BBBody b = m_bodies[i];
            if (b.m_invMass == 0.0f) {
                continue;
            }
            if ((b.m_flags & BBBody.e_allowSleepFlag) == 0) {
                b.m_sleepTime = 0.0f;
                minSleepTime = 0.0f;
            }
            if ((b.m_flags & BBBody.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || dot(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {
                b.m_sleepTime = 0.0f;
                minSleepTime = 0.0f;
            } else {
                b.m_sleepTime += step.dt;
                minSleepTime = min(minSleepTime, b.m_sleepTime);
            }
        }
        if (minSleepTime >= timeToSleep) {
            for (int i = 0; i < m_bodyCount; ++i) {
                BBBody b = m_bodies[i];
                b.m_flags |= BBBody.e_sleepFlag;
                b.m_linearVelocity = vec2_zero;
                b.m_angularVelocity = 0.0f;
            }
        }
    }
}
