private boolean execute(String sql, boolean returnGeneratedKeys) throws SQLException {
    checkClosed();
    MySQLConnection locallyScopedConn = this.connection;
    synchronized (locallyScopedConn.getMutex()) {
        this.retrieveGeneratedKeys = returnGeneratedKeys;
        lastQueryIsOnDupKeyUpdate = false;
        if (returnGeneratedKeys)
            lastQueryIsOnDupKeyUpdate = containsOnDuplicateKeyInString(sql);
        resetCancelledState();
        checkNullOrEmptyQuery(sql);
        checkClosed();
        char firstNonWsChar = StringUtils.firstAlphaCharUc(sql, findStartOfStatement(sql));
        boolean isSelect = true;
        if (firstNonWsChar != 'S') {
            isSelect = false;
            if (locallyScopedConn.isReadOnly()) {
                throw SQLError.createSQLException(Messages.getString(// $NON-NLS-1$
                "Statement.27") + // $NON-NLS-1$
                Messages.getString("Statement.28"), SQLError.SQL_STATE_ILLEGAL_ARGUMENT, // $NON-NLS-1$
                getExceptionInterceptor());
            }
        }
        boolean doStreaming = createStreamingResultSet();
        if (doStreaming && locallyScopedConn.getNetTimeoutForStreamingResults() > 0) {
            executeSimpleNonQuery(locallyScopedConn, "SET net_write_timeout=" + locallyScopedConn.getNetTimeoutForStreamingResults());
        }
        if (this.doEscapeProcessing) {
            Object escapedSqlResult = EscapeProcessor.escapeSQL(sql, locallyScopedConn.serverSupportsConvertFn(), locallyScopedConn);
            if (escapedSqlResult instanceof String) {
                sql = (String) escapedSqlResult;
            } else {
                sql = ((EscapeProcessorResult) escapedSqlResult).escapedSql;
            }
        }
        if (this.results != null) {
            if (!locallyScopedConn.getHoldResultsOpenOverStatementClose()) {
                this.results.realClose(false);
            }
        }
        if (sql.charAt(0) == '/') {
            if (sql.startsWith(PING_MARKER)) {
                doPingInstead();
                return true;
            }
        }
        CachedResultSetMetaData cachedMetaData = null;
        ResultSetInternalMethods rs = null;
        // If there isn't a limit clause in the SQL
        // then limit the number of rows to return in
        // an efficient manner. Only do this if
        // setMaxRows() hasn't been used on any Statements
        // generated from the current Connection (saves
        // a query, and network traffic).
        this.batchedGeneratedKeys = null;
        if (useServerFetch()) {
            rs = createResultSetUsingServerFetch(sql);
        } else {
            CancelTask timeoutTask = null;
            String oldCatalog = null;
            try {
                if (locallyScopedConn.getEnableQueryTimeouts() && this.timeoutInMillis != 0 && locallyScopedConn.versionMeetsMinimum(5, 0, 0)) {
                    timeoutTask = new CancelTask(this);
                    locallyScopedConn.getCancelTimer().schedule(timeoutTask, this.timeoutInMillis);
                }
                if (!locallyScopedConn.getCatalog().equals(this.currentCatalog)) {
                    oldCatalog = locallyScopedConn.getCatalog();
                    locallyScopedConn.setCatalog(this.currentCatalog);
                }
                // 
                // Check if we have cached metadata for this query...
                // 
                Field[] cachedFields = null;
                if (locallyScopedConn.getCacheResultSetMetadata()) {
                    cachedMetaData = locallyScopedConn.getCachedMetaData(sql);
                    if (cachedMetaData != null) {
                        cachedFields = cachedMetaData.fields;
                    }
                }
                // 
                if (locallyScopedConn.useMaxRows()) {
                    int rowLimit = -1;
                    if (isSelect) {
                        if (StringUtils.indexOfIgnoreCase(sql, "LIMIT") != -1) {
                            // $NON-NLS-1$
                            rowLimit = this.maxRows;
                        } else {
                            if (this.maxRows <= 0) {
                                executeSimpleNonQuery(locallyScopedConn, "SET OPTION SQL_SELECT_LIMIT=DEFAULT");
                            } else {
                                executeSimpleNonQuery(locallyScopedConn, "SET OPTION SQL_SELECT_LIMIT=" + this.maxRows);
                            }
                        }
                    } else {
                        executeSimpleNonQuery(locallyScopedConn, "SET OPTION SQL_SELECT_LIMIT=DEFAULT");
                    }
                    // Finally, execute the query
                    rs = locallyScopedConn.execSQL(this, sql, rowLimit, null, this.resultSetType, this.resultSetConcurrency, doStreaming, this.currentCatalog, cachedFields);
                } else {
                    rs = locallyScopedConn.execSQL(this, sql, -1, null, this.resultSetType, this.resultSetConcurrency, doStreaming, this.currentCatalog, cachedFields);
                }
                if (timeoutTask != null) {
                    if (timeoutTask.caughtWhileCancelling != null) {
                        throw timeoutTask.caughtWhileCancelling;
                    }
                    timeoutTask.cancel();
                    timeoutTask = null;
                }
                synchronized (this.cancelTimeoutMutex) {
                    if (this.wasCancelled) {
                        SQLException cause = null;
                        if (this.wasCancelledByTimeout) {
                            cause = new MySQLTimeoutException();
                        } else {
                            cause = new MySQLStatementCancelledException();
                        }
                        resetCancelledState();
                        throw cause;
                    }
                }
            } finally {
                if (timeoutTask != null) {
                    timeoutTask.cancel();
                    locallyScopedConn.getCancelTimer().purge();
                }
                if (oldCatalog != null) {
                    locallyScopedConn.setCatalog(oldCatalog);
                }
            }
        }
        if (rs != null) {
            this.lastInsertId = rs.getUpdateID();
            this.results = rs;
            rs.setFirstCharOfQuery(firstNonWsChar);
            if (rs.reallyResult()) {
                if (cachedMetaData != null) {
                    locallyScopedConn.initializeResultsMetadataFromCache(sql, cachedMetaData, this.results);
                } else {
                    if (this.connection.getCacheResultSetMetadata()) {
                        locallyScopedConn.initializeResultsMetadataFromCache(sql, null, /* will be created */
                        this.results);
                    }
                }
            }
        }
        return ((rs != null) && rs.reallyResult());
    }
}
