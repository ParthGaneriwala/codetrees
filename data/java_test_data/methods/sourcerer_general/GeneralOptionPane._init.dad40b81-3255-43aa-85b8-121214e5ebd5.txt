// }}}
protected void _init() {
    /* Line separator */
    String[] lineSeps = { jEdit.getProperty("lineSep.unix"), jEdit.getProperty("lineSep.windows"), jEdit.getProperty("lineSep.mac") };
    lineSeparator = new JComboBox(lineSeps);
    String lineSep = jEdit.getProperty("buffer." + Buffer.LINESEP, System.getProperty("line.separator"));
    if ("\n".equals(lineSep))
        lineSeparator.setSelectedIndex(0);
    else if ("\r\n".equals(lineSep))
        lineSeparator.setSelectedIndex(1);
    else if ("\r".equals(lineSep))
        lineSeparator.setSelectedIndex(2);
    addComponent(jEdit.getProperty("options.general.lineSeparator"), lineSeparator);
    /* Check mod status */
    String[] modCheckOptions = { jEdit.getProperty("options.general.checkModStatus.nothing"), jEdit.getProperty("options.general.checkModStatus.prompt"), jEdit.getProperty("options.general.checkModStatus.reload"), jEdit.getProperty("options.general.checkModStatus.silentReload") };
    checkModStatus = new JComboBox(modCheckOptions);
    if (jEdit.getBooleanProperty("autoReload")) {
        if (jEdit.getBooleanProperty("autoReloadDialog"))
            // reload and notify
            checkModStatus.setSelectedIndex(2);
        else
            // reload silently
            checkModStatus.setSelectedIndex(3);
    } else {
        if (jEdit.getBooleanProperty("autoReloadDialog"))
            // prompt
            checkModStatus.setSelectedIndex(1);
        else
            // do nothing
            checkModStatus.setSelectedIndex(0);
    }
    addComponent(jEdit.getProperty("options.general.checkModStatus"), checkModStatus);
    /* Check mod status upon */
    String[] modCheckUponOptions = { jEdit.getProperty("options.general.checkModStatusUpon.focus"), jEdit.getProperty("options.general.checkModStatusUpon.all"), jEdit.getProperty("options.general.checkModStatusUpon.operations"), jEdit.getProperty("options.general.checkModStatusUpon.focusBuffer"), jEdit.getProperty("options.general.checkModStatusUpon.none") };
    checkModStatusUpon = new JComboBox(modCheckUponOptions);
    checkModStatusUpon.setSelectedIndex(jEdit.getIntegerProperty("checkFileStatus"));
    addComponent(jEdit.getProperty("options.general.checkModStatusUpon"), checkModStatusUpon);
    /* Recent file list size */
    recentFiles = new JTextField(jEdit.getProperty("options.general.recentFiles"));
    recentFiles.setText(jEdit.getProperty("recentFiles"));
    addComponent(jEdit.getProperty("options.general.recentFiles"), recentFiles);
    /* Persistent markers */
    persistentMarkers = new JCheckBox(jEdit.getProperty("options.general.persistentMarkers"));
    persistentMarkers.setSelected(jEdit.getBooleanProperty("persistentMarkers"));
    addComponent(persistentMarkers);
    /* Session management */
    restore = new JCheckBox(jEdit.getProperty("options.general.restore"));
    restore.setSelected(jEdit.getBooleanProperty("restore"));
    restore.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            restoreCLI.setEnabled(restore.isSelected());
            restoreRemote.setEnabled(restore.isSelected());
        }
    });
    addComponent(restore);
    restoreRemote = new JCheckBox(jEdit.getProperty("options.general.restore.remote"));
    restoreRemote.setSelected(jEdit.getBooleanProperty("restore.remote", false));
    restoreRemote.setEnabled(restore.isSelected());
    addComponent(restoreRemote);
    restoreCLI = new JCheckBox(jEdit.getProperty("options.general.restore.cli"));
    restoreCLI.setSelected(jEdit.getBooleanProperty("restore.cli"));
    restoreCLI.setEnabled(restore.isSelected());
    addComponent(restoreCLI);
    /* Sort buffers */
    sortBuffers = new JCheckBox(jEdit.getProperty("options.general.sortBuffers"));
    sortBuffers.setSelected(jEdit.getBooleanProperty("sortBuffers"));
    sortBuffers.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent evt) {
            sortByName.setEnabled(sortBuffers.isSelected());
        }
    });
    addComponent(sortBuffers);
    /* Sort buffers by names */
    sortByName = new JCheckBox(jEdit.getProperty("options.general.sortByName"));
    sortByName.setSelected(jEdit.getBooleanProperty("sortByName"));
    sortByName.setEnabled(sortBuffers.isSelected());
    addComponent(sortByName);
    newKeyboardHandling = new JCheckBox(jEdit.getProperty("options.general.newkeyhandling"));
    newKeyboardHandling.setToolTipText(jEdit.getProperty("options.general.newkeyhandling.tooltip"));
    newKeyboardHandling.setSelected(jEdit.getBooleanProperty("newkeyhandling"));
    addComponent(newKeyboardHandling);
    hypersearchResultsWarning = new JTextField(jEdit.getProperty("hypersearch.maxWarningResults"));
    addComponent(jEdit.getProperty("options.general.hypersearch.maxWarningResults"), hypersearchResultsWarning);
}
