public void mouseReleased(MouseEvent e) {
    CCaptionBar header;
    CTab tab;
    CTabPanel src_panel = null;
    CTabPanel new_panel = null;
    Dock dock;
    JComponent comp = null;
    JComponent drop_dst;
    CTabPanel dst_panel = null;
    boolean in_middle = false;
    boolean in_accept_zone = false;
    boolean panel_move = false;
    int px = 0, py = 0;
    int ex, ey;
    if (target instanceof CCaptionBar) {
        header = (CCaptionBar) target;
        src_panel = (CTabPanel) header.panel;
        comp = src_panel;
        px = src_panel.getX() + header.getX() + e.getX();
        py = src_panel.getY() + header.getY() + e.getY();
        panel_move = true;
        if (src_panel.page_move_on_header_drag() && src_panel.components.size() > 1) {
            comp = src_panel.current;
            panel_move = false;
        }
    }
    if (target instanceof CTab) {
        tab = (CTab) target;
        src_panel = (CTabPanel) tab.panel;
        comp = tab.component;
        px = src_panel.getX() + src_panel.tab_bar.getX() + tab.getX() + e.getX();
        py = src_panel.getY() + src_panel.tab_bar.getY() + tab.getY() + e.getY();
        panel_move = false;
    }
    if (src_panel == null)
        return;
    dock = src_panel.dock;
    if (dock == null)
        return;
    if (dock.isMinimized(src_panel))
        return;
    if (dock.isDetached(src_panel))
        return;
    drop_dst = dock.findComponentAtPoint(px, py);
    /*
         * If there is no dock component at the drag point (for example, if we 
         * dragged over a splitter or out of the dock) then bail.
         */
    if (drop_dst == null) {
        cleanup(dock);
        return;
    }
    /*
         * If the component we dragged over is a CTabPanel, then we prepare for
         * and MDI move
         */
    if (drop_dst instanceof CTabPanel) {
        dst_panel = (CTabPanel) drop_dst;
        if (src_panel == dst_panel) {
            cleanup(dock);
            return;
        }
        in_accept_zone = dst_panel.inAcceptZone(px, py);
        if (!in_accept_zone) {
            in_middle = dock.drag(src_panel, px, py);
            if (!dst_panel.middle_is_accept_zone() && in_middle) {
                cleanup(dock);
                return;
            }
        }
        if (in_middle || in_accept_zone) {
            comp = src_panel.current;
            panel_move = false;
        }
        if (panel_move == false) {
            if (in_middle || in_accept_zone) {
                if (dst_panel.accepts(src_panel, comp)) {
                    /*
                         * Destination tab panel consumes the component from the 
                         * source tab panel.  If the source tab panel had only 
                         * one component left, we have to remove the source tab 
                         * panel from the dock.
                         */
                    CTabPanel.accept(src_panel, dst_panel, comp);
                }
            } else {
                new_panel = src_panel.new_tab_panel();
                new_panel.set_focusgroup(null);
                new_panel.dock(dock);
                CTabPanel.accept(src_panel, new_panel, comp);
                dock.dropNew(new_panel, dst_panel, px, py);
            }
            if (src_panel.components.size() == 0) {
                /*
                     * We have to detach the src panel from EVERYTHING because
                     * we want it to go away.  
                     */
                dock.close(src_panel);
                CComponent.delete(src_panel);
                src_panel.unset_focusgroup();
            }
        } else {
            dock.drop(src_panel, px, py);
        }
    } else {
    // TODO:
    }
    cleanup(dock);
}
