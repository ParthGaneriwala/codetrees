// ApplyMove checks if the move entered is legal, illegal or incomplete.
// If IsMoveLegal returns INCOMPLETEMOVE, this means a capture has just been made.
static int ApplyMove(int[][] position, int start_i, int start_j, int end_i, int end_j) {
    int result = IsMoveLegal(position, start_i, start_j, end_i, end_j, color(position[start_i][start_j]));
    if (result != ILLEGALMOVE) {
        if (Math.abs(end_i - start_i) == 1) {
            position[end_i][end_j] = position[start_i][start_j];
            position[start_i][start_j] = Checkers.EMPTY;
        } else // capture
        {
            // by Arita
            int x = start_i;
            int y = start_j;
            while (x < end_i && y < end_j) {
                x = x + 1;
                y = y + 1;
                position[x][y] = Checkers.EMPTY;
            }
            while (x < end_i && y > end_j) {
                x = x + 1;
                y = y - 1;
                position[x][y] = Checkers.EMPTY;
            }
            while (x > end_i && y < end_j) {
                x = x - 1;
                y = y + 1;
                position[x][y] = Checkers.EMPTY;
            }
            while (x > end_i && y > end_j) {
                x = x - 1;
                y = y - 1;
                position[x][y] = Checkers.EMPTY;
            }
            // position[(start_i + end_i)/2][(start_j + end_j)/2] = Checkers.EMPTY;
            position[end_i][end_j] = position[start_i][start_j];
            position[start_i][start_j] = Checkers.EMPTY;
        }
        if (result == INCOMPLETEMOVE) {
            // if there are no further captures
            if (!(canCapture(position, end_i, end_j)))
                result = LEGALMOVE;
        }
        // check for new king
        if (position[end_i][end_j] == Checkers.WHITE && end_j == 7)
            position[end_i][end_j] = Checkers.WKING;
        else if (position[end_i][end_j] == Checkers.BLACK && end_j == 0)
            position[end_i][end_j] = Checkers.BKING;
    }
    return result;
}
