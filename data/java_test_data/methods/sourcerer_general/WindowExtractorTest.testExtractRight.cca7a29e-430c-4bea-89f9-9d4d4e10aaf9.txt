@Test
public void testExtractRight() throws Throwable {
    WindowExtractor rightEx03 = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_RIGHT, 0, 3);
    WindowExtractor rightEx1030 = new WindowExtractor(Token.class, new SpannedTextExtractor(), WindowFeature.ORIENTATION_RIGHT, 10, 30);
    // feature extraction on "island" in "...because the island was only..."
    tokenBuilder.buildTokens(jCas, "because the island was only three miles long and a quarter of a mile wide .\n" + "This place was a tolerable long, steep hill or ridge about forty foot high .");
    Token token = JCasUtil.selectByIndex(jCas, Token.class, 2);
    assertEquals("island", token.getCoveredText());
    List<Feature> features = rightEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    WindowFeature feature = (WindowFeature) features.get(0);
    assertEquals(WindowFeature.ORIENTATION_RIGHT, feature.getOrientation());
    assertEquals(0, feature.getPosition());
    assertEquals("was", feature.getValue().toString());
    feature = (WindowFeature) features.get(1);
    assertEquals(WindowFeature.ORIENTATION_RIGHT, feature.getOrientation());
    assertEquals(1, feature.getPosition());
    assertEquals("only", feature.getValue().toString());
    feature = (WindowFeature) features.get(2);
    assertEquals(WindowFeature.ORIENTATION_RIGHT, feature.getOrientation());
    assertEquals(2, feature.getPosition());
    assertEquals("three", feature.getValue().toString());
    features = rightEx1030.extract(jCas, token, Sentence.class);
    assertEquals(20, features.size());
    feature = (WindowFeature) features.get(0);
    assertEquals("mile", feature.getValue().toString());
    feature = (WindowFeature) features.get(1);
    assertEquals(17, ((WindowFeature) features.get(19)).getOutOfBoundsDistance());
    // Feature extraction on "mile" in "...and a quarter of a mile wide...."
    token = JCasUtil.selectByIndex(jCas, Token.class, 13);
    assertEquals("mile", token.getCoveredText());
    features = rightEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    feature = (WindowFeature) features.get(0);
    assertEquals(WindowFeature.ORIENTATION_RIGHT, feature.getOrientation());
    assertEquals(0, feature.getPosition());
    assertEquals("wide", feature.getValue().toString());
    feature = (WindowFeature) features.get(1);
    assertEquals(WindowFeature.ORIENTATION_RIGHT, feature.getOrientation());
    assertEquals(1, feature.getPosition());
    assertEquals(".", feature.getValue().toString());
    feature = (WindowFeature) features.get(2);
    assertEquals(WindowFeature.ORIENTATION_RIGHT, feature.getOrientation());
    assertEquals(2, feature.getPosition());
    assertEquals(1, feature.getOutOfBoundsDistance());
    features = rightEx1030.extract(jCas, token, Sentence.class);
    assertEquals(20, features.size());
    feature = (WindowFeature) features.get(0);
    assertEquals(9, feature.getOutOfBoundsDistance());
    assertEquals(28, ((WindowFeature) features.get(19)).getOutOfBoundsDistance());
    // Feature extraction on the first word of the file
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "text obtained from gutenberg\n" + "I WANTED to go and");
    token = JCasUtil.selectByIndex(jCas, Token.class, 0);
    assertEquals("text", token.getCoveredText());
    features = rightEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    assertEquals("obtained", features.get(0).getValue().toString());
    assertEquals("from", features.get(1).getValue().toString());
    assertEquals("gutenberg", features.get(2).getValue().toString());
    features = rightEx1030.extract(jCas, token, Sentence.class);
    assertEquals(20, features.size());
    assertEquals(8, ((WindowFeature) features.get(0)).getOutOfBoundsDistance());
    // feature extraction on spanless annotation at end of file
    jCas.reset();
    tokenBuilder.buildTokens(jCas, "and cooked dinner .");
    int end = jCas.getDocumentText().length();
    token = new Token(jCas, end, end);
    assertEquals("", token.getCoveredText());
    features = rightEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    assertEquals(1, ((WindowFeature) features.get(0)).getOutOfBoundsDistance());
    assertEquals(2, ((WindowFeature) features.get(1)).getOutOfBoundsDistance());
    assertEquals(3, ((WindowFeature) features.get(2)).getOutOfBoundsDistance());
    features = rightEx1030.extract(jCas, token, Sentence.class);
    assertEquals(20, features.size());
    assertEquals(30, ((WindowFeature) features.get(19)).getOutOfBoundsDistance());
    // Feature extraction on the last word
    token = JCasUtil.selectByIndex(jCas, Token.class, -2);
    assertEquals("dinner", token.getCoveredText());
    features = rightEx03.extract(jCas, token, Sentence.class);
    assertEquals(3, features.size());
    assertEquals(".", features.get(0).getValue().toString());
    assertEquals(1, ((WindowFeature) features.get(1)).getOutOfBoundsDistance());
    assertEquals(2, ((WindowFeature) features.get(2)).getOutOfBoundsDistance());
}
