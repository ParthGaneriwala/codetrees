private void buildForm(final JQForm form) {
    // Setup fields
    form.add(new TextField("name", true));
    form.add(new TextField("path", "path (href)", false));
    form.add(idField);
    form.add(new HiddenField("referenceNodeId", String.class));
    Select type = new Select("type");
    type.add(new Option("folder"));
    type.add(new Option("file"));
    form.add(type);
    Submit create = new Submit("new");
    form.add(create);
    Submit save = new Submit("save");
    form.add(save);
    Submit delete = new Submit("delete");
    form.add(delete);
    Submit cancel = new Submit("cancel");
    form.add(cancel);
    // Set an Ajax listener on the create button that will be invoked when
    // form is submitted
    create.addBehavior(new DefaultAjaxBehavior() {

        @Override
        public ActionResult onAction(Control source) {
            JQTaconite actionResult = new JQTaconite();
            form.clearErrors();
            clearVisibleFields();
            // Update the form
            actionResult.replace(form);
            return actionResult;
        }
    });
    // Set an Ajax listener on the create button
    save.addBehavior(new DefaultAjaxBehavior() {

        @Override
        public ActionResult onAction(Control source) {
            JQTaconite actionResult = new JQTaconite();
            if (form.isValid()) {
                if (StringUtils.isBlank(idField.getValue())) {
                    // Do an insert to the database
                    // Normally an ORM will generate the ID
                    String referenceNodeId = form.getField("referenceNodeId").getValue();
                    File parentFile = (File) getFileSystemService().load(referenceNodeId);
                    // Only create new node if parent node allows children
                    if (parentFile instanceof Folder) {
                        Folder parent = (Folder) parentFile;
                        String entityId = generateEntityId();
                        File file = null;
                        if ("folder".equals(form.getField("type").getValue())) {
                            file = new Folder();
                        } else {
                            file = new File();
                            // Disable the new button if the type is file,
                            // since files cannot contain children
                            form.getField("new").setDisabled(true);
                        }
                        // Update the Form's idField with the new ID
                        // TODO this should be copyFrom
                        idField.setValue(entityId);
                        // Update file entity with form values
                        form.copyTo(file);
                        parent.add(file);
                        createJSTreeNode(actionResult, entityId);
                    }
                } else {
                    // Do an update to the database
                    File file = getFileSystemService().load(idField.getValue());
                    if (file != null) {
                        form.copyTo(file);
                        if (file instanceof Folder) {
                            form.getField("type").setValue("folder");
                        } else {
                            form.getField("type").setValue("file");
                            // Disable the new button if the type is file,
                            // since files cannot contain children
                            form.getField("new").setDisabled(true);
                        }
                        // Disable the type select, since it cannot be
                        // changed once set
                        form.getField("type").setDisabled(true);
                        updateJSTreeNode(actionResult);
                    }
                }
            }
            // Update the form
            actionResult.replace(form);
            return actionResult;
        }
    });
    // Set an Ajax listener on the delete button
    delete.addBehavior(new DefaultAjaxBehavior() {

        @Override
        public ActionResult onAction(Control source) {
            JQTaconite actionResult = new JQTaconite();
            String referenceNodeId = form.getField("referenceNodeId").getValue();
            if (StringUtils.isNotBlank(referenceNodeId)) {
                getFileSystemService().delete(referenceNodeId);
                form.clearErrors();
                form.clearValues();
                actionResult.replace(form);
                actionResult.eval("var tree = jQuery.tree.focused(); if (tree) { tree.remove(tree.selected) }");
            }
            return actionResult;
        }
    });
    // Set an Ajax listener on the close
    cancel.addBehavior(new DefaultAjaxBehavior() {

        @Override
        public ActionResult onAction(Control source) {
            JQTaconite actionResult = new JQTaconite();
            form.clearErrors();
            form.clearValues();
            actionResult.replace(form);
            return actionResult;
        }
    });
}
