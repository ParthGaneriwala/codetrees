public static Properties loadProperties(Properties props, InputStream in) throws IOException {
    byte[] data = FileTools.readStream(in);
    if (STRING_PARSE_PROPS) {
        String dataStr = StringTools.toStringValue(data);
        String[] ds = StringTools.split(dataStr, '\n');
        for (int i = 0; i < ds.length; i++) {
            String d = ds[i].trim();
            if (d.equals("") || isCOMMENT(d.charAt(0))) {
                continue;
            }
            int p = d.indexOf("=");
            if (p < 0) {
                p = d.indexOf(":");
            }
            String key = (p >= 0) ? d.substring(0, p) : d;
            String val = (p >= 0) ? d.substring(p + 1) : "";
            if (!key.equals("")) {
                Print.logInfo("S)Prop: " + key + " ==> " + val);
                props.setProperty(key, val);
            }
        }
    } else {
        // This may not be safe for non-"ISO-8859-1" character sets
        for (int s = 0; s < data.length; ) {
            // skip to start of next key
            while ((s < data.length) && Character.isWhitespace(data[s])) {
                s++;
            }
            if ((s >= data.length) || isCOMMENT(data[s])) {
                while ((s < data.length) && !isEOL(data[s])) {
                    s++;
                }
                continue;
            }
            // find separator/eol
            int e, sep = -1;
            for (e = s; (e < data.length) && !isEOL(data[e]); e++) {
                if ((sep < 0) && isSEP(data[e])) {
                    sep = e;
                }
            }
            // parse key/value
            String key = "";
            String val = "";
            if (sep >= 0) {
                key = StringTools.toStringValue(data, s, sep - s).trim();
                // TODO: decode Unicode value
                val = StringTools.toStringValue(data, sep + 1, e - sep).trim();
            } else {
                key = StringTools.toStringValue(data, s, e - s).trim();
                val = "";
            }
            if (!key.equals("")) {
                Print.logInfo("B)Prop: " + key + " ==> " + val);
                props.setProperty(key, val);
            }
            // start at nexe character
            s = e + 1;
        }
    }
    return props;
}
