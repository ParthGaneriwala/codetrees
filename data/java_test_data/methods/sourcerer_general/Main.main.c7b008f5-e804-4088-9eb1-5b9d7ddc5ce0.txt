public static void main(String[] args) throws ParseException, Exception {
    // ArrayList que guarda os erros encontrados
    ArrayList<String> error = new ArrayList<String>();
    Textfile arquivo = new Textfile();
    // Faz o InputStream receber o conte�do do arquivo
    InputStream original = arquivo.getFile();
    // InputStrem retornado pelo Lexer, sem os Skips e os erros l�xicos
    InputStream modAl;
    TProgram tree;
    System.out.println("----- AN�LISE L�XICA -----");
    // Instancia o analisador l�xico
    Lexer al = new Lexer(original);
    // Faz a an�lise l�xica
    modAl = al.analize(error);
    // Imprime a lista de tokens obtida
    al.printTokens();
    System.out.println("\nfim AN�LISE L�XICA");
    System.out.println("----- AN�LISE SINT�TICA -----");
    // Instancia o analisador sint�tico
    Parser as = new Parser(modAl);
    // Faz a an�lise sint�tica
    tree = as.analize(error);
    // Imprime o resultado da an�lise
    as.printResult();
    System.out.println("fim AN�LISE SINT�TICA");
    System.out.println("----- CHECAGEM DE TIPOS -----");
    // Instancia o type checker
    TypeChecker tc = new TypeChecker(tree);
    // Faz a checagem de tipos
    tc.perform(error);
    // Imprime o resultado da an�lise
    tc.printResult();
    System.out.println("fim CHECAGEM DE TIPOS");
    if (// Imprime a lista de erros encontrados durante o processo
    !error.isEmpty()) {
        System.out.println("\n----- ERROS -----");
        for (int i = 0; i < error.size(); i++) System.out.println(error.get(i));
    }
}
