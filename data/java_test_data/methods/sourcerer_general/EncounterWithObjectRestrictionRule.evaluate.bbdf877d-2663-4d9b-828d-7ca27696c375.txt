@Override
@SuppressWarnings("unchecked")
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    // this rule can process the following parameters:
    // - list of encounter type (map key: EvaluableConstants.ENCOUNTER_TYPE)
    // - list of location (map key: EvaluableConstants.LOCATION)
    // - number of encounter that should be returned (map key: EvaluableConstants.ENCOUNTER_FETCH_SIZE)
    // - ordering on the encounter datetime (map key: EvaluableConstants.ENCOUNTER_FETCH_ORDER)
    Result result = new Result();
    // we will pass this restrictions to core service to get the correct encounters
    Map<String, Collection<OpenmrsObject>> restrictions = new HashMap<String, Collection<OpenmrsObject>>();
    // get list of encounter types from the parameters
    Object encounterTypeObjects = parameters.get(EvaluableConstants.ENCOUNTER_TYPE);
    if (RuleUtils.isValidCollectionObject(encounterTypeObjects))
        restrictions.put(EvaluableConstants.ENCOUNTER_TYPE, (Collection<OpenmrsObject>) encounterTypeObjects);
    // get list of locations from the parameters
    Object locationObjects = parameters.get(EvaluableConstants.ENCOUNTER_LOCATION);
    if (RuleUtils.isValidCollectionObject(locationObjects))
        restrictions.put(EvaluableConstants.ENCOUNTER_LOCATION, (Collection<OpenmrsObject>) locationObjects);
    // get list of providers from the parameters (currently this is not supported)
    Object providerObjects = parameters.get(EvaluableConstants.ENCOUNTER_PROVIDER);
    if (RuleUtils.isValidCollectionObject(providerObjects))
        restrictions.put(EvaluableConstants.ENCOUNTER_PROVIDER, (Collection<OpenmrsObject>) providerObjects);
    // this fetch restriction will define how many records should be returned and how they will be ordered
    FetchRestriction fetchRestriction = new FetchRestriction();
    // specify how many records should be returned
    Object sizeObject = parameters.get(EvaluableConstants.ENCOUNTER_FETCH_SIZE);
    if (RuleUtils.isValidSizeObject(sizeObject))
        fetchRestriction.setSize(NumberUtils.toInt(sizeObject.toString()));
    // specify how the record will be ordered (ascending or descending by encounter datetime)
    Object orderObject = parameters.get(EvaluableConstants.ENCOUNTER_FETCH_ORDER);
    if (RuleUtils.isValidOrderObject(orderObject))
        fetchRestriction.setFetchOrdering(orderObject.toString());
    // call the core service to search for the matching encounters
    CoreService coreService = Context.getService(CoreService.class);
    // pass the patient id, restrictions map and the fetch restriction in the service call
    List<Encounter> encounters = coreService.getPatientEncounters(patientId, restrictions, fetchRestriction);
    if (log.isDebugEnabled())
        log.debug("Patient: " + patientId + ", encounters size:" + CollectionUtils.size(encounters));
    // check the result object implementation to see how to create result object and how to pull data from them
    for (Encounter encounter : encounters) {
        Date encounterDatetime = encounter.getEncounterDatetime();
        EncounterType type = encounter.getEncounterType();
        String encounterTypeName = StringUtils.EMPTY;
        if (type != null)
            encounterTypeName = type.getName();
        result.add(new Result(encounterDatetime, encounterTypeName, encounter));
    }
    return result;
}
