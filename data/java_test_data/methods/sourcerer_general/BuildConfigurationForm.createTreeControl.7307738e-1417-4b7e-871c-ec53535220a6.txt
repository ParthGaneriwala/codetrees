private void createTreeControl(Composite parent) {
    Composite config = new Composite(parent, SWT.BORDER | SWT.NONE);
    GridData gridData = new GridData(GridData.FILL_BOTH);
    gridData.grabExcessVerticalSpace = true;
    gridData.verticalIndent = 0;
    gridData.horizontalIndent = 0;
    config.setLayoutData(gridData);
    config.setLayout(new GridLayout());
    createToolBar(config);
    Tree buildTree = new Tree(config, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
    buildTree.addSelectionListener(this);
    GridData data = new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace = true;
    buildTree.setLayoutData(data);
    local = new TreeItem(buildTree, SWT.NONE);
    local.setText("Local Build");
    local.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT));
    remote = new TreeItem(buildTree, SWT.NONE);
    remote.setText("Remote Build");
    remote.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT));
    Iterator itr = Activator.getDefault().localBuildItems.iterator();
    String buildN = null;
    while (itr.hasNext()) {
        buildN = itr.next().toString();
        TreeItem treeItem = new TreeItem(local, SWT.NONE);
        treeItem.setText(buildN);
        treeItem.setData(buildN);
    }
    local.setExpanded(true);
    itr = Activator.getDefault().remoteBuildItems.iterator();
    while (itr.hasNext()) {
        buildN = itr.next().toString();
        TreeItem treeItem = new TreeItem(remote, SWT.NONE);
        treeItem.setText(buildN);
        treeItem.setData(buildN);
    }
    buildTree.select(local);
    remote.setExpanded(true);
}
