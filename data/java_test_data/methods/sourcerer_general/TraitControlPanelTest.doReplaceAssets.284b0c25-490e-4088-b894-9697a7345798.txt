public void doReplaceAssets() throws ComponentNotFoundException, MultipleComponentsFoundException {
    TraitList assets = getPerson().getAssets();
    int listSize = assets.getSize();
    JButton selectButton = null;
    JButton cancelButton = null;
    JList traitList = null;
    int points = getPerson().getCurrentStatPoints();
    for (int i = 0; i < getPerson().getAssets().getSize(); i++) {
        TraitData oldAsset = getPerson().getAssets().get(i);
        // Invoke swap!
        String panelName = TraitListPanel.getPanelName(oldAsset);
        JPanel panel = super.findPanelIn(assetPanel, panelName);
        JButton swapButton = super.findButtonIn(panel, TraitPanel.SWAP_BUTTON);
        assertNotNull(swapButton);
        assertEnabled(swapButton);
        tester.actionClick(swapButton);
        assertTrue(traitControlPanel.getSelectorDialog().isShowing());
        selectButton = (JButton) finder.find(traitControlPanel.getSelectorDialog(), new NameMatcher(ObjectSelectorDialog.SELECT_BUTTON));
        cancelButton = (JButton) finder.find(traitControlPanel.getSelectorDialog(), new NameMatcher(ObjectSelectorDialog.CANCEL_BUTTON));
        traitList = (JList) finder.find(traitControlPanel.getSelectorDialog(), new NameMatcher(ObjectSelectorDialog.SELECTION_LIST));
        assertNotNull(selectButton);
        assertNotNull(cancelButton);
        assertNotNull(traitList);
        assertNotNull(listTester);
        assertTrue(selectButton.isShowing());
        // Ensure dialog list has no traits that are already on the person.
        for (int j = 0; j < traitList.getModel().getSize(); j++) {
            TraitData tmpData = (TraitData) traitList.getModel().getElementAt(j);
            assertFalse(getPerson().hasAsset(tmpData));
        }
        // Select random trait and select it it
        int idx = random.nextInt(traitList.getModel().getSize());
        TraitData newAsset = (TraitData) traitList.getModel().getElementAt(idx);
        listTester.actionSelectIndex(traitList, idx);
        assertTrue(selectButton.isEnabled());
        assertTrue(cancelButton.isEnabled());
        buttonTester.actionClick(selectButton);
        // List size should be the same
        assertEquals(listSize, assets.size());
        assertTrue(getPerson().hasAsset(newAsset));
        assertFalse(getPerson().hasAsset(oldAsset));
        int newPoints = points + oldAsset.getCost() - newAsset.getCost();
        assertEquals(newPoints, getPerson().getCurrentStatPoints());
        points = newPoints;
    }
}
