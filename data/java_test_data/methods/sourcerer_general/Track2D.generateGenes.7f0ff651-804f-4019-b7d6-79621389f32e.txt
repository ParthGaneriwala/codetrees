private SvgGroup generateGenes(Strand inStrand) {
    // Move to the bottom left of the genomic display
    int imageHeightInPixels = 0;
    List<Gene2D> genes = null;
    Map<Gene2D, String> lineMap = null;
    if (inStrand == Strand.FORWARD) {
        imageHeightInPixels = mForwardImageHeightInPixels;
        genes = mForwardGenes;
        lineMap = mForwardLineMap;
    } else {
        imageHeightInPixels = mReverseImageHeightInPixels;
        genes = mReverseGenes;
        lineMap = mReverseLineMap;
    }
    SvgGroup group = new SvgGroup().setTransform("translate(" + mDescriptionWidthInPixels + ", " + imageHeightInPixels + ")");
    if (genes != null) {
        for (Gene2D gene : genes) {
            if (gene.inDisplayRegion()) {
                SvgLink svgLink = null;
                List<Link> urls = gene.getURLs();
                if (CollectionUtil.hasValues(urls)) {
                    if (1 == urls.size()) {
                        svgLink = new SvgLink(urls.get(0).getURL());
                    } else {
                        PopupMenuJS menu = new PopupMenuJS();
                        menu.setMenuTitle(gene.getId());
                        for (Link link : urls) {
                            menu.addLink(link);
                        }
                        // Add the menu to the track's javascript
                        mJavascript.addContent(menu.generateMenuJavascript());
                        svgLink = new SvgLink(menu.getDisplayMenuJavascript());
                    }
                }
                SvgNode svgNode = null;
                if (svgLink != null) {
                    svgNode = svgLink;
                } else {
                    svgNode = new SvgGroup();
                }
                group.addSubtag(svgNode);
                // Move to gene location
                // What line is the gene on? Move to upper left of gene.
                int line = Integer.parseInt(lineMap.get(gene));
                if (inStrand == Strand.REVERSE) {
                    line = mNumReverseLines - line + 1;
                }
                // XXXX           int xOffset = (int) ((gene.getStartLocation() - mXAxisStartValue) * getXScalingFactor());
                int geneLeft = (int) (gene.getLeft() * mXScalingFactor);
                int bound = (int) (mXAxisStartValue * mXScalingFactor);
                int xOffset = geneLeft - bound;
                // Don't back up into the description region.
                if (xOffset < 0)
                    xOffset = 0;
                /*       // Don't go off the right side of the display region.
               if (xOffset > mImageWidthInPixels - mDescriptionWidthInPixels - mMinimumBufferInPixels)
               {
                  xOffset = mImageWidthInPixels - mDescriptionWidthInPixels - mMinimumBufferInPixels;
               }
        */
                // int yOffset = -line * (mLineHeightInPixels + mLinePaddingInPixels);
                int yOffset = getYOffsetForLine(line, inStrand);
                // SvgGroup geneGroup = group.addGroup().setTransform();
                svgNode.setTransform("translate(" + xOffset + ", " + yOffset + ")");
                svgNode.addSubtag(gene.toSVG());
            }
        }
    }
    return group;
}
