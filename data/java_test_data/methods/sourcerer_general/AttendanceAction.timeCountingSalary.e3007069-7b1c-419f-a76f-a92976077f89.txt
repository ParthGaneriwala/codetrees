private String timeCountingSalary() throws Exception {
    Nationality nativePeople = nationalityDao.getNationality(1L);
    Nationality foreignPeople = nationalityDao.getNationality(2L);
    IncomeTaxCalculator nativeCalc = new IncomeTaxCalculator(nativePeople.getIncomeTaxFunction());
    IncomeTaxCalculator foreignCalc = new IncomeTaxCalculator(foreignPeople.getIncomeTaxFunction());
    boolean saUser = getCurrentUser().getSaUser();
    boolean actual = true;
    if (saUser)
        actual = false;
    timeCountingSalaryReports = new ArrayList<TimeCountingSalaryReportVO>();
    try {
        Date[] dates = DateUtil.getOneMonth(yearAndMonth);
        int workdays = DateUtil.getGeneralWorkDays(yearAndMonth);
        attendanceReports = attendanceDao.populateAttendances(dates[0], dates[1], actual);
        if (attendanceReports != null) {
            for (AttendanceReportVO vo : attendanceReports) {
                Employee e = vo.getEmployee();
                if (e.getSalaryType() != null && e.getSalaryType().getId() != null && e.getSalaryType().getId().longValue() == 1) {
                    SalaryStrategy salary = employeeDao.getSalary(e);
                    if (salary == null)
                        salary = new SalaryStrategy();
                    TimeCountingSalaryReportVO salaryVO = new TimeCountingSalaryReportVO(vo, workdays);
                    salaryVO.setGrossSalary(salary.getSalary());
                    Float bonusStock = salary.getBonusStock();
                    Float dutySubsidy = salary.getDutySubsidy();
                    if (bonusStock == null)
                        bonusStock = 0f;
                    if (dutySubsidy == null)
                        dutySubsidy = 0f;
                    salaryVO.setBonusStock(bonusStock);
                    salaryVO.setDutySubsidy(dutySubsidy);
                    salaryVO.setSocialInsurance(salary.getSocialInsurence());
                    double totalI = salaryVO.getTotalIncomeDoubleValue();
                    if (e.getNationality() != null && e.getNationality().getId() == 2L) {
                        salaryVO.setIncomeTax(new Float(foreignCalc.getTaxAmount(totalI)));
                    } else {
                        salaryVO.setIncomeTax(new Float(nativeCalc.getTaxAmount(totalI)));
                    }
                    timeCountingSalaryReports.add(salaryVO);
                }
            }
        }
    } catch (DateFormatException e) {
        e.printStackTrace();
    }
    nativeCalc.exit();
    foreignCalc.exit();
    return "timeCountingSalaryReport";
}
