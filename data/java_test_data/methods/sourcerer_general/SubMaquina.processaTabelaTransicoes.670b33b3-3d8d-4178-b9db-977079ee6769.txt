private void processaTabelaTransicoes(String line) {
    Integer estadoAtual = null;
    Token token = null;
    Integer proximoEstado = null;
    String submaquina = null;
    Integer acaoSemantica = null;
    String[] subString = null;
    /*
		 * a linha esta dividida em
		 * [0] - estado atual
		 * [1] - token ou chamada de submaquina
		 * [2] - proximo estado
		 * [3] - acao semantica a ser realizada
		 */
    subString = line.split(" ");
    // Seta o estado proveniente
    try {
        estadoAtual = Integer.parseInt(subString[0]);
    } catch (NumberFormatException ex) {
        estadoAtual = null;
    }
    // Seta ou o token ou a submaquina
    try {
        if (subString[1].substring(0, 1).equals("\"")) {
            // Se comeca com ", entao eh palavra reservada
            // lower case para comparacao na tabela de palReservadas
            // pega ja tirando as aspas das palavras reservadas dadas pelo arquivo
            token = lexico.getPalReservada().get(subString[1].toLowerCase().substring(1, subString[1].length() - 1));
            if (token == null) {
                new ErroSintatico(subString[1].toLowerCase().substring(1, subString[1].length() - 1) + ": token nao encontrado na lexico.palReservada, e deveria estar", lexico.getLineNumber());
            }
        } else {
            // se nao comeca com " eh uma submaquina, numero ou id
            if (subString[1].equals("programa") || subString[1].equals("comando") || subString[1].equals("expressao") || subString[1].equals("funcao")) {
                submaquina = subString[1];
            } else // else if (subString[1].equals("id")){
            // submaquina = String.valueOf(Tag.ID);
            // //					 submaquina = "id";
            // }
            // else if (subString[1].equals("num")){
            // submaquina = String.valueOf(Tag.NUMBER);
            // //					 submaquina = "num"
            // }
            {
                new ErroSintatico("Algo invalido.", lexico.getLineNumber());
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    try {
        proximoEstado = Integer.parseInt(subString[2]);
    } catch (NumberFormatException ex) {
        proximoEstado = null;
    }
    try {
        acaoSemantica = Integer.parseInt(subString[3]);
    } catch (NumberFormatException ex) {
        acaoSemantica = null;
    }
    InicioTransicao transicao = null;
    if (token != null) {
        transicao = new InicioTransicao(estadoAtual, token.tag);
    } else {
        transicao = new InicioTransicao(estadoAtual, null);
    }
    ResultadoTransicao resultado = new ResultadoTransicao(proximoEstado, submaquina, acaoSemantica);
    transicoes.put(transicao.getEstadoAtual() + "%" + transicao.getIdTokenAtual(), resultado.getProximoEstado() + "%" + resultado.getSubmaquina() + "%" + resultado.getAcaoSemantica());
}
