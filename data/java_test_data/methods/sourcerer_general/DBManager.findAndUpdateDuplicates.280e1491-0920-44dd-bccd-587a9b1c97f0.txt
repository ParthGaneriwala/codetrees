public void findAndUpdateDuplicates(Connection conn) {
    ResultSet set = null;
    Set<Relation> duplicatesSet = new LinkedHashSet<Relation>();
    PreparedStatement pstmt = null;
    String pstmtStr = "SELECT * FROM " + DBTablesEnum.PERSONS.getTableName() + " ORDER BY " + DBFieldsEnum.PERSONS_PERSON_NAME.getFieldName() + ", " + DBFieldsEnum.PERSONS_PERSON_ID.getFieldName();
    System.out.println(pstmtStr);
    try {
        if (conn == null)
            return;
        pstmt = conn.prepareStatement(pstmtStr);
        set = pstmt.executeQuery();
        set.setFetchSize(RESULTS_FETCH_SIZE);
        String tempPrevPersonName = null;
        String tempCurrPersonName = null;
        int tempPersonId = 0;
        // insert primary data before iterating over the results
        if (set.next()) {
            tempPrevPersonName = set.getString(DBFieldsEnum.PERSONS_PERSON_NAME.getFieldName());
            tempPersonId = set.getInt(DBFieldsEnum.PERSONS_PERSON_ID.getFieldName());
        }
        // if it is, add it to the duplicatesSet
        while (set.next()) {
            tempCurrPersonName = set.getString(DBFieldsEnum.PERSONS_PERSON_NAME.getFieldName());
            // if a duplicate was found
            if (tempPrevPersonName.equals(tempCurrPersonName)) {
                // the structure of the Relation that is added to the
                // duplicatesSet is:
                // Relation(originalPersonId, currentPersonId)
                duplicatesSet.add(new Relation(tempPersonId, set.getInt(DBFieldsEnum.PERSONS_PERSON_ID.getFieldName())));
            } else {
                // if a duplicate wasn't found
                tempPrevPersonName = tempCurrPersonName;
                tempPersonId = set.getInt(DBFieldsEnum.PERSONS_PERSON_ID.getFieldName());
            }
            // flush results every BATCH_SIZE
            if ((duplicatesSet.size() > 0) && (duplicatesSet.size() % DataImporter.PSTMT_BATCH_SIZE == 0)) {
                System.out.println("DUPLICATES: updating " + duplicatesSet.size() + " elements to the DB");
                updateDuplicates(conn, duplicatesSet);
                duplicatesSet.clear();
            }
        }
        // flush the results that were left
        if ((duplicatesSet.size() > 0)) {
            System.out.println("DUPLICATES: updating " + duplicatesSet.size() + " elements to the DB");
            updateDuplicates(conn, duplicatesSet);
            duplicatesSet.clear();
        }
        set.close();
        pstmt.close();
    } catch (SQLException e) {
        System.out.println(e.getMessage());
    } catch (NullPointerException e) {
        System.out.println("Null pointer in searchMovies");
    }
}
