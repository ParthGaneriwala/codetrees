private void writeRSRC() throws IOException {
    int len = parser.getRSRCSectionHeader().getSizeOfRawData();
    byte[] rsrc = new byte[len];
    int i, j, k;
    for (i = 0; i < len; i++) rsrc[i] = 0;
    // fill in rsrc[]
    ArrayList<Directory> dir = parser.getRSRC().getDirectories();
    ArrayList<Entry> entries;
    Entry e;
    Directory d;
    ResourceEntry re;
    int off;
    int rva;
    int data_off;
    ArrayList<Byte> data;
    for (i = 0; i < dir.size(); i++) {
        d = dir.get(i);
        off = d.getOffset();
        insertInt(rsrc, off, d.getCharacteristics());
        insertInt(rsrc, off + 4, d.getTimeDateStamp());
        insertShort(rsrc, off + 8, (short) d.getMajorVersion());
        insertShort(rsrc, off + 10, (short) d.getMinorVersion());
        insertShort(rsrc, off + 12, (short) d.getNumberOfNameEntries());
        insertShort(rsrc, off + 14, (short) d.getNumberOfIDEntries());
        entries = d.getEntries();
        for (j = 0; j < entries.size(); j++) {
            e = entries.get(j);
            off = e.getThisOffset();
            insertInt(rsrc, off, e.getID());
            insertInt(rsrc, off + 4, e.getOffset());
            off = e.getOffset();
            re = e.getData();
            if (re != null) {
                rva = re.getDataRVA();
                insertInt(rsrc, off, rva);
                insertInt(rsrc, off + 4, re.getSize());
                insertInt(rsrc, off + 8, re.getCodePage());
                insertInt(rsrc, off + 12, re.getReserved());
                data = re.getData();
                data_off = rva - parser.getRSRCSectionHeader().getVirtualAddress();
                insertShort(rsrc, data_off, (short) data.size());
                data_off += 2;
                for (k = 0; k < data.size(); k++) rsrc[data_off + k] = data.get(k);
            }
        }
    }
    for (i = 0; i < len; i++) {
        try {
            writer.writeByte(rsrc[i]);
        } catch (IOException ioe) {
            System.out.println("Error: Writing .text section");
            ioe.printStackTrace();
            throw ioe;
        }
    }
}
