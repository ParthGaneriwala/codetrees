public void encrypt(String inputFile, String outputFile, IKey key) throws FileNotFoundException, IOException {
    SplineKey spKey = (SplineKey) key;
    List<Integer> plainText = TextWork.readText(inputFile);
    List<Integer> encryptedText = new ArrayList<Integer>();
    List<List<Integer>> blocks = TextWork.getBlocks(plainText, BLOCK_SIZE);
    int K = spKey.getRounds();
    for (int j = 0; j < blocks.size(); j++) {
        SplineKey k = spKey.clone();
        List<Integer> wavelet = new ArrayList<Integer>();
        List<Integer> block = blocks.get(j);
        for (int i = 0; i < K; i++) {
            int num = k.nextNumber();
            int e = k.removeElem(num);
            int cCur = block.remove(num % block.size());
            int cNext = block.get(num % block.size());
            int cPrev = block.get(MathUtil.modul((num - 1), block.size()));
            int xCur = k.getElem(num);
            int xNext = k.getElem(num + 1);
            try {
                int div = MathUtil.getInverse((xNext - e), N);
                // System.out.println(cCur + " - " + (xNext-xCur)*div*(cPrev) + " - " + (xCur-e)*div*(cNext));
                int B = (((cCur) - (xNext - xCur) * div * (cPrev) - (xCur - e) * div * (cNext)) % 256);
                int b = MathUtil.modul(B, 256);
                wavelet.add(b);
            } catch (IllegalArgumentException ex) {
                System.out.println("Error" + ex.getMessage());
            }
            if (i != K - 1) {
                block = MathUtil.shiftRight(block);
            }
        }
        block.addAll(wavelet);
        encryptedText.addAll(block);
    }
    TextWork.writeText(outputFile, encryptedText);
}
