public void updateKey() {
    TextureState tstate = (TextureState) _states[RenderState.TEXTURE_STATE];
    TextureUnit[] units = (tstate == null) ? null : tstate.getUnits();
    int textures = (units == null) ? 0 : units.length;
    // key consists of vertex shader id, fragment shader id, texture ids,
    // -1 (to signify end of textures), buffer id
    int size = 1 + 1 + textures + 1 + 1;
    if (key == null || key.length != size) {
        key = new int[size];
    }
    ShaderState sstate = (ShaderState) _states[RenderState.SHADER_STATE];
    Program program = (sstate == null) ? null : sstate.getProgram();
    Shader vertexShader = (program == null) ? null : program.getVertexShader();
    Shader fragmentShader = (program == null) ? null : program.getFragmentShader();
    int idx = 0;
    key[idx++] = (vertexShader == null) ? 0 : vertexShader.getId();
    key[idx++] = (fragmentShader == null) ? 0 : fragmentShader.getId();
    for (int ii = 0; ii < textures; ii++) {
        Texture texture = (units[ii] == null) ? null : units[ii].texture;
        key[idx++] = (texture == null) ? 0 : texture.getId();
    }
    key[idx++] = -1;
    ArrayState astate = (ArrayState) _states[RenderState.ARRAY_STATE];
    BufferObject buffer = (astate == null) ? null : astate.getElementArrayBuffer();
    if (buffer != null) {
        key[idx++] = buffer.getId();
    } else if (_command instanceof CallList) {
        key[idx++] = ((CallList) _command).getList().getId();
    } else {
        key[idx++] = 0;
    }
}
