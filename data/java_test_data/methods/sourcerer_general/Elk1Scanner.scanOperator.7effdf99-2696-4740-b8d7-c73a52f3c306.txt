private void scanOperator(LocatedChar ch) {
    // all operators in Elk1 are single-character.
    TextLocation location = ch.getLocation();
    switch(ch.getCharacter()) {
        case '*':
            {
                LocatedChar c = input.next();
                if (// 
                c.getCharacter() == '=')
                    nextToken = OperatorToken.make(location, "*=", Operator.MULTIPLEEQ);
                else {
                    nextToken = OperatorToken.make(location, "*", Operator.MULTIPLY);
                    input.pushback(c);
                }
                break;
            }
        case '+':
            {
                LocatedChar c = input.next();
                if (// 
                c.getCharacter() == '+')
                    nextToken = OperatorToken.make(location, "++", Operator.INC);
                else if (// 
                c.getCharacter() == '=')
                    nextToken = OperatorToken.make(location, "+=", Operator.PLUSEQ);
                else {
                    nextToken = OperatorToken.make(location, "+", Operator.ADD);
                    input.pushback(c);
                }
                break;
            }
        case '=':
            {
                LocatedChar c = input.next();
                if (// 
                c.getCharacter() == '=')
                    nextToken = OperatorToken.make(location, "==", Operator.EQ);
                else {
                    nextToken = OperatorToken.make(location, "=", Operator.ASSIGN);
                    input.pushback(c);
                }
                break;
            }
        case '!':
            nextToken = OperatorToken.make(location, "!", Operator.PRINT);
            break;
        case '/':
            nextToken = OperatorToken.make(location, "/", Operator.DIVIDE);
            break;
        case '-':
            {
                LocatedChar c = input.next();
                if (// 
                c.getCharacter() == '-')
                    nextToken = OperatorToken.make(location, "--", Operator.DEC);
                else if (// 
                c.getCharacter() == '=')
                    nextToken = OperatorToken.make(location, "-=", Operator.MINUSEQ);
                else {
                    nextToken = OperatorToken.make(location, "-", Operator.MINUS);
                    input.pushback(c);
                }
                break;
            }
        case '%':
            nextToken = OperatorToken.make(location, "%", Operator.MODULO);
            break;
        case '|':
            nextToken = OperatorToken.make(location, "|", Operator.OR);
            break;
        case '&':
            nextToken = OperatorToken.make(location, "&", Operator.AND);
            break;
        case '~':
            {
                LocatedChar c = input.next();
                if (// 
                c.getCharacter() == '=')
                    nextToken = OperatorToken.make(location, "~=", Operator.NOTEQ);
                else {
                    nextToken = OperatorToken.make(location, "~", Operator.NOT);
                    input.pushback(c);
                }
                break;
            }
        case '@':
            nextToken = OperatorToken.make(location, "@", Operator.AT);
            break;
        case '<':
            {
                LocatedChar c = input.next();
                if (// 
                c.getCharacter() == '=')
                    nextToken = OperatorToken.make(location, "<=", Operator.LTOREQ);
                else {
                    nextToken = OperatorToken.make(location, "<", Operator.LT);
                    input.pushback(c);
                }
                break;
            }
        case '>':
            {
                LocatedChar c = input.next();
                if (// 
                c.getCharacter() == '=')
                    nextToken = OperatorToken.make(location, ">=", Operator.GTOREQ);
                else {
                    nextToken = OperatorToken.make(location, ">", Operator.GT);
                    input.pushback(c);
                }
                break;
            }
        case '(':
            nextToken = OperatorToken.make(location, "(", Operator.LBRACKET);
            break;
        case ')':
            nextToken = OperatorToken.make(location, ")", Operator.RBRACKET);
            break;
        case '[':
            nextToken = OperatorToken.make(location, "[", Operator.LINDEXING);
            break;
        case ']':
            nextToken = OperatorToken.make(location, "]", Operator.RINDEXING);
            break;
        default:
            throw new IllegalArgumentException("bad LocatedChar " + ch + "in scanOperator");
    }
}
