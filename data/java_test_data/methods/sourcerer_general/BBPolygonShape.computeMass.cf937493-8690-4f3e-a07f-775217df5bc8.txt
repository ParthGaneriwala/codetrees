public void computeMass(BBMassData massData, float density) {
    assert (m_vertexCount >= 2);
    // A line segment has zero mass.
    if (m_vertexCount == 2) {
        massData.center = mul(0.5f, add(m_vertices[0], m_vertices[1]));
        massData.mass = 0.0f;
        massData.I = 0.0f;
        return;
    }
    BBVec2 center = new BBVec2();
    center.set(0.0f, 0.0f);
    float area = 0.0f;
    float I = 0.0f;
    // pRef is the reference point for forming triangles.
    // It's location doesn't change the result (except for rounding error).
    BBVec2 pRef = new BBVec2(0.0f, 0.0f);
    final float k_inv3 = 1.0f / 3.0f;
    for (int i = 0; i < m_vertexCount; ++i) {
        // Triangle vertices.
        BBVec2 p1 = pRef;
        BBVec2 p2 = m_vertices[i];
        BBVec2 p3 = i + 1 < m_vertexCount ? m_vertices[i + 1] : m_vertices[0];
        BBVec2 e1 = sub(p2, p1);
        BBVec2 e2 = sub(p3, p1);
        float D = cross(e1, e2);
        float triangleArea = 0.5f * D;
        area += triangleArea;
        // Area weighted centroid
        center.add(mul(triangleArea, mul(k_inv3, add(p1, add(p2, p3)))));
        float px = p1.x, py = p1.y;
        float ex1 = e1.x, ey1 = e1.y;
        float ex2 = e2.x, ey2 = e2.y;
        float intx2 = k_inv3 * (0.25f * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5f * px * px;
        float inty2 = k_inv3 * (0.25f * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5f * py * py;
        I += D * (intx2 + inty2);
    }
    // Total mass
    massData.mass = density * area;
    // Center of mass
    assert (area > FLT_EPSILON);
    center.mul(1.0f / area);
    massData.center = center;
    // Inertia tensor relative to the local origin.
    massData.I = density * I;
}
