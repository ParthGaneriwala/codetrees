private Element toXML(Document doc) {
    Element files = doc.createElement(FILES_SECTION);
    Element elem;
    if (db != null) {
        elem = doc.createElement(DB);
        elem.setTextContent(db);
        files.appendChild(elem);
    }
    if (dataFiles != null) {
        for (String file : dataFiles) {
            elem = doc.createElement(DATA_FILE);
            elem.setTextContent(file);
            files.appendChild(elem);
        }
    }
    if (trainData != null) {
        for (int[] data : trainData) {
            assert (data.length > 0);
            StringBuilder sb = new StringBuilder();
            sb.append(data[0]);
            for (int i = 1; i < data.length; ++i) {
                sb.append(',');
                sb.append(data[i]);
            }
            elem = doc.createElement(TRAIN);
            elem.setTextContent(sb.toString());
            files.appendChild(elem);
        }
    }
    if (smoothData != null) {
        for (int[] data : smoothData) {
            assert (data.length > 0);
            StringBuilder sb = new StringBuilder();
            sb.append(data[0]);
            for (int i = 1; i < data.length; ++i) {
                sb.append(',');
                sb.append(data[i]);
            }
            elem = doc.createElement(SMOOTH);
            elem.setTextContent(sb.toString());
            files.appendChild(elem);
        }
    }
    if (interpolateData != null) {
        for (int[] data : interpolateData) {
            assert (data.length > 0);
            StringBuilder sb = new StringBuilder();
            sb.append(data[0]);
            for (int i = 1; i < data.length; ++i) {
                sb.append(',');
                sb.append(data[i]);
            }
            elem = doc.createElement(INTERPOLATE);
            elem.setTextContent(sb.toString());
            files.appendChild(elem);
        }
    }
    return files;
}
