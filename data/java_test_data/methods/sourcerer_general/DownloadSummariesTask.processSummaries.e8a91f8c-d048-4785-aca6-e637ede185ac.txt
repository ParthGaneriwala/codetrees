protected final void processSummaries() throws Exception {
    byte[] data = new byte[TaskConstants.BUFFER_SIZE];
    String zippedFilename = StringUtils.join(Arrays.asList(filename, TaskConstants.FILE_TYPE_ZIP), ".");
    FileOutputStream outputStream = new FileOutputStream(new File(TaskUtils.getZippedOutputPath(), zippedFilename));
    ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(outputStream));
    File inputPath = TaskUtils.getSummaryOutputPath();
    File[] files = inputPath.listFiles();
    for (File file : files) {
        // content of the root output folder are summaryindex.sql and the folders for each summary type
        if (file.isFile()) {
            processedFilename = file.getName();
            FileInputStream inputStream = new FileInputStream(file);
            CipherInputStream origin = new CipherInputStream(inputStream, cipher);
            // the entry for summaryindex.sql is just the filename
            ZipEntry entry = new ZipEntry(file.getName());
            out.putNextEntry(entry);
            int count;
            while ((count = origin.read(data, 0, TaskConstants.BUFFER_SIZE)) != -1) out.write(data, 0, count);
            origin.close();
        } else {
            FileFilter fileFilter = new WildcardFileFilter(StringUtils.join(Arrays.asList("*", Evaluator.FILE_TYPE_PDF), "."));
            File[] summaryFiles = file.listFiles(fileFilter);
            for (File summaryFile : summaryFiles) {
                processedFilename = summaryFile.getName();
                FileInputStream inputStream = new FileInputStream(summaryFile);
                CipherInputStream origin = new CipherInputStream(inputStream, cipher);
                // the entry for summary file is parent folder and the filename of the summary file
                String zipEntryName = StringUtils.join(Arrays.asList(file.getName(), summaryFile.getName()), File.separator);
                ZipEntry entry = new ZipEntry(zipEntryName);
                out.putNextEntry(entry);
                int count;
                while ((count = origin.read(data, 0, TaskConstants.BUFFER_SIZE)) != -1) out.write(data, 0, count);
                origin.close();
            }
        }
    }
    out.close();
}
