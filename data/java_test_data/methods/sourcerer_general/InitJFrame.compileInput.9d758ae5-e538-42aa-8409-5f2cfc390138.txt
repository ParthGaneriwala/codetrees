private void compileInput() {
    Lex lex = new Lex(file);
    lex.analyze();
    if (lex.isError()) {
        for (int i = 0; i < lex.errorList.size(); i++) {
            errorTextArea.append(lex.errorList.get(i) + "\n");
        }
    } else {
        Yacc yacc = new Yacc(lex.getList());
        yacc.parseProgram();
        if (yacc.isError()) {
            for (String error : yacc.errorList) {
                errorTextArea.append(error + "\n");
            // System.out.println(error);
            }
        } else {
            // �м���루��Ԫʽ�����
            quaternionTextArea.append("GLOBAL_CONST:\n");
            for (Constant con : yacc.getGlobal_const()) {
                quaternionTextArea.append("const\t" + con.toString() + "\n");
            }
            quaternionTextArea.append("GLOBAL_VAR:\n");
            for (String var : yacc.getGlobal_var()) {
                quaternionTextArea.append("int\t" + var + "\n");
            }
            quaternionTextArea.append("==========================================\n");
            for (Function func : yacc.getFuncList()) {
                quaternionTextArea.append("FUNCTION:\n");
                quaternionTextArea.append("==========================================\n");
                quaternionTextArea.append(func.getRetype() + "\t" + func.getName() + "\n");
                quaternionTextArea.append("PARA:\n");
                for (String para : func.getPara()) {
                    quaternionTextArea.append("int\t" + para + "\t" + func.getPmap().get(para) + "\n");
                }
                quaternionTextArea.append("CONST:\n");
                for (Constant con : func.getConst()) {
                    quaternionTextArea.append("const\t" + con.toString() + "\n");
                }
                quaternionTextArea.append("VAR:\n");
                for (String var : func.getVar()) {
                    quaternionTextArea.append("int\t" + var + "\t" + func.getVmap().get(var) + "\n");
                }
                for (Quaternion quater : func.getQuaterList()) {
                    if (quater.getResult() != null && quater.getResult().startsWith("@")) {
                        quaternionTextArea.append("int\t" + quater.getResult() + "\t" + func.getVmap().get(quater.getResult()) + "\n");
                    }
                }
                quaternionTextArea.append("QUATERNION:\n");
                quaternionTextArea.append("==========================================\n");
                for (Quaternion quater : func.getQuaterList()) {
                    quaternionTextArea.append(quater.toString() + "\n");
                }
            }
            // ���������
            Assembler asm = new Assembler(yacc.getGlobal_const(), yacc.getGlobal_var(), yacc.getFuncList(), outputfilepath);
            asm.generateCode();
            assembleTextArea.append(".386\n");
            assembleTextArea.append(".MODEL FLAT\n");
            assembleTextArea.append("include \\masm32\\include\\msvcrt.inc\n");
            assembleTextArea.append("includelib \\masm32\\lib\\msvcrt.lib\n");
            assembleTextArea.append("puts proto C\n");
            assembleTextArea.append("printf proto C\n");
            assembleTextArea.append("scanf proto C\n");
            assembleTextArea.append(".STACK 4096\n");
            assembleTextArea.append(".DATA\n");
            for (String var : asm.getGlobal_var()) {
                assembleTextArea.append("$" + var + " DWORD 0\n");
            }
            for (String s : asm.getStrlist()) {
                assembleTextArea.append(s + '\n');
            }
            assembleTextArea.append(".CODE\n");
            for (String str : asm.getOutput()) {
                assembleTextArea.append(str + '\n');
            }
            assembleTextArea.append("_main:\n");
            assembleTextArea.append("jmp near ptr @fmain\n");
            assembleTextArea.append("end _main\n");
            // ������
            if (asm.getWarn() != null) {
                errorTextArea.append(asm.getWarn() + "\n");
            }
            errorTextArea.append("����ɹ���������X86��ࡣ" + "\n");
        }
    // for (Function func : yacc.getFuncList()) {
    // System.out.println(func.getName());
    // for (String para : func.getPara()) {
    // System.out.print("\t" + para);
    // }
    // System.out.println("");
    // for (Quaternion quater : func.getQuaterList()) {
    // System.out.println(quater.getOperator() + "\t"
    // + quater.getOperend1() + "\t"
    // + quater.getOperend2() + "\t" + quater.getResult());
    // }
    // }
    }
}
