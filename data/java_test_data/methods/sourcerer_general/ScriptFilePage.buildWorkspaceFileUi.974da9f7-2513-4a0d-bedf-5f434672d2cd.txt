private Composite buildWorkspaceFileUi(final List<? extends ScriptTargetMapping> mappingList, Composite parent, final IFile file) {
    Composite main;
    {
        main = new Composite(parent, SWT.NONE);
        GridLayout topLayout = new GridLayout();
        topLayout.numColumns = 1;
        main.setLayout(topLayout);
    }
    new Label(main, SWT.NONE).setText(Messages.ScriptFilePage_CURRENTLY_LINKED_TO_LABEL);
    String[] launchLabels = new String[mappingList.size()];
    for (int i = 0; i < launchLabels.length; i++) {
        DebugTargetImpl debugTarget = mappingList.get(i).getConnectedTargetData().getDebugTarget();
        launchLabels[i] = debugTarget.getLaunch().getLaunchConfiguration().getName();
    }
    final Combo typesCombo = new Combo(main, SWT.READ_ONLY);
    typesCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    typesCombo.setFont(parent.getFont());
    typesCombo.setItems(launchLabels);
    if (launchLabels.length > 0) {
        typesCombo.select(0);
        final ScriptProperties properties = buildScriptProperties(main);
        fillScriptProperties(properties, mappingList.get(0));
        typesCombo.addSelectionListener(new SelectionListener() {

            public void widgetDefaultSelected(SelectionEvent e) {
            }

            public void widgetSelected(SelectionEvent e) {
                int index = typesCombo.getSelectionIndex();
                fillScriptProperties(properties, mappingList.get(index));
            }
        });
    }
    String[] pathSegments = file.getFullPath().segments();
    final int oldAccuratenessValue;
    try {
        oldAccuratenessValue = AccuratenessProperty.read(file);
    } catch (CoreException e) {
        throw new RuntimeException(e);
    }
    // Padding.
    new Label(main, SWT.NONE);
    Group autoDetectLookupGroup;
    {
        autoDetectLookupGroup = new Group(main, SWT.NONE);
        GridLayout layout = new GridLayout();
        layout.numColumns = 1;
        autoDetectLookupGroup.setLayout(layout);
    }
    autoDetectLookupGroup.setText(Messages.ScriptFilePage_AUTODETECT_PARAMETER);
    autoDetectLookupGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final AccuratenessControl accuratenessControl = new AccuratenessControl(autoDetectLookupGroup, pathSegments, oldAccuratenessValue);
    storeValueCallback = new Runnable() {

        private int storedValue = oldAccuratenessValue;

        @Override
        public void run() {
            int value = accuratenessControl.getAccuratenessValue();
            if (storedValue == value) {
                return;
            }
            String valueString = AccuratenessProperty.Parser.write(value);
            try {
                file.setPersistentProperty(AccuratenessProperty.KEY, valueString);
            } catch (CoreException e) {
                throw new RuntimeException(e);
            }
            storedValue = value;
        }
    };
    return main;
}
