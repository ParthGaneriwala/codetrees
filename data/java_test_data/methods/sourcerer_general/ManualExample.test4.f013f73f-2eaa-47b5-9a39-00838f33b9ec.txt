public void test4() {
    // Test data
    // Namespace for examples
    String egNS = PrintUtil.egNS;
    Model rawData = ModelFactory.createDefaultModel();
    Property first = rawData.createProperty(egNS, "concatFirst");
    Property second = rawData.createProperty(egNS, "concatSecond");
    Property p = rawData.createProperty(egNS, "p");
    Property q = rawData.createProperty(egNS, "q");
    Property r = rawData.createProperty(egNS, "r");
    Resource A = rawData.createResource(egNS + "A");
    Resource B = rawData.createResource(egNS + "B");
    Resource C = rawData.createResource(egNS + "C");
    A.addProperty(p, B);
    B.addProperty(q, C);
    r.addProperty(first, p);
    r.addProperty(second, q);
    // Rule example for
    String rules = "[r1: (?c eg:concatFirst ?p), (?c eg:concatSecond ?q) -> " + "     [r1b: (?x ?c ?y) <- (?x ?p ?z) (?z ?q ?y)] ]";
    Reasoner reasoner = new GenericRuleReasoner(Rule.parseRules(rules));
    // reasoner.setParameter(ReasonerVocabulary.PROPtraceOn, Boolean.TRUE);
    InfModel inf = ModelFactory.createInfModel(reasoner, rawData);
    // System.out.println("OK = " + inf.contains(A, r, C));
    Iterator list = inf.listStatements(A, null, (RDFNode) null);
    System.out.println("A * * =>");
    while (list.hasNext()) {
        System.out.println(" - " + list.next());
    }
}
