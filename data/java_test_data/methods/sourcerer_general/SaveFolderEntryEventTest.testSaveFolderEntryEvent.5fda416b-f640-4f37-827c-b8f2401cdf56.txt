public void testSaveFolderEntryEvent() throws Exception {
    // Insert project
    Project project = new Project();
    project.setTitle("Project SQL Test");
    project.setShortDescription("Project SQL Test Description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean result = project.insert(db);
    assertTrue("Project was not inserted", result);
    // Add a folder record
    FileFolder folder = new FileFolder();
    folder.setLinkModuleId(Constants.PROJECTS_FILES);
    folder.setLinkItemId(project.getId());
    folder.setSubject("Dummy Folder");
    folder.setEnteredBy(USER_ID);
    folder.setModifiedBy(USER_ID);
    folder.insert(db);
    assertTrue("Folder was not inserted", folder.getId() > -1);
    Project userProfile = ProjectUtils.loadProject(workflowUser.getProfileProjectId());
    BusinessProcess thisProcess = processList.get(PROCESS_NAME);
    assertTrue("Process not found...", thisProcess != null);
    context.setPreviousObject(null);
    context.setThisObject(folder);
    context.setProcessName(PROCESS_NAME);
    context.setProcess(thisProcess);
    context.setAttribute("userId", new Integer(USER_ID));
    context.setAttribute("user", WikiLink.generateLink(userProfile));
    context.setAttribute("folder", WikiLink.generateLink(folder));
    context.setAttribute("profile", WikiLink.generateLink(project));
    workflowManager.execute(context);
    // Now query the database and test to see if a history item was added for the specified test user Id.
    ProjectHistoryList historyList = new ProjectHistoryList();
    historyList.setProjectId(project.getId());
    historyList.setEnteredBy(USER_ID);
    historyList.setLinkObject(ProjectHistoryList.FOLDER_OBJECT);
    historyList.setEventType(ProjectHistoryList.CREATE_PROFILE_FOLDER_EVENT);
    historyList.setLinkItemId(folder.getId());
    historyList.buildList(db);
    assertTrue("History event was not recorded!", historyList.size() == 1);
    ProjectHistory history = historyList.get(0);
    assertEquals("Recorded event mismatch", "[[|" + userProfile.getId() + ":profile||" + userProfile.getTitle() + "]] " + "@[[|" + project.getId() + ":profile||Project SQL Test]] " + "created a folder [[|" + project.getId() + ":folder|" + folder.getId() + "|Dummy Folder]]", history.getDescription());
    // Delete the history item because the test is done (and any other needed objects)
    history.delete(db);
    // delete the folder
    folder.delete(db, (String) null);
    // Delete the project
    boolean deleteResult = project.delete(db, (String) null);
    assertTrue("Project wasn't deleted", deleteResult);
    // Try to find the previously deleted project
    ProjectList projectList = new ProjectList();
    projectList.setProjectId(project.getId());
    projectList.buildList(db);
    assertTrue("Project exists when it shouldn't -- id " + project.getId(), projectList.size() == 0);
}
