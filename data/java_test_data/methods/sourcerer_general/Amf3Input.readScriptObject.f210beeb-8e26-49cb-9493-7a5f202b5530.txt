private Object readScriptObject() throws IOException {
    int ref = readUInt29();
    if ((ref & 1) == 0) {
        return getObjectReference(ref >> 1);
    } else {
        ClassInfo ti = readTraits(ref);
        // ---------------------------
        // flex���ݹ������Ƿ�Ϊ�������
        boolean isRemoteObj = false;
        // �жϵ�ǰ�����Ƿ�Ϊ�������
        // ֻҪ���Ե�����appId��remoteId����������Ϊ�Ǵ������
        List props = ti.getProperties();
        // ��������
        int appIdPropIndex = -1, remoteIdPropIndex = -1;
        String appId = null, remoteId = null;
        if (props != null) {
            // 
            for (int i = 0; i < props.size(); i++) {
                String prop = props.get(i).toString();
                if (prop.equals("appId")) {
                    appIdPropIndex = i;
                    if (remoteIdPropIndex != -1) {
                        break;
                    }
                }
                if (prop.equals("remoteId")) {
                    remoteIdPropIndex = i;
                    if (appIdPropIndex != -1) {
                        break;
                    }
                }
            }
        }
        if (appIdPropIndex != -1 && remoteIdPropIndex != -1) {
            // �������Զ��߱�
            isRemoteObj = true;
            int len = ti.getProperties().size();
            for (int i = 0; i < len; i++) {
                Object value = readObject();
                if (i == appIdPropIndex) {
                    if (value != null) {
                        appId = value.toString();
                    }
                }
                if (i == remoteIdPropIndex) {
                    if (value != null) {
                        remoteId = value.toString();
                    }
                }
            }
            Object obj = TypeFactory.Object_Pool.getObject(remoteId);
            objectTable.add(obj);
            return obj;
        }
        // ---------------------------
        String className = ti.getClassName();
        boolean externalizable = ti.isExternalizable();
        /*PropertyProxy proxy = null;
            // Check for any registered class aliases 
            String aliasedClass = ClassAliasRegistry.getRegistry().getClassName(className);
            if (aliasedClass != null)
                className = aliasedClass;
            */
        Object object = TypeFactory.getInstance(className);
        // Remember our instance in the object table
        int objectId = objectTable.size();
        objectTable.add(object);
        if (externalizable) {
            if (object instanceof ExternalizableObj) {
                ((ExternalizableObj) object).readValue(this);
            }
        } else {
            int len = ti.getProperties().size();
            for (int i = 0; i < len; i++) {
                String propName = ti.getProperty(i);
                Object value = readObject();
                TypeFactory.setValue(object, propName, value);
            }
            if (ti.isDynamic()) {
                for (; ; ) {
                    String name = readString();
                    if (name == null || name.length() == 0)
                        break;
                    Object value = readObject();
                    TypeFactory.setValue(object, name, value);
                }
            }
        }
        return object;
    }
}
