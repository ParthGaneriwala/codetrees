// methodTypes
private methodTypes decodeMethodDesc(String methodDesc) {
    methodTypes types = null;
    if (methodDesc != null) {
        int len = methodDesc.length();
        int ix = 0;
        types = new methodTypes();
        if (methodDesc.charAt(ix) == '(') {
            String typeName;
            char ch;
            // array dimension count
            int dimCnt;
            boolean first_type = true;
            for (ix++; ix < len && methodDesc.charAt(ix) != ')'; ix++) {
                ch = methodDesc.charAt(ix);
                dimCnt = 0;
                // pick up the array dimension description
                while (ch == '[') {
                    dimCnt++;
                    ix++;
                    ch = methodDesc.charAt(ix);
                }
                if (ch == 'L') {
                    // The type is a class (represented by a
                    // class path)
                    String objName;
                    int jx;
                    // ix is now the String index following the 'L'
                    ix++;
                    // the object name
                    for (jx = ix; jx < len && methodDesc.charAt(jx) != ';'; jx++) /* nada */
                    ;
                    objName = methodDesc.substring(ix, jx);
                    typeName = objNameFormat.toDotSeparator(objName);
                    // ix now points to the ';'
                    ix = jx;
                } else if (typeDesc.isTypeChar(ch)) {
                    // the character is a base type character, so get the
                    // corresponding type name.
                    typeName = typeDesc.charToType(ch);
                } else {
                    errorMessage.errorPrint("decodeMethodDesc: unexpected char");
                    typeName = null;
                }
                // add the array dimensions to the end of the type
                for (int i = 0; i < dimCnt; i++) {
                    typeName = typeName + "[]";
                }
                if (typeName != null) {
                    if (first_type) {
                        first_type = false;
                        types.argList.append(typeName);
                    } else {
                        types.argList.append(", ");
                        types.argList.append(typeName);
                    }
                }
            }
            // for
            if (ix < len && methodDesc.charAt(ix) == ')') {
                // get the return type
                ix++;
                ch = methodDesc.charAt(ix);
                if (// return type is void
                ch == 'V')
                    types.returnType = "void";
                else if (ch == 'L') {
                    ix++;
                    typeName = methodDesc.substring(ix);
                    types.returnType = objNameFormat.toDotSeparator(typeName);
                } else if (typeDesc.isTypeChar(ch)) {
                    types.returnType = typeDesc.charToType(ch);
                }
            } else
                errorMessage.errorPrint("decodeMethodDesc: ')' expected");
        } else
            errorMessage.errorPrint("decodeMethodDesc: '(' expected");
    }
    return types;
}
