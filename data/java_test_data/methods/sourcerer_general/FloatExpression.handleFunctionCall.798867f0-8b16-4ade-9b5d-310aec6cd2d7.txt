@Override
protected Object handleFunctionCall(String function, int arity) throws Exception {
    UnaryOperation result;
    if (function.equals("clock")) {
        assertArity("clock", arity, 0, 1);
        Clock clock = new Clock();
        clock.scope = (arity == 1) ? (String) _output.pop() : "";
        return clock;
    } else if (function.equals("pow")) {
        assertArity("pow", arity, 2, 2);
        Pow pow = new Pow();
        pow.secondOperand = (FloatExpression) _output.pop();
        pow.firstOperand = (FloatExpression) _output.pop();
        return pow;
    } else if (function.equals("noise2")) {
        assertArity("noise2", arity, 2, 2);
        Noise2 noise = new Noise2();
        noise.secondOperand = (FloatExpression) _output.pop();
        noise.firstOperand = (FloatExpression) _output.pop();
        return noise;
    } else if (function.equals("exp")) {
        result = new Exp();
    } else if (function.equals("sin")) {
        result = new Sin();
    } else if (function.equals("cos")) {
        result = new Cos();
    } else if (function.equals("tan")) {
        result = new Tan();
    } else if (function.equals("square")) {
        result = new Square();
    } else if (function.equals("triangle")) {
        result = new Triangle();
    } else if (function.equals("ramp")) {
        result = new Ramp();
    } else if (function.equals("saw")) {
        result = new Saw();
    } else if (function.equals("noise1")) {
        result = new Noise1();
    } else {
        return super.handleFunctionCall(function, arity);
    }
    assertArity(function, arity, 1, 1);
    result.operand = (FloatExpression) _output.pop();
    return result;
}
