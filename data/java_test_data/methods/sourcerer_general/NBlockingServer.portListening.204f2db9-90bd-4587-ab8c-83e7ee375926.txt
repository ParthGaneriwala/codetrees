@SuppressWarnings("unchecked")
public void portListening() throws IOException, InterruptedException {
    // 服务器端通道注册OP_ACCEPT事件
    SelectionKey acceptKey = this.serverChannel.register(this.selector, SelectionKey.OP_ACCEPT);
    // 当有已注册的事件发生时,select()返回值将大于0
    while (acceptKey.selector().select() > 0) {
        System.out.println("event happened");
        // 取得所有已经准备好的所有选择键
        Set readyKeys = this.selector.selectedKeys();
        // 使用迭代器对选择键进行轮询
        Iterator i = readyKeys.iterator();
        while (i.hasNext()) {
            SelectionKey key = (SelectionKey) i.next();
            // 删除当前将要处理的选择键
            i.remove();
            if (key.isAcceptable()) {
                // 如果是有客户端连接请求
                System.out.println("more client connect in!");
                ServerSocketChannel nextReady = (ServerSocketChannel) key.channel();
                // 获取客户端套接字
                SocketChannel s = nextReady.accept();
                // 设置对应的通道为异步方式并注册感兴趣事件
                s.configureBlocking(false);
                SelectionKey readWriteKey = s.register(this.selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);
                // TODO
                // s.getChannel().configureBlocking(false);
                // SelectionKey readWriteKey = s.getChannel().register(
                // this.selector,
                // SelectionKey.OP_READ | SelectionKey.OP_WRITE);
                // 将注册的事件与该套接字联系起来
                readWriteKey.attach(s);
                // 将当前建立连接的客户端套接字及对应的通道存放在哈希表//clientChannelMap中
                // this.clientChannelMap.put(s, new ClientChInstance(s.getChannel()));
                this.clientChannelMap.put(s, new ClientChInstance(s));
            } else if (key.isReadable()) {
                // 如果是通道读准备好事件
                System.out.println("Readable");
                // 取得选择键对应的通道和套接字
                // SelectableChannel nextReady = (SelectableChannel) key.channel();
                Socket socket = (Socket) key.attachment();
                // 处理该事件，处理方法已封装在类ClientChInstance中
                this.readFromChannel(socket.getChannel(), (ClientChInstance) this.clientChannelMap.get(socket));
            } else if (key.isWritable()) {
                // 如果是通道写准备好事件
                System.out.println("writeable");
                // 取得套接字后处理，方法同上
                Socket socket = (Socket) key.attachment();
                SocketChannel channel = (SocketChannel) socket.getChannel();
                this.writeToChannel(channel, "This is from server!");
            }
        }
    }
}
