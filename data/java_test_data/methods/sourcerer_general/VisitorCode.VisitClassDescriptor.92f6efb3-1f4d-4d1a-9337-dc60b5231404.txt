public void VisitClassDescriptor(ClassType classe) {
    this.GetUtils().AddClassPointeur(classe.class_id, this.GetUtils().IncrSP());
    int classInhPointer = this.GetUtils().GetClassPointeur(classe.class_inh.id_val);
    // Stockage du pointeur de sa classe m�re
    this.Comment("descripteur de la classe : " + classe.class_id);
    this.Emit("PUSHI " + classInhPointer);
    ClassSymbolTable classSymbolTable = this.GetSymbolTable().GetClass(classe.class_id);
    // parcours des m�thodes de la classe et de ces sur-classes
    HashMap<String, ClassSymbolTable> methodMap = new HashMap<String, ClassSymbolTable>();
    this.VisitMethodDescriptor(classSymbolTable, methodMap);
    int offset = 1;
    ClassSymbolTable superClassSymbolTable = classSymbolTable.GetSuperClass();
    if (superClassSymbolTable != null) {
        Iterator superClassMethodLabelIter = superClassSymbolTable.GetMethodLabelIterator();
        while (superClassMethodLabelIter.hasNext()) {
            String methodLabel = ((String) superClassMethodLabelIter.next());
            ClassSymbolTable methodClassSymbolTable = methodMap.get(methodLabel);
            classSymbolTable.AddMethodLabel(methodLabel);
            classSymbolTable.AddMethodOffset(methodLabel, offset);
            // this.Comment("offset : " + offset);
            offset++;
            methodLabel = this.GetUtils().GetMethodLabel(methodClassSymbolTable.mClassName, methodLabel);
            // Stockage des adresses des m�thodes
            this.Emit("PUSHA " + methodLabel);
            this.GetUtils().IncrSP();
        }
    }
    Iterator methodIter = classSymbolTable.GetMethodMapIterator();
    while (methodIter.hasNext()) {
        String methodName = ((String) methodIter.next());
        Vector<Vector<String>> listOfArgTypeList = classSymbolTable.GetVarTypeList(methodName);
        for (Vector<String> argTypeList : listOfArgTypeList) {
            String methodLabel = this.GetUtils().GetMethodLabel(methodName, argTypeList);
            if (superClassSymbolTable.MethodLabelExist(methodLabel)) {
                continue;
            }
            classSymbolTable.AddMethodLabel(methodLabel);
            classSymbolTable.AddMethodOffset(methodLabel, offset);
            // this.Comment("offset : " + offset);
            offset++;
            methodLabel = this.GetUtils().GetMethodLabel(classSymbolTable.mClassName, methodLabel);
            // Stockage des adresses des m�thodes
            this.Emit("PUSHA " + methodLabel);
            this.GetUtils().IncrSP();
        }
    }
    // D�finition des offsets des attributs
    classSymbolTable.ComputeAttributsOffset();
}
