public void checkSim() {
    long checkTime = System.currentTimeMillis();
    if ((simStatus == 4) && ((checkTime - simDisconnectedOn) > simDisconnectedGracePeriod)) {
        sendLine("tell " + simchannel + " Giving up on disconnected sim giver " + simGiver[currentSimGiver] + " after 30 Minutes.");
        simStatus = 0;
        simLastWarningOut = false;
        for (int i = 0; i < simParticipant.size(); i++) {
            sendLine("-notify " + (simParticipant.elementAt(i).toString()));
        }
        simParticipant.removeAllElements();
        sendLine("message " + simGiver[currentSimGiver] + " You got disconnected during your sim and were unable to return for 30 Minutes. I aborted this sim.");
        sendLine("-notify " + simGiver[currentSimGiver]);
        sendLine("qclear ROBOKieb");
        disauthenticate();
    }
    if ((simStatus == 1) && ((checkTime - simInitializedOn) > simPrepareGracePeriod)) {
        sendLine("tell " + simGiver[currentSimGiver] + " Forgot on your sim in preparation? I aborted after 5 Minutes. You can restart with 'tell ROBOKieb makesim'.");
        simStatus = 0;
        sendLine("-notify " + simGiver[currentSimGiver]);
        disauthenticate();
    }
    if ((simStatus == 2) && ((simScheduledStart - checkTime) < simStartWarnPeriod) && !(simLastWarningOut)) {
        sendLine("tell " + simGiver[currentSimGiver] + " *** WARNING *** Your sim will start automatically in about 3 Minutes. You currently have " + simParticipant.size() + " players.");
        sendLine("tell " + simchannel + " *** WARNING *** " + simGiver[currentSimGiver] + "'s sim will start in about 3 Minutes or less. 'tell " + simchannel + " sim?' for info. 'play " + simGiver[currentSimGiver] + "' to join.");
        simLastWarningOut = true;
    }
    if ((simStatus == 2) && (checkTime - simScheduledStart > 0)) {
        if (simParticipant.size() < simMinPlayer[currentSimGiver]) {
            sendLine("tell " + simGiver[currentSimGiver] + " Scheduled sim start reached, but you only got " + simParticipant.size() + ", while your limit is " + simMinPlayer[currentSimGiver] + ". Aborted the sim.");
            sendLine("tell " + simchannel + " The sim of " + simGiver[currentSimGiver] + " found only " + simParticipant.size() + " players, below the mimimum of " + simMinPlayer[currentSimGiver] + ". Aborting this sim.");
            simStatus = 0;
            simLastWarningOut = false;
            for (int i = 0; i < simParticipant.size(); i++) {
                sendLine("-notify " + (simParticipant.elementAt(i).toString()));
            }
            simParticipant.removeAllElements();
            sendLine("-notify " + simGiver[currentSimGiver]);
            sendLine("qclear ROBOKieb");
            disauthenticate();
        } else {
            sendLine("spoof " + simGiver[currentSimGiver] + " startsim");
            sendLine("tell " + simchannel + " The sim of " + simGiver[currentSimGiver] + " has started! Good luck all.");
            simStatus = 3;
            simLastWarningOut = false;
            simStartOn = checkTime;
        }
    }
}
