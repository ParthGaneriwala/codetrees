public byte[] getFile(String filename, long size, long offset, javax.swing.JProgressBar pBar) throws Exception {
    int off = 0;
    int len = 1024;
    int retLen = 0;
    int tmpLen = 0;
    byte[] b = new byte[(int) size + 1024];
    System.out.println("[RemotePeer] downloading file " + filename + "(" + (int) size + ") goes to " + b.length + "with offset " + offset);
    try {
        Socket s = this.createSocket();
        // Send Command
        Command cmd = new Command();
        cmd.setCmdEnum(CmdEnum.GET);
        cmd.setPara1(filename);
        cmd.setPara2(String.valueOf(offset));
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream out = new ObjectOutputStream(bos);
        out.writeObject(cmd);
        OutputStream os = s.getOutputStream();
        os.write(bos.toByteArray());
        InputStream i = s.getInputStream();
        while ((tmpLen = i.read(b, off, len)) != -1) {
            System.out.println("[RemotePeer] rcv chunk " + off + " " + tmpLen);
            off = off + tmpLen;
            System.out.println("[RemotePeer] next offset: " + off);
            // update progress bar
            pBar.setValue(((int) offset) + off);
            retLen = retLen + tmpLen;
            if (this.isPause()) {
                break;
            }
        }
        if (retLen <= 0) {
            throw new Exception("File has length 0");
        }
        System.out.println("[RemotePeer] downloaded " + retLen + " bytes");
        this.closeSocket(s);
    } catch (Exception e) {
        System.out.println("[RemotePeer] exception while rcving file: " + e.toString());
        throw e;
    }
    byte[] resultBytes = new byte[retLen];
    System.arraycopy(b, 0, resultBytes, 0, retLen);
    return resultBytes;
}
