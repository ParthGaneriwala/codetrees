public Object execute(ExecutionEvent event) throws ExecutionException {
    IWorkbenchWindow activeWorkbenchWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (activeWorkbenchWindow == null) {
        return null;
    }
    String[] clips = ClipsModel.getINSTANCE().get();
    if (clips.length == 0) {
        return null;
    }
    IEditorPart activeEditor = activeWorkbenchWindow.getActivePage().getActiveEditor();
    if (activeEditor instanceof ITextEditor) {
        ITextEditor editor = (ITextEditor) activeEditor;
        Object adapter = (Control) editor.getAdapter(Control.class);
        if (adapter instanceof Control) {
            Control control = (Control) adapter;
            if (control instanceof StyledText) {
                StyledText styledText = (StyledText) control;
                if (!styledText.getEditable()) {
                    activeWorkbenchWindow.getShell().getDisplay().beep();
                    return null;
                }
                ListDialog listDialog = new ListDialog(activeWorkbenchWindow.getShell()) {

                    @Override
                    protected Control createDialogArea(Composite container) {
                        Composite composite = (Composite) super.createDialogArea(container);
                        final Text text = new Text(composite, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.READ_ONLY);
                        GridData gridData = new GridData(GridData.FILL_BOTH);
                        gridData.heightHint = convertHeightInCharsToPixels(6);
                        text.setLayoutData(gridData);
                        getTableViewer().addSelectionChangedListener(new ISelectionChangedListener() {

                            public void selectionChanged(SelectionChangedEvent event) {
                                ISelection selection = event.getSelection();
                                if (selection instanceof IStructuredSelection) {
                                    IStructuredSelection structuredSelection = (IStructuredSelection) selection;
                                    if (structuredSelection.size() > 0) {
                                        text.setText(structuredSelection.getFirstElement().toString());
                                        return;
                                    }
                                }
                                text.setText("");
                            }
                        });
                        return composite;
                    }
                };
                listDialog.setHelpAvailable(false);
                listDialog.setAddCancelButton(true);
                listDialog.setContentProvider(new ArrayContentProvider());
                listDialog.setLabelProvider(new ClipLabelProvider());
                listDialog.setInput(clips);
                listDialog.setTitle("Select a clip to insert");
                if (listDialog.open() == Window.OK) {
                    Object[] results = listDialog.getResult();
                    if (results.length == 0) {
                        return null;
                    }
                    StringBuilder stringBuilder = new StringBuilder();
                    for (Object result : results) {
                        stringBuilder.append(String.valueOf(result));
                    }
                    String textToInsert = stringBuilder.toString();
                    int caretOffset = styledText.getCaretOffset();
                    styledText.insert(textToInsert);
                    styledText.setSelection(caretOffset + textToInsert.length(), caretOffset);
                }
            }
        }
    }
    return null;
}
