public RGBImage thinned(RGBImage source) {
    RGBImage retval;
    int w = source.getWidth();
    int h = source.getHeight();
    StructuringElement[] kernels = new StructuringElement[8];
    kernels[0] = new StructuringElement(new double[][] { { 0, 0, 0 }, { -1, 1, -1 }, { 1, 1, 1 } });
    kernels[1] = new StructuringElement(new double[][] { { -1, 0, 0 }, { 1, 1, 0 }, { -1, 1, -1 } });
    kernels[2] = new StructuringElement(new double[][] { { 1, -1, 0 }, { 1, 1, 0 }, { 1, -1, 0 } });
    kernels[3] = new StructuringElement(new double[][] { { -1, 1, -1 }, { 1, 1, 0 }, { -1, 0, 0 } });
    kernels[4] = new StructuringElement(new double[][] { { 1, 1, 1 }, { -1, 1, -1 }, { 0, 0, 0 } });
    kernels[5] = new StructuringElement(new double[][] { { -1, 1, -1 }, { 0, 1, 1 }, { 0, 0, -1 } });
    kernels[6] = new StructuringElement(new double[][] { { 0, -1, 1 }, { 0, 1, 1 }, { 0, -1, 1 } });
    kernels[7] = new StructuringElement(new double[][] { { 0, 0, -1 }, { 0, 1, 1 }, { -1, 1, -1 } });
    // new RGBImage(w,h);
    retval = source;
    int count = 0;
    RGBColor rgb = null;
    // assumes kernel is a square!
    int offset = kernels[0].getHeight() / 2;
    int z, y, x;
    boolean matched = false;
    // number of kernels
    int nk = 8;
    for (int f = 1; f < 100; f++) {
        matched = false;
        logger.info("Pass: " + f);
        for (z = 0; z < nk; z++) {
            for (y = offset; y < (h - offset); y++) {
                for (x = offset; x < (w - offset); x++) {
                    kernel = kernels[z];
                    offset = kernel.getHeight() / 2;
                    count = 0;
                    for (int i = (y - offset), k = 0; i <= y + offset; i++, k++) {
                        for (int j = (x - offset), l = 0; j <= x + offset; j++, l++) {
                            rgb = retval.getRGBColor(j, i);
                            int normalized = (int) rgb.getBlueN();
                            int kernelVal = (int) (kernel.getValue(l, k));
                            if (kernelVal == DONTCARE) {
                                count++;
                            } else if ((kernelVal == FOREGROUND) && (normalized == FOREGROUND)) {
                                count++;
                            } else if ((kernelVal == BACKGROUND) && (normalized == BACKGROUND)) {
                                count++;
                            }
                        }
                    }
                    if (count == 9) {
                        matched = true;
                        retval.setRGB(x, y, 0, 0, 0);
                    }
                }
                if (z == nk) {
                    rgb = source.getRGBColor(x, y);
                    retval.setRGB(x, y, rgb.getRed(), rgb.getGreen(), rgb.getBlue());
                }
            }
        }
        if (!matched)
            break;
    }
    return retval;
}
