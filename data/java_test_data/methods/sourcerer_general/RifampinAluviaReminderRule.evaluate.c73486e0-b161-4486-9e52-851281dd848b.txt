@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) {
    Result result = new Result();
    AntiRetroViralRule antiRetroViralRule = new AntiRetroViralRule();
    // prepare the encounter types
    parameters.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_NONCLINICALMEDICATION));
    Result arvResults = antiRetroViralRule.eval(context, patientId, parameters);
    TuberculosisRule tuberculosisRule = new TuberculosisRule();
    parameters.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_NONCLINICALMEDICATION));
    Result tbResults = tuberculosisRule.eval(context, patientId, parameters);
    TuberculosisTreatmentRule tuberculosisTreatmentRule = new TuberculosisTreatmentRule();
    parameters.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_NONCLINICALMEDICATION));
    Result tbTreatmentResults = tuberculosisTreatmentRule.eval(context, patientId, parameters);
    List<Concept> ritonavirConcepts = Context.getConceptService().getConceptsByName(EvaluableNameConstants.RITONAVIR);
    List<Concept> lopinavirConcepts = Context.getConceptService().getConceptsByName(EvaluableNameConstants.LOPINAVIR);
    List<Concept> rifampicinConcepts = Context.getConceptService().getConceptsByName(EvaluableNameConstants.RIFAMPICIN);
    Boolean rifampicinExists = Boolean.FALSE;
    Boolean aluviaExists = Boolean.FALSE;
    Integer tbTreatmentCounter = 0;
    while (tbTreatmentCounter < tbTreatmentResults.size() && !rifampicinExists) {
        Integer conceptCounter = 0;
        Result tbTreatmentResult = tbTreatmentResults.get(tbTreatmentCounter++);
        while (conceptCounter < rifampicinConcepts.size() && !rifampicinExists) {
            Concept rifampicinConcept = rifampicinConcepts.get(conceptCounter++);
            if (OpenmrsUtil.nullSafeEquals(tbTreatmentResult.toConcept(), rifampicinConcept))
                rifampicinExists = Boolean.TRUE;
        }
    }
    Integer tbCounter = 0;
    while (tbCounter < tbResults.size() && !rifampicinExists) {
        Integer conceptCounter = 0;
        Result tbResult = tbResults.get(tbCounter++);
        while (conceptCounter < rifampicinConcepts.size() && !rifampicinExists) {
            Concept rifampicinConcept = rifampicinConcepts.get(conceptCounter++);
            if (OpenmrsUtil.nullSafeEquals(tbResult.toConcept(), rifampicinConcept))
                rifampicinExists = Boolean.TRUE;
        }
    }
    Integer arvCounter = 0;
    while (arvCounter < arvResults.size() && !aluviaExists) {
        Result arvResult = arvResults.get(arvCounter++);
        Integer ritonavirCounter = 0;
        while (ritonavirCounter < ritonavirConcepts.size() && !aluviaExists) {
            Concept ritonavirConcept = ritonavirConcepts.get(ritonavirCounter++);
            if (OpenmrsUtil.nullSafeEquals(arvResult.toConcept(), ritonavirConcept))
                aluviaExists = Boolean.TRUE;
        }
        Integer lopinavirCounter = 0;
        while (lopinavirCounter < lopinavirConcepts.size() && !aluviaExists) {
            Concept lopinavirConcept = lopinavirConcepts.get(lopinavirCounter++);
            if (OpenmrsUtil.nullSafeEquals(arvResult.toConcept(), lopinavirConcept))
                aluviaExists = Boolean.TRUE;
        }
    }
    if (rifampicinExists && aluviaExists)
        result.add(new Result(String.valueOf(parameters.get(ReminderParameters.DISPLAYED_REMINDER_TEXT))));
    return result;
}
