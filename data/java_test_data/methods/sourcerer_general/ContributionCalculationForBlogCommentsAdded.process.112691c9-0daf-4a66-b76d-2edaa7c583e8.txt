public void process(Connection db, LookupContribution lookupContribution) throws SQLException {
    lastRun = lookupContribution.getRunDate();
    currentRun = new Timestamp(System.currentTimeMillis());
    userPoints = new HashMap<String, Integer>();
    // Page through the updates just in case there are lots of users do 100 at a time...
    PagedListInfo pagedListInfo = new PagedListInfo();
    pagedListInfo.setItemsPerPage(100);
    pagedListInfo.setDefaultSort("entered", "DESC");
    // Use the paged list to paged through all users
    BlogPostCommentList postCommentList = new BlogPostCommentList();
    postCommentList.setPagedListInfo(pagedListInfo);
    postCommentList.setAlertRangeStart(lastRun);
    postCommentList.setAlertRangeEnd(currentRun);
    postCommentList.buildList(db);
    ArrayList<String> userNewsArticleList = new ArrayList<String>();
    while (postCommentList.size() > 0) {
        Iterator newsArticleCommentItr = postCommentList.iterator();
        while (newsArticleCommentItr.hasNext()) {
            BlogPostComment blogPostComment = (BlogPostComment) newsArticleCommentItr.next();
            int userId = blogPostComment.getEnteredBy();
            String userNewsComment = userId + "-" + blogPostComment.getNewsId();
            // Insure that multiple comments for the same blog are not counted.
            if (!userNewsArticleList.contains(userNewsComment)) {
                userNewsArticleList.add(userNewsComment);
                BlogPost blogPost = new BlogPost(db, blogPostComment.getNewsId());
                int projectId = blogPost.getProjectId();
                String userIdAndProjectId = userId + "-" + projectId;
                if (userPoints.containsKey(userIdAndProjectId)) {
                    int currentPoints = userPoints.get(userIdAndProjectId);
                    currentPoints = currentPoints + lookupContribution.getPointsAwarded();
                    userPoints.put(userIdAndProjectId, currentPoints);
                } else {
                    userPoints.put(userIdAndProjectId, lookupContribution.getPointsAwarded());
                }
            }
        }
        // Always reset the list or else the records are included on buildList again
        postCommentList.clear();
        if (pagedListInfo.getPage() < pagedListInfo.getNumberOfPages()) {
            pagedListInfo.setCurrentPage(pagedListInfo.getPage() + 1);
            postCommentList.buildList(db);
        }
    }
    updatePoints(db, lookupContribution);
}
