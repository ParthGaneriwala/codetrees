public void start(int x, int y, BaseTetrisPiece piece) {
    this.x = x;
    this.y = y;
    this.alpha = 1.0f;
    this.isStarted = true;
    int height = piece.maxY() - piece.minY() + 1;
    int width = piece.maxX() - piece.minX() + 1;
    this.xOffset = piece.minX();
    this.yOffset = piece.minY();
    grid = new GhostBorder[height][width];
    boolean[][] pieceGrid = new boolean[height][width];
    int i, j;
    for (i = 0; i < height; i++) for (j = 0; j < width; j++) {
        grid[i][j] = new GhostBorder();
        pieceGrid[i][j] = false;
    }
    for (i = 0; i < piece.maxCoords(); i++) {
        pieceGrid[piece.y(i) - yOffset][piece.x(i) - xOffset] = true;
    }
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            /**
             * Check that it is an actual piece
             */
            if (pieceGrid[i][j]) {
                /**
                 * Check for cell below
                 */
                if (i > 0 && pieceGrid[i - 1][j])
                    grid[i][j].bottom = false;
                else
                    grid[i][j].bottom = true;
                /**
                 * Check for cell above
                 */
                if (i < height - 1 && pieceGrid[i + 1][j])
                    grid[i][j].top = false;
                else
                    grid[i][j].top = true;
                /**
                 * Check for cell to the left
                 */
                if (j > 0 && pieceGrid[i][j - 1])
                    grid[i][j].left = false;
                else
                    grid[i][j].left = true;
                /**
                 * Check for cell to the right
                 */
                if (j < width - 1 && pieceGrid[i][j + 1])
                    grid[i][j].right = false;
                else
                    grid[i][j].right = true;
            }
        }
    }
}
