public ActionForward save(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    if (log.isDebugEnabled()) {
        log.debug("Entering 'save' method");
    }
    EPCDynamicForm epcDynamicForm = (EPCDynamicForm) form;
    String epcId = epcDynamicForm.getEpcDynamicId();
    EPCDynamicManager mgr = (EPCDynamicManager) getBean("epcDynamicManager");
    ActionMessages errors = form.validate(mapping, request);
    if (!errors.isEmpty()) {
        saveErrors(request, errors);
        if (epcId == null || epcId.trim().equals("")) {
            return mapping.findForward("failure");
        } else {
            EPCDynamic epcDynamic = mgr.getEpcDynamic(Long.parseLong(epcId));
            BeanUtils.copyProperties(epcDynamicForm, convert(epcDynamic));
            epcDynamicForm.setEpcDynamicId(epcId);
            epcDynamicForm.setEpcDynamicName(epcDynamic.getEpc().getEpcName());
            request.setAttribute(Constants.EPC_DYNAMIC_STRUCTURE_LIST, epcDynamic.getEpcDynamicValues());
            request.setAttribute("epcDataType", epcDynamic.getEpc().getEpcDataType());
            updateFormBean(mapping, request, epcDynamicForm);
            return mapping.findForward("failure");
        }
    }
    // Extract attributes and parameters we will need
    ActionMessages messages = new ActionMessages();
    int seekFrom = Integer.parseInt(epcDynamicForm.getEpcDynamicSeekFrom());
    int seekTo = Integer.parseInt(epcDynamicForm.getEpcDynamicSeekTo());
    if (seekTo < 0 || seekFrom < 0 || seekTo <= seekFrom) {
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.epc.length2"));
        saveErrors(request, errors);
        updateFormBean(mapping, request, epcDynamicForm);
        return mapping.findForward("failure");
    }
    EPCDynamic epcDynamic = new EPCDynamic();
    EPC epc = new EPC();
    // Exceptions are caught by ActionExceptionHandler
    // all we need to persist is the parent object
    EPCManager epcMgr = (EPCManager) getBean("epcManager");
    if (epcId != null && !epcId.trim().equals("")) {
        epcDynamic = (EPCDynamic) mgr.getEpcDynamic(Long.parseLong(epcDynamicForm.getEpcDynamicId()));
        epcDynamic.setEpcDynamicSeekFrom(Integer.parseInt(epcDynamicForm.getEpcDynamicSeekFrom()));
        epcDynamic.setEpcDynamicSeekTo(Integer.parseInt(epcDynamicForm.getEpcDynamicSeekTo()));
        // epc.setEpcDynamicName(epcForm.getEpcDynamicName());
        epcDynamic.setEpcDynamicDescription(epcDynamicForm.getEpcDynamicDescription());
    } else {
        BeanUtils.copyProperties(epcDynamic, epcDynamicForm);
        EPC tempEpc = epcMgr.getEpc(epcDynamicForm.getEpcDynamicName());
        if (tempEpc != null) {
            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.existing.dynamicEpc", epcDynamicForm.getEpcDynamicName()));
            saveErrors(request, errors);
            updateFormBean(mapping, request, epcDynamicForm);
            return mapping.findForward("failure");
        }
        epc.setEpcName(epcDynamicForm.getEpcDynamicName());
        epc.setEpcType("Dynamic");
        epc.setEpcDataType(epcDynamicForm.getEpcDataType());
        epc.initAudit(this.getLoginUser());
        epcDynamic.setEpc(epc);
        try {
            epcMgr.saveEpc(epc);
        } catch (Exception e) {
            log.warn(e.getMessage());
            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.epcDynamic.save", e.getMessage()));
            saveErrors(request, errors);
            BeanUtils.copyProperties(epcDynamicForm, convert(epcDynamic));
            updateFormBean(mapping, request, epcDynamicForm);
            return mapping.findForward("others");
        }
    }
    epcDynamic.initAudit(this.getLoginUser());
    try {
        mgr.saveEpcDynamic(epcDynamic);
    } catch (Exception e) {
        log.warn(e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.epcDynamic.save", e.getMessage()));
        saveErrors(request, errors);
        BeanUtils.copyProperties(epcDynamicForm, convert(epcDynamic));
        updateFormBean(mapping, request, epcDynamicForm);
        return mapping.findForward("failure");
    }
    BeanUtils.copyProperties(epcDynamicForm, convert(epcDynamic));
    updateFormBean(mapping, request, epcDynamicForm);
    // add success messages
    if (epcId == null || epcId.trim().equals("")) {
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("epcDynamic.added", epcDynamic.getEpc().getEpcName()));
        saveMessages(request.getSession(), messages);
        return mapping.findForward("success");
    } else {
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("epcDynamic.updated", epcDynamic.getEpc().getEpcName()));
        saveMessages(request.getSession(), messages);
        return mapping.findForward("success");
    }
}
