// documentation inherited
@Override
public void execute() throws BuildException {
    ResourceManager rsrcmgr = new ResourceManager("rsrc/");
    MessageManager msgmgr = new MessageManager("rsrc.i18n");
    rsrcmgr.initResourceDir("rsrc/");
    ConfigManager cfgmgr = new ConfigManager(rsrcmgr, msgmgr, "config/");
    cfgmgr.init();
    // read the file containing the config names
    Set<String> resources = Sets.newHashSet();
    try {
        BufferedReader in = new BufferedReader(new FileReader(_configfile));
        String line;
        ConfigGroup group = null;
        while ((line = in.readLine()) != null) {
            line = line.trim();
            if (line.length() == 0) {
                // ignore blank lines
                continue;
            }
            if (line.startsWith("[") && line.endsWith("]")) {
                // group header
                String name = line.substring(1, line.length() - 1);
                if ((group = cfgmgr.getGroup(name)) == null) {
                    log.warning("Invalid config group name.", "name", name);
                }
                continue;
            }
            if (group != null) {
                getResources(cfgmgr, group, line, resources);
            }
        }
    } catch (IOException e) {
        log.warning("Error reading config list.", "file", _configfile, e);
    }
    // read the file containing the resource names
    List<String> includes = Lists.newArrayList();
    try {
        BufferedReader in = new BufferedReader(new FileReader(_resourcefile));
        String line;
        while ((line = in.readLine()) != null) {
            if ((line = line.trim()).length() > 0) {
                includes.add(line);
            }
        }
    } catch (IOException e) {
        log.warning("Failed to read resource list.", "file", _resourcefile, e);
    }
    // scan the identified resources
    DirectoryScanner scanner = new DirectoryScanner();
    scanner.setBasedir("rsrc");
    scanner.setIncludes(includes.toArray(new String[includes.size()]));
    scanner.scan();
    for (String file : scanner.getIncludedFiles()) {
        if (!file.endsWith(".dat")) {
            continue;
        }
        PropertyUtil.getResources(cfgmgr, cfgmgr.getResourceConfig(file), resources);
    }
    // create a pattern set with the resources and assign it to the specified id
    PatternSet set = (PatternSet) getProject().createDataType("patternset");
    for (String resource : resources) {
        set.createInclude().setName(resource);
    }
    getProject().addReference(_id, set);
}
