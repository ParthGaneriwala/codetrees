private void resize(int axis, int origin, int size) {
    int delta = size - getPreferredSize(axis);
    if (!$assertionsDisabled && delta == 0)
        throw new AssertionError();
    boolean useMin = delta < 0;
    int springCount = springs.size();
    if (useMin)
        delta *= -1;
    java.util.List resizable = buildResizableList(axis, useMin);
    int resizableCount = resizable.size();
    if (resizableCount > 0) {
        int sDelta = delta / resizableCount;
        int slop = delta - sDelta * resizableCount;
        int[] sizes = new int[springCount];
        int sign = useMin ? -1 : 1;
        for (int counter = 0; counter < resizableCount; counter++) {
            SpringDelta springDelta = (SpringDelta) resizable.get(counter);
            if (counter + 1 == resizableCount)
                sDelta += slop;
            springDelta.delta = Math.min(sDelta, springDelta.delta);
            delta -= springDelta.delta;
            if (springDelta.delta != sDelta && counter + 1 < resizableCount) {
                sDelta = delta / (resizableCount - counter - 1);
                slop = delta - sDelta * (resizableCount - counter - 1);
            }
            Spring spring = getSpring(springDelta.index);
            sizes[springDelta.index] = sign * springDelta.delta;
        }
        for (int counter = 0; counter < springCount; counter++) {
            Spring spring = getSpring(counter);
            int sSize = spring.getPreferredSize(axis) + sizes[counter];
            spring.setSize(axis, origin, sSize);
            origin += sSize;
        }
    } else {
        for (int counter = 0; counter < springCount; counter++) {
            Spring spring = getSpring(counter);
            int sSize;
            if (useMin)
                sSize = spring.getMinimumSize(axis);
            else
                sSize = spring.getMaximumSize(axis);
            spring.setSize(axis, origin, sSize);
            origin += sSize;
        }
    }
}
