public void div(int a) {
    if ((this.exponent < 0 && this.mantissa != 0))
        return;
    if (a < 0) {
        sign ^= 1;
        a = -a;
    }
    if ((this.exponent < 0 && this.mantissa == 0))
        return;
    if ((this.exponent == 0 && this.mantissa == 0)) {
        if (a == 0)
            makeNan();
        return;
    }
    if (a == 0) {
        makeInfinity(sign);
        return;
    }
    long denom = a & 0xffffffffL;
    long remainder = mantissa % denom;
    mantissa /= denom;
    // Normalizing mantissa and scaling remainder accordingly
    int clz = 0;
    int t = (int) (mantissa >>> 32);
    if (t == 0) {
        clz = 32;
        t = (int) mantissa;
    }
    t |= t >> 1;
    t |= t >> 2;
    t |= t >> 4;
    t |= t >> 8;
    t |= t >> 16;
    clz += clz_tab[(t * clz_magic) >>> 27] - 1;
    mantissa <<= clz;
    remainder <<= clz;
    exponent -= clz;
    // Final division, correctly rounded
    remainder = (remainder + denom / 2) / denom;
    mantissa += remainder;
    if (// Underflow
    exponent < 0)
        makeZero(sign);
}
