boolean doFindSelect(String s, boolean ignoreCase, boolean wholeWord, boolean wrap, boolean select) {
    int temp = 0;
    int docLength = document.getLength();
    int startPosition = currentTextPane.getCaretPosition();
    int endPos = docLength;
    boolean found = false;
    boolean finished = false;
    int start = startPosition;
    Element line = getLineAt(start);
    int lineEnd = line.getEndOffset();
    int foundPos = 0;
    try {
        while (!finished) {
            String lineText = document.getText(start, lineEnd - start);
            while (lineText != null && lineText.length() > 0) {
                foundPos = findSubstring(lineText, s, ignoreCase, wholeWord, false, foundPos);
                if (foundPos != -1) {
                    if (select) {
                        // purposely using both select and the highlight because the select sets the
                        // caret correctly and the highlighter ensures the colouring is done correctly
                        currentTextPane.getHighlighter().addHighlight(start + foundPos, start + foundPos + s.length(), editorHighlighter.borderPainter);
                        currentTextPane.select(start + foundPos, start + foundPos + s.length());
                        setSelectionVisible();
                        currentTextPane.getHighlighter().addHighlight(start + foundPos, start + foundPos + s.length(), editorHighlighter.highlightPainter);
                        // reset the start position to the first caret of the selected item
                        // in order to ensure that none are missed
                        startPosition = start + foundPos;
                        found = true;
                        select = false;
                    } else {
                        temp = temp + 1;
                        currentTextPane.getHighlighter().addHighlight(start + foundPos, start + foundPos + s.length(), editorHighlighter.borderPainter);
                        currentTextPane.getHighlighter().addHighlight(start + foundPos, start + foundPos + s.length(), editorHighlighter.highlightPainter);
                    }
                    foundPos = foundPos + s.length();
                } else
                    lineText = null;
            }
            if (lineEnd >= endPos) {
                if (wrap) {
                    // do the wrapping
                    endPos = Math.min(startPosition + s.length(), document.getLength());
                    line = document.getParagraphElement(0);
                    start = line.getStartOffset();
                    lineEnd = Math.min(line.getEndOffset(), endPos);
                    wrap = false;
                // don't wrap again
                } else {
                    finished = true;
                }
            } else {
                // go to next line
                line = document.getParagraphElement(lineEnd + 1);
                start = line.getStartOffset();
                lineEnd = Math.min(line.getEndOffset(), endPos);
            }
        }
    } catch (BadLocationException ex) {
        Debug.reportError("Error in editor find operation", ex);
    }
    return found;
}
