protected void traverseSequences() {
    Integer[] matches = getLongestCommonSubsequences();
    int lastA = a.length - 1;
    int lastB = b.length - 1;
    int bi = 0;
    int ai;
    int lastMatch = matches.length - 1;
    for (ai = 0; ai <= lastMatch; ++ai) {
        Integer bLine = matches[ai];
        if (bLine == null) {
            onANotB(ai, bi);
        } else {
            while (bi < bLine.intValue()) {
                onBNotA(ai, bi++);
            }
            onMatch(ai, bi++);
        }
    }
    boolean calledFinishA = false;
    boolean calledFinishB = false;
    while (ai <= lastA || bi <= lastB) {
        // last A?
        if (ai == lastA + 1 && bi <= lastB) {
            if (!calledFinishA && callFinishedA()) {
                finishedA(lastA);
                calledFinishA = true;
            } else {
                while (bi <= lastB) {
                    onBNotA(ai, bi++);
                }
            }
        }
        // last B?
        if (bi == lastB + 1 && ai <= lastA) {
            if (!calledFinishB && callFinishedB()) {
                finishedB(lastB);
                calledFinishB = true;
            } else {
                while (ai <= lastA) {
                    onANotB(ai++, bi);
                }
            }
        }
        if (ai <= lastA) {
            onANotB(ai++, bi);
        }
        if (bi <= lastB) {
            onBNotA(ai, bi++);
        }
    }
}
