public String executeCommandAssignments(ActionContext context) {
    setMaximized(context);
    if (getUser(context).getId() < 0) {
        return "PermissionError";
    }
    int MINIMIZED_ITEMS_PER_PAGE = 5;
    // For using the assignments in a project tab
    String projectId = context.getRequest().getParameter("pid");
    String projectLink = "";
    if (projectId != null) {
        projectLink = "&pid=" + projectId;
    }
    String link = ctx(context) + "/ProjectManagement.do?command=Assignments" + projectLink;
    Connection db = null;
    String sectionId = null;
    if (context.getRequest().getParameter("pagedListSectionId") != null) {
        sectionId = context.getRequest().getParameter("pagedListSectionId");
    }
    // Prepare the drop-down
    PagedListInfo assignmentsListInfo = this.getPagedListInfo(context, "assignmentsListInfo");
    assignmentsListInfo.setLink(context, link);
    // Prepare lists
    AssignmentList assignmentList = new AssignmentList();
    TicketList ticketList = new TicketList();
    // reset the paged lists
    if (context.getRequest().getParameter("resetList") != null && context.getRequest().getParameter("resetList").equals("true")) {
        context.getSession().removeAttribute("assignmentsAssignmentListInfo");
        context.getSession().removeAttribute("assignmentsTicketListInfo");
    }
    // PagedLists needed
    assignmentList.setPagedListInfo(processPagedListInfo(context, sectionId, "assignmentsAssignmentListInfo", "a.due_date", null, link, MINIMIZED_ITEMS_PER_PAGE));
    ticketList.setPagedListInfo(processPagedListInfo(context, sectionId, "assignmentsTicketListInfo", "t.entered", "desc", link, MINIMIZED_ITEMS_PER_PAGE));
    // Query the records
    assignmentList.setForProjectUser(getUserId(context));
    assignmentList.setAssignmentsForUser(getUserId(context));
    assignmentList.setIncompleteOnly(true);
    assignmentList.setOnlyIfRequirementOpen(true);
    assignmentList.setOnlyIfProjectOpen(true);
    ticketList.setForProjectUser(getUserId(context));
    ticketList.setAssignedTo(getUserId(context));
    ticketList.setOnlyOpen(true);
    ticketList.setOnlyIfProjectOpen(true);
    try {
        db = getConnection(context);
        // Try to load the project and place in request
        if (projectId != null) {
            Project thisProject = retrieveAuthorizedProject(Integer.parseInt(projectId), context);
            hasProjectAccess(context, thisProject.getId(), "project-details-view");
            context.getRequest().setAttribute("project", thisProject);
        }
        // Build the needed info
        if (!ticketList.getPagedListInfo().getExpandedSelection()) {
            assignmentList.buildList(db);
            // Build list to display names of requirements
            RequirementList requirementList = new RequirementList();
            requirementList.setAssignmentList(assignmentList);
            requirementList.buildList(db);
            context.getRequest().setAttribute("requirementList", requirementList);
        }
        if (!assignmentList.getPagedListInfo().getExpandedSelection()) {
            ticketList.buildList(db);
        }
    } catch (Exception errorMessage) {
        context.getRequest().setAttribute("Error", errorMessage);
        return ("SystemError");
    } finally {
        this.freeConnection(context, db);
    }
    context.getRequest().setAttribute("assignmentList", assignmentList);
    context.getRequest().setAttribute("ticketList", ticketList);
    return ("AssignmentsOK");
}
