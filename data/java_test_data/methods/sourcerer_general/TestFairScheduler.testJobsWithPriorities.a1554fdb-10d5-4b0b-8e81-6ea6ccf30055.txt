public void testJobsWithPriorities() throws IOException {
    JobInProgress job1 = submitJob(JobStatus.RUNNING, 10, 10);
    JobInfo info1 = scheduler.infos.get(job1);
    JobInProgress job2 = submitJob(JobStatus.RUNNING, 10, 10);
    JobInfo info2 = scheduler.infos.get(job2);
    job2.setPriority(JobPriority.HIGH);
    scheduler.update();
    // Check scheduler variables
    assertEquals(0, info1.runningMaps);
    assertEquals(0, info1.runningReduces);
    assertEquals(10, info1.neededMaps);
    assertEquals(10, info1.neededReduces);
    assertEquals(0, info1.mapDeficit);
    assertEquals(0, info1.reduceDeficit);
    assertEquals(1.33, info1.mapFairShare, 0.1);
    assertEquals(1.33, info1.reduceFairShare, 0.1);
    assertEquals(0, info2.runningMaps);
    assertEquals(0, info2.runningReduces);
    assertEquals(10, info2.neededMaps);
    assertEquals(10, info2.neededReduces);
    assertEquals(0, info2.mapDeficit);
    assertEquals(0, info2.reduceDeficit);
    assertEquals(2.66, info2.mapFairShare, 0.1);
    assertEquals(2.66, info2.reduceFairShare, 0.1);
    // Advance time and check deficits
    advanceTime(100);
    assertEquals(133, info1.mapDeficit, 1.0);
    assertEquals(133, info1.reduceDeficit, 1.0);
    assertEquals(266, info2.mapDeficit, 1.0);
    assertEquals(266, info2.reduceDeficit, 1.0);
    // Assign tasks and check that all slots are filled with j1, then j2
    checkAssignment("tt1", "attempt_test_0002_m_000001_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_m_000002_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000003_0 on tt1");
    checkAssignment("tt1", "attempt_test_0002_r_000004_0 on tt1");
    checkAssignment("tt2", "attempt_test_0002_m_000005_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_m_000006_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_r_000007_0 on tt2");
    checkAssignment("tt2", "attempt_test_0002_r_000008_0 on tt2");
}
