protected void appendAndConditions(AeProcessFilter aFilter, List aAndClauses) throws AeException {
    // Process state condition
    switch(aFilter.getProcessState()) {
        case AeProcessFilter.STATE_COMPLETED:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_COMPLETE);
            break;
        case AeProcessFilter.STATE_COMPENSATABLE:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_COMPENSATABLE);
            break;
        case AeProcessFilter.STATE_RUNNING:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_RUNNING);
            break;
        case AeProcessFilter.STATE_FAULTED:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_FAULTED);
            break;
        case AeProcessFilter.STATE_SUSPENDED:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_SUSPENDED);
            break;
        case AeProcessFilter.STATE_SUSPENDED_FAULTING:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_SUSPENDED);
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessStateReason = " + new Integer(AeSuspendReason.SUSPEND_CODE_AUTOMATIC));
            break;
        case AeProcessFilter.STATE_SUSPENDED_PROGRAMMATIC:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_SUSPENDED);
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessStateReason = " + new Integer(AeSuspendReason.SUSPEND_CODE_LOGICAL));
            break;
        case AeProcessFilter.STATE_SUSPENDED_MANUAL:
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessState = " + IAeBusinessProcess.PROCESS_SUSPENDED);
            // $NON-NLS-1$
            aAndClauses.add("$proc/ProcessStateReason = " + new Integer(AeSuspendReason.SUSPEND_CODE_MANUAL));
            break;
        case AeProcessFilter.STATE_COMPLETED_OR_FAULTED:
            Object[] params = { new Integer(IAeBusinessProcess.PROCESS_COMPLETE), new Integer(IAeBusinessProcess.PROCESS_FAULTED) };
            // $NON-NLS-1$
            aAndClauses.add(MessageFormat.format("($proc/ProcessState = {0,number,#} or $proc/ProcessState = {1,number,#})", params));
            break;
        default:
            break;
    }
    // Process name condition
    if (aFilter.getProcessName() != null) {
        // $NON-NLS-1$ //$NON-NLS-2$
        aAndClauses.add("$proc/ProcessName/LocalPart = '" + aFilter.getProcessName().getLocalPart() + "'");
    }
    // Process complete start time condition
    if (aFilter.getProcessCompleteStart() != null) {
        AeSchemaDateTime sdt = new AeSchemaDateTime(aFilter.getProcessCompleteStart());
        // $NON-NLS-1$ //$NON-NLS-2$
        aAndClauses.add("$proc/EndDate >= xsd:dateTime(\"" + sdt.toString() + "\")");
    }
    // Process complete end time condition
    if (aFilter.getProcessCompleteEnd() != null) {
        AeSchemaDateTime sdt = new AeSchemaDateTime(aFilter.getProcessCompleteEndNextDay());
        // $NON-NLS-1$ //$NON-NLS-2$
        aAndClauses.add("$proc/EndDate <= xsd:dateTime(\"" + sdt.toString() + "\")");
    }
    // Process created start time condition
    if (aFilter.getProcessCreateStart() != null) {
        AeSchemaDateTime sdt = new AeSchemaDateTime(aFilter.getProcessCreateStart());
        // $NON-NLS-1$ //$NON-NLS-2$
        aAndClauses.add("$proc/StartDate >= xsd:dateTime(\"" + sdt.toString() + "\")");
    }
    // Process created end time condition
    if (aFilter.getProcessCreateEnd() != null) {
        AeSchemaDateTime sdt = new AeSchemaDateTime(aFilter.getProcessCreateEndNextDay());
        // $NON-NLS-1$ //$NON-NLS-2$
        aAndClauses.add("$proc/StartDate <= xsd:dateTime(\"" + sdt.toString() + "\")");
    }
    // Handle the planId specified in the filter
    int planId = aFilter.getPlanId();
    if (planId != 0) {
        // $NON-NLS-1$
        aAndClauses.add("$proc/PlanID = " + planId);
    }
    // Handle the endDate in the filter, when deletableDate > endDate, it can be deleted, where deletableDate = currentDeleteDate - retentationDays.
    Date deletableDate = aFilter.getDeletableDate();
    if (deletableDate != null) {
        AeSchemaDateTime sdt = new AeSchemaDateTime(deletableDate);
        // $NON-NLS-1$ //$NON-NLS-2$
        aAndClauses.add("$proc/EndDate <= xsd:dateTime(\"" + sdt.toString() + "\")");
    }
    // Handle the deleteRange of processes specified in the filter
    long[] processIdRange = aFilter.getProcessIdRange();
    if (processIdRange != null) {
        Long fromIndex = new Long(processIdRange[0]);
        Long toIndex = new Long(processIdRange[1]);
        // $NON-NLS-1$ //$NON-NLS-2$
        aAndClauses.add("$procId >= " + fromIndex + " and $procId <= " + toIndex);
    }
    if (getMinProcessID() != -1) {
        // $NON-NLS-1$
        aAndClauses.add("$procId >= " + getMinProcessID());
    }
    if (getMaxProcessID() != -1) {
        // $NON-NLS-1$
        aAndClauses.add("$procId <= " + getMaxProcessID());
    }
}
