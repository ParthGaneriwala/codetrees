@Override
protected void paintComponent(Graphics g) {
    Rectangle clipBounds = new Rectangle(new Point(0, 0), getSize());
    Insets insets = getInsets();
    g.getClipBounds(clipBounds);
    View view = editorPane.getUI().getRootView(editorPane);
    int prefHeight = (int) view.getPreferredSpan(View.Y_AXIS);
    int myHeight = getHeight() - insets.top - insets.bottom - frw * 2;
    Document document = getDocument();
    if (document == null) {
        // Should not happen
        return;
    }
    int docHeight = Math.min(myHeight, prefHeight);
    // Calculate the visible portion
    // topV = the topmost visible line (in local coordinate space)
    // bottomV = the bottommost visible line (in local coordinate space)
    int topV = insets.top + frw + scrollBar.getValue() * docHeight / scrollBar.getMaximum();
    int bottomV = insets.top + frw + ((scrollBar.getValue() + scrollBar.getVisibleAmount()) * docHeight + (scrollBar.getMaximum() - 1)) / scrollBar.getMaximum();
    createImgBuffer(g, prefHeight > myHeight);
    g.drawImage(imgBuffer, insets.left, insets.top, null);
    Color background = MoeSyntaxDocument.getBackgroundColor();
    int lx = insets.left;
    int rx = getWidth() - insets.right;
    int ty = insets.top;
    // Clear the border area (frw width)
    g.setColor(background);
    g.fillRect(lx, ty, rx - lx, frw);
    g.fillRect(lx, ty, frw, docHeight + frw);
    g.fillRect(rx - frw, ty, frw, docHeight + frw);
    g.setColor(getBackground());
    g.fillRect(lx, docHeight + frw + insets.top, rx - lx, myHeight - docHeight + frw);
    // Darken the area outside the viewport (above)
    g.setColor(new Color(0, 0, 0, 0.15f));
    if (topV > clipBounds.y) {
        g.fillRect(clipBounds.x, clipBounds.y, clipBounds.width, topV - clipBounds.y);
    }
    // Darken the area outside the viewport (below)
    int docBottom = docHeight + frw + insets.top;
    if (bottomV < docBottom) {
        g.fillRect(clipBounds.x, bottomV, clipBounds.width, docBottom - bottomV);
    }
    // Fill the area between the document end and bottom of the component
    if (docBottom < clipBounds.y + clipBounds.height) {
        Color myBgColor = getBackground();
        // This odd statement is necessary to avoid a weird Mac OS X bug
        // (OS X 10.6.2, Java 1.6.0_17) with repaint which occurs when
        // a tooltip is showing.
        g.setColor(new Color(myBgColor.getRGB()));
        g.fillRect(clipBounds.x, docBottom, clipBounds.width, clipBounds.y + clipBounds.height - docBottom);
    }
    // Draw a border around the visible area
    int fx1 = lx;
    int fy1 = topV - frw;
    int fx2 = rx;
    int fy2 = bottomV;
    int fh = frame.getHeight(null);
    int fw = frame.getWidth(null);
    // top - left corner, straight, right corner
    g.drawImage(frame, fx1, fy1, fx1 + 5, fy1 + 5, 0, 0, 5, 5, null);
    g.drawImage(frame, fx1 + 5, fy1, fx2 - 5, fy1 + 5, 5, 0, fw - 5, 5, null);
    g.drawImage(frame, fx2 - 5, fy1, fx2, fy1 + 5, fw - 5, 0, fw, 5, null);
    // sides
    g.drawImage(frame, fx1, fy1 + 5, fx1 + 5, fy2, 0, 5, 5, fh - 5, null);
    g.drawImage(frame, fx2 - 5, fy1 + 5, fx2, fy2, fw - 5, 5, fw, fh - 5, null);
    // bottom - left corner, straight, right corner
    g.drawImage(frame, fx1, fy2, fx1 + 5, fy2 + 5, 0, fh - 5, 5, fh, null);
    g.drawImage(frame, fx1 + 5, fy2, fx2 - 5, fy2 + 5, 5, fh - 5, fw - 5, fh, null);
    g.drawImage(frame, fx2 - 5, fy2, fx2, fy2 + 5, fw - 5, fh - 5, fw, fh, null);
    if (!tops.isEmpty()) {
        int rtop = tops.remove(0);
        int rbottom = bottoms.remove(0);
        paintImgBuffer(rtop, rbottom);
        repaint(0, rtop, getWidth(), rbottom - rtop);
    }
}
