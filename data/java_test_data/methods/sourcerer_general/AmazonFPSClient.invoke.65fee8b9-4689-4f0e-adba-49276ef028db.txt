// Private API ------------------------------------------------------------//
/**
 * Configure HttpClient with set of defaults as well as configuration
 * from AmazonFPSConfig instance
 */
/*
    private HttpClient configureHttpClient() {

        // Set http client parameters 
        HttpClientParams httpClientParams = new HttpClientParams();
        httpClientParams.setParameter(HttpMethodParams.USER_AGENT, config.getUserAgent());
        httpClientParams.setParameter(HttpClientParams.RETRY_HANDLER, new HttpMethodRetryHandler() {

            public boolean retryMethod(HttpMethod method, IOException exception, int executionCount) {
                if (executionCount > 3) {
                    System.out.println("Maximum Number of Retry attempts reached, will not retry");
                    return false;
                }
                System.out.println("Retrying request. Attempt " + executionCount);
                if (exception instanceof NoHttpResponseException) {
                    System.out.println("Retrying on NoHttpResponseException");
                    return true;
                }
                if (exception instanceof InterruptedIOException) {
                    System.out.println("Will not retry on InterruptedIOException", exception);
                    return false;
                }
                if (exception instanceof UnknownHostException) {
                    System.out.println("Will not retry on UnknownHostException", exception);
                    return false;
                }
                if (!method.isRequestSent()) {
                    System.out.println("Retrying on failed sent request");
                    return true;
                }
                return false;
            }
        });

        // Set host configuration 
        HostConfiguration hostConfiguration = new HostConfiguration();

        // Set connection manager parameters 
        HttpConnectionManagerParams connectionManagerParams = new HttpConnectionManagerParams();
        connectionManagerParams.setConnectionTimeout(50000);
        connectionManagerParams.setSoTimeout(50000);
        connectionManagerParams.setStaleCheckingEnabled(true);
        connectionManagerParams.setTcpNoDelay(true);
        connectionManagerParams.setMaxTotalConnections(config.getMaxAsyncQueueSize());
        connectionManagerParams.setMaxConnectionsPerHost(hostConfiguration, config.getMaxAsyncQueueSize());

        // Set connection manager 
        MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();
        connectionManager.setParams(connectionManagerParams);

        // Set http client 
        httpClient = new HttpClient(httpClientParams, connectionManager);

        // Set proxy if configured 
        if (config.isSetProxyHost() && config.isSetProxyPort()) {
            log.info("Configuring Proxy. Proxy Host: " + config.getProxyHost() +
                    "Proxy Port: " + config.getProxyPort() );
            hostConfiguration.setProxy(config.getProxyHost(), config.getProxyPort());
            if (config.isSetProxyUsername() &&   config.isSetProxyPassword()) {
                httpClient.getState().setProxyCredentials (new AuthScope(
                                          config.getProxyHost(),
                                          config.getProxyPort()),
                                          new UsernamePasswordCredentials(
                                              config.getProxyUsername(),
                                              config.getProxyPassword()));

            }
        }

        httpClient.setHostConfiguration(hostConfiguration);
        return httpClient;
    }
*/
private <T> T invoke(Class<T> clazz, Map<String, String> parameters) throws AmazonFPSException {
    String actionName = parameters.get("Action");
    T response = null;
    String stringResponse = null;
    String responseBodyString = null;
    // PostMethod method = new PostMethod(config.getServiceURL());
    int status = -1;
    String xml = null;
    System.out.println("Invoking" + actionName + " request. Current parameters: " + parameters);
    try {
        String message = URLEncoder.encode("my message", "UTF-8");
        System.out.println("Host: " + config.getServiceURL());
        URL url = new URL(config.getServiceURL());
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setDoOutput(true);
        connection.setRequestMethod("POST");
        System.out.println("Setting content-type to application/x-www-form-urlencoded; charset=" + DEFAULT_ENCODING.toLowerCase());
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded; charset=" + DEFAULT_ENCODING.toLowerCase());
        /* Add required request parameters and set request body */
        System.out.println("Adding required parameters...");
        addRequiredParametersToRequest(parameters);
        StringBuffer sb = new StringBuffer();
        boolean bFirst = true;
        for (Entry<String, String> entry : parameters.entrySet()) {
            if (bFirst)
                bFirst = false;
            else
                sb.append("&");
            sb.append(entry.getKey());
            sb.append("=");
            sb.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
        }
        System.out.println("Done adding additional required parameters. Parameters now: " + parameters);
        OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
        // writer.write("message=" + message);
        System.out.println("url: " + sb.toString());
        writer.write(sb.toString());
        writer.close();
        connection.connect();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            // OK
            xml = getResponsBodyAsString(connection.getInputStream());
            // response = clazz.cast(xml);
            stringResponse = xml;
            System.out.println("xml: " + xml);
        } else {
            System.out.println("e1: " + connection.getResponseCode());
            xml = getResponsBodyAsString(connection.getInputStream());
            // response = clazz.cast(xml);
            stringResponse = xml;
            System.out.println("ERROR xml: " + xml);
        // Server returned HTTP error code.
        }
    } catch (MalformedURLException e) {
        System.out.println("e2: " + e);
        // response = clazz.cast(e.getMessage());
        stringResponse = e.getMessage();
    // ...
    } catch (IOException e) {
        // ...
        System.out.println("e3: " + e);
        // response = clazz.cast(e.getMessage());
        stringResponse = e.getMessage();
    } catch (SignatureException e) {
        // ...
        System.out.println("e4: " + e);
        // response = clazz.cast(e.getMessage());
        stringResponse = e.getMessage();
    }
    // initialize DOM
    DocumentBuilder domBuilder = null;
    DocumentBuilderFactory domFactory = null;
    Document doc = null;
    boolean xmlValid = false;
    String errMessage = "";
    try {
        domFactory = DocumentBuilderFactory.newInstance();
        domBuilder = domFactory.newDocumentBuilder();
    } catch (FactoryConfigurationError exp) {
        System.err.println("Error: DOM Configuration");
    } catch (ParserConfigurationException exp) {
        System.err.println("Error: DOM Parse");
    } catch (Exception exp) {
        System.err.println("Error: DOM Validation");
    }
    try {
        // choose a charset
        byte[] byteArray = xml.getBytes("ISO-8859-1");
        ByteArrayInputStream is = new ByteArrayInputStream(byteArray);
        // StringBufferInputStream is = new StringBufferInputStream(xml);
        doc = domBuilder.parse((InputStream) is);
        xmlValid = true;
    } catch (SAXException e) {
        System.err.println("Error: SAX Parse");
        xmlValid = false;
        errMessage = e.getMessage();
    } catch (IOException e) {
        System.err.println("Error: I/O");
        errMessage = e.getMessage();
    }
    // return response;
    // return clazz.cast(stringResponse + " " + doc.toString() +  " " + errMessage );
    // return clazz.cast(stringResponse + " node: " + doc.getChildNodes().toString() +  " error message: " + errMessage );
    // return clazz.cast(stringResponse + " node: " + doc.getElementsByTagName("TransactionId").toString() +  " error message: " + errMessage );
    // NodeList nodelist = doc.getElementsByTagName("TransactionId");
    // return clazz.cast(stringResponse + " node: " + nodelist.getLength() +  " error message: " + errMessage );
    System.out.println("QQQ: doc: " + doc);
    return clazz.cast(doc);
}
