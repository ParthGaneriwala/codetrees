@Test
public void testWatcha() throws UIMAException, IOException {
    String text = FileUtils.readFileToString(new File("src/test/resources/token/watcha.txt"));
    jCas.setDocumentText(text);
    new Sentence(jCas, 0, 45).addToIndexes();
    new Sentence(jCas, 47, 73).addToIndexes();
    new Sentence(jCas, 75, 109).addToIndexes();
    SimplePipeline.runPipeline(jCas, tokenizer);
    FSIndex<Annotation> tokenIndex = jCas.getAnnotationIndex(Token.type);
    assertEquals(31, tokenIndex.size());
    int index = 0;
    assertEquals("I", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("ca", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("n't", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("believe", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("they", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("wan", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("na", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("keep", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("40", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("%", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("of", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("that", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals(".", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("\"", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("``", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("Wha", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("t", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("cha", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("think", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("?", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("''", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("\"", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("I", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("do", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("n't", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("---", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("think", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("so", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("...", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals(",", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
    assertEquals("\"", JCasUtil.selectByIndex(jCas, Token.class, index++).getCoveredText());
}
