// $ANTLR start "id"
public final gramaticaMM2Parser.id_return id() throws RecognitionException {
    gramaticaMM2Parser.id_return retval = new gramaticaMM2Parser.id_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    gramaticaMM2Parser.id_literal_return id_literal205 = null;
    RewriteRuleSubtreeStream stream_id_literal = new RewriteRuleSubtreeStream(adaptor, "rule id_literal");
    try {
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:178:4: ( id_literal -> ^( ID id_literal ) )
        // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:178:6: id_literal
        {
            pushFollow(FOLLOW_id_literal_in_id1974);
            id_literal205 = id_literal();
            state._fsp--;
            stream_id_literal.add(id_literal205.getTree());
            // AST REWRITE
            // elements: id_literal
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 178:17: -> ^( ID id_literal )
            {
                // C:\\Documents and Settings\\sb\\Desktop\\gramaticaMM2.g:178:20: ^( ID id_literal )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(ID, "ID"), root_1);
                    adaptor.addChild(root_1, stream_id_literal.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
