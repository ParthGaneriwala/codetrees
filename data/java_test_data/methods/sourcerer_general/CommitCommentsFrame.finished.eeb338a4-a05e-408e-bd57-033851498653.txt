public void finished() {
    stopProgress();
    if (!aborted) {
        if (result.isError()) {
            TeamUtils.handleServerResponse(result, CommitCommentsFrame.this);
            setVisible(false);
        } else if (response != null) {
            Set<File> filesToCommit = new HashSet<File>();
            Set<File> filesToAdd = new HashSet<File>();
            Set<File> filesToDelete = new HashSet<File>();
            Set<File> mergeConflicts = new HashSet<File>();
            Set<File> deleteConflicts = new HashSet<File>();
            Set<File> otherConflicts = new HashSet<File>();
            Set<File> needsMerge = new HashSet<File>();
            Set<File> modifiedLayoutFiles = new HashSet<File>();
            List<TeamStatusInfo> info = response;
            getCommitFileSets(info, filesToCommit, filesToAdd, filesToDelete, mergeConflicts, deleteConflicts, otherConflicts, needsMerge, modifiedLayoutFiles);
            if (!mergeConflicts.isEmpty() || !deleteConflicts.isEmpty() || !otherConflicts.isEmpty() || !needsMerge.isEmpty()) {
                handleConflicts(mergeConflicts, deleteConflicts, otherConflicts, needsMerge);
                return;
            }
            commitAction.setFiles(filesToCommit);
            commitAction.setNewFiles(filesToAdd);
            commitAction.setDeletedFiles(filesToDelete);
        }
        if (commitListModel.isEmpty()) {
            commitListModel.addElement(noFilesToCommit);
        } else {
            commitText.setEnabled(true);
            commitText.requestFocusInWindow();
            commitAction.setEnabled(true);
        }
    }
}
