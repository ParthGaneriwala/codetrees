private void generateComponentParsers() {
    final String mainParserPackage = packageName.substring(0, packageName.lastIndexOf('.'));
    // iterate through all classes
    for (Iterator<Map.Entry<String, List<ClassAttribute>>> iter = classes.entrySet().iterator(); iter.hasNext(); ) {
        final Map.Entry<String, List<ClassAttribute>> entry = iter.next();
        final String componentName = entry.getKey();
        final List<ClassAttribute> componentAttributes = entry.getValue();
        // create content of file
        final StringBuilder fileContent = new StringBuilder();
        fileContent.append("package " + packageName + ";\n");
        fileContent.append("\n");
        fileContent.append("import java.io.*;\n");
        fileContent.append("import " + packageName + ".ParseContext;\n");
        fileContent.append("import " + packageName + ".ParseUtil;\n");
        fileContent.append("import " + mainParserPackage + ".exception.ParseException;\n");
        fileContent.append("import " + mainParserPackage + ".ds." + componentName + ";\n");
        // create imports for all component-attributes, but only once for
        // each
        final Set<String> importsSet = Sets.newHashSet();
        for (ClassAttribute attr : componentAttributes) {
            switch(attr.type) {
                case COMPONENT:
                    importsSet.add("import " + packageName + "." + attr.type_identifier + "Parser;\n");
                    // assignment in variable or context
                    if ((attr.name != null) || (attr.contextName != null)) {
                        importsSet.add("import " + mainParserPackage + ".ds." + attr.type_identifier + ";\n");
                    }
                    break;
                case STATIC_HEX:
                    importsSet.add("import java.util.Arrays;\n");
                    break;
            }
        }
        fileContent.append(StringUtils.join(importsSet.toArray()));
        fileContent.append("\n");
        fileContent.append("public class " + componentName + "Parser { \n");
        fileContent.append("\n");
        // generate static values for comparison later
        for (ClassAttribute attr : componentAttributes) {
            generateExpectedStaticValues(fileContent, attr);
        }
        fileContent.append("\n");
        fileContent.append("    " + componentName + "Parser() {\n");
        fileContent.append("    }\n");
        fileContent.append("\n");
        fileContent.append("    public static final " + componentName + " parse(final InputStream is, final ParseContext context) throws IOException, ParseException {\n");
        fileContent.append("        final " + componentName + " comp = new " + componentName + "();\n");
        fileContent.append("\n");
        // generate attributes and their reading logic
        for (ClassAttribute attr : componentAttributes) {
            generateAttributeCode(fileContent, attr);
        }
        fileContent.append("\n");
        fileContent.append("        return comp;\n");
        fileContent.append("    }\n");
        fileContent.append("\n");
        fileContent.append("};\n");
        // create data structure file
        final String filename = outputPath + componentName + "Parser.java";
        FileHandlingUtils.createFile(filename, fileContent);
    }
}
