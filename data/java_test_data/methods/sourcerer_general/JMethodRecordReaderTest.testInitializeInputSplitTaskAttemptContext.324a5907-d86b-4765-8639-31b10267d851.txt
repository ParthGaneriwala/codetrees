@Test
public void testInitializeInputSplitTaskAttemptContext() throws Exception {
    JMethodRecordReader jrrToTest = new JMethodRecordReader();
    jrrToTest.initialize(fileSplitClass, tac);
    Map<MethodID, Text> expectedMethods = new HashMap<MethodID, Text>();
    MethodID mid = new MethodID("Potato[ ]", "Potato", "somefile_class", "<default>");
    StringBuilder sb = new StringBuilder();
    sb.append("public Potato() {\n");
    sb.append("}");
    expectedMethods.put(mid, new Text(sb.toString()));
    String expectedPackageName = "<default>";
    String expectedFileName = "somefile_class";
    FileSplit expectedSplit = fileSplitClass;
    List<MethodID> expectedMKeys = new ArrayList<MethodID>(Arrays.asList(mid));
    int expectedCurrM = -1;
    Configuration auxJob = tac.getConfiguration();
    Path auxPath = new Path("TestMats/somefile_class");
    FileSystem auxFS = auxPath.getFileSystem(auxJob);
    FSDataInputStream expectedFileIn = auxFS.open(auxPath);
    CompilationUnit expectedCU = JavaParser.parse(expectedFileIn);
    FSDataInputStream actualFileIn = jrrToTest.getFileIn();
    Map<MethodID, Text> actualMethods = jrrToTest.getElems();
    String actualPackageName = jrrToTest.getPackageName();
    String actualFileName = jrrToTest.getFileName();
    CompilationUnit actualCU = jrrToTest.getCu();
    FileSplit actualSplit = jrrToTest.getfSplit();
    List<MethodID> actualMKeys = jrrToTest.getmKeys();
    int actualCurrM = jrrToTest.getCurrK();
    Assert.assertEquals(expectedMethods, actualMethods);
    Assert.assertEquals(expectedPackageName, actualPackageName);
    Assert.assertEquals(expectedFileName, actualFileName);
    Assert.assertEquals(expectedCU, actualCU);
    Assert.assertEquals(expectedSplit, actualSplit);
    Assert.assertEquals(expectedMKeys, actualMKeys);
    Assert.assertEquals(expectedCurrM, actualCurrM);
    // Compare the InputStreams
    long expectedFileInPosition = expectedFileIn.getPos();
    long actualFileInPosition = actualFileIn.getPos();
    Assert.assertEquals(expectedFileInPosition, actualFileInPosition);
}
