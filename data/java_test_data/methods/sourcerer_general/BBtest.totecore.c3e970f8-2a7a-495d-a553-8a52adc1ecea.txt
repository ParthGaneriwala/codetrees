public float[][] totecore(int tournID) {
    int tempcount = events[tournID].countplayers;
    float[][] itbackings = new float[tempcount][tempcount];
    float[][] itbackingsnew = new float[tempcount][tempcount];
    float[][] doublebackings = new float[tempcount][tempcount];
    float DoublePool = 0;
    float[] DoublePoolColumnWise = new float[tempcount];
    float[] DoublePoolRowWise = new float[tempcount];
    float SpecialPool = 0;
    boolean[] noncontestant = new boolean[tempcount];
    if (events[tournID].statictotecore) {
        itbackings = events[tournID].statictote;
    } else {
        try {
            /* get noncontestants, suggested by pulp */
            for (int i = 0; i < tempcount; i++) {
                noncontestant[i] = events[tournID].Player[i].equalsIgnoreCase("-noncontestant-");
            }
            /* fill it and correct for nonrunners and get doublepool */
            for (int i = 0; i < tempcount; i++) {
                for (int j = 0; j < tempcount; j++) {
                    if (noncontestant[i] || noncontestant[j]) {
                        doublebackings[i][j] = 0;
                    } else {
                        doublebackings[i][j] = events[tournID].Backings2[i][j];
                    }
                    itbackings[i][j] = doublebackings[i][j];
                }
            }
            for (int it = 0; it < antiiterations + finalizeiterations; it++) {
                /* set sums back */
                for (int i = 0; i < tempcount; i++) {
                    DoublePoolColumnWise[i] = 0;
                    DoublePoolRowWise[i] = 0;
                }
                DoublePool = 0;
                /* update sums */
                for (int i = 0; i < tempcount; i++) {
                    for (int j = 0; j < tempcount; j++) {
                        DoublePoolColumnWise[i] = DoublePoolColumnWise[i] + itbackings[i][j];
                        DoublePoolRowWise[j] = DoublePoolRowWise[j] + itbackings[i][j];
                        itbackingsnew[i][j] = 0;
                    }
                    DoublePool = DoublePool + DoublePoolColumnWise[i];
                }
                /**
                 * * WIN BETS ***
                 */
                for (int i = 0; i < tempcount; i++) {
                    if (noncontestant[i]) {
                    // leave out
                    } else {
                        float antifactor = events[tournID].Backings2[maxplayerintourney - 1][i];
                        float winfactor = events[tournID].Backings2[maxplayerintourney - 2][i];
                        float antiplacefactor = events[tournID].Backings2[maxplayerintourney - 3][i];
                        float placefactor = events[tournID].Backings2[maxplayerintourney - 4][i];
                        float antisecondfactor = events[tournID].Backings2[maxplayerintourney - 5][i];
                        float secondfactor = events[tournID].Backings2[maxplayerintourney - 6][i];
                        float columnpool = DoublePoolColumnWise[i];
                        float rowpool = DoublePoolRowWise[i];
                        for (int j = 0; j < tempcount; j++) {
                            if (noncontestant[j] || (i == j)) {
                            // leave out probably not necessary
                            } else {
                                itbackingsnew[i][j] = itbackingsnew[i][j] + (itbackings[i][j] / columnpool) * winfactor;
                            }
                        }
                        /**
                         * * SECOND BETS ***
                         */
                        for (int j = 0; j < tempcount; j++) {
                            if (noncontestant[j] || (i == j)) {
                            // leave out
                            } else {
                                itbackingsnew[j][i] = itbackingsnew[j][i] + (itbackings[j][i] / rowpool) * secondfactor;
                            }
                        }
                        /**
                         * * ANTISECOND BETS ***
                         */
                        for (int k = 0; k < tempcount; k++) {
                            if (noncontestant[k] || (k == i)) {
                            // leave out
                            } else {
                                for (int j = 0; j < tempcount; j++) {
                                    if (noncontestant[j] || (k == j)) {
                                    // leave out
                                    } else {
                                        itbackingsnew[j][k] = itbackingsnew[j][k] + (itbackings[j][k] / (DoublePool - rowpool)) * antisecondfactor;
                                    }
                                }
                            }
                        }
                        for (int k = 0; k < tempcount; k++) {
                            if (noncontestant[k] || (k == i)) {
                            // leave out
                            } else {
                                for (int j = 0; j < tempcount; j++) {
                                    if (noncontestant[j] || (k == j)) {
                                    /* leave out */
                                    /* hier noncontestant[k] auf noncontestant[j] geÃ¤ndert */
                                    } else {
                                        itbackingsnew[k][j] = itbackingsnew[k][j] + (itbackings[k][j] / (DoublePool - columnpool)) * antifactor;
                                    }
                                }
                            }
                        }
                        for (int j = 0; j < tempcount; j++) {
                            if (noncontestant[j] || (i == j)) {
                            // leave out
                            } else {
                                itbackingsnew[i][j] = itbackingsnew[i][j] + (itbackings[i][j] / (columnpool + rowpool)) * placefactor;
                                itbackingsnew[j][i] = itbackingsnew[j][i] + (itbackings[j][i] / (columnpool + rowpool)) * placefactor;
                            }
                        }
                        for (int k = 0; k < tempcount; k++) {
                            if (noncontestant[k] || (k == i)) {
                            // leave out
                            } else {
                                for (int j = 0; j < tempcount; j++) {
                                    if (noncontestant[j] || (k == j) || (j == i)) {
                                    // leave out
                                    } else {
                                        itbackingsnew[k][j] = itbackingsnew[k][j] + (itbackings[k][j] / (DoublePool - columnpool - rowpool)) * antiplacefactor;
                                    }
                                }
                            }
                        }
                    }
                }
                // renew
                for (int i = 0; i < tempcount; i++) {
                    for (int j = 0; j < tempcount; j++) {
                        itbackings[i][j] = itbackingsnew[i][j] + doublebackings[i][j];
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            logException(e);
            messageProgrammers("ArrayIndex on totecore. countplayers: " + events[tournID].countplayers + " tempcount: " + tempcount);
            itbackings = events[tournID].statictote;
        }
        events[tournID].statictotecore = true;
        events[tournID].statictote = itbackings;
    }
    return itbackings;
}
