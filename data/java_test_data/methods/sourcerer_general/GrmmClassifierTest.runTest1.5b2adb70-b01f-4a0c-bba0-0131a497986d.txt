@Test
public void runTest1() throws Exception {
    AnalysisEngine dataWriterAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, DirectoryDataWriterFactory.PARAM_OUTPUT_DIRECTORY, outputDirectoryName, CleartkSequenceAnnotator.PARAM_DATA_WRITER_FACTORY_CLASS_NAME, DefaultGrmmDataWriterFactory.class.getName());
    dataWriterAnnotator.process(jCas);
    dataWriterAnnotator.collectionProcessComplete();
    GrmmClassifierBuilder builder = new GrmmClassifierBuilder();
    File trainFile = builder.getTrainingDataFile(this.outputDirectory);
    BufferedReader reader = new BufferedReader(new FileReader(trainFile));
    reader.readLine();
    reader.close();
    // hide output during training:
    HideOutput hider = new HideOutput();
    // create a template:
    String templateFilename = "template.txt";
    GrmmTestDataGenerator.createBigramTemplate(outputDirectoryName, templateFilename);
    // train and create a model with this template:
    Train.main(outputDirectoryName, templateFilename);
    hider.restoreOutput();
    // check that the classifier is successfully loaded from the model
    File modelJarFile = builder.getModelJarFile(this.outputDirectory);
    assertNotNull(modelJarFile);
    builder.loadClassifierFromTrainingDirectory(this.outputDirectory);
    // try to use model for classification:
    AnalysisEngine classifierAnnotator = AnalysisEngineFactory.createPrimitive(Test1Annotator.class, typeSystemDescription, GenericJarClassifierFactory.PARAM_CLASSIFIER_JAR_PATH, modelJarFile.getPath());
    jCas.reset();
    classifierAnnotator.process(jCas);
    classifierAnnotator.collectionProcessComplete();
}
