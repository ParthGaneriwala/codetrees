protected void init() {
    super.init();
    // Remove some writers from the registry.
    unregisterWriter(ACTIVITY_TERMINATE_CLASS);
    unregisterWriter(MESSAGE_EXCHANGES_CLASS);
    // Add some writers to the registry for WS-BPEL 2.0.
    registerWriter(IMPORT_CLASS, TAG_IMPORT);
    registerWriter(DOCUMENTATION_CLASS, TAG_DOCUMENTATION);
    registerWriter(ACTIVITY_VALIDATE_CLASS, TAG_VALIDATE);
    registerWriter(ACTIVITY_EXIT_CLASS, TAG_EXIT);
    registerWriter(ASSIGN_EXTENSIBLE_ASSIGN_CLASS, TAG_EXTENSIBLE_ASSIGN);
    registerWriter(EXTENSIONS_CLASS, TAG_EXTENSIONS);
    registerWriter(EXTENSION_CLASS, TAG_EXTENSION);
    registerWriter(FROM_PARTS_CLASS, TAG_FROM_PARTS);
    registerWriter(TO_PARTS_CLASS, TAG_TO_PARTS);
    registerWriter(FROM_PART_CLASS, TAG_FROM_PART);
    registerWriter(TO_PART_CLASS, TAG_TO_PART);
    registerWriter(MESSAGE_EXCHANGES_CLASS, TAG_MESSAGE_EXCHANGES);
    registerWriter(MESSAGE_EXCHANGE_CLASS, TAG_MESSAGE_EXCHANGE);
    // fixme we need to put in an activity extension registry so that we can map custom activity QNames to custom writers
    registerWriter(EXTENSION_ACTIVITY_CLASS, TAG_EXTENSION_ACTIVITY);
    registerWriter(ACTIVITY_NOTUNDERSTOOD_CLASS, new AeUnknownExtensionActivityWriter());
    registerWriter(ACTIVITY_IF_CLASS, TAG_IF);
    // Skip over the 'if' wrapper
    registerWriter(IF_CLASS, new AeSkipWriter());
    registerWriter(ELSEIF_CLASS, TAG_ELSEIF);
    registerWriter(ELSE_CLASS, TAG_ELSE);
    registerWriter(ACTIVITY_REPEAT_UNTIL_CLASS, TAG_REPEAT_UNTIL);
    registerWriter(ACTIVITY_RETHROW_CLASS, TAG_RETHROW);
    registerWriter(REPEAT_EVERY_CLASS, TAG_REPEAT_EVERY);
    registerWriter(ON_EVENT_CLASS, TAG_ON_EVENT);
    registerWriter(TERMINATION_HANDLER_CLASS, TAG_TERMINATION_HANDLER);
    registerWriter(SOURCES_CLASS, TAG_SOURCES);
    registerWriter(TARGETS_CLASS, TAG_TARGETS);
    registerWriter(JOIN_CONDITION_CLASS, TAG_JOIN_CONDITION);
    registerWriter(TRANSITION_CONDITION_CLASS, TAG_TRANSITION_CONDITION);
    registerWriter(FOR_CLASS, TAG_FOR);
    registerWriter(UNTIL_CLASS, TAG_UNTIL);
    registerWriter(CONDITION_CLASS, TAG_CONDITION);
    registerWriter(LITERAL_CLASS, TAG_LITERAL);
    unregisterWriter(ACTIVITY_FOREACH_CLASS);
    unregisterWriter(ACTIVITY_FOREACH_COMPLETION_CONDITION);
    unregisterWriter(ACTIVITY_FOREACH_BRANCHES);
    unregisterWriter(ACTIVITY_FOREACH_START);
    unregisterWriter(ACTIVITY_FOREACH_FINAL);
    registerWriter(ACTIVITY_FOREACH_CLASS, TAG_FOREACH);
    registerWriter(ACTIVITY_FOREACH_COMPLETION_CONDITION, TAG_FOREACH_COMPLETION_CONDITION);
    registerWriter(ACTIVITY_FOREACH_BRANCHES, TAG_FOREACH_BRANCHES);
    registerWriter(ACTIVITY_FOREACH_START, TAG_FOREACH_STARTCOUNTER);
    registerWriter(ACTIVITY_FOREACH_FINAL, TAG_FOREACH_FINALCOUNTER);
    registerWriter(ACTIVITY_COMPENSATE_SCOPE_CLASS, TAG_COMPENSATE_SCOPE);
    registerWriter(AeQueryDef.class, TAG_QUERY);
    // Compensation handler (write out as an extension element in BPEL 2.0)
    unregisterWriter(COMPENSATION_HANDLER_CLASS);
    registerWriter(COMPENSATION_HANDLER_CLASS, new AeWSBPELCompensationHandlerWriter());
    registerWriter(TERMINATION_HANDLER_CLASS, new AeWSBPELTerminationHandlerWriter());
    // Writer for BPEL 2.0 abstract processe's opaque activity.
    // (note: this writer is registered in this 'bpel executable process' namespace to allow users to save abstract processes as executable processes (with the opaque activities)
    registerWriter(AeActivityOpaqueDef.class, createWriter(IAeBPELConstants.WSBPEL_2_0_ABSTRACT_NAMESPACE_URI, TAG_OPAQUE_ACTIVITY));
    // new writer to handle BPEL 2.0 <from/> or abstract process's <opaqueFrom/>
    unregisterWriter(AeFromDef.class);
    registerWriter(AeFromDef.class, new AeWSBPELFromDefWriter());
}
