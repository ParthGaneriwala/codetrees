public String addLinguisticVersion(String ticket, String strLogicalnodeId, String objectName, String linkPath, String contentSourcePath, String languageCode) throws Exception {
    String strConcretenodeId = null;
    logger.debug("BEGIN - " + new Exception().getStackTrace()[0].getMethodName());
    // Check if linkPath exists
    String strLinkPathId = repository.getObjectByPath(ticket, linkPath);
    if (isValid(strLinkPathId)) {
        // Get the logical document
        EPLogical logicalDoc = getDocumentById(ticket, strLogicalnodeId);
        String strConcreteType = logicalDoc.getNodeType().replaceFirst("_l_", "_c_");
        if (logicalDoc != null) {
            // Create a concrete document
            if (contentSourcePath.length() > 0) {
                // File f = new File(contentSourcePath);
                FileInputStream fileIS = new FileInputStream(contentSourcePath);
                String strMimeType = getMimeType(contentSourcePath);
                String strDosExtension = "";
                int pos = contentSourcePath.lastIndexOf(".");
                if (pos > 0)
                    strDosExtension = contentSourcePath.substring(pos);
                // commented for testing. LINGUISTIC_VERSIONS_LOCATION +  "/" + strUDI.replaceAll(":", ";");
                String strConcreteLinkPath = linkPath;
                String strConcreteLinkPathId = repository.getObjectByPath(ticket, strConcreteLinkPath);
                if (strConcreteLinkPathId == null) {
                // TODO: Loop to create full folder structure
                // strConcreteLinkPathId = repository.createFolder(ticket, "folder", strUDI.replaceAll(":", ";"), LINGUISTIC_VERSIONS_LOCATION);
                }
                // Create the Concrete Object
                // strConcretenodeId = repository.createNode(ticket, strConcreteType, objectName + "_" + languageCode + strDosExtension, strConcreteLinkPath, fileIS, strMimeType);
                strConcretenodeId = repository.createNode(ticket, strConcreteType, logicalDoc.getNodeName() + "_" + languageCode + strDosExtension, strConcreteLinkPath, fileIS, strMimeType);
                EPConcrete concreteDoc = getNodeById(ticket, strConcretenodeId);
                if (concreteDoc != null) {
                    concreteDoc.setAttributeValue(ATTR_DOC_UID, logicalDoc.getAttributeValue(ATTR_DOC_UID));
                    concreteDoc.setAttributeValue("ep_original", "false");
                    concreteDoc.setAttributeValue("ep_language_code", languageCode.toLowerCase());
                    concreteDoc.save();
                }
            }
            // link both
            if ((strLogicalnodeId != null) && (strConcretenodeId != null)) {
                boolean blnResult = logicalDoc.linkLinguisticVersion(strConcretenodeId, languageCode);
                logger.debug(" linkLinguisticVersion = " + blnResult);
            // boolean blnResult= repository.
            } else {
            // Something went wrong : what to do ?
            }
        }
    }
    logger.debug("END   - " + new Exception().getStackTrace()[0].getMethodName());
    return strConcretenodeId;
}
