public static ParsedDateTime parseDateTime(String dateStr, TimeZone dftTZ, boolean isToDate) throws DateParseException {
    /* no date string specified? */
    if (StringTools.isBlank(dateStr)) {
        throw new DateParseException("'dateStr' argtument is null/empty");
    }
    /* parse fields */
    String[] dateGrp = StringTools.parseString(dateStr, ",");
    int grpLen = dateGrp.length;
    if ((dateGrp.length < 1) || (dateGrp.length > 3)) {
        throw new DateParseException("Invalid number of ',' separated groups");
    }
    /* extract timezone (if any) */
    TimeZone timeZone = dftTZ;
    if ((dateGrp[grpLen - 1].length() > 0) && Character.isLetter(dateGrp[grpLen - 1].charAt(0))) {
        timeZone = DateTime.getTimeZone(dateGrp[grpLen - 1], null);
        if (timeZone == null) {
            throw new DateParseException("Invalid TimeZone: " + dateGrp[grpLen - 1]);
        }
        grpLen--;
    }
    /* parse date/time fields */
    String[] dateFld = null;
    if (grpLen == 1) {
        // EEEEEEEE
        // YYYY/MM[/DD[/hh[:mm[:ss]]]]
        String[] d = StringTools.parseString(dateGrp[0], "/:");
        if ((d.length < 1) || (d.length > 6)) {
            throw new DateParseException("Invalid Date/Time specification: " + dateGrp[0]);
        } else if (d.length == 1) {
            // EEEEEEEE
            long epoch = StringTools.parseLong(d[0], DateTime.getCurrentTimeSec());
            return new ParsedDateTime(timeZone, epoch);
        } else {
            // (length >= 2) && (length <= 6)
            dateFld = d;
        }
    } else if (grpLen == 2) {
        // YYYY/MM/DD,hh[:mm[:ss]]]]
        String[] d = StringTools.parseString(dateGrp[0], "/:");
        String[] t = StringTools.parseString(dateGrp[1], "/:");
        if (d.length != 3) {
            throw new DateParseException("Invalid Date specification: " + dateGrp[0]);
        } else if ((t.length < 1) || (t.length > 3)) {
            throw new DateParseException("Invalid Time specification: " + dateGrp[1]);
        } else {
            // (length >= 3) && (length <= 6)
            dateFld = new String[d.length + t.length];
            System.arraycopy(d, 0, dateFld, 0, d.length);
            System.arraycopy(t, 0, dateFld, d.length, t.length);
        }
    }
    /* evaluate date/time fields */
    DateTime now = new DateTime(timeZone);
    int YY = StringTools.parseInt(dateFld[0], now.getYear());
    int MM = StringTools.parseInt(dateFld[1], now.getMonth1());
    int DD = 0;
    // default to end of day
    int hh = isToDate ? 23 : 0;
    // default to end of hour
    int mm = isToDate ? 59 : 0;
    // default to end of minute
    int ss = isToDate ? 59 : 0;
    if (dateFld.length >= 3) {
        // at least YYYY/MM/DD provided
        DD = StringTools.parseInt(dateFld[2], now.getDayOfMonth());
        if (dateFld.length >= 4) {
            hh = StringTools.parseInt(dateFld[3], hh);
        }
        if (dateFld.length >= 5) {
            mm = StringTools.parseInt(dateFld[4], mm);
        }
        if (dateFld.length >= 6) {
            ss = StringTools.parseInt(dateFld[5], ss);
        }
    } else {
        // only YYYY/MM provided
        DD = isToDate ? DateTime.getDaysInMonth(timeZone, MM, YY) : 1;
    }
    /* return new ParsedDateTime instance */
    return new ParsedDateTime(timeZone, YY, MM, DD, hh, mm, ss);
}
