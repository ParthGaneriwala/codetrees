@Test
public void testConvertMapListToDataSetReturnWithName() {
    Map<String, Object> dataMap1 = new LinkedHashMap<String, Object>();
    dataMap1.put("field1", "value1");
    dataMap1.put("field2", Integer.MAX_VALUE);
    dataMap1.put("field3", false);
    dataMap1.put("field4", Long.MAX_VALUE);
    dataMap1.put("field5", Float.MAX_VALUE);
    dataMap1.put("field6", Double.MAX_VALUE);
    dataMap1.put("field7", BigDecimal.valueOf(Double.MAX_VALUE));
    dataMap1.put("field8", Calendar.getInstance().getTime());
    dataMap1.put("field9", Calendar.getInstance().getTime());
    dataMap1.put("field10", Calendar.getInstance().getTime());
    dataMap1.put("field11", (new String("field11")).getBytes());
    Map<String, Object> dataMap2 = new LinkedHashMap<String, Object>();
    dataMap2.put("field1", "value1");
    dataMap2.put("field2", Integer.MAX_VALUE);
    dataMap2.put("field3", false);
    dataMap2.put("field4", Long.MAX_VALUE);
    dataMap2.put("field5", Float.MAX_VALUE);
    dataMap2.put("field6", Double.MAX_VALUE);
    dataMap2.put("field7", BigDecimal.valueOf(Double.MAX_VALUE));
    dataMap2.put("field8", Calendar.getInstance().getTime());
    dataMap2.put("field9", Calendar.getInstance().getTime());
    dataMap2.put("field10", Calendar.getInstance().getTime());
    dataMap2.put("field11", (new String("field11")).getBytes());
    List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>();
    mapList.add(dataMap1);
    mapList.add(dataMap2);
    // add data set row
    DataSet dataSet = XplatformUtils.convertMapListToDataSet(mapList, "testDataSet");
    assertEquals("testDataSet", dataSet.getName());
    logger.debug("dataSet name: {}", dataSet.getName());
    // check data set
    int rowCount = dataSet.getRowCount();
    logger.debug("rowCount: {}", rowCount);
    for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {
        int columnCount = dataSet.getColumnCount();
        for (int columnIndex = 0; columnIndex < columnCount; columnIndex++) {
            ColumnHeader columnHeader = dataSet.getColumn(columnIndex);
            logger.debug("name: {}, value: {}", columnHeader.getName(), dataSet.getObject(rowIndex, columnIndex));
        }
    }
}
