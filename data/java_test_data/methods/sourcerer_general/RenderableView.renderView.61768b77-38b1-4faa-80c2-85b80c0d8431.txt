protected void renderView(Renderer renderer) {
    // save the compositor's original camera and dependency map, swap in our group state
    Compositor compositor = _ctx.getCompositor();
    Camera ocamera = compositor.getCamera();
    Map<Dependency, Dependency> odeps = compositor.getDependencies();
    RenderQueue.Group group = compositor.getGroup();
    _gstate.swap(group);
    // install our camera, dependency map
    compositor.setCamera(_camera);
    compositor.setDependencies(_dependencies);
    // update the camera viewport
    Insets insets = getInsets();
    _camera.getViewport().set(_static ? 0 : (getAbsoluteX() + insets.left), _static ? 0 : (getAbsoluteY() + insets.bottom), _width - insets.getHorizontal(), _height - insets.getVertical());
    // update the camera handler/camera position
    _camhand.updatePerspective();
    Transform3D viewNodeTransform = getViewNodeTransform();
    if (viewNodeTransform == null) {
        _camhand.updatePosition();
    } else {
        _camera.getWorldTransform().set(viewNodeTransform);
        _camera.updateTransform();
    }
    // update the view transform state
    _viewTransformState.getModelview().set(_viewTransform);
    _viewTransformState.setDirty(true);
    try {
        // push the modelview matrix
        if (!_static) {
            renderer.setMatrixMode(GL11.GL_MODELVIEW);
            GL11.glPushMatrix();
            GL11.glLoadIdentity();
        }
        // composite the config models
        for (Model model : _configModels) {
            model.composite();
        }
        // composite the other compositables
        for (int ii = 0, nn = _compositables.size(); ii < nn; ii++) {
            _compositables.get(ii).composite();
        }
        // enqueue and clear the enqueueables
        compositor.enqueueEnqueueables();
        // sort the queues in preparation for rendering
        group.sortQueues();
        // apply the camera state
        _camera.apply(renderer);
        // clear the buffers
        Rectangle oscissor = renderer.getScissor();
        if (oscissor != null) {
            _oscissor.set(oscissor);
        }
        renderer.setScissor(_camera.getViewport());
        renderer.setClearDepth(1f);
        renderer.setState(DepthState.TEST_WRITE);
        if (_static) {
            renderer.setState(ColorMaskState.ALL);
            renderer.setClearColor(new Color4f(0f, 0f, 0f, 0f));
            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
        } else {
            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
        }
        renderer.setScissor(oscissor == null ? null : _oscissor);
        // render the contents of the queues
        group.renderQueues(RenderQueue.NORMAL_TYPE);
    } finally {
        // clear out the dependencies, render queues
        compositor.clearDependencies();
        group.clearQueues();
        // restore the original camera, dependency map, group state
        compositor.setCamera(ocamera);
        compositor.setDependencies(odeps);
        _gstate.swap(group);
        // restore the original viewport and projection
        if (!_static) {
            Rectangle viewport = ocamera.getViewport();
            renderer.setViewport(viewport);
            renderer.setProjection(0f, viewport.width, 0f, viewport.height, -1f, +1f, Vector3f.UNIT_Z, true);
            // reapply the overlay states
            renderer.setStates(_root.getStates());
            // pop the modelview matrix
            renderer.setMatrixMode(GL11.GL_MODELVIEW);
            GL11.glPopMatrix();
        }
    }
}
