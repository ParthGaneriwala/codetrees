private void moveTextSections(int offset, int diff) {
    if (diff != 0) {
        int i;
        // resize .text section
        SectionHeader text = parser.getTextSectionHeader();
        int text_size = text.getVirtualSize();
        text_size += diff;
        text.setVirtualSize(text_size);
        // reset of section headers
        if (text_size > text.getSizeOfRawData()) {
            int align = parser.getNTSpecific().getFileAlignment();
            text.setSizeOfRawData(align + text.getSizeOfRawData());
            // move .rsrc and .reloc section
            ArrayList<SectionHeader> secHeaders = parser.getSectionHeaders();
            SectionHeader sh;
            for (i = 0; i < secHeaders.size(); i++) {
                sh = secHeaders.get(i);
                if (!sh.getNameAsString().equals(CLELConstants.TEXTSECTION_NAME))
                    sh.setPointerToRawData(align + sh.getPointerToRawData());
            }
        }
        // move method headers
        StreamTable st = parser.getPoundTildaStream().getStreamTable(CLELConstants.METHODDEF_TABLE);
        ArrayList<StreamTableRow> rows = st.getRows();
        StreamTableRow r;
        int off, rva;
        for (i = 0; i < rows.size(); i++) {
            r = rows.get(i);
            rva = r.getMethodDefRVA();
            if (offset < rva)
                r.setMethodDefRVA(rva + diff);
        }
        ArrayList<MethodHeader> headers = parser.getMethodHeaders();
        for (i = 0; i < headers.size(); i++) if (offset < headers.get(i).getRVA())
            headers.get(i).setRVA(headers.get(i).getRVA() + diff);
        DataDirectories dd = parser.getDataDirectories();
        // move metadataroot and metadataroot stream headers
        off = parser.getCLRHeader().getMetaData();
        if (offset < off)
            parser.getCLRHeader().setMetaData(off + diff);
        // move Import Address Table
        off = dd.getIAT().getOffset();
        if (offset < off)
            dd.setIAT(new TableLocation(dd.getIAT().getLength(), dd.getIAT().getOffset() + diff));
        // move CLR Header
        off = dd.getCLRHeader().getOffset();
        if (offset < off)
            dd.setCLRHeader(new TableLocation(dd.getCLRHeader().getLength(), dd.getCLRHeader().getOffset() + diff));
        // move Import Table
        off = dd.getImportTable().getOffset();
        if (offset < off)
            dd.setImportTable(new TableLocation(dd.getImportTable().getLength(), dd.getImportTable().getOffset() + diff));
        // move Debug table
        off = dd.getDebug().getOffset();
        if (offset < off)
            dd.setDebug(new TableLocation(dd.getDebug().getLength(), dd.getDebug().getOffset() + diff));
        // move Resource table
        off = dd.getResourceTable().getOffset();
        if (offset < off)
            dd.setResourceTable(new TableLocation(dd.getResourceTable().getLength(), dd.getResourceTable().getOffset() + diff));
        if (parser.getImportTable() != null) {
            int ilt = parser.getImportTable().getImportLookupTable();
            if (offset < ilt)
                parser.getImportTable().setImportLookupTable(ilt + diff);
        }
        if (parser.getImportAddressTable() != null) {
            int name_table = parser.getImportAddressTable().getNameTableRVA();
            if (offset < name_table)
                parser.getImportAddressTable().setNameTableRVA(name_table + diff);
        }
    }
}
