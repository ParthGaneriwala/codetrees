public static double[][] buildSimpleArray(final double[] tops, double[] bottoms, double[]... vals) {
    int intervalCount = Math.min(tops.length, bottoms.length);
    for (int i = 0; i < vals.length; i++) {
        intervalCount = Math.min(intervalCount, vals[i].length);
    }
    int size = intervalCount * 2;
    double[] mds = new double[size];
    double[][] values = new double[vals.length][size];
    double prev = 0.0;
    int idx = 0;
    for (int i = 0; i < intervalCount; i++) {
        double top = tops[i];
        double bot = bottoms[i];
        if (i == 0) {
            mds[idx] = top;
            mds[idx + 1] = bot;
            for (int n = 0; n < vals.length; n++) {
                values[n][idx] = vals[n][i];
            }
            idx++;
            prev = bot;
            continue;
        }
        if (MathUtils.isApproximatelyEqual(top, prev) == false) {
            mds[idx] = prev;
            mds[idx + 1] = top;
            for (int j = 0; j < vals.length; j++) {
                values[j][idx] = NoValues.DOUBLE_NOVALUE;
            }
            idx++;
        }
        mds[idx] = top;
        mds[idx + 1] = bot;
        for (int n = 0; n < vals.length; n++) {
            values[n][idx] = vals[n][i];
        }
        idx++;
        prev = bot;
    }
    // Fill last one
    for (int n = 0; n < vals.length; n++) {
        values[n][idx] = NoValues.DOUBLE_NOVALUE;
    }
    // resize
    double[] newMds = ArrayUtils.subarray(mds, 0, idx + 1);
    double[][] newValues = new double[vals.length][];
    for (int j = 0; j < vals.length; j++) {
        newValues[j] = ArrayUtils.subarray(values[j], 0, idx + 1);
    }
    double[][] results = new double[vals.length + 1][];
    results[0] = newMds;
    for (int n = 1; n < results.length; n++) {
        results[n] = newValues[n - 1];
    }
    return results;
}
