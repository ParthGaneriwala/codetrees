@Test
public void test2() throws Exception {
    String rsrcName = "rsrc/test2.asn";
    URL url = ASN1ModuleParser.class.getResource(rsrcName);
    if (null == url)
        throw new RuntimeException("The resource file " + StringUtil.singleQuote(rsrcName) + " couldn't be found!");
    File module = new File(url.getFile());
    ASN1ModuleParser moduleParser = new ASN1ModuleParser();
    moduleParser.initialize(module);
    Collection<ASN1Definition> defs = moduleParser.getDefinitions();
    Assert.assertEquals(9, defs.size());
    // Variation-ref ::= SEQUENCE {
    // id        Dbtag OPTIONAL,
    // phenotype SET OF Phenotype OPTIONAL,
    // 
    // method SET OF INTEGER {
    // unknown             (0),
    // other               (255)
    // } OPTIONAL,
    // 
    // population-data SET OF Population-data OPTIONAL,
    // 
    // variant-prop VariantProperties OPTIONAL,
    // 
    // validated BOOLEAN OPTIONAL,
    // 
    // clinical-test SET OF Dbtag OPTIONAL,
    // 
    // allele-origin INTEGER {
    // unknown         (0),
    // other           (255)
    // } OPTIONAL,
    // 
    // allele-frequency REAL OPTIONAL,
    // 
    // is-ancestral-allele BOOLEAN OPTIONAL,
    // 
    // pub Pub OPTIONAL,
    // 
    // data CHOICE {
    // unknown NULL,
    // 
    // set SEQUENCE {
    // type INTEGER {
    // unknown     (0),
    // other       (255)
    // },
    // variations SET OF Variation-ref,
    // name  VisibleString OPTIONAL
    // }
    // },
    // 
    // consequence SET OF CHOICE {
    // unknown     NULL,
    // note        VisibleString,
    // variation   Variation-ref,
    // 
    // frameshift SEQUENCE {
    // phase INTEGER OPTIONAL,
    // x-length INTEGER OPTIONAL
    // },
    // 
    // loss-of-heterozygosity SEQUENCE {
    // reference VisibleString OPTIONAL,
    // test VisibleString OPTIONAL
    // }
    // } OPTIONAL,
    // 
    // ext-locs SET OF Ext-loc OPTIONAL,
    // 
    // ext             User-object OPTIONAL
    // }
    ASN1Definition def = moduleParser.getDefinition("Variation-ref");
    Assert.assertEquals("SEQUENCE", def.getTypeName());
    Assert.assertEquals(15, def.getFields().size());
    // Seq-gap ::= SEQUENCE {
    // type INTEGER {
    // unknown(0),
    // contig(8),
    // other(255)
    // }
    // DEFAULT unknown ,
    // 
    // linkage INTEGER {
    // unlinked(0),
    // linked(1),
    // other(255)
    // } OPTIONAL
    // }
    def = moduleParser.getDefinition("Seq-gap");
    Assert.assertEquals("SEQUENCE", def.getTypeName());
    Assert.assertEquals(2, def.getFields().size());
    Assert.assertEquals("type", def.getField(0).getLabel());
    Assert.assertEquals("INTEGER", def.getField(0).getTypeName());
    Assert.assertFalse(def.getField(0).getIsOptional());
    Assert.assertNull(def.getField(0).getFields());
    Assert.assertEquals("other", def.getField(0).getEnumeratedValue(255));
    Assert.assertEquals("unknown", def.getField(0).getDefaultValue());
    Assert.assertEquals("linkage", def.getField(1).getLabel());
    Assert.assertEquals("INTEGER", def.getField(1).getTypeName());
    Assert.assertTrue(def.getField(1).getIsOptional());
    Assert.assertNull(def.getField(1).getFields());
    Assert.assertEquals("other", def.getField(1).getEnumeratedValue(255));
    // Affil ::= CHOICE {
    // str VisibleString ,
    // std SEQUENCE {
    // affil VisibleString ,
    // postal-code VisibleString OPTIONAL }}
    def = moduleParser.getDefinition("Affil");
    Assert.assertEquals("CHOICE", def.getTypeName());
    Assert.assertEquals(2, def.getFields().size());
    Assert.assertEquals("str", def.getField(0).getLabel());
    Assert.assertEquals("VisibleString", def.getField(0).getTypeName());
    Assert.assertFalse(def.getField(0).getIsOptional());
    Assert.assertNull(def.getField(0).getFields());
    Assert.assertEquals("std", def.getField(1).getLabel());
    Assert.assertEquals("SEQUENCE", def.getField(1).getTypeName());
    Assert.assertFalse(def.getField(1).getIsOptional());
    Assert.assertEquals(2, def.getField(1).getFields().size());
    // Auth-list ::= SEQUENCE {
    // names CHOICE {
    // std SEQUENCE OF Author ,
    // ml SEQUENCE OF VisibleString ,
    // str SEQUENCE OF VisibleString } ,
    // affil Affil OPTIONAL }
    def = moduleParser.getDefinition("Auth-list");
    Assert.assertEquals(2, def.getFields().size());
    Assert.assertEquals("names", def.getField(0).getLabel());
    Assert.assertEquals("CHOICE", def.getField(0).getTypeName());
    Assert.assertFalse(def.getField(0).getIsOptional());
    Assert.assertEquals(3, def.getField(0).getFields().size());
    Assert.assertEquals("affil", def.getField(1).getLabel());
    Assert.assertEquals("Affil", def.getField(1).getTypeName());
    Assert.assertTrue(def.getField(1).getIsOptional());
    // Foobar ::= SET OF INTEGER
    def = moduleParser.getDefinition("Foobar");
    Assert.assertEquals("Foobar", def.getLabel());
    Assert.assertEquals("SET", def.getTypeName());
    Assert.assertEquals("INTEGER", def.getCollectionFieldTypeName());
    Assert.assertNull(def.getFields());
    // Junk ::= CHOICE {
    // one INTEGER ,
    // two REAL,
    // three VisibleString DEFAULT "THREE_DEF",
    // name CHOICE {
    // binomial INTEGER ,
    // virus VisibleString  } OPTIONAL
    // }
    def = moduleParser.getDefinition("Junk");
    Assert.assertEquals("THREE_DEF", def.getField(2).getDefaultValue());
    Assert.assertTrue(def.getField(3).getIsOptional());
    // Cit-let ::= SEQUENCE {                  -- letter, thesis, or manuscript
    // cit Cit-book ,                      -- same fields as a book
    // man-id VisibleString OPTIONAL ,     -- Manuscript identifier
    // type ENUMERATED {
    // manuscript (1) ,
    // letter (2) ,
    // thesis (3) } OPTIONAL }
    def = moduleParser.getDefinition("Cit-let");
    Assert.assertEquals(3, def.getFields().size());
    Assert.assertEquals("cit", def.getField(0).getLabel());
    Assert.assertEquals("Cit-book", def.getField(0).getTypeName());
    Assert.assertFalse(def.getField(0).getIsOptional());
    Assert.assertEquals("man-id", def.getField(1).getLabel());
    Assert.assertEquals("VisibleString", def.getField(1).getTypeName());
    Assert.assertTrue(def.getField(1).getIsOptional());
    Assert.assertEquals("type", def.getField(2).getLabel());
    Assert.assertEquals("ENUMERATED", def.getField(2).getTypeName());
    Assert.assertEquals("thesis", def.getField(2).getEnumeratedValue(3));
    Assert.assertTrue(def.getField(2).getIsOptional());
    // Na-strand ::= ENUMERATED {          -- strand of nucleic acid
    // unknown (0) ,
    // plus (1) ,
    // minus (2) ,
    // both (3) ,                -- in forward orientation
    // both-rev (4) ,            -- in reverse orientation
    // other (255) }
    def = moduleParser.getDefinition("Na-strand");
    Assert.assertEquals("ENUMERATED", def.getTypeName());
    Assert.assertEquals("plus", def.getEnumeratedValue(1));
    Assert.assertEquals("other", def.getEnumeratedValue(255));
    // GIBB-mol ::= ENUMERATED {
    // unknown (0) ,
    // genomic-mRNA (10) ,
    // other (255) }
    def = moduleParser.getDefinition("GIBB-mol");
    Assert.assertEquals("ENUMERATED", def.getTypeName());
    Assert.assertEquals("other", def.getEnumeratedValue(255));
}
