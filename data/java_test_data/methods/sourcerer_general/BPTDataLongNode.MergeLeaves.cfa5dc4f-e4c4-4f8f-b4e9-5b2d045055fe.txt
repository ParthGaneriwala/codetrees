public static // , out boolean DeleteRight)
void MergeLeaves(// , out boolean DeleteRight)
BPTDataLongNode left, // , out boolean DeleteRight)
BPTDataLongNode right) throws Exception {
    // DeleteRight = false;
    String[] allkeys = new String[left.Size * 2];
    long[] allseeks = new long[left.Size * 2];
    int index = 0;
    for (int i = 0; i < left.Size; i++) {
        if (left.ChildKeys[i] == null) {
            break;
        }
        allkeys[index] = left.ChildKeys[i];
        allseeks[index] = left.ChildBufferNumbers[i];
        index++;
    }
    for (int i = 0; i < right.Size; i++) {
        if (right.ChildKeys[i] == null) {
            break;
        }
        allkeys[index] = right.ChildKeys[i];
        allseeks[index] = right.ChildBufferNumbers[i];
        index++;
    }
    if (index <= left.Size) {
        left.Clear();
        // DeleteRight = true;
        right.isValid = false;
        for (int i = 0; i < index; i++) {
            left.ChildKeys[i] = allkeys[i];
            left.ChildBufferNumbers[i] = allseeks[i];
        }
        right.Free();
        left.Soil();
        return;
    }
    left.Clear();
    right.Clear();
    left.Soil();
    right.Soil();
    int rightcontent = index / 2;
    int leftcontent = index - rightcontent;
    int newindex = 0;
    for (int i = 0; i < leftcontent; i++) {
        left.ChildKeys[i] = allkeys[newindex];
        left.ChildBufferNumbers[i] = allseeks[newindex];
        newindex++;
    }
    for (int i = 0; i < rightcontent; i++) {
        right.ChildKeys[i] = allkeys[newindex];
        right.ChildBufferNumbers[i] = allseeks[newindex];
        newindex++;
    }
}
