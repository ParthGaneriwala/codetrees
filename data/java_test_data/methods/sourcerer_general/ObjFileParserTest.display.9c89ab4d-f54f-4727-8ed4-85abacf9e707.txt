@Override
public void display(GLAutoDrawable drawable) {
    GL gl = drawable.getGL();
    gl.glClearDepth(1);
    gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
    // glut.glutSolidSphere (1.0, 20, 16);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
    gl.glTranslatef(0.0f, 0.0f, -3.0f);
    if (drawModels) {
        gl.glPushMatrix();
        gl.glRotatef(zOffset++, 1, 0, 0);
        float[] mat_specular = { 1, 1, 1, 1 };
        float[] mat_shininess = { 50 };
        gl.glEnable(GL.GL_LIGHTING);
        gl.glMaterialfv(GL.GL_FRONT, GL.GL_SPECULAR, mat_specular, 0);
        gl.glMaterialfv(GL.GL_FRONT, GL.GL_SHININESS, mat_shininess, 0);
        glut.glutSolidSphere(1.0, 20, 16);
        gl.glTranslatef(-3, 0, 0);
        gl.glRotatef(30, 0, 0, 1);
        Canvas3DJOGL canvas3D = new Canvas3DJOGL();
        canvas3D.setGL(gl);
        testModel.draw(canvas3D);
        gl.glDisable(GL.GL_LIGHTING);
        gl.glPopMatrix();
    }
    if (drawRooms) {
        gl.glPushMatrix();
        gl.glEnable(GL.GL_CULL_FACE);
        gl.glCullFace(GL.GL_BACK);
        gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE_MINUS_SRC_ALPHA);
        gl.glEnable(GL.GL_BLEND);
        // gl.glTranslated(0, 0, -5);
        gl.glTranslated(0, -2, 0);
        enableIsometricMode(gl);
        drawRoom(gl, 5, 5);
        gl.glTranslated(3, 3, 0);
        enableTexture(gl, boxTexture);
        drawIsoBox(gl, boxTexture, boxTexture.getImageTexCoords());
        disableTexture(gl, boxTexture);
        disableIsometricMode(gl);
        gl.glDisable(GL.GL_CULL_FACE);
        gl.glDisable(GL.GL_BLEND);
        gl.glPopMatrix();
    }
    gl.glFlush();
    if (drawTriangle) {
        gl.glPushMatrix();
        gl.glRotatef(rotate, 1, 0, 0);
        gl.glPolygonMode(GL.GL_FRONT_AND_BACK, GL.GL_LINE);
        // gl.glBegin(GL.GL_LINE);
        gl.glBegin(GL.GL_TRIANGLE_FAN);
        {
            gl.glColor3f(1.0f, 0.0f, 0.0f);
            // V0(red)
            gl.glVertex3f(0.0f, 1.0f, 0.0f);
            gl.glColor3f(0.0f, 1.0f, 0.0f);
            // V1(green)
            gl.glVertex3f(-1.0f, -1.0f, 1.0f);
            gl.glColor3f(0.0f, 0.0f, 1.0f);
            // V2(blue)
            gl.glVertex3f(1.0f, -1.0f, 1.0f);
            gl.glColor3f(0.0f, 1.0f, 0.0f);
            // V3(green)
            gl.glVertex3f(1.0f, -1.0f, -1.0f);
            gl.glColor3f(0.0f, 0.0f, 1.0f);
            // V4(blue)
            gl.glVertex3f(-1.0f, -1.0f, -1.0f);
            gl.glColor3f(0.0f, 1.0f, 0.0f);
            // V1(green)
            gl.glVertex3f(-1.0f, -1.0f, 1.0f);
        }
        gl.glEnd();
        gl.glBegin(GL.GL_QUADS);
        {
            gl.glColor3f(0.0f, 1.0f, 0.0f);
            // V7
            gl.glVertex3f(-1.0f, -1.0f, 1.0f);
            gl.glColor3f(0.0f, 0.0f, 1.0f);
            // V5
            gl.glVertex3f(-1.0f, -1.0f, -1.0f);
            gl.glColor3f(0.0f, 1.0f, 0.0f);
            // V3
            gl.glVertex3f(1.0f, -1.0f, -1.0f);
            gl.glColor3f(0.0f, 0.0f, 1.0f);
            // V1
            gl.glVertex3f(1.0f, -1.0f, 1.0f);
        }
        gl.glEnd();
        rotate = rotate + 0.5f;
        gl.glPopMatrix();
    }
}
