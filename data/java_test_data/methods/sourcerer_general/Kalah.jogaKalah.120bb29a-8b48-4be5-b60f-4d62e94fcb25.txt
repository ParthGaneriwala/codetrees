private void jogaKalah(int cavidade) {
    int cavRand;
    if ((cavidade > 0) && (cavidade < tab.tamanho() / 2)) {
        if (tab.valorCavidade(cavidade) == 0)
            JOptionPane.showMessageDialog(this, "A cavidade deve conter sementes...", "Cavidade errada!", JOptionPane.ERROR_MESSAGE);
        else {
            acabou = tab.semeia(cavidade);
            // testa se depois da semeadura o fim do jogo foi atingido
            fimKalah(acabou);
            if (acabou)
                return;
            repaint();
            if (tab.acabou()) {
                // testa se o jogador terminou de jogar e inicia a jogada do computador
                // 
                // TODO tirar println
                System.out.println();
                Arvore minimax = new Arvore(new No(tab, true), dificuldade, sementes);
                cavidades = minimax.cavidades();
                for (int i = 0; i < cavidades.length; i++) {
                    // System.out.print(cavidades[i] + " ");
                    System.out.print("t.semeia(" + cavidades[i] + "); System.out.println(" + cavidades[i] + "); t.imprimeTabuleiro(); ");
                    acabou = tab.semeia(cavidades[i]);
                    fimKalah(acabou);
                }
                // Jogadas aleat�rias do Advers�rio, caso seu n�mero de jogadas exceda o n�mero de n�veis da arvore
                int i = 0;
                while (!tab.acabou()) {
                    cavRand = cavidadeRand();
                    cavidadesRand[i] = cavRand;
                    i++;
                    System.out.print("t.semeia(" + cavRand + "); System.out.println(" + cavRand + "); t.imprimeTabuleiro(); ");
                    // System.out.print(cavRand + " ");
                    acabou = tab.semeia(cavRand);
                    fimKalah(acabou);
                }
                System.out.println();
            }
        }
    } else
        JOptionPane.showMessageDialog(this, "Utilize as cavidades inferiores...", "Cavidade errada!", JOptionPane.ERROR_MESSAGE);
}
