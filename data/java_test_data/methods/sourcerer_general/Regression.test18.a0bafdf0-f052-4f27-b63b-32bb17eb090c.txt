public void test18(Model m) {
    String test = "Test18";
    if (test.equals(test))
        return;
    String testURI = "http://aldabaran.hpl.hp.com/rdftest/test18/";
    String subject1 = testURI + "1";
    String object1 = "<foo bar=\"bar\"><bar>abc<foobar/>def&lt;&gt;&apos;&quot;&amp;</bar></foo>";
    String RDFSchemaURI = "http://lists.w3.org/Archives/Public/www-archive/" + "2001Sep/att-0064/00-rdfschema.rdf";
    int n = 0;
    try {
        System.out.println("Beginning " + test);
        m.read(ResourceReader.getInputStream("modules/rdf/rdfschema.html"), RDFSchemaURI);
        n++;
        if (m.size() != 124)
            error(test, n);
        // n++; m.write(new PrintWriter(System.out));
        StmtIterator iter = m.listStatements();
        while (iter.hasNext()) {
            iter.nextStatement();
            iter.remove();
        }
        m.read(ResourceReader.getInputStream("modules/rdf/embeddedxml.xml"), "");
        n++;
        /* I'd like to test for the exactly correct value here, but can't since the
  * exactly correct value is not defined.
            if (! m.contains(m.createResource(subject1),
                             RDF.value, object1)) error(test, n++);
  * So instead lets do some rough checks its right */
        String xml = m.getResource(subject1).getRequiredProperty(RDF.value).getString();
        n++;
        if (xml.indexOf("&lt;") == -1)
            error(test, n);
        n++;
        if (xml.indexOf("&gt;") == -1)
            error(test, n);
        n++;
        if (xml.indexOf("&amp;") == -1)
            error(test, n);
        n++;
        if ((xml.indexOf("'bar'") == -1) && (xml.indexOf("\"bar\"") == -1))
            error(test, n);
        m.createResource().addProperty(RDF.value, "can't loose");
        // m.write(new PrintWriter(System.out));
        iter = m.listStatements();
        while (iter.hasNext()) {
            iter.nextStatement();
            iter.remove();
        }
        n++;
        m.read(ResourceReader.getInputStream("modules/rdf/testcollection.rdf"), "");
        if (m.size() != 24)
            error(test, (int) m.size());
        iter = m.listStatements();
        while (iter.hasNext()) {
            iter.nextStatement();
            iter.remove();
        }
        try {
            m.read(System.getProperty("com.hp.hpl.jena.regression.testURL", RDFSchemaURI));
            // n++; m.write(new PrintWriter(System.out));
            n++;
            if ((m.size() != 124) && (m.size() != 125)) {
                System.out.println("size = " + m.size());
                error(test, n);
            }
            if (!m.contains(RDF.Property, RDF.type, RDFS.Class))
                error(test, n);
        } catch (JenaException rdfx) {
            Throwable th = rdfx.getCause();
            if (th instanceof NoRouteToHostException || th instanceof UnknownHostException || th instanceof IOException || th instanceof ConnectException) {
                logger.warn("Cannot access public internet- part of test not executed");
            } else {
                throw rdfx;
            }
        }
    } catch (Exception e) {
        logger.error("test " + test + "[" + n + "]", e);
        errors = true;
    }
// System.out.println("End of " + test);
}
