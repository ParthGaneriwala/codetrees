public double[] trace(RGBImage img, int c_x, int c_y) {
    if (img == null)
        return null;
    ImageOperator operator = new SobelEdgeDetect(img);
    img = operator.apply();
    ContrastStretching operator2 = new ContrastStretching(img);
    operator2.setParameters(180, 0, 180, 255);
    img = operator2.apply();
    /*
        Morphology morph = new Morphology(img);
		StructuringElement kernel = new StructuringElement(3,3);
		kernel.setValue(0, 1);
		kernel.setValue(1, 1);
		kernel.setValue(2, 1);
		kernel.setValue(3, 1);
		kernel.setValue(4, 1);
		kernel.setValue(5, 1);
		kernel.setValue(6, 1);
		kernel.setValue(7, 1);
		kernel.setValue(8, 1);
		morph.setParameters(Morphology.EROSION, kernel);
		img = morph.apply();
		*/
    try {
        ImageIO.write(img.getBufferedImage(), "jpg", new File("leaf.jpg"));
    } catch (Exception e) {
        e.printStackTrace();
    }
    int width = img.getWidth();
    int height = img.getHeight();
    double[] feature_array = new double[360 * 2];
    double n_x = 0, n_y = 0;
    // Q1
    int starting_x = width;
    int starting_y = c_y;
    int theta = 0;
    // constant x, changing y;
    n_x = (width - 1) - c_x;
    for (int y = starting_y; y > 0; y--) {
        // compute theta
        // normalize transpos x and y based on a 0, 0 coord
        n_y = c_y - y;
        theta = (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, width - 1, y);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    // 2 *  Q1/2
    starting_x = width;
    starting_y = 0;
    n_y = c_y;
    for (int x = starting_x; x >= c_x; x--) {
        n_x = x - c_x;
        theta = (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (theta < 0)
            continue;
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, x, 0);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    // 1 *  Q2/1
    starting_x = c_x - 1;
    starting_y = 0;
    n_y = c_y;
    for (int x = starting_x; x >= 0; x--) {
        n_x = x - c_x;
        theta = 180 + (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (theta < 0)
            continue;
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, x, 0);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    // 2 Q2 /2
    starting_x = 0;
    starting_y = 0;
    n_x = 0 - c_x;
    for (int y = starting_y; y <= c_y; y++) {
        n_y = c_y - y;
        theta = 180 + (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (theta < 0)
            continue;
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, 0, y);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    // 1 Q3/2
    starting_x = 0;
    starting_y = c_y;
    n_x = 0 - c_x;
    for (int y = starting_y; y < height; y++) {
        n_y = c_y - y;
        theta = 180 + (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (theta < 0)
            continue;
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, 0, y);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    // 2 *  Q3/2
    starting_x = 0;
    starting_y = height - 1;
    n_y = c_y - (height - 1);
    for (int x = starting_x; x <= c_x; x++) {
        n_x = x - c_x;
        theta = 180 + (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (theta < 0)
            continue;
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, x, height - 1);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    // 1 *  Q4/2
    starting_x = c_x + 1;
    starting_y = height;
    n_y = c_y - (height - 1);
    for (int x = starting_x; x < width; x++) {
        n_x = x - c_x;
        theta = 360 + (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (theta < 0)
            continue;
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, x, height - 1);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    // 1 Q4/2
    starting_x = 0;
    starting_y = height - 1;
    n_x = (width - 1) - c_x;
    for (int y = starting_y; y > c_y; y--) {
        // compute theta
        // normalize transpos x and y based on a 0, 0 coord
        n_y = c_y - y;
        theta = 360 + (int) Math.floor(Math.toDegrees(Math.atan(n_y / n_x)));
        if (feature_array[theta] == 0 && feature_array[theta + 360] == 0) {
            // do walk bresenham;
            java.awt.Point p = bresenhamSearch(img, c_x, c_y, width - 1, y);
            if (p != null) {
                feature_array[theta] = p.x;
                feature_array[theta + 360] = p.y;
            }
        }
    }
    return feature_array;
}
