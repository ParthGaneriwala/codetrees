protected T doSwitch(int classifierID, EObject theEObject) {
    switch(classifierID) {
        case LoadModelPackage.CONFORM_LOAD:
            {
                ConformLoad conformLoad = (ConformLoad) theEObject;
                T result = caseConformLoad(conformLoad);
                if (result == null)
                    result = caseEnergyConsumer(conformLoad);
                if (result == null)
                    result = caseConductingEquipment(conformLoad);
                if (result == null)
                    result = caseEquipment(conformLoad);
                if (result == null)
                    result = casePowerSystemResource(conformLoad);
                if (result == null)
                    result = caseIdentifiedObject(conformLoad);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.CONFORM_LOAD_GROUP:
            {
                ConformLoadGroup conformLoadGroup = (ConformLoadGroup) theEObject;
                T result = caseConformLoadGroup(conformLoadGroup);
                if (result == null)
                    result = caseLoadGroup(conformLoadGroup);
                if (result == null)
                    result = caseIdentifiedObject(conformLoadGroup);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.LOAD_GROUP:
            {
                LoadGroup loadGroup = (LoadGroup) theEObject;
                T result = caseLoadGroup(loadGroup);
                if (result == null)
                    result = caseIdentifiedObject(loadGroup);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.CONFORM_LOAD_SCHEDULE:
            {
                ConformLoadSchedule conformLoadSchedule = (ConformLoadSchedule) theEObject;
                T result = caseConformLoadSchedule(conformLoadSchedule);
                if (result == null)
                    result = caseSeasonDayTypeSchedule(conformLoadSchedule);
                if (result == null)
                    result = caseRegularIntervalSchedule(conformLoadSchedule);
                if (result == null)
                    result = caseBasicIntervalSchedule(conformLoadSchedule);
                if (result == null)
                    result = caseIdentifiedObject(conformLoadSchedule);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.DAY_TYPE:
            {
                DayType dayType = (DayType) theEObject;
                T result = caseDayType(dayType);
                if (result == null)
                    result = caseIdentifiedObject(dayType);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.ENERGY_AREA:
            {
                EnergyArea energyArea = (EnergyArea) theEObject;
                T result = caseEnergyArea(energyArea);
                if (result == null)
                    result = caseIdentifiedObject(energyArea);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.LOAD_AREA:
            {
                LoadArea loadArea = (LoadArea) theEObject;
                T result = caseLoadArea(loadArea);
                if (result == null)
                    result = caseEnergyArea(loadArea);
                if (result == null)
                    result = caseIdentifiedObject(loadArea);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.LOAD_RESPONSE_CHARACTERISTIC:
            {
                LoadResponseCharacteristic loadResponseCharacteristic = (LoadResponseCharacteristic) theEObject;
                T result = caseLoadResponseCharacteristic(loadResponseCharacteristic);
                if (result == null)
                    result = caseIdentifiedObject(loadResponseCharacteristic);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.NON_CONFORM_LOAD:
            {
                NonConformLoad nonConformLoad = (NonConformLoad) theEObject;
                T result = caseNonConformLoad(nonConformLoad);
                if (result == null)
                    result = caseEnergyConsumer(nonConformLoad);
                if (result == null)
                    result = caseConductingEquipment(nonConformLoad);
                if (result == null)
                    result = caseEquipment(nonConformLoad);
                if (result == null)
                    result = casePowerSystemResource(nonConformLoad);
                if (result == null)
                    result = caseIdentifiedObject(nonConformLoad);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.NON_CONFORM_LOAD_GROUP:
            {
                NonConformLoadGroup nonConformLoadGroup = (NonConformLoadGroup) theEObject;
                T result = caseNonConformLoadGroup(nonConformLoadGroup);
                if (result == null)
                    result = caseLoadGroup(nonConformLoadGroup);
                if (result == null)
                    result = caseIdentifiedObject(nonConformLoadGroup);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.NON_CONFORM_LOAD_SCHEDULE:
            {
                NonConformLoadSchedule nonConformLoadSchedule = (NonConformLoadSchedule) theEObject;
                T result = caseNonConformLoadSchedule(nonConformLoadSchedule);
                if (result == null)
                    result = caseSeasonDayTypeSchedule(nonConformLoadSchedule);
                if (result == null)
                    result = caseRegularIntervalSchedule(nonConformLoadSchedule);
                if (result == null)
                    result = caseBasicIntervalSchedule(nonConformLoadSchedule);
                if (result == null)
                    result = caseIdentifiedObject(nonConformLoadSchedule);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.POWER_CUT_ZONE:
            {
                PowerCutZone powerCutZone = (PowerCutZone) theEObject;
                T result = casePowerCutZone(powerCutZone);
                if (result == null)
                    result = casePowerSystemResource(powerCutZone);
                if (result == null)
                    result = caseIdentifiedObject(powerCutZone);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.SEASON:
            {
                Season season = (Season) theEObject;
                T result = caseSeason(season);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.STATION_SUPPLY:
            {
                StationSupply stationSupply = (StationSupply) theEObject;
                T result = caseStationSupply(stationSupply);
                if (result == null)
                    result = caseEnergyConsumer(stationSupply);
                if (result == null)
                    result = caseConductingEquipment(stationSupply);
                if (result == null)
                    result = caseEquipment(stationSupply);
                if (result == null)
                    result = casePowerSystemResource(stationSupply);
                if (result == null)
                    result = caseIdentifiedObject(stationSupply);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.SUB_LOAD_AREA:
            {
                SubLoadArea subLoadArea = (SubLoadArea) theEObject;
                T result = caseSubLoadArea(subLoadArea);
                if (result == null)
                    result = caseEnergyArea(subLoadArea);
                if (result == null)
                    result = caseIdentifiedObject(subLoadArea);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        case LoadModelPackage.SEASON_DAY_TYPE_SCHEDULE:
            {
                SeasonDayTypeSchedule seasonDayTypeSchedule = (SeasonDayTypeSchedule) theEObject;
                T result = caseSeasonDayTypeSchedule(seasonDayTypeSchedule);
                if (result == null)
                    result = caseRegularIntervalSchedule(seasonDayTypeSchedule);
                if (result == null)
                    result = caseBasicIntervalSchedule(seasonDayTypeSchedule);
                if (result == null)
                    result = caseIdentifiedObject(seasonDayTypeSchedule);
                if (result == null)
                    result = defaultCase(theEObject);
                return result;
            }
        default:
            return defaultCase(theEObject);
    }
}
