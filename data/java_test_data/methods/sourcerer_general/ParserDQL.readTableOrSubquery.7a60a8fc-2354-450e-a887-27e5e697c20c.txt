protected RangeVariable readTableOrSubquery() {
    Table table = null;
    SimpleName alias = null;
    SimpleName[] columnNameList = null;
    OrderedHashSet columnList = null;
    switch(token.tokenType) {
        case Tokens.OPENBRACKET:
            {
                Expression e = XreadTableSubqueryOrJoinedTable();
                table = e.getTable();
                break;
            }
        case Tokens.UNNEST:
            {
                Expression e = XreadCollectionDerivedTable();
                table = e.getTable();
                break;
            }
        case Tokens.LATERAL:
            {
                Expression e = XreadLateralDerivedTable();
                table = e.getTable();
                break;
            }
        case Tokens.TABLE:
            {
                Expression e = XreadTableFunctionDerivedTable();
                table = e.getTable();
                break;
            }
        default:
            {
                table = readNamedSubqueryOrNull();
                if (table == null) {
                    table = readTableName();
                }
                if (table.isView()) {
                    table = ((View) table).getSubqueryTable();
                }
            }
    }
    boolean hasAs = false;
    if (token.tokenType == Tokens.AS) {
        read();
        checkIsNonCoreReservedIdentifier();
        hasAs = true;
    }
    if (isNonCoreReservedIdentifier()) {
        boolean limit = token.tokenType == Tokens.LIMIT || token.tokenType == Tokens.OFFSET || token.tokenType == Tokens.FETCH;
        boolean minus = token.tokenType == Tokens.MINUS_EXCEPT;
        int position = getPosition();
        alias = HsqlNameManager.getSimpleName(token.tokenString, isDelimitedIdentifier());
        read();
        if (token.tokenType == Tokens.OPENBRACKET) {
            columnList = new OrderedHashSet();
            columnNameList = readColumnNameList(columnList);
        } else if (!hasAs && limit) {
            if (token.tokenType == Tokens.COLON || token.tokenType == Tokens.QUESTION || token.tokenType == Tokens.X_VALUE) {
                alias = null;
                rewind(position);
            }
        } else if (!hasAs && minus) {
            rewind(position);
        }
    }
    RangeVariable range = new RangeVariable(table, alias, columnList, columnNameList, compileContext);
    return range;
}
