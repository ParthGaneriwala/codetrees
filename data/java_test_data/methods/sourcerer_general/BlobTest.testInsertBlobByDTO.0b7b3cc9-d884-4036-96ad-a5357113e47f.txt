@SuppressWarnings({ "unchecked", "rawtypes" })
@Test
public void testInsertBlobByDTO() {
    InputStream inputStream = null;
    OutputStream outputStream = null;
    ReadableByteChannel inputChannel = null;
    WritableByteChannel outputChannel = null;
    String fileId;
    String mapId;
    try {
        inputStream = new FileInputStream(sourceFile);
        outputStream = new ByteArrayOutputStream();
        inputChannel = Channels.newChannel(inputStream);
        outputChannel = Channels.newChannel(outputStream);
        int sourceFileSize = ChannelUtils.copy(inputChannel, outputChannel);
        fileId = fileIdGenService.getNextStringId();
        mapId = mapIdGenService.getNextStringId();
        String uniqueFilename = uniqueFilenameGenerationService.getNextStringId();
        // test
        FileDTO fileDTO = new FileDTO();
        fileDTO.setFileId(fileId);
        fileDTO.setMapId(mapId);
        fileDTO.setRealFilename(sourceFile.getName());
        fileDTO.setUniqueFilename(uniqueFilename);
        fileDTO.setRepositoryPath(null);
        fileDTO.setContentType("image/jpeg");
        fileDTO.setFileSize(sourceFileSize);
        fileDTO.setBytes(((ByteArrayOutputStream) outputStream).toByteArray());
        logger.debug("fileDTO: {}", fileDTO);
        queryService.create(fileDTO);
        // assert
        List<FileDTO> fileDTOList = (List) queryService.find(fileDTO);
        FileDTO returnedFileDTO = fileDTOList.get(0);
        logger.debug("returnedFileDTO: {}", returnedFileDTO);
        targetFile = new File("target/" + returnedFileDTO.getRealFilename());
        byte[] bytes = returnedFileDTO.getBytes();
        inputStream = new ByteArrayInputStream(bytes);
        outputStream = new FileOutputStream(targetFile);
        inputChannel = Channels.newChannel(inputStream);
        outputChannel = Channels.newChannel(outputStream);
        int targetFileSize = ChannelUtils.copy(inputChannel, outputChannel);
        assertEquals(sourceFileSize, targetFileSize);
        assertEquals(fileDTO.getUniqueFilename(), returnedFileDTO.getUniqueFilename());
    } catch (IOException e) {
        e.printStackTrace();
        logger.error(e.getMessage());
        fail();
    } catch (BaseException e) {
        e.printStackTrace();
        logger.error(e.getMessage());
        fail();
    } finally {
        try {
            inputChannel.close();
            outputChannel.close();
            inputStream.close();
            outputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
