public void exitUsage(boolean detailed) {
    // 1         2         3         4         5         6         7
    // 1234567890123456789012345678901234567890123456789012345678901234567890123456789
    System.out.println("Usage: $HADOOP_HOME/bin/org.fit.hiai.hadoop jar \\");
    System.out.println("          $HADOOP_HOME/org.fit.hiai.hadoop-streaming.jar [options]");
    System.out.println("Options:");
    System.out.println("  -input    <path>     DFS input file(s) for the Map step");
    System.out.println("  -output   <path>     DFS output directory for the Reduce step");
    System.out.println("  -mapper   <cmd|JavaClassName>      The streaming command to run");
    System.out.println("  -combiner <JavaClassName> Combiner has to be a Java class");
    System.out.println("  -reducer  <cmd|JavaClassName>      The streaming command to run");
    System.out.println("  -file     <file>     File/dir to be shipped in the Job jar file");
    System.out.println("  -inputformat TextInputFormat(default)|SequenceFileAsTextInputFormat|JavaClassName Optional.");
    System.out.println("  -outputformat TextOutputFormat(default)|JavaClassName  Optional.");
    System.out.println("  -partitioner JavaClassName  Optional.");
    System.out.println("  -numReduceTasks <num>  Optional.");
    System.out.println("  -inputreader <spec>  Optional.");
    System.out.println("  -cmdenv   <n>=<v>    Optional. Pass env.var to streaming commands");
    System.out.println("  -mapdebug <path>  Optional. " + "To run this script when a map task fails ");
    System.out.println("  -reducedebug <path>  Optional." + " To run this script when a reduce task fails ");
    System.out.println("  -verbose");
    System.out.println();
    GenericOptionsParser.printGenericCommandUsage(System.out);
    if (!detailed) {
        System.out.println();
        System.out.println("For more details about these options:");
        System.out.println("Use $HADOOP_HOME/bin/org.fit.hiai.hadoop jar build/org.fit.hiai.hadoop-streaming.jar -info");
        fail("");
    }
    System.out.println();
    System.out.println("In -input: globbing on <path> is supported and can have multiple -input");
    System.out.println("Default Map input format: a line is a record in UTF-8");
    System.out.println("  the key part ends at first TAB, the rest of the line is the value");
    System.out.println("Custom input format: -inputformat package.MyInputFormat ");
    System.out.println("Map output format, reduce input/output format:");
    System.out.println("  Format defined by what the mapper command outputs. Line-oriented");
    System.out.println();
    System.out.println("The files or directories named in the -file argument[s] end up in the");
    System.out.println("  working directory when the mapper and reducer are run.");
    System.out.println("  The location of this working directory is unspecified.");
    System.out.println();
    System.out.println("To set the number of reduce tasks (num. of output files):");
    System.out.println("  -D mapred.reduce.tasks=10");
    System.out.println("To skip the sort/combine/shuffle/sort/reduce step:");
    System.out.println("  Use -numReduceTasks 0");
    System.out.println("  A Task's Map output then becomes a 'side-effect output' rather than a reduce input");
    System.out.println("  This speeds up processing, This also feels more like \"in-place\" processing");
    System.out.println("  because the input filename and the map input order are preserved");
    System.out.println("  This equivalent -reducer NONE");
    System.out.println();
    System.out.println("To speed up the last maps:");
    System.out.println("  -D mapred.map.tasks.speculative.execution=true");
    System.out.println("To speed up the last reduces:");
    System.out.println("  -D mapred.reduce.tasks.speculative.execution=true");
    System.out.println("To name the job (appears in the JobTracker Web UI):");
    System.out.println("  -D mapred.job.name='My Job' ");
    System.out.println("To change the local temp directory:");
    System.out.println("  -D dfs.data.dir=/tmp/dfs");
    System.out.println("  -D stream.tmpdir=/tmp/streaming");
    System.out.println("Additional local temp directories with -cluster local:");
    System.out.println("  -D mapred.local.dir=/tmp/local");
    System.out.println("  -D mapred.system.dir=/tmp/system");
    System.out.println("  -D mapred.temp.dir=/tmp/temp");
    System.out.println("To treat tasks with non-zero exit status as SUCCEDED:");
    System.out.println("  -D stream.non.zero.exit.is.failure=false");
    System.out.println("Use a custom hadoopStreaming build along a standard org.fit.hiai.hadoop install:");
    System.out.println("  $HADOOP_HOME/bin/org.fit.hiai.hadoop jar /path/my-org.fit.hiai.hadoop-streaming.jar [...]\\");
    System.out.println("    [...] -D stream.shipped.hadoopstreaming=/path/my-org.fit.hiai.hadoop-streaming.jar");
    System.out.println("For more details about jobconf parameters see:");
    System.out.println("  http://wiki.apache.org/org.fit.hiai.hadoop/JobConfFile");
    System.out.println("To set an environement variable in a streaming command:");
    System.out.println("   -cmdenv EXAMPLE_DIR=/home/example/dictionaries/");
    System.out.println();
    System.out.println("Shortcut:");
    System.out.println("   setenv HSTREAMING \"$HADOOP_HOME/bin/org.fit.hiai.hadoop jar $HADOOP_HOME/org.fit.hiai.hadoop-streaming.jar\"");
    System.out.println();
    System.out.println("Example: $HSTREAMING -mapper \"/usr/local/bin/perl5 filter.pl\"");
    System.out.println("           -file /local/filter.pl -input \"/logs/0604*/*\" [...]");
    System.out.println("  Ships a script, invokes the non-shipped perl interpreter");
    System.out.println("  Shipped files go to the working directory so filter.pl is found by perl");
    System.out.println("  Input files are all the daily logs for days in month 2006-04");
    fail("");
}
