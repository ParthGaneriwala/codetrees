private void processMemberCall(Operator op) {
    // See JLS 15.12
    // step 1 - determine type to search
    JavaEntity target = popValueStack();
    JavaEntity vtarget = target.resolveAsValue();
    GenTypeClass[] bounds;
    if (vtarget != null) {
        GenTypeSolid stype = vtarget.getType().asSolid();
        if (stype == null) {
            // call on a primitive
            valueStack.push(new ErrorEntity());
            return;
        }
        bounds = stype.getRealTypes();
    } else {
        // entity may be a type rather than a value
        target = target.resolveAsType();
        if (target == null) {
            valueStack.push(new ErrorEntity());
            return;
        }
        GenTypeSolid stype = target.getType().asSolid();
        if (stype == null) {
            // call on a primitive
            valueStack.push(new ErrorEntity());
            return;
        }
        bounds = stype.getRealTypes();
    }
    List<JavaEntity> argList = argumentStack.pop();
    JavaType[] argTypes = new JavaType[argList.size()];
    for (int i = 0; i < argTypes.length; i++) {
        JavaEntity cent = argList.get(i).resolveAsValue();
        if (cent == null) {
            valueStack.push(new ErrorEntity());
            return;
        }
        argTypes[i] = cent.getType().getCapture();
    }
    // TODO!
    List<GenTypeClass> typeArgs = Collections.emptyList();
    ArrayList<MethodCallDesc> suitable = TextAnalyzer.getSuitableMethods(op.getToken().getText(), bounds, argTypes, typeArgs);
    // assume for now all candidates have override-equivalent signatures
    if (suitable.size() == 0) {
        valueStack.push(new ErrorEntity());
        return;
    }
    valueStack.push(new ValueEntity(suitable.get(0).retType));
}
