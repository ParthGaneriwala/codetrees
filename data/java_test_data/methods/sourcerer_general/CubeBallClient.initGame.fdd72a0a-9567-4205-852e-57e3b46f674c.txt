public synchronized void initGame(String initStr) {
    varLoc = new Point3d();
    viewBall = 0;
    StringTokenizer ST = new StringTokenizer(initStr);
    ST.nextToken(DG_DELIM);
    playNum = Integer.parseInt(ST.nextToken(DG_DELIM));
    numPlay = Integer.parseInt(ST.nextToken(DG_DELIM));
    numBalls = Integer.parseInt(ST.nextToken(DG_DELIM));
    numBars = Integer.parseInt(ST.nextToken(DG_DELIM));
    coordMap = new int[6][numBars][numBars];
    maxHits = Integer.parseInt(ST.nextToken(DG_DELIM));
    arenaSize = Double.parseDouble(ST.nextToken(DG_DELIM));
    quadSize = (arenaSize * 2) / numBars;
    maxDist = origin.distance(new Point3d(arenaSize, arenaSize, arenaSize));
    CB_Sonic.setArenaSize(arenaSize);
    ballRad = Float.parseFloat(ST.nextToken(DG_DELIM));
    playRad = Float.parseFloat(ST.nextToken(DG_DELIM));
    fireRad = Float.parseFloat(ST.nextToken(DG_DELIM));
    players = new CubeSphere[numPlay];
    balls = new CubeSphere[numBalls];
    for (int i = 0; i < numPlay; i++) {
        players[i] = new CubeSphere(playRad, i == playNum ? PLAYER : BALL, TEX_DIR + "play" + i + ".jpg");
    }
    for (int i = 0; i < numBalls; i++) {
        balls[i] = new CubeSphere(ballRad, BALL, TEX_DIR + "ball" + (i + 1) + ".jpg");
    }
    initUniverse();
    updateViewTex(SHOWTEX);
    initPlayPen();
    sendServ(DG_CMD_READY);
    PLAYING = true;
}
