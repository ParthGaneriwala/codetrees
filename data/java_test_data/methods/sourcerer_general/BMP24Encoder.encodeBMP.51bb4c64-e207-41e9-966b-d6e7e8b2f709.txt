public void encodeBMP(BMPEncoder encoder, AdaptiveRasterImage ji, LEDataOutputStream out) throws JimiException {
    // and color map is defaultRGB.
    try {
        int fileType = __BMP_TYPE;
        int scanLineSize = ((ji.getWidth() * 24 + 31) / 32) * 4;
        int headerSize = __BITMAP_FILE_HEADER_SIZE + __BITMAP_INFO_HEADER_SIZE;
        int fileSize = scanLineSize * ji.getHeight() + headerSize;
        // bitmap file header
        // bmp signature
        out.writeShort(fileType);
        // file size
        out.writeInt(fileSize);
        // reserved1
        out.writeShort(0);
        // reserved2
        out.writeShort(0);
        // bitmapOffset
        out.writeInt(headerSize);
        // bitmap info header
        // size of info header
        out.writeInt(__BITMAP_INFO_HEADER_SIZE);
        // width
        out.writeInt(ji.getWidth());
        // / height
        out.writeInt(ji.getHeight());
        // planes
        out.writeShort(1);
        // bitsPerPixel
        out.writeShort(24);
        // compression = NONE
        out.writeInt(0);
        // sizeOfBitmap
        out.writeInt(scanLineSize * ji.getHeight());
        // horz resolution
        out.writeInt(0);
        // vert resolution
        out.writeInt(0);
        // colorsUsed
        out.writeInt(0);
        // colorsImportant
        out.writeInt(0);
        int width = ji.getWidth();
        int[] rowBuf = new int[width];
        int heightStop = ji.getHeight() - 1;
        int padValue = scanLineSize - (ji.getWidth() * 3);
        byte[] outBuf = new byte[(3 * width) + padValue];
        // only writing out 24 bit data
        ji.setRGBDefault(true);
        for (// go from bottom up for BMP
        int i = heightStop; // go from bottom up for BMP
        i > -1; // go from bottom up for BMP
        i--) {
            ji.getChannel(i, rowBuf, 0);
            int idx = 3 * width;
            for (int j = width; --j >= 0; ) {
                outBuf[--idx] = (byte) ((rowBuf[j] & 0x00FF0000) >> 16);
                outBuf[--idx] = (byte) ((rowBuf[j] & 0x0000FF00) >> 8);
                outBuf[--idx] = (byte) ((rowBuf[j] & 0x000000FF));
            }
            idx = 3 * width;
            for (int pad = padValue; --pad >= 0; ) outBuf[idx++] = 0;
            out.write(outBuf);
            encoder.setProgress(((heightStop - i) * 100) / heightStop);
        }
    } catch (IOException e) {
        throw new JimiException("BMP24Encoder encodeBMP() IOException encountered");
    }
}
