public void huberStatistics() {
    // create the int[] to store the number of used ratios
    if (iUsedRatiosByType == null) {
        iUsedRatiosByType = new int[iRatioTypes.length];
        for (int i = 0; i < iUsedRatiosByType.length; i++) {
            iUsedRatiosByType[i] = 0;
        }
    } else {
        for (int i = 0; i < iUsedRatiosByType.length; i++) {
            iUsedRatiosByType[i] = 0;
        }
    }
    // Create a HashMap for every ratio type
    this.iHuberEstimators = new HashMap[iRatioTypes.length];
    // Create an array where the number of ratios used for a Huber estimation will be stored
    this.iNumberOfRatiosUsedInHuberStatistics = new int[iRatioTypes.length];
    Vector<String> lTitles = iQuantitativeValidationSingelton.getTitles();
    if (lTitles != null) {
        for (int i = 0; i < lTitles.size(); i++) {
            iHuberEstimatorsForDifferentSets.add(new HashMap[iRatioTypes.length]);
            iHuberEstimatorsForDifferentSetsOriginal.add(new HashMap[iRatioTypes.length]);
        }
    }
    // Okay, do the stats on the log2 ratios.
    for (int t = 0; t < iRatioTypes.length; t++) {
        Vector<Double> lLog2Ratios = new Vector<Double>();
        Vector<Vector<Double>> lLog2RatiosFromSet = new Vector<Vector<Double>>();
        Vector<Vector<Double>> lLog2RatiosFromSetOriginal = new Vector<Vector<Double>>();
        if (lTitles != null) {
            for (int s = 0; s < lTitles.size(); s++) {
                lLog2RatiosFromSet.add(new Vector<Double>());
                lLog2RatiosFromSetOriginal.add(new Vector<Double>());
            }
        }
        // we will first look for the ratios where we want to do statistics on
        for (int i = 0; i < iReferenceProteins.size(); i++) {
            Vector<RatioGroup> lRatioGroups = iReferenceProteins.get(i).getRatioGroups();
            for (int j = 0; j < lRatioGroups.size(); j++) {
                Ratio lRatio = lRatioGroups.get(j).getRatioByType(iRatioTypes[t]);
                if (lRatio != null) {
                    if (iQuantitativeValidationSingelton.isRatioValidInReferenceSet()) {
                        // check if the ratio is valid
                        if (lRatio.getValid()) {
                            if (!Double.isNaN(lRatio.getRatio(true)) && !Double.isInfinite(lRatio.getRatio(true))) {
                                lLog2Ratios.add(lRatio.getRatio(true));
                                iUsedRatiosByType[t] = iUsedRatiosByType[t] + 1;
                                if (lTitles != null) {
                                    for (int s = 0; s < lTitles.size(); s++) {
                                        if (lRatio.getParentRatioGroup().getParentCollection().getIndex() == s) {
                                            lLog2RatiosFromSet.get(s).add(lRatio.getRatio(true));
                                            lLog2RatiosFromSetOriginal.get(s).add(lRatio.getOriginalRatio(true));
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if (!Double.isNaN(lRatio.getRatio(true)) && !Double.isInfinite(lRatio.getRatio(true))) {
                            lLog2Ratios.add(lRatio.getRatio(true));
                            iUsedRatiosByType[t] = iUsedRatiosByType[t] + 1;
                            if (lTitles != null) {
                                for (int s = 0; s < lTitles.size(); s++) {
                                    if (lRatio.getParentRatioGroup().getParentCollection().getIndex() == s) {
                                        lLog2RatiosFromSet.get(s).add(lRatio.getRatio(true));
                                        lLog2RatiosFromSetOriginal.get(s).add(lRatio.getOriginalRatio(true));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (lTitles != null) {
            for (int i = 0; i < lTitles.size(); i++) {
                // we have the ratios to do the statistics on
                double[] log2Ratios = new double[lLog2RatiosFromSet.get(i).size()];
                double[] log2RatiosOriginal = new double[lLog2RatiosFromSetOriginal.get(i).size()];
                for (int k = 0; k < lLog2RatiosFromSet.get(i).size(); k++) {
                    log2Ratios[k] = lLog2RatiosFromSet.get(i).get(k);
                }
                for (int k = 0; k < lLog2RatiosFromSetOriginal.get(i).size(); k++) {
                    log2RatiosOriginal[k] = lLog2RatiosFromSetOriginal.get(i).get(k);
                }
                // do the statistics
                double[] estimators = BasicStats.hubers(log2Ratios, 1e-06, false);
                double[] estimatorsOriginal = BasicStats.hubers(log2RatiosOriginal, 1e-06, false);
                // correct the StDev with the instrument calibrated SD
                double lCorrectedStDev = Math.sqrt(Math.pow(estimators[1], 2) + Math.pow(iQuantitativeValidationSingelton.getCalibratedStdev(), 2));
                double lCorrectedStDevOriginal = Math.sqrt(Math.pow(estimatorsOriginal[1], 2) + Math.pow(iQuantitativeValidationSingelton.getCalibratedStdev(), 2));
                HashMap lMap = new HashMap();
                lMap.put("mean", estimators[0]);
                lMap.put("stdev", lCorrectedStDev);
                lMap.put("iterations", estimators[2]);
                lMap.put("numberofratios", log2Ratios.length);
                HashMap lMapOrig = new HashMap();
                lMapOrig.put("mean", estimatorsOriginal[0]);
                lMapOrig.put("stdev", lCorrectedStDevOriginal);
                lMapOrig.put("iterations", estimatorsOriginal[2]);
                lMapOrig.put("iterations", estimatorsOriginal[2]);
                lMap.put("numberofratios", log2RatiosOriginal.length);
                iHuberEstimatorsForDifferentSets.get(i)[t] = lMap;
                iHuberEstimatorsForDifferentSetsOriginal.get(i)[t] = lMapOrig;
            }
        }
        // we have the ratios to do the statistics on
        double[] log2Ratios = new double[lLog2Ratios.size()];
        for (int i = 0; i < lLog2Ratios.size(); i++) {
            log2Ratios[i] = lLog2Ratios.get(i);
        }
        // do the statistics
        double[] estimators = BasicStats.hubers(log2Ratios, 1e-06, false);
        // correct the StDev with the instrument calibrated SD
        double lCorrectedStDev = Math.sqrt(Math.pow(estimators[1], 2) + Math.pow(iQuantitativeValidationSingelton.getCalibratedStdev(), 2));
        iHuberEstimators[t] = new HashMap();
        iHuberEstimators[t].put("mean", estimators[0]);
        iHuberEstimators[t].put("stdev", lCorrectedStDev);
        iHuberEstimators[t].put("iterations", estimators[2]);
        iNumberOfRatiosUsedInHuberStatistics[t] = log2Ratios.length;
    }
}
