public ElementMold[] getChildrenOf(String name) {
    ElementMold[] elements;
    ArrayList temp = new ArrayList();
    Resource currentCriteria = model.getResource(prefixCOLON + name);
    // NOTE: emphasis is placed on developer creating well-formed n3
    // **NOTE: this may reduce the complexity of the the method, or
    // first attempt at using sparql
    /*
		String query = "PREFIX ui: <http://www.UI.org/vocabulary#> \n" +
                       "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n" +
                       "PREFIX : <http://www.owl-ontologies.com/2008/4/7/OntologySDTM.owl#> \n" +
                       
                       "SELECT ?childItem ?rdfType ?inputType ?option ?value \n" +
                       "WHERE {?childItem rdf:type ?rdfType . \n" +
                       "       ?childItem ui:hasParent :" + name + " . \n" +
                       
                       "       OPTIONAL {?childItem ui:hasInputField ?inputField . \n" +
                       "                 ?inputField rdf:type ?inputType . \n" +
                       "                 ?inputField ui:hasValue ?value . \n" +
                       "                 ?inputField ui:hasOption ?option . \n" +
                       "      }" +
                       
                       "}";
		
		Query modelQuery = QueryFactory.create(query);
		QueryExecution queryExec = QueryExecutionFactory.create(modelQuery, model);
		ResultSet res = queryExec.execSelect();
		if (res.hasNext())
		{
			
		}
		*/
    StmtIterator iter = model.listStatements(null, hasParent, currentCriteria);
    // for each child of the button
    while (iter.hasNext()) {
        Statement stmt = iter.nextStatement();
        Resource sub = stmt.getSubject();
        StmtIterator subTypeChecker = model.listStatements(sub, type, (RDFNode) null);
        // finding the type of the child
        Statement subTypeStmt = subTypeChecker.nextStatement();
        Resource subType = (Resource) subTypeStmt.getObject();
        if (// it is a nested button
        subType.getLocalName().equals("category")) {
            temp.add(new ElementMold(sub.getLocalName(), "button"));
        } else // it is of type parameter
        {
            StmtIterator subFields = model.listStatements(sub, hasInputField, (RDFNode) null);
            // for every field
            while (subFields.hasNext()) {
                Statement subField = subFields.nextStatement();
                Resource inputField = (Resource) subField.getObject();
                StmtIterator fieldTypeChecker = model.listStatements(inputField, type, (RDFNode) null);
                Statement fieldType = fieldTypeChecker.nextStatement();
                String inputType = ((Resource) fieldType.getObject()).getLocalName();
                ElementMold moldToAdd = new ElementMold(inputField.getLocalName(), inputType);
                if (inputType.equals("selectInput")) {
                    StmtIterator optionStatements = model.listStatements(inputField, hasOption, (RDFNode) null);
                    while (optionStatements.hasNext()) {
                        Statement optionStatement = optionStatements.nextStatement();
                        Literal option = (Literal) optionStatement.getObject();
                        moldToAdd.addOption(option.toString());
                    }
                }
                if (inputType.equals("outputText")) {
                    StmtIterator valueStatement = model.listStatements(inputField, hasValue, (RDFNode) null);
                    Statement valueStmt = valueStatement.nextStatement();
                    String text = valueStmt.getObject().toString();
                    moldToAdd.setText(text);
                }
                temp.add(moldToAdd);
            }
        }
    }
    elements = new ElementMold[temp.size()];
    for (int b = 0; b < elements.length; b++) {
        elements[b] = ((ElementMold) temp.get(b));
    }
    return elements;
}
