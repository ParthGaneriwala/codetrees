private void setContent() {
    contentsTransGr = new TransformGroup();
    contentsTransGr.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
    contentsTransGr.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
    contentsTransGr.setCapability(TransformGroup.ALLOW_CHILDREN_READ);
    contentsTransGr.setCapability(TransformGroup.ALLOW_CHILDREN_WRITE);
    contentsTransGr.setCapability(TransformGroup.ALLOW_CHILDREN_EXTEND);
    contentBranch = new BranchGroup();
    contentBranch.setCapability(BranchGroup.ALLOW_CHILDREN_EXTEND);
    // novo Backgroung  2, 113, 171
    // 0.007843137254901961
    // Color3f bgColor   = new Color3f(0.1f, 0.1f, 0.4f);
    // Background bg = new Background(bgColor);
    // bg.setApplicationBounds(bounds);
    // contentBranch.addChild(bg);
    Background bg = new Background();
    bg.setApplicationBounds(bounds);
    BranchGroup backGeoBranch = new BranchGroup();
    Sphere sphereObj = new Sphere(1.0f, Sphere.GENERATE_NORMALS | Sphere.GENERATE_NORMALS_INWARD | Sphere.GENERATE_TEXTURE_COORDS, 90);
    Appearance backgroundApp = sphereObj.getAppearance();
    TransformGroup rotx = new TransformGroup();
    Transform3D rot = new Transform3D();
    rot.rotX(Math.PI / 2);
    rotx.setTransform(rot);
    rotx.addChild(sphereObj);
    backGeoBranch.addChild(rotx);
    bg.setGeometry(backGeoBranch);
    Image texture = new ImageIcon(this.getClass().getClassLoader().getResource("images/backsky.png")).getImage();
    // GuiUtils.getImage("images/backsky.png");
    TextureLoader tex = new TextureLoader(texture, new String("RGB"), this);
    if (tex != null)
        backgroundApp.setTexture(tex.getTexture());
    contentBranch.addChild(bg);
    BranchGroup ota = null;
    File file = new File(System.getProperty(".", "tmp"));
    Util3D.copyStreamToFile(getClass().getClassLoader().getResourceAsStream("models/ota-map.j3d"), file);
    // file=new File(getClass().getClassLoader().getResource("models/ota-map.j3d").getFile());
    try {
        // SceneGraphFileReader file=new SceneGraphFileReader();
        // file.
        // InputStream input=new InputStream();
        SceneGraphFileReader filer = new SceneGraphFileReader(file);
        ota = filer.readAllBranchGraphs()[0];
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    if (bg == null) {
        System.err.println("Error loading vehicle model\n" + this);
    }
    TransformGroup scene = new TransformGroup();
    Enumeration<Group> enume = ota.getAllChildren();
    while (enume.hasMoreElements()) {
        Group next = enume.nextElement();
        ota.removeChild(next);
        scene.addChild(next);
    }
    Transform3D rotate = new Transform3D();
    rotate.rotX(Math.PI);
    scene.setTransform(rotate);
    contentBranch.addChild(scene);
    setLighting();
    // ------------------------------------GRID
    makeGrid();
    // ------------------------------------------------------------
    /*ColorCube cube2 = new ColorCube(0.25);
		    
		    contentsTransGr.addChild(cube2);
		    contentsTransGr.setTransform(t1);*/
    // System.out.println("novo obj");
    // contentsTransGr: ï¿½ aqui que ligam todos os objectos
    /*//teste de linhas
		Point3d myCoords[]= new Point3d[2]; 
    	myCoords[0]=new Point3d(0.0,0.0,0.0);
    	myCoords[1]=new Point3d(10.0,10.0,10.0);
    	LineArray myLines = new LineArray(
    			myCoords.length,
				LineArray.COORDINATES  | LineArray.COLOR_3 );
    	myLines.setCoordinates( 0, myCoords );
        Shape3D shape3D = new Shape3D(myLines);
    	 //shape3D.setCapability(Shape3D.ENABLE_APPEARANCE_MODIFY);
    	contentsTransGr.addChild(shape3D);
		*/
    contentBranch.addChild(contentsTransGr);
    // contentBranch.compile();
    locale.addBranchGraph(contentBranch);
}
