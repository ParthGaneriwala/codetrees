void readCache(final BBSimplexCache cache, final BBDistanceProxy proxyA, final BBTransform transformA, final BBDistanceProxy proxyB, final BBTransform transformB) {
    assert 0 <= cache.count & cache.count <= 3;
    m_vertices[0] = new BBSimplexVertex();
    m_vertices[1] = new BBSimplexVertex();
    m_vertices[2] = new BBSimplexVertex();
    // Copy data from cache.
    m_count = cache.count;
    BBSimplexVertex[] vertices = m_vertices;
    for (int i = 0; i < m_count; ++i) {
        BBSimplexVertex v = vertices[i];
        v.indexA = cache.indexA[i];
        v.indexB = cache.indexB[i];
        BBVec2 wALocal = proxyA.GetVertex(v.indexA);
        BBVec2 wBLocal = proxyB.GetVertex(v.indexB);
        v.wA = mul(transformA, wALocal);
        v.wB = mul(transformB, wBLocal);
        v.w = sub(v.wB, v.wA);
        v.a = 0.0f;
    }
    // old metric then flush the simplex.
    if (m_count > 1) {
        float metric1 = cache.metric;
        float metric2 = GetMetric();
        if (metric2 < 0.5f * metric1 || 2.0f * metric1 < metric2 || metric2 < FLT_EPSILON) {
            // Reset the simplex.
            m_count = 0;
        }
    }
    // If the cache is empty or invalid ...
    if (m_count == 0) {
        BBSimplexVertex v = vertices[0];
        v.indexA = 0;
        v.indexB = 0;
        BBVec2 wALocal = proxyA.GetVertex(0);
        BBVec2 wBLocal = proxyB.GetVertex(0);
        v.wA = mul(transformA, wALocal);
        v.wB = mul(transformB, wBLocal);
        v.w = sub(v.wB, v.wA);
        m_count = 1;
    }
    m_v1 = m_vertices[0];
    m_v2 = m_vertices[1];
    m_v3 = m_vertices[2];
}
