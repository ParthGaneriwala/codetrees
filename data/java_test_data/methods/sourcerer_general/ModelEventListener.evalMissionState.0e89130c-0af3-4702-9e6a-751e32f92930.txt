private boolean evalMissionState(ModelEvent e) {
    switch(ModelEventType.valueOf(e.getType())) {
        case TOGGLEMISSION:
            MainScreen.writeToConsole("Mission assignment is complete", Color.RED);
            CommitMission cm = new CommitMission(e.getPlayerID(), um);
            cm.execute(dh);
            um = null;
            melState = NORMALSTATE;
            return true;
        case SNEAK:
            MainScreen.writeToConsole("Sneak added to the mission", Color.RED);
            Sneak s = new Sneak();
            s.execute(dh);
            return true;
        case MOVEN:
            MainScreen.writeToConsole(" Move Unit North added to the mission", Color.RED);
            Move mn = new Move(MoveDirection.N);
            um.addAction(mn);
            return true;
        case MOVENW:
            MainScreen.writeToConsole(" Move Unit Northwest added to the mission", Color.RED);
            Move mnw = new Move(MoveDirection.NW);
            um.addAction(mnw);
            return true;
        case MOVEW:
            MainScreen.writeToConsole(" Move Unit West added to the mission", Color.RED);
            Move mw = new Move(MoveDirection.W);
            um.addAction(mw);
            return true;
        case MOVESW:
            MainScreen.writeToConsole(" Move Unit Southwest added to the mission", Color.RED);
            Move msw = new Move(MoveDirection.SW);
            um.addAction(msw);
            return true;
        case MOVES:
            MainScreen.writeToConsole(" Move Unit South added to the mission", Color.RED);
            Move ms = new Move(MoveDirection.S);
            um.addAction(ms);
            return true;
        case MOVESE:
            MainScreen.writeToConsole(" Move Unit Southeast added to the mission", Color.RED);
            Move mse = new Move(MoveDirection.SE);
            um.addAction(mse);
            return true;
        case MOVEE:
            MainScreen.writeToConsole(" Move Unit East added to the mission", Color.RED);
            Move me = new Move(MoveDirection.E);
            um.addAction(me);
            return true;
        case MOVENE:
            MainScreen.writeToConsole(" Move Unit Northeast added to the mission", Color.RED);
            Move mne = new Move(MoveDirection.NE);
            um.addAction(mne);
            return true;
        case BUILDBASE:
            MainScreen.writeToConsole("Build Base added to the mission", Color.RED);
            BuildBase bb = new BuildBase(e.getPlayerID());
            um.addAction(bb);
            return true;
        case PICKUPITEM:
            MainScreen.writeToConsole("Pickup Item added to the mission", Color.RED);
            PickupItemAction pu = new PickupItemAction();
            um.addAction(pu);
            return true;
        case DROPITEM:
            MainScreen.writeToConsole("Drop Item added to the mission", Color.RED);
            DropItemAction dr = new DropItemAction();
            um.addAction(dr);
            return true;
        case USEITEM:
            MainScreen.writeToConsole("Use Item added to the mission", Color.RED);
            UseItem ui = new UseItem();
            um.addAction(ui);
            return true;
        case HEALUNIT:
            MainScreen.writeToConsole("Heal Unit added to the mission", Color.RED);
            HealUnit hua = new HealUnit();
            um.addAction(hua);
            return true;
        case OBSERVE:
            melState = MISSIONFREEROAMSTATE;
            MainScreen.writeToConsole("Now move the cursor to target for Observe", Color.RED);
            return true;
        case REMOVETRAP:
            melState = MISSIONFREEROAMSTATE;
            MainScreen.writeToConsole("Now move the cursor to target for Remove Trap", Color.RED);
            return true;
        case SETTRAP:
            Trap t = new Trap();
            um.addAction(t);
            MainScreen.writeToConsole("Set Trap added to the mission", Color.RED);
            return true;
        case ATTACK:
            melState = MISSIONFREEROAMSTATE;
            MainScreen.writeToConsole("Now move the cursor to target for Attack", Color.RED);
            return true;
    }
    return false;
}
