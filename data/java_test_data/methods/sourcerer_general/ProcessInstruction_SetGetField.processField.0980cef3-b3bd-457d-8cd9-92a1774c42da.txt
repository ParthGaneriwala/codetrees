static void processField(int opcode, OperandStack stack, ConstantPool constant_pool, ByteReader bytes, JavaClass jClass, IMethodInfo parentMethodInfo, int invokedLineNumber, boolean isSynchronized, ArrayList<IClassFileParseHandler> handlerList) throws IOException {
    int index = bytes.readShort();
    boolean isStaticField = false;
    boolean isFinal = false;
    ConstantFieldref cfr = (ConstantFieldref) constant_pool.getConstant(index, Constants.CONSTANT_Fieldref);
    ConstantClass cc = (ConstantClass) constant_pool.getConstant(cfr.getClassIndex());
    ConstantNameAndType cnat = (ConstantNameAndType) constant_pool.getConstant(cfr.getNameAndTypeIndex());
    String fieldParentClassName = (String) cc.getConstantValue(constant_pool);
    fieldParentClassName = Utility.compactClassName(fieldParentClassName, false);
    String fieldVariableName = cnat.getName(constant_pool);
    String signature = cnat.getSignature(constant_pool);
    String fieldTypeClassName = Utility.signatureToString(signature, false);
    String putFieldTypeClassName = null;
    Field[] fields = jClass.getFields();
    for (Field field : fields) {
        if (field.getName().equals(fieldVariableName)) {
            isFinal = field.isFinal();
            break;
        }
    }
    ProcessInstruction.logInfo("fieldVariableName: " + fieldVariableName);
    ProcessInstruction.logInfo("fieldTypeClass: " + fieldTypeClassName);
    ProcessInstruction.logInfo("fieldParentClass: " + fieldParentClassName);
    String fullFieldName = fieldParentClassName + "." + fieldVariableName;
    logInfo("processField, stack size: " + stack.size());
    FieldAccessEnum accessEnum = FieldAccessEnum.UNDEFINED;
    switch(opcode) {
        // Stack: ..., objectref -> ..., value.word1, value.word2
        case Constants.GETFIELD:
            {
                isStaticField = false;
                accessEnum = FieldAccessEnum.GET;
                logInfo("GETFIELD, stack size: " + stack.size());
                Type t = stack.pop();
                if (t instanceof ObjectType) {
                    ObjectType ot3 = new FieldReferenceType(fieldVariableName, fieldTypeClassName, fieldParentClassName, fullFieldName, isStaticField);
                    stack.push(ot3);
                } else {
                    ObjectType unknown = new ObjectType("dummy");
                    stack.push(unknown);
                }
                break;
            }
        // Stack: ..., -> ..., value.word1, value.word2
        case Constants.GETSTATIC:
            {
                isStaticField = true;
                accessEnum = FieldAccessEnum.GET;
                logInfo("GETSTATIC, stack size: " + stack.size());
                ObjectType ot3 = new FieldReferenceType(fieldVariableName, fieldTypeClassName, fieldParentClassName, fullFieldName, isStaticField);
                stack.push(ot3);
                break;
            }
        // Stack: ..., objectref, value.word1, value.word2 -> ...
        case Constants.PUTFIELD:
            {
                accessEnum = FieldAccessEnum.PUT;
                logInfo("PUTFIELD ,stack size: " + stack.size());
                if (stack.size() == 1) {
                    Log.logByteInfo("ERROR: Attempting to pop empty stack");
                    Log.logByteInfo(parentMethodInfo.getFullUniqueMethodName());
                }
                Type fieldValue = stack.pop();
                putFieldTypeClassName = fieldValue.getSignature();
                try {
                    putFieldTypeClassName = Utility.signatureToString(putFieldTypeClassName);
                } catch (Exception e) {
                    putFieldTypeClassName = null;
                }
                stack.pop();
                break;
            }
        // Stack: ..., value.word1, value.word2 -> ...
        case Constants.PUTSTATIC:
            {
                isStaticField = true;
                accessEnum = FieldAccessEnum.PUT;
                logInfo("PUTSTATIC, stack size: " + stack.size());
                Type fieldValue = stack.pop();
                putFieldTypeClassName = fieldValue.getSignature();
                try {
                    putFieldTypeClassName = Utility.signatureToString(putFieldTypeClassName);
                } catch (Exception e) {
                    putFieldTypeClassName = null;
                }
                break;
            }
        default:
            {
                Log.severe("Unrecognized field operation");
            }
    }
    // put field
    if (accessEnum == FieldAccessEnum.PUT) {
        PutFieldInfoImpl fieldInfo = new PutFieldInfoImpl(fullFieldName, fieldTypeClassName, putFieldTypeClassName, parentMethodInfo, invokedLineNumber, isSynchronized, isFinal);
        // pass bean to handlers
        if (handlerList != null) {
            for (IClassFileParseHandler handler : handlerList) {
                handler.handlePutField(fieldInfo);
            }
        }
    // get field
    } else {
        GetFieldInfoImpl fieldInfo = new GetFieldInfoImpl(fullFieldName, fieldTypeClassName, parentMethodInfo, invokedLineNumber, isSynchronized);
        // pass bean to handlers
        if (handlerList != null) {
            for (IClassFileParseHandler handler : handlerList) {
                handler.handleGetField(fieldInfo);
            }
        }
    }
    PutGetFieldInfoImpl fieldInfo = new PutGetFieldInfoImpl(accessEnum, fullFieldName, parentMethodInfo, invokedLineNumber, isSynchronized, isStaticField);
    // pass bean to handlers
    if (handlerList != null) {
        for (IClassFileParseHandler handler : handlerList) {
            handler.handlePutGetField(fieldInfo);
        }
    }
}
