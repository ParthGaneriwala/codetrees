// }}}
// {{{ addExplicitFold() method
protected int addExplicitFold(int caretStart, int caretEnd, int lineStart, int lineEnd) {
    // need to "fix" the caret position so that we get the right rule.
    // taking the start offset one char ahead and the end offset one char
    // behing makes sure we get the right rule for the text being
    // wrapped (tricky around mode boundaries, e.g., php code embedded
    // in HTML code)
    int startCaret = caretStart < buffer.getLength() ? caretStart + 1 : caretStart;
    int endCaret = caretEnd > 0 ? caretEnd - 1 : caretEnd;
    String startLineComment = buffer.getContextSensitiveProperty(startCaret, "lineComment");
    String startCommentStart = buffer.getContextSensitiveProperty(startCaret, "commentStart");
    String startCommentEnd = buffer.getContextSensitiveProperty(startCaret, "commentEnd");
    String endLineComment = buffer.getContextSensitiveProperty(endCaret, "lineComment");
    String endCommentStart = buffer.getContextSensitiveProperty(endCaret, "commentStart");
    String endCommentEnd = buffer.getContextSensitiveProperty(endCaret, "commentEnd");
    String start;
    int caretBack = 1;
    if (startLineComment != null)
        start = startLineComment + "{{{ ";
    else if (startCommentStart != null && startCommentEnd != null) {
        start = startCommentStart + "{{{  " + startCommentEnd;
        caretBack = 1 + startCommentStart.length();
    } else
        start = "{{{ ";
    if (startLineComment != null) {
        // we're inserting
        if (buffer.getLineLength(lineStart) != caretStart) {
            start += '\n';
        }
    } else {
        // always insert a new line if there's no comment character.
        start += "\n";
    }
    String end;
    if (endLineComment != null)
        end = endLineComment + "}}}";
    else if (endCommentStart != null && endCommentEnd != null)
        end = endCommentStart + "}}}" + endCommentEnd;
    else
        end = "}}}";
    String line = buffer.getLineText(lineStart);
    String whitespace = line.substring(0, StandardUtilities.getLeadingWhiteSpace(line));
    if (endLineComment != null) {
        // comment out existing code.
        if (buffer.getLineLength(lineEnd) != caretEnd) {
            end += '\n';
        }
    } else {
        // always insert a new line if there's no comment character.
        end += "\n";
    }
    if (caretEnd == buffer.getLineStartOffset(lineEnd))
        buffer.insert(caretEnd, end);
    else {
        String lineText = buffer.getText(caretEnd - 1, 1);
        if (Character.isWhitespace(lineText.charAt(0)))
            buffer.insert(caretEnd, end);
        else
            buffer.insert(caretEnd, ' ' + end);
    }
    buffer.insert(caretStart, start + whitespace);
    return caretBack;
}
