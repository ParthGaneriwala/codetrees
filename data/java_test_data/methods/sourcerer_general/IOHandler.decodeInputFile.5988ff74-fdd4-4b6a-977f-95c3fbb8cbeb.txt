static WICInput decodeInputFile(String fileName) throws InputFileException {
    File file = new File(fileName);
    StringTokenizer st;
    // check file's extension
    st = new StringTokenizer(file.getName(), ".");
    String tok = null;
    while (st.hasMoreTokens()) tok = st.nextToken();
    if (!(tok.equals("WIC") || tok.equals("wic")))
        System.err.println("[WARNING] The input file \"" + file.getAbsolutePath() + "\" has the wrong extension \"" + tok + "\" instead of \"WIC\" or \"wic\"");
    String dataString = null;
    try {
        BufferedReader buffReader = new BufferedReader(new FileReader(file));
        dataString = buffReader.readLine();
        /*
			 * check if we have only one line
			 */
        if (buffReader.readLine() != null)
            System.err.println("[WARNING] The input file \"" + file.getAbsolutePath() + "\" contains more than one line");
        buffReader.close();
    } catch (IOException e) {
        throw new InputFileException("[ERROR] Input file \"" + file.getAbsolutePath() + "\" not found or corrupted");
    }
    st = new StringTokenizer(dataString, ",");
    // check if we have at least 3 elements (the minimum)
    if (st.countTokens() < 3)
        throw new InputFileException("[ERROR] The input file \"" + file.getAbsolutePath() + "\" does not contain valid data");
    // initialize the containers for the data and helper variables
    int N, K = -1;
    int[] ySet = null;
    int number = -1;
    String token = null;
    /*
		 * extract "n" and check if we have n+2 elements
		 */
    token = st.nextToken();
    try {
        number = Integer.parseInt(token);
    } catch (NumberFormatException e) {
        throw new InputFileException("[ERROR] Wrong number format (" + token + ")");
    }
    if (number < 0)
        throw new InputFileException("[ERROR] Not-natural-number found (" + token + ")");
    if (// we should find n+1 elements more
    st.countTokens() < number + 1)
        throw new InputFileException("[ERROR] The input file \"" + file.getAbsolutePath() + "\" does not contain valid data");
    if (// more than n+1 elements remaining
    st.countTokens() > number + 1)
        throw new InputFileException("[ERROR] Data contains more than \"n\" numbers -- Invalid dataset");
    // if we are here n is valid, we will have n+2 elements thus we can proceed
    // store "n"
    N = number;
    /*
		 * extract K 
		 */
    token = st.nextToken();
    try {
        number = Integer.parseInt(token);
    } catch (NumberFormatException e) {
        throw new InputFileException("[ERROR] Wrong number format (" + token + ")");
    }
    if (number < 0)
        throw new InputFileException("[ERROR] Not-natural-number found (" + token + ")");
    if (number > N)
        throw new InputFileException("[ERROR] K is bigger than n");
    // if we are here K is valid
    // store "K"
    K = number;
    int counter = 0;
    ySet = new int[N];
    /*
		 * extract the remaining elements
		 */
    while (counter < N) {
        token = st.nextToken();
        try {
            number = Integer.parseInt(token);
        } catch (NumberFormatException e) {
            throw new InputFileException("[ERROR] Wrong number format (" + token + ")");
        }
        if (number < 0)
            throw new InputFileException("[ERROR] Not-natural-number found (" + token + ")");
        ySet[counter] = number;
        counter++;
    }
    System.out.println("[INFO] Input file \"" + file.getName() + "\" loaded");
    return new WICInput(N, K, ySet);
}
