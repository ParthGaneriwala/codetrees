public void testScriptOperator() throws Throwable {
    try {
        System.out.println("Testing Script Operator");
        // col1
        exprNodeDesc exprDesc1 = new exprNodeColumnDesc(String.class, "col1");
        // col2
        exprNodeDesc expr1 = new exprNodeColumnDesc(String.class, "col0");
        exprNodeDesc expr2 = new exprNodeConstantDesc("1");
        exprNodeDesc exprDesc2 = SemanticAnalyzer.getFuncExprNodeDesc("concat", expr1, expr2);
        // select operator to project these two columns
        ArrayList<exprNodeDesc> earr = new ArrayList<exprNodeDesc>();
        earr.add(exprDesc1);
        earr.add(exprDesc2);
        selectDesc selectCtx = new selectDesc(earr);
        Operator<selectDesc> op = OperatorFactory.get(selectDesc.class);
        op.setConf(selectCtx);
        // scriptOperator to echo the output of the select
        tableDesc scriptOutput = PlanUtils.getDefaultTableDesc("" + Utilities.tabCode, "a,b");
        tableDesc scriptInput = PlanUtils.getDefaultTableDesc("" + Utilities.tabCode, "a,b");
        scriptDesc sd = new scriptDesc("cat", scriptOutput, scriptInput);
        Operator<scriptDesc> sop = OperatorFactory.get(scriptDesc.class);
        sop.setConf(sd);
        ArrayList<Operator<? extends Serializable>> nextScriptOp = new ArrayList<Operator<? extends Serializable>>();
        nextScriptOp.add(sop);
        // Collect operator to observe the output of the script
        collectDesc cd = new collectDesc(Integer.valueOf(10));
        CollectOperator cdop = (CollectOperator) OperatorFactory.get(collectDesc.class);
        cdop.setConf(cd);
        ArrayList<Operator<? extends Serializable>> nextCollectOp = new ArrayList<Operator<? extends Serializable>>();
        nextCollectOp.add(cdop);
        // chain the scriptOperator to the select operator
        op.setChildOperators(nextScriptOp);
        // chain the collect operator to the script operator
        sop.setChildOperators(nextCollectOp);
        op.initialize(new JobConf(TestOperators.class));
        // evaluate on row
        for (int i = 0; i < 5; i++) {
            op.process(r[i].o, r[i].oi);
        }
        op.close(false);
        InspectableObject io = new InspectableObject();
        for (int i = 0; i < 5; i++) {
            cdop.retrieve(io);
            System.out.println("[" + i + "] io.o=" + io.o);
            System.out.println("[" + i + "] io.oi=" + io.oi);
            StructObjectInspector soi = (StructObjectInspector) io.oi;
            assert (soi != null);
            StructField a = soi.getStructFieldRef("a");
            StructField b = soi.getStructFieldRef("b");
            assertEquals("" + (i + 1), soi.getStructFieldData(io.o, a));
            assertEquals((i) + "1", soi.getStructFieldData(io.o, b));
        }
        System.out.println("Script Operator ok");
    } catch (Throwable e) {
        e.printStackTrace();
        throw e;
    }
}
