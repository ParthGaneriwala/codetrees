// documentation inherited
@Override
public void actionPerformed(ActionEvent event) {
    String action = event.getActionCommand();
    EditorTool tool = _tools.get(action);
    if (tool != null) {
        setActiveTool(tool);
        return;
    }
    if (action.equals("new")) {
        if (saveWarning("clear the scene")) {
            newScene();
        }
    } else if (action.equals("open")) {
        if (saveWarning("open a new scene")) {
            open();
        }
    } else if (action.equals("save")) {
        if (_file != null) {
            save(_file);
        } else {
            save();
        }
    } else if (action.equals("save_as")) {
        save();
    } else if (action.equals("revert")) {
        if (saveWarning("revert to the last saved version")) {
            open(_file);
        }
    } else if (action.equals("import")) {
        importScene();
    } else if (action.equals("export")) {
        exportScene();
    } else if (action.equals("import_selection")) {
        importSelection();
    } else if (action.equals("export_selection")) {
        exportSelection();
    } else if (action.equals("test")) {
        testScene();
    } else if (action.equals("undo")) {
        _undomgr.undo();
        updateUndoActions();
    } else if (action.equals("redo")) {
        _undomgr.redo();
        updateUndoActions();
    } else if (action.equals("cut")) {
        copySelection();
        deleteSelection();
    } else if (action.equals("copy")) {
        copySelection();
    } else if (action.equals("paste")) {
        Transferable contents = _frame.getToolkit().getSystemClipboard().getContents(this);
        Entry[] selection = (Entry[]) ToolUtil.getWrappedTransferData(contents);
        if (selection != null) {
            move(selection);
        }
    } else if (action.equals("delete")) {
        deleteSelection();
    } else if (action.equals("rotate_ccw")) {
        rotateSelection(+1);
    } else if (action.equals("rotate_cw")) {
        rotateSelection(-1);
    } else if (action.equals("raise")) {
        raiseSelection(+1);
    } else if (action.equals("lower")) {
        raiseSelection(-1);
    } else if (action.equals("save_to_palette")) {
        setActiveTool(_palette);
        _palette.add(_selection);
    } else if (action.equals("validate_refs")) {
        validateReferences();
    } else if (action.equals("delete_errors")) {
        deleteErrors();
    } else if (action.equals("configs")) {
        new ConfigEditor(_msgmgr, _scene.getConfigManager(), _colorpos).setVisible(true);
    } else if (action.equals("raise_grid")) {
        _grid.setElevation(_grid.getElevation() + 1);
    } else if (action.equals("lower_grid")) {
        _grid.setElevation(_grid.getElevation() - 1);
    } else if (action.equals("reorient")) {
        ((OrbitCameraHandler) _camhand).getCoords().set(TudeySceneMetrics.getDefaultCameraConfig().coords);
    } else if (action.equals("next_layer")) {
        _layers.selectLayer(true);
    } else if (action.equals("prev_layer")) {
        _layers.selectLayer(false);
    } else if (action.equals("markers")) {
        _prefs.putBoolean("markersVisible", _markersVisible = !_markers.isSelected());
        wasUpdated();
    } else if (action.equals("light")) {
        _prefs.putBoolean("lightingEnabled", _lightingEnabled = !_light.isSelected());
        wasUpdated();
    } else if (action.equals("fog")) {
        _prefs.putBoolean("fogEnabled", _fogEnabled = !_fog.isSelected());
        wasUpdated();
    } else if (action.equals("sound")) {
        _prefs.putBoolean("soundEnabled", _soundEnabled = !_sound.isSelected());
        wasUpdated();
    } else {
        super.actionPerformed(event);
    }
}
