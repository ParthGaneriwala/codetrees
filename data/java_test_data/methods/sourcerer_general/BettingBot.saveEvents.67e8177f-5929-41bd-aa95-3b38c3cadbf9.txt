public void saveEvents() {
    Vector<Integer> individualTicket = new Vector<Integer>();
    for (int k = maxbots; k < maxbots + maxevents; k++) {
        if ((featured[k]) & ((marketopen[k]) | (marketjustclosed[k]))) {
            marketjustclosed[k] = false;
            DataOutputStream dosz = null;
            try {
                dosz = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(eventfile2[k - maxbots])));
                for (int i = 0; i < activecount; i++) {
                    for (int j = 0; j < Mapbet[i].size(); j++) {
                        if (Mapbot[i].elementAt(j) == k) {
                            int madestyle = Mapfirst[i].elementAt(j);
                            int madeplayer = Mapsecond[i].elementAt(j);
                            float madebet = Mapbet[i].elementAt(j);
                            dosz.writeInt(recoverID[i]);
                            dosz.writeInt(madestyle);
                            dosz.writeInt(madeplayer);
                            dosz.writeFloat(madebet);
                        }
                    }
                }
                dosz.writeInt(9998);
            } catch (IOException e) {
                logException(e);
            } finally {
                FileHelper.closeQuietly(dosz);
            }
            if (nodouble[k]) {
            // hence no tricasts
            } else {
                DataOutputStream dos2 = null;
                try {
                    dos2 = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(eventfile3[k - maxbots])));
                    for (int i = 0; i < activecount; i++) {
                        if (Tricastticket[i] == null) {
                        // discard
                        } else {
                            if (Tricastticket[i].size() > 0) {
                                for (int j = 0; j < Tricastticket[i].size(); j++) {
                                    individualTicket = (Tricastticket[i].elementAt(j));
                                    if (individualTicket.elementAt(0) == k) {
                                        dos2.writeInt(recoverID[i]);
                                        for (int k2 = 1; k2 < individualTicket.size(); k2++) {
                                            int ticketEntry = individualTicket.elementAt(k2);
                                            dos2.writeInt(ticketEntry);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    dos2.writeInt(9998);
                } catch (IOException e) {
                    logException(e);
                } finally {
                    FileHelper.closeQuietly(dos2);
                }
            }
        }
    }
}
