// </editor-fold>//GEN-END:initComponents
private void RenderButtonActionPerformed(java.awt.event.ActionEvent evt) {
    // TODO add your handling code here:
    try {
        RealLowerFieldValue = Double.parseDouble(RealLowerField.getText());
    } catch (NumberFormatException e) {
        RealLowerFieldValue = -2.5;
    }
    try {
        ImagLowerFieldValue = Double.parseDouble(ImagLowerField.getText());
    } catch (NumberFormatException e) {
        ImagLowerFieldValue = -2.5;
    }
    try {
        RealUpperFieldValue = Double.parseDouble(RealUpperField.getText());
    } catch (NumberFormatException e) {
        RealUpperFieldValue = 2.5;
    }
    try {
        ImagUpperFieldValue = Double.parseDouble(ImagUpperField.getText());
    } catch (NumberFormatException e) {
        ImagUpperFieldValue = 2.5;
    }
    try {
        RealSeedFieldValue = Double.parseDouble(RealSeedField.getText());
    } catch (NumberFormatException e) {
        RealSeedFieldValue = 0.0;
    }
    try {
        ImagSeedFieldValue = Double.parseDouble(ImagSeedField.getText());
    } catch (NumberFormatException e) {
        ImagSeedFieldValue = 0.0;
    }
    try {
        MaxIterFieldValue = Integer.parseInt(MaxIterField.getText());
    } catch (NumberFormatException e) {
        MaxIterFieldValue = 100;
    }
    try {
        DivisionsFieldValue = Integer.parseInt(DivisionsField.getText());
    } catch (NumberFormatException e) {
        DivisionsFieldValue = 50;
    }
    try {
        EscapeRadiusFieldValue = Double.parseDouble(EscapeRadiusField.getText());
    } catch (NumberFormatException e) {
        EscapeRadiusFieldValue = 4.0;
    }
    ComplexNumber lowerBound = new ComplexNumber((double) RealLowerFieldValue, (double) ImagLowerFieldValue);
    ComplexNumber upperBound = new ComplexNumber((double) RealUpperFieldValue, (double) ImagUpperFieldValue);
    ComplexNumber seed = new ComplexNumber((double) RealSeedFieldValue, (double) ImagSeedFieldValue);
    // Need to fix this so that the render box size is adjustable
    F = new ExpFormula(FunctionField.getText());
    // julia = new JuliaSet(lowerBound, upperBound, F, MaxIterFieldValue, EscapeRadiusFieldValue, 400, 400 );
    density = new DensityPlot(lowerBound, upperBound, F, MaxIterFieldValue, seed, (int) DivisionsFieldValue);
    // julia.computeFilledJuliaSet();
    // ArrayList filledSet = new ArrayList(julia.getFilledSet());
    int[][] count = density.getDensityPlot();
    double scale = 255.0 / density.getMax();
    // Draw graphs
    for (int i = 0; i < 400; ++i) {
        for (int j = 0; j < 400; ++j) {
            ComplexNumber z = new ComplexNumber((i / 80.0) - lowerBound.getReal().approx(), (j / 80.0) - lowerBound.getImag().approx());
            // if (julia.inSet(z))
            // JuliaGraph.setRGB((int) i, (int) j, 0xFFFFFFFF);
            int index1 = i * (DivisionsFieldValue - 1) / DensityGraph.getWidth();
            int index2 = j * (DivisionsFieldValue - 1) / DensityGraph.getHeight();
            int brightness = (int) (scale * count[index1][index2]);
            Color c = new Color(brightness, brightness, brightness);
            DensityGraph.setRGBColor(i, j, c);
        }
    }
    DensityGraph.repaint();
}
