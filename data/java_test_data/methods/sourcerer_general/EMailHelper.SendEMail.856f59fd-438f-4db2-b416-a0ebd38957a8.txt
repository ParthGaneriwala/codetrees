public static void SendEMail(String smtpServer, String subject, String body, String emailTO, String emailFROM) throws EMailException {
    // Define propriedades da sessão.
    Properties props = new Properties();
    props.put("mail.transport.protocol", "smtp");
    props.put("mail.smtp.host", new String(smtpServer));
    // Cria sessão. setDebug(true)  é interessante pois
    // mostra os passos do envio da mensagem e o
    // recebimento da mensagem do servidor.
    Session session = Session.getDefaultInstance(props);
    session.setDebug(true);
    String msgBodyHtml = body;
    String msgBodyText = "Seu leitor de e-mail não suporta visualização em formato HTML...\n\n" + body;
    // Cria mensagem e seta alguns valores que constituem
    // os seus headers.
    Message msg = new MimeMessage(session);
    try {
        msg.setRecipient(Message.RecipientType.TO, new InternetAddress(emailTO));
        msg.setFrom(new InternetAddress(emailFROM));
        msg.setSubject(subject);
        // Now the message body.
        Multipart mp = new MimeMultipart("alternative");
        BodyPart textPart = new MimeBodyPart();
        // textPart.setText(msgBodyText); // sets type to "text/plain"
        // sets type to "text/plain"
        textPart.setContent(msgBodyText, "text/plain");
        BodyPart pixPart = new MimeBodyPart();
        pixPart.setContent(msgBodyHtml, "text/html");
        // Collect the Parts into the MultiPart
        mp.addBodyPart(textPart);
        mp.addBodyPart(pixPart);
        // Put the MultiPart into the Message
        msg.setContent(mp);
        // Envia mensagem.
        Transport.send(msg);
    } catch (MessagingException ex) {
        log.error(ex);
        throw new EMailException("Erro no envio de e-mail na classe EMailHelper:", ex);
    }
}
