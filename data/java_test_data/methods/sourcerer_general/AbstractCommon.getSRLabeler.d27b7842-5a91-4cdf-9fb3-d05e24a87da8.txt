protected AbstractSRLParser getSRLabeler(String modelFile) throws Exception {
    ZipInputStream zin = new ZipInputStream(new FileInputStream(modelFile));
    ZipEntry zEntry;
    String entry;
    SRLFtrXml xml = null;
    SRLFtrMap[] map = new SRLFtrMap[2];
    OneVsAllDecoder[] decoder = new OneVsAllDecoder[2];
    while ((zEntry = zin.getNextEntry()) != null) {
        if (zEntry.getName().equals(ENTRY_FEATURE)) {
            System.out.println("- loading feature template");
            BufferedReader reader = new BufferedReader(new InputStreamReader(zin));
            StringBuilder build = new StringBuilder();
            String string;
            while ((string = reader.readLine()) != null) {
                build.append(string);
                build.append("\n");
            }
            xml = new SRLFtrXml(new ByteArrayInputStream(build.toString().getBytes()));
        } else if ((entry = zEntry.getName()).startsWith(ENTRY_LEXICA)) {
            int i = Integer.parseInt(entry.substring(entry.lastIndexOf(".") + 1));
            System.out.println("- loading lexica");
            map[i] = new SRLFtrMap(new BufferedReader(new InputStreamReader(zin)));
        } else if (zEntry.getName().startsWith(ENTRY_MODEL)) {
            int i = Integer.parseInt(entry.substring(entry.lastIndexOf(".") + 1));
            System.out.println("- loading model");
            decoder[i] = new OneVsAllDecoder(new BufferedReader(new InputStreamReader(zin)));
        }
    }
    AbstractSRLParser labeler = new SRLParser(AbstractSRLParser.FLAG_PREDICT, xml, map, decoder);
    labeler.setLanguage(s_language);
    return labeler;
}
