protected void _parseLine(int lineNumber, String line) throws FileFormatException {
    line = line.trim();
    if (line.equals(""))
        return;
    switch(line.charAt(0)) {
        case ' ':
        case '\n':
        case '\r':
            // Ignore blank space.
            break;
        // Session start and end.
        case 'S':
            if (line.substring(8, 13).equals("Start")) {
                // Find the places where the two SNs are written.
                int before = line.indexOf('(');
                int between = line.indexOf(':');
                int after = line.indexOf(')');
                // Store the two SNs
                String mySN = line.substring(before + 1, between);
                String yourSN = line.substring(between + 1, after);
                // Find the year, month, date (day of the month), and day (day of the week).
                Date date = _readDate(line, after + 3);
                // the user was unexpectedly disconnected.
                if (Session.sessionIsActive()) {
                    Session.getSession().add(new Notification(Notification.Type.END_SESSION, date, null));
                    Session.closeSession();
                }
                // Create the new Session.
                sessions.add(Session.makeSession(mySN, yourSN, date));
                // Build the Timestamp for when this was created.
                int hour = Integer.parseInt(line.substring(after + 14, after + 16));
                int minute = Integer.parseInt(line.substring(after + 17, after + 19));
                int second = Integer.parseInt(line.substring(after + 20, after + 22));
                // Add the "we're started now" Notification.
                Session.getSession().add(new Notification(Notification.Type.START_SESSION, date, new Timestamp(hour, minute, second)));
            } else if (line.substring(8, 13).equals("Close")) {
                // Fine where the SN stops (hence the length).
                int after = line.indexOf(')');
                // Build the Date.
                Date date = _readDate(line, after + 3);
                // Build the Timestamp.
                Timestamp ts = new Timestamp(Integer.parseInt(line.substring(after + 14, after + 16)), Integer.parseInt(line.substring(after + 17, after + 19)), Integer.parseInt(line.substring(after + 20, after + 22)));
                // Check that there is a Session active.
                if (!Session.sessionIsActive())
                    return;
                // Add the end-session Notification.
                try {
                    Session.getSession().add(new Notification(Notification.Type.END_SESSION, date, ts));
                    Session.getSession().setDate(date);
                } catch (IllegalArgumentException e) {
                    throw new FileFormatException("Error on line " + lineNumber + ", date is too early.");
                }
                // Close the Session.
                Session.closeSession();
            }
            return;
        case '[':
            // This is a message.  Here, the first thing in the line is the time it happened.
            Timestamp ts = new Timestamp(// hour
            Integer.parseInt(line.substring(1, 3)), // minute
            Integer.parseInt(line.substring(4, 6)), // second
            Integer.parseInt(line.substring(7, 9)));
            // Determine if this is an actual message, or if it is not.
            if (line.charAt(11) == '*') {
                if (line.contains(" signed on at ")) {
                    int start = line.lastIndexOf('"') + 15;
                    Date date = _readDate(line, start);
                    Session.getSession().add(new Notification(Notification.Type.BUDDY_LOG_ON, date, ts));
                } else if (line.contains(" signed off at ")) {
                    int start = line.lastIndexOf('"') + 16;
                    Date date = _readDate(line, start);
                    Session.getSession().add(new Notification(Notification.Type.BUDDY_LOG_OFF, date, ts));
                } else if (line.contains("You have been disconnected.")) {
                    Date date = _readDate(line, 43);
                    Session.getSession().add(new Notification(Notification.Type.DISCONNECT, date, ts));
                } else if (line.contains("Auto")) {
                    Session current = Session.getSession();
                    if (// Auto-message from me.
                    line.substring(34, 36).equals("to")) {
                        int startSN = line.indexOf(':', 37);
                        String message = line.substring(startSN + 2);
                        current.add(new Message(current.getMySN(), ts, message, true));
                    } else if (// Auto-message from you.
                    line.substring(39, 43).equals("from")) {
                        int startSN = line.indexOf(':', 37);
                        String message = line.substring(startSN + 2);
                        current.add(new Message(current.getYourSN(), ts, message, true));
                    }
                }
            } else // Message from a user.
            {
                // End of this SN
                int endSN = line.indexOf(':', 11);
                // SN of this guy.
                String sn = line.substring(11, endSN);
                // The message.
                String msg = line.substring(endSN + 2);
                Session.getSession().add(new Message(sn, ts, msg, false));
            }
            return;
        default:
            // then an IllegalArgumentException will be thrown.
            try {
                Session.getSession().append(line);
            } catch (IllegalArgumentException iae) {
                throw new FileFormatException("Error on line " + lineNumber + ", format is off.");
            }
    }
}
