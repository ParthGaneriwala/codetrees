// $ANTLR start "decl_var"
public final MyGrammarParser.decl_var_return decl_var() throws RecognitionException {
    MyGrammarParser.decl_var_return retval = new MyGrammarParser.decl_var_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token VAR8 = null;
    MyGrammarParser.init_var_return init_var9 = null;
    CommonTree VAR8_tree = null;
    RewriteRuleTokenStream stream_VAR = new RewriteRuleTokenStream(adaptor, "token VAR");
    RewriteRuleSubtreeStream stream_init_var = new RewriteRuleSubtreeStream(adaptor, "rule init_var");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:150:9: ( VAR ( init_var )+ -> ^( DECL_VAR ( init_var )+ ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:150:11: VAR ( init_var )+
        {
            VAR8 = (Token) match(input, VAR, FOLLOW_VAR_in_decl_var938);
            stream_VAR.add(VAR8);
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:150:15: ( init_var )+
            int cnt3 = 0;
            loop3: do {
                int alt3 = 2;
                int LA3_0 = input.LA(1);
                if ((LA3_0 == IDENTIFIER)) {
                    alt3 = 1;
                }
                switch(alt3) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:150:16: init_var
                        {
                            pushFollow(FOLLOW_init_var_in_decl_var941);
                            init_var9 = init_var();
                            state._fsp--;
                            stream_init_var.add(init_var9.getTree());
                        }
                        break;
                    default:
                        if (cnt3 >= 1)
                            break loop3;
                        EarlyExitException eee = new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);
            // AST REWRITE
            // elements: init_var
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 150:27: -> ^( DECL_VAR ( init_var )+ )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:150:30: ^( DECL_VAR ( init_var )+ )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(DECL_VAR, "DECL_VAR"), root_1);
                    if (!(stream_init_var.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_init_var.hasNext()) {
                        adaptor.addChild(root_1, stream_init_var.nextTree());
                    }
                    stream_init_var.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
