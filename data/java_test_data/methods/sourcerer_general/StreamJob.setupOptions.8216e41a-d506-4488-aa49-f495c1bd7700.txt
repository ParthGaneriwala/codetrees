private void setupOptions() {
    final Validator fileValidator = new Validator() {

        public void validate(final List values) throws InvalidArgumentException {
            // an can exec check in java 6
            for (String file : (List<String>) values) {
                File f = new File(file);
                if (!f.exists()) {
                    throw new InvalidArgumentException("Argument : " + f.getAbsolutePath() + " doesn't exist.");
                }
                if (!f.isFile()) {
                    throw new InvalidArgumentException("Argument : " + f.getAbsolutePath() + " is not a file.");
                }
                if (!f.canRead()) {
                    throw new InvalidArgumentException("Argument : " + f.getAbsolutePath() + " is not accessible");
                }
            }
        }
    };
    // Note: not extending CLI2's FileValidator, that overwrites
    // the String arg into File and causes ClassCastException
    // in inheritance tree.
    final Validator execValidator = new Validator() {

        public void validate(final List values) throws InvalidArgumentException {
            // an can exec check in java 6
            for (String file : (List<String>) values) {
                try {
                    Runtime.getRuntime().exec("chmod 0777 " + (new File(file)).getAbsolutePath());
                } catch (IOException ioe) {
                // ignore
                }
            }
            fileValidator.validate(values);
        }
    };
    Option input = createOption("input", "DFS input file(s) for the Map step", "path", Integer.MAX_VALUE, true);
    Option output = createOption("output", "DFS output directory for the Reduce step", "path", 1, true);
    Option mapper = createOption("mapper", "The streaming command to run", "cmd", 1, false);
    Option combiner = createOption("combiner", "The streaming command to run", "cmd", 1, false);
    // reducer could be NONE
    Option reducer = createOption("reducer", "The streaming command to run", "cmd", 1, false);
    Option file = createOption("file", "File/dir to be shipped in the Job jar file", "file", Integer.MAX_VALUE, false, execValidator);
    Option dfs = createOption("dfs", "Optional. Override DFS configuration", "<h:p>|local", 1, false);
    Option jt = createOption("jt", "Optional. Override JobTracker configuration", "<h:p>|local", 1, false);
    Option additionalconfspec = createOption("additionalconfspec", "Optional.", "spec", 1, false);
    Option inputformat = createOption("inputformat", "Optional.", "spec", 1, false);
    Option outputformat = createOption("outputformat", "Optional.", "spec", 1, false);
    Option partitioner = createOption("partitioner", "Optional.", "spec", 1, false);
    Option numReduceTasks = createOption("numReduceTasks", "Optional.", "spec", 1, false);
    Option inputreader = createOption("inputreader", "Optional.", "spec", 1, false);
    Option mapDebug = createOption("mapdebug", "Optional.", "spec", 1, false);
    Option reduceDebug = createOption("reducedebug", "Optional", "spec", 1, false);
    Option cacheFile = createOption("cacheFile", "File name URI", "fileNameURI", Integer.MAX_VALUE, false);
    Option cacheArchive = createOption("cacheArchive", "File name URI", "fileNameURI", Integer.MAX_VALUE, false);
    // boolean properties
    Option verbose = createBoolOption("verbose", "print verbose output");
    Option info = createBoolOption("info", "print verbose output");
    Option help = createBoolOption("help", "print this help message");
    Option debug = createBoolOption("debug", "print debug output");
    Option inputtagged = createBoolOption("inputtagged", "inputtagged");
    allOptions = new GroupBuilder().withOption(input).withOption(output).withOption(mapper).withOption(combiner).withOption(reducer).withOption(file).withOption(dfs).withOption(jt).withOption(additionalconfspec).withOption(inputformat).withOption(outputformat).withOption(partitioner).withOption(numReduceTasks).withOption(inputreader).withOption(mapDebug).withOption(reduceDebug).withOption(jobconf).withOption(cmdenv).withOption(cacheFile).withOption(cacheArchive).withOption(verbose).withOption(info).withOption(debug).withOption(inputtagged).withOption(help).create();
    parser.setGroup(allOptions);
}
