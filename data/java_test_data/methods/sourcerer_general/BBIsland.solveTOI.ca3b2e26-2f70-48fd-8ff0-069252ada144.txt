void solveTOI(BBTimeStep subStep) {
    BBContactSolver contactSolver = new BBContactSolver(subStep, m_contacts, m_contactCount);
    // call this function to compute Jacobians.
    for (int i = 0; i < m_jointCount; ++i) {
        m_joints[i].initVelocityConstraints(subStep);
    }
    // solve velocity constraints.
    for (int i = 0; i < subStep.velocityIterations; ++i) {
        contactSolver.solveVelocityConstraints();
        for (int j = 0; j < m_jointCount; ++j) {
            m_joints[j].solveVelocityConstraints(subStep);
        }
    }
    // Integrate positions.
    for (int i = 0; i < m_bodyCount; ++i) {
        BBBody b = m_bodies[i];
        if (b.isStatic())
            continue;
        // Check for large velocities.
        BBVec2 translation = mul(subStep.dt, b.m_linearVelocity);
        if (dot(translation, translation) > maxTranslationSquared) {
            translation.normalize();
            b.m_linearVelocity = mul((maxTranslation * subStep.inv_dt), translation);
        }
        float rotation = subStep.dt * b.m_angularVelocity;
        if (rotation * rotation > maxRotationSquared) {
            if (rotation < 0.0) {
                b.m_angularVelocity = -subStep.inv_dt * maxRotation;
            } else {
                b.m_angularVelocity = subStep.inv_dt * maxRotation;
            }
        }
        // Store positions for continuous collision.
        b.m_sweep.c0 = b.m_sweep.c;
        b.m_sweep.a0 = b.m_sweep.a;
        // Integrate
        b.m_sweep.c.add(mul(subStep.dt, b.m_linearVelocity));
        b.m_sweep.a += subStep.dt * b.m_angularVelocity;
        // Compute new transform
        b.synchronizeTransform();
    // Note: shapes are synchronized later.
    }
    // solve position constraints.
    final float k_toiBaumgarte = 0.75f;
    for (int i = 0; i < subStep.positionIterations; ++i) {
        boolean contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);
        boolean jointsOkay = true;
        for (int j = 0; j < m_jointCount; ++j) {
            boolean jointOkay = m_joints[j].solvePositionConstraints(k_toiBaumgarte);
            jointsOkay = jointsOkay & jointOkay;
        }
        if (contactsOkay & jointsOkay) {
            break;
        }
    }
    report(contactSolver.m_constraints);
}
