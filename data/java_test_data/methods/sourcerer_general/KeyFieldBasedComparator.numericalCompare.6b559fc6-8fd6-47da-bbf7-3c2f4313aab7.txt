private int numericalCompare(byte[] a, int start1, int end1, byte[] b, int start2, int end2) {
    int i = start1;
    int j = start2;
    int mul = 1;
    byte first_a = a[i];
    byte first_b = b[j];
    if (first_a == NEGATIVE) {
        if (first_b != NEGATIVE) {
            // check for cases like -0.0 and 0.0 (they should be declared equal)
            return oneNegativeCompare(a, start1 + 1, end1, b, start2, end2);
        }
        i++;
    }
    if (first_b == NEGATIVE) {
        if (first_a != NEGATIVE) {
            // check for cases like 0.0 and -0.0 (they should be declared equal)
            return -oneNegativeCompare(b, start2 + 1, end2, a, start1, end1);
        }
        j++;
    }
    if (first_b == NEGATIVE && first_a == NEGATIVE) {
        mul = -1;
    }
    // skip over ZEROs
    while (i <= end1) {
        if (a[i] != ZERO) {
            break;
        }
        i++;
    }
    while (j <= end2) {
        if (b[j] != ZERO) {
            break;
        }
        j++;
    }
    // The nondigit character could be '.'
    while (i <= end1 && j <= end2) {
        if (!isdigit(a[i]) || a[i] != b[j]) {
            break;
        }
        i++;
        j++;
    }
    if (i <= end1) {
        first_a = a[i];
    }
    if (j <= end2) {
        first_b = b[j];
    }
    // store the result of the difference. This could be final result if the
    // number of digits in the mantissa is the same in both the numbers
    int firstResult = first_a - first_b;
    // check whether we hit a decimal in the earlier scan
    if ((first_a == DECIMAL && (!isdigit(first_b) || j > end2)) || (first_b == DECIMAL && (!isdigit(first_a) || i > end1))) {
        return ((mul < 0) ? -decimalCompare(a, i, end1, b, j, end2) : decimalCompare(a, i, end1, b, j, end2));
    }
    // check the number of digits in the mantissa of the numbers
    int numRemainDigits_a = 0;
    int numRemainDigits_b = 0;
    while (i <= end1) {
        // smaller
        if (isdigit(a[i++])) {
            numRemainDigits_a++;
        } else
            break;
    }
    while (j <= end2) {
        // smaller
        if (isdigit(b[j++])) {
            numRemainDigits_b++;
        } else
            break;
    }
    int ret = numRemainDigits_a - numRemainDigits_b;
    if (ret == 0) {
        return ((mul < 0) ? -firstResult : firstResult);
    } else {
        return ((mul < 0) ? -ret : ret);
    }
}
