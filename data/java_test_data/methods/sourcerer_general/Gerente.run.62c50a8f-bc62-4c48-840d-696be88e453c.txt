public void run() {
    leitorTXT.lerProximaLinha();
    numeroCidades = leitorTXT.getQuantidadeCidades();
    // Preenche a lista de vertices do grafo.
    for (int i = 0; i < numeroCidades; i++) {
        leitorTXT.lerProximaLinha();
        grafoRedeTransporte.adicionaVertice(new Vertice(leitorTXT.getNomeCidade(), 1000 - (leitorTXT.getPosicaoY() * 1000), leitorTXT.getPosicaoX() * 1000, 5, 5, leitorTXT.getNumeroCidade()));
        grafoRedeTransporte.getVertices().get(i).defineCor(Color.BLUE);
    }
    for (int i = 0; i < 52; i++) {
        listaGrafoRedeDengue.get(i).setVertices(grafoRedeTransporte.getVertices());
        listaGrafoTranspXDengue.get(i).setVertices(grafoRedeTransporte.getVertices());
    }
    // grafoTranspXDengue.setVertices(grafoRedeTransporte.getVertices());
    leitorTXT.lerProximaLinha();
    this.geraArestasTrasnporte();
    this.pintaVerticesTransporte();
    this.pintaArestasTransporte();
    // A partir daqui gera o grafo da dengue.
    this.geraArestasDengue();
    // this.pintaVerticesDengue();
    // this.pintaArestasDengue();
    // ArrayList<Integer> shortestPaths;
    // 
    // Dijkstra dijkstra = new Dijkstra();
    // shortestPaths = dijkstra.shortestPath(8, 236, d, dist, numeroCidades);
    // 
    // System.out.println(shortestPaths);
    janela.setGrafoTransporte(graphTransporte);
    janela.setGrafoDengue(listaGraphDengue);
    janela.setGrafoDengueTransp(listaGraphTranspDengue);
    janela.setListaGrafoRedeDengue(listaGrafoRedeDengue);
    janela.setListaGrafoTranspXDengue(listaGrafoTranspXDengue);
    janela.setGrafoRedeTransporte(grafoRedeTransporte);
    janela.setNumeroCidades(numeroCidades);
    janela.setNumeroArestasRedeTransporte(numeroArestasRedeTransporte);
    // janela.desenhaGrafo();
    janela.setVisible(true);
}
