private void visitAssign(NodeTraversal t, Node assign) {
    JSDocInfo info = assign.getJSDocInfo();
    Node lvalue = assign.getFirstChild();
    Node rvalue = assign.getLastChild();
    if (lvalue.getType() == Token.GETPROP) {
        Node object = lvalue.getFirstChild();
        JSType objectJsType = getJSType(object);
        String property = lvalue.getLastChild().getString();
        // we perform checks in addition to the ones below
        if (object.getType() == Token.GETPROP) {
            JSType jsType = getJSType(object.getFirstChild());
            if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
            }
        }
        // /** @type ... */object.name = ...;
        if (info != null && info.hasType()) {
            visitAnnotatedAssignGetprop(t, assign, info.getType().evaluate(t.getScope(), typeRegistry), object, property, rvalue);
            return;
        }
        // /** @enum ... */object.name = ...;
        if (info != null && info.hasEnumParameterType()) {
            checkEnumInitializer(t, rvalue, info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));
            return;
        }
        // object.prototype = ...;
        if (property.equals("prototype")) {
            if (objectJsType != null && objectJsType.isFunctionType()) {
                FunctionType functionType = objectJsType.toMaybeFunctionType();
                if (functionType.isConstructor()) {
                    JSType rvalueType = rvalue.getJSType();
                    validator.expectObject(t, rvalue, rvalueType, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                }
            } else {
            // TODO(user): might want to flag that
            }
            return;
        }
        // object.prototype.property = ...;
        if (object.getType() == Token.GETPROP) {
            Node object2 = object.getFirstChild();
            String property2 = NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, getJSType(rvalue));
                    }
                } else {
                // TODO(user): might want to flag that
                }
                return;
            }
        }
        // object.property = ...;
        ObjectType type = ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
        if (type != null) {
            if (type.hasProperty(property) && !type.isPropertyTypeInferred(property) && !propertyIsImplicitCast(type, property)) {
                validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type.getPropertyType(property), object, property);
            }
            return;
        }
    } else if (lvalue.getType() == Token.NAME) {
        // variable with inferred type case
        JSType rvalueType = getJSType(assign.getLastChild());
        Var var = t.getScope().getVar(lvalue.getString());
        if (var != null) {
            if (var.isTypeInferred()) {
                return;
            }
        }
    }
    // fall through case
    JSType leftType = getJSType(lvalue);
    Node rightChild = assign.getLastChild();
    JSType rightType = getJSType(rightChild);
    if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
        ensureTyped(t, assign, rightType);
    } else {
        ensureTyped(t, assign);
    }
}
