public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
    ModelAndView mv = new ModelAndView();
    String eventSid = (String) request.getParameter("sid");
    String roundSid = (String) request.getParameter("roundSid");
    String gradeSid = (String) request.getParameter("gradeSid");
    String categorySid = (String) request.getParameter("categorySid");
    String startOrder = (String) request.getParameter("startorder");
    String savetrm = (String) request.getParameter("savetrm");
    String trm = (String) request.getParameter("trm");
    String trs = (String) request.getParameter("trs");
    String velocity = (String) request.getParameter("velocity");
    String distance = (String) request.getParameter("distance");
    if (eventSid != null && eventSid.length() > 0) {
        // creo valores por defecto
        if (roundSid == null || roundSid.length() <= 0) {
            roundSid = "1";
        }
        if (gradeSid == null || gradeSid.length() <= 0) {
            List<Grade> gl = gradeManager.getAll();
            if (gl.size() > 0) {
                gradeSid = "" + gl.get(0).getSid();
            } else {
                gradeSid = "0";
            }
        }
        if (categorySid == null || categorySid.length() <= 0) {
            List<Category> cl = categoryManager.getAll();
            if (cl.size() > 0) {
                categorySid = "" + cl.get(0).getSid();
            } else {
                categorySid = "0";
            }
        }
        // Si queremos establecer el orden de saldia
        if (startOrder != null && Boolean.valueOf(startOrder).booleanValue() && roundSid.trim().equals("1")) {
            List<Grade> grades = gradeManager.getAll();
            List<Category> categories = categoryManager.getAll();
            for (int g = 0; g < grades.size(); g++) {
                for (int c = 0; c < categories.size(); c++) {
                    Grade grade = grades.get(g);
                    Category category = categories.get(c);
                    String hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=1 and participants.dog.grade.sid=" + grade.getSid() + " and participants.dog.category.sid=" + category.getSid() + " and participants.heat=false";
                    List<Roundresults> list = roundresultsManager.findHQL(hql);
                    if (list.size() > 0) {
                        long[] order = getOrder(list.size());
                        // ordeno los que no están en celo
                        for (int i = 0; i < list.size(); i++) {
                            Roundresults rr = list.get(i);
                            rr.setStartorder(order[i]);
                            roundresultsManager.save(rr);
                            // la manga2 el orden inverso
                            hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=2 and participants.dog.sid=" + rr.getParticipants().getDog().getSid();
                            List<Roundresults> list2 = roundresultsManager.findHQL(hql);
                            Roundresults rr2 = list2.get(0);
                            rr2.setStartorder(list.size() - order[i] + 1);
                            roundresultsManager.save(rr2);
                        }
                        int oldSize = list.size();
                        hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=1 and participants.dog.grade.sid=" + grade.getSid() + " and participants.dog.category.sid=" + category.getSid() + " and participants.heat=true";
                        list = roundresultsManager.findHQL(hql);
                        order = getOrder(list.size());
                        // ordeno los que están en celo, al final
                        for (int i = 0; i < list.size(); i++) {
                            Roundresults rr = list.get(i);
                            rr.setStartorder(oldSize + order[i]);
                            roundresultsManager.save(rr);
                            // la manga2 el orden inverso
                            hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=2 and participants.dog.sid=" + rr.getParticipants().getDog().getSid();
                            List<Roundresults> list2 = roundresultsManager.findHQL(hql);
                            Roundresults rr2 = list2.get(0);
                            rr2.setStartorder(oldSize + list.size() - order[i] + 1);
                            roundresultsManager.save(rr2);
                        }
                    }
                    Locale locale = request.getLocale();
                    saveMessage(mv, getText("roundresults.ordersaved", locale), ERROR_MESSAGES_KEY);
                }
            }
        } else if (startOrder != null && Boolean.valueOf(startOrder).booleanValue() && roundSid.trim().equals("2")) {
            // para la manga 2, el orden es inverso a los resultados de la primera manga.
            // primero obtengo el resultado d ela primera manga
            String hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=1" + " and participants.dog.grade.sid=" + gradeSid + " and participants.dog.category.sid=" + categorySid;
            List<Roundresults> results = roundresultsManager.findHQL(hql);
            ResultsManager rm = new ResultsManager(settingsManager, this.rangeCalificationManager);
            List<Winner> winners = rm.orderResults(results);
            // ahora los pongo al reves, todos menos los que están en celo que van al final
            hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=2 and participants.dog.grade.sid=" + gradeSid + " and participants.dog.category.sid=" + categorySid;
            List<Roundresults> listRResults = roundresultsManager.findHQL(hql);
            hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=2 and participants.dog.grade.sid=" + gradeSid + " and participants.dog.category.sid=" + categorySid + " and participants.heat=true";
            List<Roundresults> listRResultsHeat = roundresultsManager.findHQL(hql);
            long lastHeat = winners.size();
            for (int i = 0; i < winners.size(); i++) {
                Roundresults rr = getRoundResults(winners.get(i), listRResults);
                if (!rr.getParticipants().isHeat()) {
                    rr.setStartorder((long) (winners.size() - i + (winners.size() - lastHeat) - listRResultsHeat.size()));
                } else {
                    rr.setStartorder(lastHeat);
                    lastHeat--;
                }
                roundresultsManager.save(rr);
            }
        }
        // Si queremos guardar los cambios de trm trs velocidad y distancia
        if (savetrm != null && Boolean.valueOf(savetrm).booleanValue()) {
            String hql = "from Round where event.sid=" + eventSid + " and number=" + roundSid + " and grade.sid=" + gradeSid + " and category.sid=" + categorySid;
            List<Round> roundList = roundManager.findHQL(hql);
            if (roundList.size() > 0) {
                trm = trm.replaceAll(",", ".");
                trs = trs.replaceAll(",", ".");
                int index = trm.indexOf('.');
                if (index > 0) {
                    trm = trm.substring(0, index);
                }
                index = trs.indexOf('.');
                if (index > 0) {
                    trs = trs.substring(0, index);
                }
                distance = distance.replaceAll(",", ".");
                velocity = velocity.replaceAll(",", ".");
                Round r = roundList.get(0);
                r.setTrm(Integer.valueOf(trm));
                r.setTrs(Integer.valueOf(trs));
                r.setVelocity(Float.valueOf(velocity));
                r.setDistance(Float.valueOf(distance));
                roundManager.save(r);
                Locale locale = request.getLocale();
                saveMessage(mv, getText("round.prmsaved", locale), ERROR_MESSAGES_KEY);
            }
        } else {
            // sino queremos guardarlos, pongo los valores que tenga la ronda
            String hql = "from Round where event.sid=" + eventSid + " and number=" + roundSid + " and grade.sid=" + gradeSid + " and category.sid=" + categorySid;
            // System.out.println("hql="+hql);
            List<Round> roundList = roundManager.findHQL(hql);
            if (roundList.size() > 0) {
                // System.out.println("guardamos trm, etc..");
                trm = "" + roundList.get(0).getTrm();
                trs = "" + roundList.get(0).getTrs();
                velocity = "" + roundList.get(0).getVelocity();
                distance = "" + roundList.get(0).getDistance();
            }
        }
        mv.addObject("eventsid", eventSid);
        mv.addObject("roundSid", roundSid);
        mv.addObject("gradeSid", gradeSid);
        mv.addObject("categorySid", categorySid);
        // System.out.println("vamos a enviar:"+trm+","+trs+","+velocity+","+distance);
        mv.addObject("trm", trm);
        mv.addObject("trs", trs);
        mv.addObject("velocity", velocity);
        mv.addObject("distance", distance);
        // primero meto todos los grados
        mv.addObject("listadegrados", gradeManager.getAll("name"));
        // ahora meto todas las categor�as
        mv.addObject("listadecategorias", categoryManager.getAll("name"));
        // compruebo que est�n creadas todas las rondas y resultados, y las que no las creo
        testIfAllRight(Long.valueOf(eventSid).longValue(), Long.valueOf(roundSid).longValue(), Long.valueOf(gradeSid).longValue(), Long.valueOf(categorySid).longValue());
        // ahora muestro los participantes al torneo
        // del grado y categor�a seleccionado
        String hql = "from Roundresults where round.event.sid=" + eventSid + " and round.number=" + roundSid + " and participants.dog.grade.sid=" + gradeSid + " and participants.dog.category.sid=" + categorySid;
        mv.addObject(roundresultsManager.findHQL(hql));
        return mv;
    } else {
        return new ModelAndView().addObject(roundresultsManager.getAll());
    }
}
