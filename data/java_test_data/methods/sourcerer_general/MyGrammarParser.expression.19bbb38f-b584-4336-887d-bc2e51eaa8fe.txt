// $ANTLR start "expression"
public final MyGrammarParser.expression_return expression() throws RecognitionException {
    MyGrammarParser.expression_return retval = new MyGrammarParser.expression_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token OR164 = null;
    MyGrammarParser.or_expression_return or_expression163 = null;
    MyGrammarParser.or_expression_return or_expression165 = null;
    CommonTree OR164_tree = null;
    RewriteRuleTokenStream stream_OR = new RewriteRuleTokenStream(adaptor, "token OR");
    RewriteRuleSubtreeStream stream_or_expression = new RewriteRuleSubtreeStream(adaptor, "rule or_expression");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:268:12: ( or_expression ( OR or_expression )? -> ^( EXPRESSION or_expression ( or_expression )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:268:14: or_expression ( OR or_expression )?
        {
            pushFollow(FOLLOW_or_expression_in_expression2226);
            or_expression163 = or_expression();
            state._fsp--;
            stream_or_expression.add(or_expression163.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:268:28: ( OR or_expression )?
            int alt28 = 2;
            int LA28_0 = input.LA(1);
            if ((LA28_0 == OR)) {
                alt28 = 1;
            }
            switch(alt28) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:268:29: OR or_expression
                    {
                        OR164 = (Token) match(input, OR, FOLLOW_OR_in_expression2229);
                        stream_OR.add(OR164);
                        pushFollow(FOLLOW_or_expression_in_expression2231);
                        or_expression165 = or_expression();
                        state._fsp--;
                        stream_or_expression.add(or_expression165.getTree());
                    }
                    break;
            }
            // AST REWRITE
            // elements: or_expression, or_expression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 268:49: -> ^( EXPRESSION or_expression ( or_expression )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:268:52: ^( EXPRESSION or_expression ( or_expression )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(EXPRESSION, "EXPRESSION"), root_1);
                    adaptor.addChild(root_1, stream_or_expression.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:268:80: ( or_expression )?
                    if (stream_or_expression.hasNext()) {
                        adaptor.addChild(root_1, stream_or_expression.nextTree());
                    }
                    stream_or_expression.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
