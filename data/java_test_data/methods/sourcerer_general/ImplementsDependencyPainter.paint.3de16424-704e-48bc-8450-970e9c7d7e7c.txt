public void paint(Graphics2D g, Dependency dependency, boolean hasFocus) {
    if (!(dependency instanceof ImplementsDependency)) {
        throw new IllegalArgumentException();
    }
    Stroke oldStroke = g.getStroke();
    ImplementsDependency d = (ImplementsDependency) dependency;
    Stroke dashedStroke, normalStroke;
    boolean isSelected = d.isSelected() && hasFocus;
    if (isSelected) {
        dashedStroke = dashedSelected;
        normalStroke = normalSelected;
    } else {
        dashedStroke = dashedUnselected;
        normalStroke = normalUnselected;
    }
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g.setColor(normalColour);
    // Start from the centre of the src class
    Point pFrom = new Point(d.getFrom().getX() + d.getFrom().getWidth() / 2, d.getFrom().getY() + d.getFrom().getHeight() / 2);
    Point pTo = new Point(d.getTo().getX() + d.getTo().getWidth() / 2, d.getTo().getY() + d.getTo().getHeight() / 2);
    // Get the angle of the line from src to dst.
    double angle = Math.atan2(-(pFrom.getY() - pTo.getY()), pFrom.getX() - pTo.getX());
    // Get the dest point
    pFrom = d.getFrom().getAttachment(angle + Math.PI);
    pTo = d.getTo().getAttachment(angle);
    Point pArrow = new Point(pTo.x + (int) ((ARROW_SIZE - 2) * Math.cos(angle)), pTo.y - (int) ((ARROW_SIZE - 2) * Math.sin(angle)));
    // draw the arrow head
    int[] xPoints = { pTo.x, pTo.x + (int) ((ARROW_SIZE) * Math.cos(angle + ARROW_ANGLE)), pTo.x + (int) (ARROW_SIZE * Math.cos(angle - ARROW_ANGLE)) };
    int[] yPoints = { pTo.y, pTo.y - (int) ((ARROW_SIZE) * Math.sin(angle + ARROW_ANGLE)), pTo.y - (int) (ARROW_SIZE * Math.sin(angle - ARROW_ANGLE)) };
    g.setStroke(dashedStroke);
    g.drawLine(pFrom.x, pFrom.y, pArrow.x, pArrow.y);
    g.setStroke(normalStroke);
    g.drawPolygon(xPoints, yPoints, 3);
    g.setStroke(oldStroke);
}
