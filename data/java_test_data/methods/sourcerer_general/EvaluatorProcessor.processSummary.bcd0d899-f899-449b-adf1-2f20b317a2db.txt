public void processSummary() {
    // remove the concept cache every night
    CacheUtils.clearConceptCache();
    CacheUtils.clearEncounterTypeCache();
    // location is clustered, clusters are separated by comma
    String clusterNames = Context.getAdministrationService().getGlobalProperty(TaskParameters.LOCATION_GROUP_LIST);
    if (clusterNames != null) {
        String[] clusterName = StringUtils.split(clusterNames, TaskParameters.CLUSTER_SEPARATOR);
        GlobalProperty globalProperty = Context.getAdministrationService().getGlobalPropertyObject(TaskParameters.PROCESSOR_COUNTER);
        // start with the first cluster (offset = 0) when the counter is not a number
        Integer clusterOffset = NumberUtils.toInt(globalProperty.getPropertyValue(), 0);
        if (clusterOffset >= 0 && clusterOffset < ArrayUtils.getLength(clusterName)) {
            GlobalProperty initProperty = Context.getAdministrationService().getGlobalPropertyObject(TaskParameters.PROCESSOR_INITIALIZED);
            String currentCluster = clusterName[clusterOffset];
            // check whether all cluster have been initialized or not
            Boolean initialized = BooleanUtils.toBoolean(initProperty.getPropertyValue());
            Cohort cohort;
            String[] locationIds = StringUtils.split(currentCluster);
            for (int i = 0; i < ArrayUtils.getLength(locationIds); i++) {
                log.info("Processing location with id: " + locationIds[i]);
                // default return to -1 because no such location with id -1
                Location location = Context.getLocationService().getLocation(NumberUtils.toInt(locationIds[i], -1));
                if (!initialized) {
                    cohort = Context.getService(CoreService.class).getCohort(location, null, null);
                } else {
                    // regenerate when there's new obs
                    Calendar calendar = Calendar.getInstance();
                    calendar.add(Calendar.DATE, -(clusterName.length + 1));
                    Date date = calendar.getTime();
                    cohort = Context.getService(CoreService.class).getCohort(location, date, new Date());
                }
                evaluate(cohort);
            }
            clusterOffset++;
            if (clusterOffset == ArrayUtils.getLength(clusterName)) {
                clusterOffset = 0;
                initialized = true;
            }
            globalProperty.setPropertyValue(String.valueOf(clusterOffset));
            Context.getAdministrationService().saveGlobalProperty(globalProperty);
            initProperty.setPropertyValue(String.valueOf(initialized));
            Context.getAdministrationService().saveGlobalProperty(initProperty);
        }
    }
}
