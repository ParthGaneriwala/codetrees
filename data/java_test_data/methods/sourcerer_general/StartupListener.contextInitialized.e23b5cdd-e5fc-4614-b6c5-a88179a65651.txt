public void contextInitialized(ServletContextEvent event) {
    if (log.isDebugEnabled()) {
        log.debug("initializing context...");
    }
    // call Spring's context ContextLoaderListener to initialize
    // all the context files specified in web.xml
    super.contextInitialized(event);
    ServletContext context = event.getServletContext();
    // Orion starts Servlets before Listeners, so check if the config
    // object already exists
    Map config = (HashMap) context.getAttribute(Constants.CONFIG);
    if (config == null) {
        config = new HashMap();
    }
    if (context.getInitParameter("theme") != null) {
        config.put("theme", context.getInitParameter("theme"));
    }
    ApplicationContext ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(context);
    boolean encryptPassword = false;
    try {
        ProviderManager provider = (ProviderManager) ctx.getBean("authenticationManager");
        for (Iterator it = provider.getProviders().iterator(); it.hasNext(); ) {
            AuthenticationProvider p = (AuthenticationProvider) it.next();
            if (p instanceof RememberMeAuthenticationProvider) {
                config.put("rememberMeEnabled", Boolean.TRUE);
            }
        }
        if (ctx.containsBean("passwordEncoder")) {
            encryptPassword = true;
            config.put(Constants.ENCRYPT_PASSWORD, Boolean.TRUE);
            String algorithm = "SHA";
            if (ctx.getBean("passwordEncoder") instanceof Md5PasswordEncoder) {
                algorithm = "MD5";
            }
            config.put(Constants.ENC_ALGORITHM, algorithm);
        }
    } catch (NoSuchBeanDefinitionException n) {
    // ignore, should only happen when testing
    }
    context.setAttribute(Constants.CONFIG, config);
    // output the retrieved values for the Init and Context Parameters
    if (log.isDebugEnabled()) {
        log.debug("Remember Me Enabled? " + config.get("rememberMeEnabled"));
        log.debug("Encrypt Passwords? " + encryptPassword);
        if (encryptPassword) {
            log.debug("Encryption Algorithm: " + config.get(Constants.ENC_ALGORITHM));
        }
        log.debug("Populating drop-downs...");
    }
    setupContext(context);
    ReaderManager mgr = new ReaderManager();
    List readers = mgr.getReaders();
    Iterator it = readers.iterator();
    while (it.hasNext()) {
        Reader reader = (Reader) it.next();
        if (reader.getStartType().equals("Start"))
            reader.startService();
    }
}
