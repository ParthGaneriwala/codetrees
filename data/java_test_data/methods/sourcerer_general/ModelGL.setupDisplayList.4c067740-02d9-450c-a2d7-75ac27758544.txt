private void setupDisplayList(GL gl) {
    modelDisplayList = gl.glGenLists(200);
    for (ModelFace face : faces) {
        TextureManager.getTexture(face.getMaterial().getColorMapFile());
    }
    gl.glNewList(modelDisplayList, GL.GL_COMPILE);
    {
        gl.glPushMatrix();
        Material currMat = null;
        for (ModelFace face : faces) {
            if (currMat != face.getMaterial()) {
                currMat = face.getMaterial();
                setCurrentMaterial(gl, face.getMaterial());
            }
            int drawType;
            int numVertices = face.getNumVertices();
            switch(numVertices) {
                case 3:
                    drawType = GL.GL_TRIANGLES;
                    break;
                case 4:
                    drawType = GL.GL_QUADS;
                    break;
                default:
                    if (numVertices > 4)
                        drawType = GL.GL_POLYGON;
                    else {
                        System.out.println("[Debug] Warning: Skipping face; " + "invalid number of vertices: " + numVertices);
                        continue;
                    }
                    break;
            }
            gl.glBegin(drawType);
            for (GraphicsVertex vertex : face.getVerticesIterable()) {
                Vector3D vertexNormal = vertex.getVertexNormal();
                gl.glNormal3f(vertexNormal.getX(), vertexNormal.getY(), vertexNormal.getZ());
                Point3D textureVertex = vertex.getTextureVertex();
                if (textureVertex != null) {
                    // Y and Z are optional, but default to zero if not
                    // present.
                    gl.glTexCoord3f(textureVertex.getX(), textureVertex.getY(), textureVertex.getZ());
                }
                Point3D geometricVertex = vertex.getGeometricVertex();
                gl.glVertex3f(geometricVertex.getX(), geometricVertex.getY(), geometricVertex.getZ());
            }
            gl.glEnd();
        }
        if (currMat != null)
            unsetMaterial(gl);
        gl.glPopMatrix();
    }
    gl.glEndList();
}
