protected void drawDays() {
    Calendar tmpCalendar = (Calendar) calendar.clone();
    tmpCalendar.set(Calendar.HOUR_OF_DAY, 0);
    tmpCalendar.set(Calendar.MINUTE, 0);
    tmpCalendar.set(Calendar.SECOND, 0);
    tmpCalendar.set(Calendar.MILLISECOND, 0);
    Calendar minCal = Calendar.getInstance();
    minCal.setTime(minSelectableDate);
    minCal.set(Calendar.HOUR_OF_DAY, 0);
    minCal.set(Calendar.MINUTE, 0);
    minCal.set(Calendar.SECOND, 0);
    minCal.set(Calendar.MILLISECOND, 0);
    Calendar maxCal = Calendar.getInstance();
    maxCal.setTime(maxSelectableDate);
    maxCal.set(Calendar.HOUR_OF_DAY, 0);
    maxCal.set(Calendar.MINUTE, 0);
    maxCal.set(Calendar.SECOND, 0);
    maxCal.set(Calendar.MILLISECOND, 0);
    int firstDayOfWeek = tmpCalendar.getFirstDayOfWeek();
    tmpCalendar.set(Calendar.DAY_OF_MONTH, 1);
    int firstDay = tmpCalendar.get(Calendar.DAY_OF_WEEK) - firstDayOfWeek;
    if (firstDay < 0) {
        firstDay += 7;
    }
    int i;
    for (i = 0; i < firstDay; i++) {
        days[i + 7].setVisible(false);
        days[i + 7].setText("");
    }
    tmpCalendar.add(Calendar.MONTH, 1);
    Date firstDayInNextMonth = tmpCalendar.getTime();
    tmpCalendar.add(Calendar.MONTH, -1);
    Date day = tmpCalendar.getTime();
    int n = 0;
    Color foregroundColor = getForeground();
    while (day.before(firstDayInNextMonth)) {
        days[i + n + 7].setText(Integer.toString(n + 1));
        days[i + n + 7].setVisible(true);
        if ((tmpCalendar.get(Calendar.DAY_OF_YEAR) == today.get(Calendar.DAY_OF_YEAR)) && (tmpCalendar.get(Calendar.YEAR) == today.get(Calendar.YEAR))) {
            days[i + n + 7].setForeground(sundayForeground);
        } else {
            days[i + n + 7].setForeground(foregroundColor);
        }
        if ((n + 1) == this.day) {
            days[i + n + 7].setBackground(selectedColor);
            selectedDay = days[i + n + 7];
        } else {
            days[i + n + 7].setBackground(oldDayBackgroundColor);
        }
        if (tmpCalendar.before(minCal) || tmpCalendar.after(maxCal)) {
            days[i + n + 7].setEnabled(false);
        } else {
            days[i + n + 7].setEnabled(true);
        }
        n++;
        tmpCalendar.add(Calendar.DATE, 1);
        day = tmpCalendar.getTime();
    }
    for (int k = n + i + 7; k < 49; k++) {
        days[k].setVisible(false);
        days[k].setText("");
    }
    drawWeeks();
}
