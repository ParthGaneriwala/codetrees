private Node inlineFunction(Node callNode, Node fnNode, String fnName) {
    Node parent = callNode.getParent();
    Node grandParent = parent.getParent();
    // TODO(johnlenz): Consider storing the callSite classification in the
    // reference object and passing it in here.
    CallSiteType callSiteType = classifyCallSite(callNode);
    Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);
    boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);
    // Store the name for the result. This will be used to
    // replace "return expr" statements with "resultName = expr"
    // to replace
    String resultName = null;
    boolean needsDefaultReturnResult = true;
    switch(callSiteType) {
        case SIMPLE_ASSIGNMENT:
            resultName = parent.getFirstChild().getString();
            break;
        case VAR_DECL_SIMPLE_ASSIGNMENT:
            resultName = parent.getString();
            break;
        case SIMPLE_CALL:
            // "foo()" doesn't need a result.
            resultName = null;
            needsDefaultReturnResult = false;
            break;
        case EXPRESSION:
            resultName = getUniqueResultName();
            // The intermediary result has a default value of "undefined", so
            // we only need to set the implicit return value if we are in a loop
            // and the variable maybe reused.
            needsDefaultReturnResult = isCallInLoop;
            break;
        case DECOMPOSABLE_EXPRESSION:
            throw new IllegalStateException("Decomposable expressions must decomposed before inlining.");
        default:
            throw new IllegalStateException("Unexpected call site type.");
    }
    FunctionToBlockMutator mutator = new FunctionToBlockMutator(compiler, this.safeNameIdSupplier);
    Node newBlock = mutator.mutate(fnName, fnNode, callNode, resultName, needsDefaultReturnResult, isCallInLoop);
    // TODO(nicksantos): Create a common mutation function that
    // can replace either a VAR name assignment, assignment expression or
    // a EXPR_RESULT.
    Node greatGrandParent = grandParent.getParent();
    switch(callSiteType) {
        case VAR_DECL_SIMPLE_ASSIGNMENT:
            // Remove the call from the name node.
            parent.removeChild(parent.getFirstChild());
            Preconditions.checkState(parent.getFirstChild() == null);
            // Add the call, after the VAR.
            greatGrandParent.addChildAfter(newBlock, grandParent);
            break;
        case SIMPLE_ASSIGNMENT:
            // The assignment is now part of the inline function so
            // replace it completely.
            Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));
            greatGrandParent.replaceChild(grandParent, newBlock);
            break;
        case SIMPLE_CALL:
            // If nothing is looking at the result just replace the call.
            Preconditions.checkState(NodeUtil.isExpressionNode(parent));
            grandParent.replaceChild(parent, newBlock);
            break;
        case EXPRESSION:
            // TODO(johnlenz): Maybe change this so that movable and decomposable
            // expressions are handled the same way: The call is moved and
            // then handled by one the three basic cases, rather than
            // introducing a new case.
            Node injectionPoint = ExpressionDecomposer.findInjectionPoint(callNode);
            Preconditions.checkNotNull(injectionPoint);
            Node injectionPointParent = injectionPoint.getParent();
            Preconditions.checkNotNull(injectionPointParent);
            Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));
            // Declare the intermediate result name.
            newBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null).copyInformationFromForTree(callNode));
            // Inline the function before the selected injection point (before
            // the call).
            injectionPointParent.addChildBefore(newBlock, injectionPoint);
            // Replace the call site with a reference to the intermediate
            // result name.
            parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));
            break;
        default:
            throw new IllegalStateException("Unexpected call site type.");
    }
    return newBlock;
}
