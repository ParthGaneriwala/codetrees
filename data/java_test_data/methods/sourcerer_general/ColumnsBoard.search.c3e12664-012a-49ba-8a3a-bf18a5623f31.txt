/**
 * Recursive tree search algorithm around a single matrix square;
 * If sequences are found, mark the blocks to be deleted in
 * mark_matrix.
 */
boolean search(int depth, int x, int y, Color searchcolor, int direction) {
    if ((x < 0) || (x >= maxx) || (y < 0) || (y >= maxy))
        return false;
    if (!(isColor(x, y, searchcolor))) {
        return false;
    }
    if (depth == MAXDEPTH) {
        mark_matrix[x][y] = true;
        game.up_score();
        need_to_delete_p = true;
        game.canvas.plot_outlineblock(x, y, Color.black);
        return true;
    }
    switch(direction) {
        case Up:
            {
                if (search(depth + 1, x, y - 1, searchcolor, Up)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_outlineblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
        case UpRight:
            {
                if (search(depth + 1, x + 1, y - 1, searchcolor, UpRight)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_outlineblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
        case Right:
            {
                if (search(depth + 1, x + 1, y, searchcolor, Right)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_outlineblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
        case DownRight:
            {
                if (search(depth + 1, x + 1, y + 1, searchcolor, DownRight)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_3Dblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
        case Down:
            {
                if (search(depth + 1, x, y + 1, searchcolor, Down)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_outlineblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
        case DownLeft:
            {
                if (search(depth + 1, x - 1, y + 1, searchcolor, DownLeft)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_outlineblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
        case Left:
            {
                if (search(depth + 1, x - 1, y, searchcolor, Left)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_outlineblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
        case UpLeft:
            {
                if (search(depth + 1, x - 1, y - 1, searchcolor, UpLeft)) {
                    mark_matrix[x][y] = true;
                    game.canvas.plot_outlineblock(x, y, Color.black);
                    return true;
                } else
                    return false;
            }
    }
    return false;
}
