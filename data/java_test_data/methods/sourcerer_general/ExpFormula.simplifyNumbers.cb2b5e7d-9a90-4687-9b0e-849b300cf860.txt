private ExpTreenode simplifyNumbers(ExpTreenode tempnode) {
    if (tempnode == null)
        return null;
    if (tempnode.op_str.equals("#"))
        return tempnode;
    ExpTreenode leftExp = simplifyNumbers(tempnode.left);
    ExpTreenode rightExp = simplifyNumbers(tempnode.right);
    if ((Operator.indexOf(tempnode.op_str) >= 0) && (leftExp != null) && (rightExp != null)) {
        if (leftExp.op_str.equals("#") && rightExp.op_str.equals("#")) {
            ComplexNumber c1 = leftExp.num;
            ComplexNumber c2 = rightExp.num;
            ComplexNumber c = new ComplexNumber();
            if (tempnode.op_str.equals("+"))
                c = c1.add(c2);
            if (tempnode.op_str.equals("-"))
                c = c1.subtract(c2);
            if (tempnode.op_str.equals("*"))
                c = c1.multiply(c2);
            if (tempnode.op_str.equals("/"))
                c = c1.divide(c2);
            if (tempnode.op_str.equals("^"))
                c = c1.pow(c2);
            tempnode = new ExpTreenode(c);
            simplified = true;
        }
    }
    if (tempnode.op_str.equals("-") && (leftExp == null) && (rightExp != null)) {
        if (rightExp.op_str.equals("#")) {
            ComplexNumber c2 = rightExp.num;
            tempnode = new ExpTreenode(c2.multiply(ComplexNumber.makeMinusOne()));
            simplified = true;
        }
    }
    if ((leftExp == null) && (rightExp != null))
        if (rightExp.op_str.equals("#")) {
            ComplexNumber c = rightExp.num;
            if (tempnode.op_str.equals("ln")) {
                tempnode = new ExpTreenode(c.log());
                simplified = true;
            }
            if (tempnode.op_str.equals("exp")) {
                tempnode = new ExpTreenode(c.exp());
                simplified = true;
            }
            if (tempnode.op_str.equals("log")) {
                ComplexNumber ln10 = new ComplexNumber(Math.log(10), 0.0);
                tempnode = new ExpTreenode((c.log()).divide(ln10));
                simplified = true;
            }
            if (tempnode.op_str.equals("sin")) {
                tempnode = new ExpTreenode(c.sin());
                simplified = true;
            }
            if (tempnode.op_str.equals("cos")) {
                tempnode = new ExpTreenode(c.cos());
                simplified = true;
            }
            if (tempnode.op_str.equals("tan")) {
                tempnode = new ExpTreenode(c.tan());
                simplified = true;
            }
            if (tempnode.op_str.equals("cot")) {
                tempnode = new ExpTreenode(c.cot());
                simplified = true;
            }
            if (tempnode.op_str.equals("sec")) {
                tempnode = new ExpTreenode(c.sec());
                simplified = true;
            }
            if (tempnode.op_str.equals("csc")) {
                tempnode = new ExpTreenode(c.csc());
                simplified = true;
            }
            if (tempnode.op_str.equals("sinh")) {
                tempnode = new ExpTreenode(c.sinh());
                simplified = true;
            }
            if (tempnode.op_str.equals("cosh")) {
                tempnode = new ExpTreenode(c.cosh());
                simplified = true;
            }
            if (tempnode.op_str.equals("tanh")) {
                tempnode = new ExpTreenode(c.tanh());
                simplified = true;
            }
            if (tempnode.op_str.equals("coth")) {
                tempnode = new ExpTreenode(c.coth());
                simplified = true;
            }
            if (tempnode.op_str.equals("sech")) {
                tempnode = new ExpTreenode(c.sech());
                simplified = true;
            }
            if (tempnode.op_str.equals("csch")) {
                tempnode = new ExpTreenode(c.csch());
                simplified = true;
            }
            if (tempnode.op_str.equals("asin")) {
                tempnode = new ExpTreenode(c.asin());
                simplified = true;
            }
            if (tempnode.op_str.equals("acos")) {
                tempnode = new ExpTreenode(c.acos());
                simplified = true;
            }
            if (tempnode.op_str.equals("atan")) {
                tempnode = new ExpTreenode(c.atan());
                simplified = true;
            }
            if (tempnode.op_str.equals("acot")) {
                tempnode = new ExpTreenode(c.acot());
                simplified = true;
            }
            if (tempnode.op_str.equals("asec")) {
                tempnode = new ExpTreenode(c.asec());
                simplified = true;
            }
            if (tempnode.op_str.equals("acsc")) {
                tempnode = new ExpTreenode(c.acsc());
                simplified = true;
            }
            if (tempnode.op_str.equals("asinh")) {
                tempnode = new ExpTreenode(c.asinh());
                simplified = true;
            }
            if (tempnode.op_str.equals("acosh")) {
                tempnode = new ExpTreenode(c.acosh());
                simplified = true;
            }
            if (tempnode.op_str.equals("atanh")) {
                tempnode = new ExpTreenode(c.atanh());
                simplified = true;
            }
            if (tempnode.op_str.equals("acoth")) {
                tempnode = new ExpTreenode(c.acoth());
                simplified = true;
            }
            if (tempnode.op_str.equals("asech")) {
                tempnode = new ExpTreenode(c.asech());
                simplified = true;
            }
            if (tempnode.op_str.equals("acsch")) {
                tempnode = new ExpTreenode(c.acsch());
                simplified = true;
            }
            if (tempnode.op_str.equals("abs")) {
                tempnode = new ExpTreenode(new ComplexNumber(c.mod(), 0.0));
                simplified = true;
            }
            if (tempnode.op_str.equals("sign")) {
                tempnode = new ExpTreenode(c.sign());
                simplified = true;
            }
            if (tempnode.op_str.equals("zeron")) {
                tempnode = new ExpTreenode(c.zeron());
                simplified = true;
            }
            if (tempnode.op_str.equals("mod")) {
                tempnode = new ExpTreenode(new ComplexNumber(c.mod(), 0.0));
                simplified = true;
            }
            if (tempnode.op_str.equals("arg")) {
                tempnode = new ExpTreenode(new ComplexNumber(c.arg(), 0.0));
                simplified = true;
            }
        }
    return tempnode;
}
