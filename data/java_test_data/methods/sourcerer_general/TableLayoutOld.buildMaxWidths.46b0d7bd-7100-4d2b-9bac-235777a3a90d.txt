private void buildMaxWidths(Container container) {
    Component c;
    int width;
    // int row = 0;
    int column = 0;
    Insets insets = container.getInsets();
    int targetWidth = container.getSize().width - insets.left - insets.right;
    if (percentages != null) {
        // Define widths from percentages
        widths = new int[columns];
        for (int i = 0; i < columns; i++) {
            widths[i] = (int) Math.round(targetWidth * percentages[i]);
        }
    } else {
        // Define widths dynamically
        widths = new int[columns];
        for (int i = 0; i < container.getComponentCount(); i++) {
            if (column == columns)
                column = 0;
            c = container.getComponent(i);
            int leftMargin = defaultLeftMargin;
            int rightMargin = defaultRightMargin;
            if (leftPadding.containsKey(c)) {
                leftMargin = ((Integer) leftPadding.get(c)).intValue();
            } else if (rightPadding.containsKey(c)) {
                rightMargin = ((Integer) rightPadding.get(c)).intValue();
            }
            width = c.getPreferredSize().width + leftMargin + rightMargin;
            if (colSpans.containsKey(c)) {
                int colSpan = ((Integer) colSpans.get(c)).intValue();
                width = Math.round((float) width / (float) colSpan);
            }
            if (width > widths[column]) {
                widths[column] = width;
            }
            column++;
        }
        int totalWidth = 0;
        for (int i = 0; i < widths.length; i++) {
            totalWidth += widths[i];
        }
        // Check to see if preferred size is too much
        if ((targetWidth < totalWidth) && (targetWidth > 0)) {
            float modifier = (float) targetWidth / (float) totalWidth;
            totalWidth = 0;
            for (int i = 0; i < widths.length; i++) {
                widths[i] = Math.round(widths[i] * modifier);
                totalWidth += widths[i];
            }
        }
        // int fullWidth = container.getParent().getSize().width;
        int temp = 0;
        float variable = (float) targetWidth / (float) totalWidth;
        if (totalWidth < targetWidth) {
            for (int i = 0; i < widths.length; i++) {
                widths[i] = (int) (widths[i] * variable);
                temp += widths[i];
            }
        }
    }
}
