public void doRender(Context context, String directiveName, Object param) throws Exception {
    String urlString;
    String encode;
    if (param instanceof String) {
        urlString = parseUrl(context, (String) param);
        encode = null;
    } else if (param instanceof List) {
        List params = (List) param;
        if (params.size() == 2 && params.get(0) instanceof String && params.get(1) instanceof String) {
            urlString = parseUrl(context, (String) params.get(0));
            encode = (String) params.get(1);
        } else {
            throw I18nExceptionFactory.createIllegalArgumentException("SnatchDirectiveHandler.parameter.error");
        }
    } else {
        throw I18nExceptionFactory.createIllegalArgumentException("SnatchDirectiveHandler.parameter.error");
    }
    URL url = new URL(urlString);
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    try {
        conn.setRequestMethod("GET");
        conn.setDoOutput(false);
        conn.setDoInput(true);
        Reader reader = null;
        try {
            if (encode == null)
                encode = conn.getContentEncoding();
            if (encode == null)
                reader = new InputStreamReader(conn.getInputStream());
            else
                reader = new InputStreamReader(conn.getInputStream(), encode);
            int len = -1;
            char[] buf = new char[8196];
            while ((len = reader.read(buf)) > 0) {
                context.getOut().write(buf, 0, len);
            }
        } finally {
            if (reader != null)
                reader.close();
        }
    } catch (IOException e) {
        context.output(I18nMessages.getMessage("SnatchDirectiveHandler.snatch.error", new Object[] { e.getMessage() }));
    } finally {
        if (conn != null)
            conn.disconnect();
    }
}
