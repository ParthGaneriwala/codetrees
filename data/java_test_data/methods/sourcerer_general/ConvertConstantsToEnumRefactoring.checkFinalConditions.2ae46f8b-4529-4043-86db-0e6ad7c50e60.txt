public RefactoringStatus checkFinalConditions(final IProgressMonitor monitor) throws CoreException, OperationCanceledException {
    final RefactoringStatus status = new RefactoringStatus();
    try {
        monitor.beginTask(Messages.ConvertConstantsToEnumRefactoring_CheckingPreconditions, 2);
        final IJavaSearchScope scope = SearchEngine.createWorkspaceScope();
        this.computer = new EnumerizationComputer(this.fieldsToRefactor, scope, monitor);
        // build the enumerization forest.
        /*
			 * TODO: Will treat this as a 'blackbox' for now. For more details
			 * on the internals of this method, check the paper available at:
			 * http://www.cse.ohio-state.edu/~khatchad/papers/khatchad-TR26.pdf
			 * or a shorter version at
			 * http://presto.cse.ohio-state.edu/pubs/icsm07.pdf.
			 */
        this.computer.compute();
        /*
			 * TODO: The enumerization forest build by the enum computer
			 * consists of only the *minimal* sets which can be transformed into
			 * an enum type. That is, elements are grouped together in each set
			 * based *only* upon their type dependencies. Therefore, it is
			 * possible to, if desired, to further union these sets to build
			 * large (in terms of members) types. In the initial test case, the
			 * field DECREASE_SPEED is an example of this problem. Since
			 * DECREASE_SPEED does not currently share type dependencies with
			 * any of the other automobile actions, the computer places it in a
			 * singleton set. However, it is clear that DECREASE_SPEED should
			 * belong to the set consisting of the other automobile actions. As
			 * such, we may want a sophisticated UI that presents the input
			 * constants in sets produced by the enumerization computer, then
			 * allow the user to further union the sets as desired. After the
			 * user has manipulated the sets, we would only need to run the new
			 * "forest" through the member constraint filter which is a public
			 * static method of the EnumerizationComputer.
			 */
        // check to see if any of the input constants weren't enumerizable.
        final RefactoringStatus nonEnumStatus = this.reportNonEnumerizableInputConstants();
        status.merge(nonEnumStatus);
        // Get names for the new types.
        this.retrieveTypeNames();
        for (final Iterator fit = this.computer.getEnumerizationForest().iterator(); fit.hasNext(); ) {
            final Collection col = (Collection) fit.next();
            for (final Iterator cit = col.iterator(); cit.hasNext(); ) {
                final IJavaElement elem = (IJavaElement) cit.next();
                // The search engine.
                final SearchEngine engine = new SearchEngine();
                // The search pattern corresponding to the entities whose
                // type must be altered.
                SearchPattern pattern = SearchPattern.createPattern(elem, IJavaSearchConstants.DECLARATIONS, SearchPattern.R_EXACT_MATCH);
                // Search for declarations (must always do this since each
                // element's type must be altered).
                commenceSearch(engine, pattern, scope, SearchMatchPurpose.ALTER_TYPE_DECLARATION, monitor);
                // constant ...
                if (this.fieldsToRefactor.contains(elem)) {
                    // The search pattern corresponding to the references to
                    // the constant whose parent expression(s) must be
                    // altered (more like tweaked).
                    pattern = SearchPattern.createPattern(elem, IJavaSearchConstants.REFERENCES, SearchPattern.R_EXACT_MATCH);
                    commenceSearch(engine, pattern, scope, SearchMatchPurpose.ALTER_NAMESPACE_PREFIX, monitor);
                }
                // manipulation ...
                if (this.computer.getElemToLegalInfixExpressionSourceRangeMap().containsKey(elem)) {
                    pattern = SearchPattern.createPattern(elem, IJavaSearchConstants.REFERENCES, SearchPattern.R_EXACT_MATCH);
                    commenceSearch(engine, pattern, scope, SearchMatchPurpose.ALTER_INFIX_EXPRESSION, monitor);
                }
            }
        }
        // The compilation units needing to be altered mapped to the
        // appropriate search matches.
        final Map units = new HashMap();
        for (final Iterator it = this.matchToPurposeMap.keySet().iterator(); it.hasNext(); ) {
            final SearchMatch match = (SearchMatch) it.next();
            final IJavaElement element = (IJavaElement) match.getElement();
            final ICompilationUnit unit = Util.getIMember(element).getCompilationUnit();
            if (unit != null) {
                Collection searchMatchCollection = (Collection) units.get(unit);
                if (searchMatchCollection == null) {
                    searchMatchCollection = new ArrayList();
                    units.put(unit, searchMatchCollection);
                }
                searchMatchCollection.add(match);
            }
        }
        final Map projects = new HashMap();
        for (final Iterator it = units.keySet().iterator(); it.hasNext(); ) {
            final ICompilationUnit unit = (ICompilationUnit) it.next();
            final IJavaProject project = unit.getJavaProject();
            if (project != null) {
                Collection unitsCollection = (Collection) projects.get(project);
                if (unitsCollection == null) {
                    unitsCollection = new ArrayList();
                    projects.put(project, unitsCollection);
                }
                unitsCollection.add(unit);
            }
        }
        final ASTRequestor requestor = new ASTRequestor() {

            public void acceptAST(ICompilationUnit source, CompilationUnit ast) {
                try {
                    ConvertConstantsToEnumRefactoring.this.rewriteCompilationUnit(source, (Collection) units.get(source), ast, status, monitor);
                } catch (CoreException exception) {
                    RefactoringPlugin.log(exception);
                }
            }
        };
        final IProgressMonitor subMonitor = new SubProgressMonitor(monitor, 1);
        try {
            final Set set = projects.keySet();
            subMonitor.beginTask(Messages.ConvertConstantsToEnumRefactoring_CompilingSource, set.size());
            for (final Iterator it = set.iterator(); it.hasNext(); ) {
                final IJavaProject project = (IJavaProject) it.next();
                final ASTParser parser = ASTParser.newParser(AST.JLS3);
                parser.setProject(project);
                parser.setResolveBindings(true);
                final Collection collection = (Collection) projects.get(project);
                parser.createASTs((ICompilationUnit[]) collection.toArray(new ICompilationUnit[collection.size()]), new String[0], requestor, new SubProgressMonitor(subMonitor, 1));
            }
        } finally {
            subMonitor.done();
        }
    } finally {
        monitor.done();
    }
    status.merge(this.insertNewEnumType(monitor));
    return status;
}
