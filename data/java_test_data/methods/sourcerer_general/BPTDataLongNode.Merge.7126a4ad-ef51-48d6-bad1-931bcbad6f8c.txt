public static // , out String rightLeastKey,
String Merge(// , out String rightLeastKey,
BPTDataLongNode left, // , out String rightLeastKey,
String KeyBetween, // , out String rightLeastKey,
BPTDataLongNode right) throws // out boolean DeleteRight)
Exception {
    if (left.isLeaf || right.isLeaf) {
        if (!(left.isLeaf && right.isLeaf)) {
            throw new BPTException("can't merge leaf with non-leaf");
        }
        // , out DeleteRight);
        MergeLeaves(left, right);
        String rightLeastKey = right.ChildKeys[0];
        return rightLeastKey;
    }
    // merge non-leaves
    String[] allkeys = new String[left.Size * 2 + 1];
    long[] allseeks = new long[left.Size * 2 + 2];
    BPTDataLongNode[] allMaterialized = new BPTDataLongNode[left.Size * 2 + 2];
    if (left.ChildBufferNumbers[0] == BPTDataLong.NULLBUFFERNUMBER || right.ChildBufferNumbers[0] == BPTDataLong.NULLBUFFERNUMBER) {
        throw new BPTException("cannot merge empty non-leaf with non-leaf");
    }
    int index = 0;
    allseeks[0] = left.ChildBufferNumbers[0];
    allMaterialized[0] = left.MaterializedChildNodes[0];
    for (int i = 0; i < left.Size; i++) {
        if (left.ChildKeys[i] == null) {
            break;
        }
        allkeys[index] = left.ChildKeys[i];
        allseeks[index + 1] = left.ChildBufferNumbers[i + 1];
        allMaterialized[index + 1] = left.MaterializedChildNodes[i + 1];
        index++;
    }
    allkeys[index] = KeyBetween;
    index++;
    allseeks[index] = right.ChildBufferNumbers[0];
    allMaterialized[index] = right.MaterializedChildNodes[0];
    int rightcount = 0;
    for (int i = 0; i < right.Size; i++) {
        if (right.ChildKeys[i] == null) {
            break;
        }
        allkeys[index] = right.ChildKeys[i];
        allseeks[index + 1] = right.ChildBufferNumbers[i + 1];
        allMaterialized[index + 1] = right.MaterializedChildNodes[i + 1];
        index++;
        rightcount++;
    }
    if (index <= left.Size) {
        // it will all fit in one node
        right.isValid = false;
        for (int i = 0; i < index; i++) {
            left.ChildKeys[i] = allkeys[i];
            left.ChildBufferNumbers[i] = allseeks[i];
            left.MaterializedChildNodes[i] = allMaterialized[i];
        }
        left.ChildBufferNumbers[index] = allseeks[index];
        left.MaterializedChildNodes[index] = allMaterialized[index];
        left.reParentAllChildren();
        left.Soil();
        right.Free();
        return null;
    }
    // otherwise split the content between the nodes
    left.Clear();
    right.Clear();
    left.Soil();
    right.Soil();
    int leftcontent = index / 2;
    int rightcontent = index - leftcontent - 1;
    String rightLeastKey = allkeys[leftcontent];
    int outputindex = 0;
    for (int i = 0; i < leftcontent; i++) {
        left.ChildKeys[i] = allkeys[outputindex];
        left.ChildBufferNumbers[i] = allseeks[outputindex];
        left.MaterializedChildNodes[i] = allMaterialized[outputindex];
        outputindex++;
    }
    rightLeastKey = allkeys[outputindex];
    left.ChildBufferNumbers[outputindex] = allseeks[outputindex];
    left.MaterializedChildNodes[outputindex] = allMaterialized[outputindex];
    outputindex++;
    rightcount = 0;
    for (int i = 0; i < rightcontent; i++) {
        right.ChildKeys[i] = allkeys[outputindex];
        right.ChildBufferNumbers[i] = allseeks[outputindex];
        right.MaterializedChildNodes[i] = allMaterialized[outputindex];
        outputindex++;
        rightcount++;
    }
    right.ChildBufferNumbers[rightcount] = allseeks[outputindex];
    right.MaterializedChildNodes[rightcount] = allMaterialized[outputindex];
    left.reParentAllChildren();
    right.reParentAllChildren();
    return rightLeastKey;
}
