private void drawSquare(Graphics g, int x, int y, TetrisShape shape, int phantom) {
    Color colour = colourTable[shape.ordinal()];
    Color brighter = colour.brighter();
    Color darker = colour.darker();
    if (phantom != -1) {
        colour = new Color(colour.getRed(), colour.getGreen(), colour.getBlue(), phantom);
        brighter = new Color(brighter.getRed(), brighter.getGreen(), brighter.getBlue(), phantom);
        darker = new Color(darker.getRed(), darker.getGreen(), darker.getBlue(), phantom);
    }
    g.setColor(colour);
    g.fillRect(x + 1, y + 1, squareWidth() - 2, squareHeight() - 2);
    g.setColor(brighter);
    g.drawLine(x, y + squareHeight() - 1, x, y);
    g.drawLine(x, y, x + squareWidth() - 1, y);
    g.setColor(darker);
    g.drawLine(x + 1, y + squareHeight() - 1, x + squareWidth() - 1, y + squareHeight() - 1);
    g.drawLine(x + squareWidth() - 1, y + squareHeight() - 1, x + squareWidth() - 1, y + 1);
    if (shape == TetrisShape.Bomb) {
        if (MText == null) {
            MTextHeight = GlobalSettings.fontMetrics.getHeight();
            MText = new BufferedImage(MTextHeight, MTextHeight, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = MText.createGraphics();
            g2d.setColor(Color.darkGray);
            g2d.drawString("M", 0, MTextHeight);
            g2d.dispose();
        }
        g.drawImage(MText, x + squareWidth() / 2 - MTextHeight / 2, y + squareHeight() / 2 - MTextHeight / 2, null);
    }
}
