public String doView(RenderRequest request, RenderResponse response) throws Exception {
    // The JSP to show upon success
    String defaultView = VIEW_PAGE;
    // Determine the project container to use
    Project project = findProject(request);
    // Check the user's permissions
    User user = getUser(request);
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-reviews-add")) {
        throw new PortletException("Unauthorized to place reviews in this project");
    }
    // Additionally check if user owns this listing (except admins)
    if (!ProjectUtils.hasAccess(project.getId(), user, "project-reviews-admin") && project.getOwner() == user.getId()) {
        throw new PortletException("Owners cannot review their own listing");
    }
    // Determine the connection to use
    Connection db = useConnection(request);
    // Determine if adding or updating a record
    int reviewId = getPageViewAsInt(request);
    if (reviewId > -1) {
        // Build the selected review
        ProjectRating thisProjectRating = new ProjectRating(db, reviewId);
        if (!ProjectUtils.hasAccess(project.getId(), user, "project-reviews-admin") && thisProjectRating.getEnteredBy() != user.getId()) {
            throw new PortletException("No permission to modify other reviews");
        }
        request.setAttribute(PROJECT_RATING, thisProjectRating);
        // Supporting form data
        request.setAttribute("popularTags", ProjectUtils.loadProjectTags(db, project.getId()));
        request.setAttribute("userTags", ProjectUtils.loadProjectTagsForUser(db, project.getId(), thisProjectRating.getEnteredBy()));
        request.setAttribute("userRecentTags", UserUtils.loadRecentlyUsedTagsByUser(db, thisProjectRating.getEnteredBy()));
    } else {
        // Check the request for the record and provide a value for the request scope
        PortalUtils.getFormBean(request, PROJECT_RATING, ProjectRating.class);
        // Fetch the rating/review if the user has already reviewed this project
        int existingVote = Rating.queryUserRating(db, user.getId(), project.getId(), "projects", "project_id");
        if (existingVote != -1) {
            ProjectRatingList projectRatingList = new ProjectRatingList();
            projectRatingList.setEnteredBy(user.getId());
            projectRatingList.setProjectId(project.getId());
            projectRatingList.buildList(db);
            ProjectRating thisProjectRating = projectRatingList.get(0);
            request.setAttribute(PROJECT_RATING, thisProjectRating);
        }
        // Supporting form data
        request.setAttribute("popularTags", ProjectUtils.loadProjectTags(db, project.getId()));
        request.setAttribute("userTags", ProjectUtils.loadProjectTagsForUser(db, project.getId(), user.getId()));
        request.setAttribute("userRecentTags", UserUtils.loadRecentlyUsedTagsByUser(db, user.getId()));
    }
    // JSP view
    return defaultView;
}
