public Set<AdviceDependency> registerTracePattern(TracePattern tp) {
    Set<AdviceDependency> result = new HashSet<AdviceDependency>();
    Set<AdviceDependency> deps = new HashSet<AdviceDependency>();
    // construct path infos and register dependencies
    Set<PathInfo> pathInfos = new PathInfoFinder(tp).getPathInfos();
    for (PathInfo pathInfo : pathInfos) {
        Map<String, List<String>> strongAdviceNameToVars = new HashMap<String, List<String>>();
        Set<String> strongSymbols = new HashSet<String>(pathInfo.getDominatingLabels());
        for (String strongSymbol : strongSymbols) {
            List<String> variableOrder = tp.getVariableOrder(strongSymbol);
            String adviceName = tp.getSymbolAdviceMethod(strongSymbol).getName();
            adviceName = replaceForHumanReadableName(tp.getContainer().getName() + "." + adviceName);
            strongAdviceNameToVars.put(adviceName, variableOrder);
        }
        Map<String, List<String>> weakAdviceNameToVars = new HashMap<String, List<String>>();
        Set<String> weakSymbols = new HashSet<String>(pathInfo.getSkipLoopLabels());
        // symbols that are strong, may not be declared weak as well
        weakSymbols.removeAll(strongSymbols);
        for (String weakSymbol : weakSymbols) {
            List<String> variableOrder = tp.getVariableOrder(weakSymbol);
            String adviceName = tp.getSymbolAdviceMethod(weakSymbol).getName();
            adviceName = replaceForHumanReadableName(tp.getContainer().getName() + "." + adviceName);
            weakAdviceNameToVars.put(adviceName, variableOrder);
        }
        AdviceDependency adviceDependency = new AdviceDependency(strongAdviceNameToVars, weakAdviceNameToVars, tp.getContainer(), Position.compilerGenerated());
        deps.add(adviceDependency);
    }
    for (AdviceDependency adviceDependency : deps) {
        addAdviceDependency(adviceDependency);
        result.add(adviceDependency);
    }
    addTracePattern(tp);
    return result;
}
