private void findCommonsValidators(UIComponent c, FacesContext context) {
    final int RENDERED_ATTR = 0;
    final String[] RENDER_INDICATORS = { "rendered", "disabled", "readonly" };
    BitSet VALID_VIEW_SET = new BitSet(3);
    VALID_VIEW_SET.set(RENDERED_ATTR);
    BitSet renderIndicatorSet = new BitSet(3);
    for (int i = 0; i < RENDER_INDICATORS.length; i++) {
        Boolean value = (Boolean) c.getAttributes().get(RENDER_INDICATORS[i]);
        if (value != null && value.booleanValue()) {
            renderIndicatorSet.set(i);
        }
    }
    if (c instanceof EditableValueHolder && renderIndicatorSet.equals(VALID_VIEW_SET)) {
        EditableValueHolder h = (EditableValueHolder) c;
        javax.faces.validator.Validator[] vs = h.getValidators();
        for (int i = 0; i < vs.length; i++) {
            if (vs[i] instanceof CommonsValidator) {
                CommonsValidator v = (CommonsValidator) vs[i];
                v.setFormName(findForm(context, c));
                if (Boolean.TRUE.equals(v.getClient())) {
                    // look for the clientId set
                    Map clientIds = (Map) c.getAttributes().get(ValidatorInputRenderer.VALIDATOR_CLIENTIDS_ATTR);
                    if (clientIds != null) {
                        validatorVars.putAll(clientIds);
                        Iterator ci = clientIds.entrySet().iterator();
                        while (ci.hasNext()) {
                            Map.Entry e = (Map.Entry) ci.next();
                            String id = (String) e.getKey();
                            addValidator(v.getType(), id, v);
                            ValidatorAction action = v.getValidatorAction();
                            List list = action.getDependencyList();
                            Iterator iter = list.iterator();
                            while (iter.hasNext()) {
                                String type = (String) iter.next();
                                addValidator(type, id, v);
                            }
                        }
                    } else {
                        // otherwise just try using the client id
                        String id = c.getClientId(context);
                        addValidator(v.getType(), id, v);
                        ValidatorAction action = v.getValidatorAction();
                        List list = action.getDependencyList();
                        Iterator iter = list.iterator();
                        while (iter.hasNext()) {
                            String type = (String) iter.next();
                            addValidator(type, id, v);
                        }
                    }
                }
                if (Boolean.TRUE.equals(v.getServer())) {
                // Fields with empty values are not validated, so
                // we force the issue here by setting the component's
                // required attribute to true.
                /*if ("required".equals(v.getType())) {
                     h.setRequired(true);
                  }*/
                }
            }
        }
    }
    if (renderIndicatorSet.get(RENDERED_ATTR)) {
        Iterator childrenIterator = c.getFacetsAndChildren();
        while (childrenIterator.hasNext()) {
            UIComponent child = (UIComponent) childrenIterator.next();
            findCommonsValidators(child, context);
        }
        childrenIterator = null;
    }
}
