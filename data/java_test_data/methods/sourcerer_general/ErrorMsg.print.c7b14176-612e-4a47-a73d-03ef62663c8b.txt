public static void print(String name, SList labelList, SList counterexampleContext, /*@ non_null */
RoutineDecl rd, /*@ non_null */
Set directTargets, /*@ non_null */
PrintStream out) {
    try {
        int cLabels = labelList.length();
        int iErrorLabel = -1;
        String tail = null;
        for (int i = 0; i < cLabels; i++) {
            String s = labelList.at(i).getAtom().toString();
            if (isErrorLabel(s)) {
                printErrorMessage(s, counterexampleContext, rd, directTargets, out, false);
                iErrorLabel = i;
                int j = s.indexOf('@');
                if (j != -1)
                    tail = s.substring(j);
                break;
            }
        }
        if (iErrorLabel == -1) {
            // @ unreachable;
            StringBuffer s = new StringBuffer("Unknown cause!  Labels are");
            for (int i = 0; i < cLabels; i++) {
                s.append(" " + labelList.at(i).getAtom().toString());
            }
            ErrorSet.error(s.toString());
        }
        // print the execution trace info if requested
        if (Main.options().traceInfo > 0) {
            // copy the trace labels to a String array
            String[] traceLabels = new String[cLabels];
            int index = 0;
            for (int i = 0; i < cLabels; i++) {
                String s = labelList.at(i).getAtom().toString();
                if (isTraceLabel(s)) {
                    traceLabels[index] = s.substring(6);
                    index++;
                }
            }
            if (index > 0) {
                sortTraceLabels(traceLabels, index);
                out.println("Execution trace information:");
                for (int i = 0; i < index; i++) printTraceInfo(traceLabels[i], out);
                System.out.println();
            }
        }
        if (Main.options().counterexample) {
            out.println("Counterexample context:");
            SList prunedCC = pruneCC(counterexampleContext);
            int n = prunedCC.length();
            for (int i = 0; i < n; i++) {
                out.print("    ");
                prunedCC.at(i).prettyPrint(out);
                out.println();
            }
            out.println();
        }
        /* 2005-06-13 CnC hook added by Christoph Csallner: */
        edu.gatech.cc.cnc.Main.main.jcrasherHook(pruneCC(counterexampleContext).toString(), rd);
        if (Info.on || Main.options().pcc) {
            Assert.notFalse(counterexampleContext.length() > 1 && counterexampleContext.at(0).toString().equals("AND"));
            out.println("Full counterexample context:");
            int n = counterexampleContext.length();
            for (int i = 2; i < n; i++) {
                out.print("    ");
                counterexampleContext.at(i).print(out);
                out.println();
            }
        }
        boolean userLabels = false;
        for (int i = 0; i < cLabels; i++) {
            String label = labelList.at(i).getAtom().toString();
            if (i == iErrorLabel || label.startsWith("vc.") || (Main.options().traceInfo > 0 && isTraceLabel(label))) {
                continue;
            }
            if (tail != null && label.endsWith(tail)) {
                printErrorMessage(label, counterexampleContext, rd, directTargets, out, true);
                continue;
            }
            if (label.startsWith("AdditionalInfo")) {
                printErrorMessage(label, counterexampleContext, rd, directTargets, out, true);
                continue;
            }
            if (!userLabels) {
                out.println("Counterexample labels:");
                userLabels = true;
            }
            out.print("    " + label);
        }
        if (userLabels) {
            out.println();
            out.println();
        }
    } catch (escjava.prover.SExpTypeError s) {
        Assert.fail("unexpected S-expression exception");
    }
    printSeparatorLine(out);
}
