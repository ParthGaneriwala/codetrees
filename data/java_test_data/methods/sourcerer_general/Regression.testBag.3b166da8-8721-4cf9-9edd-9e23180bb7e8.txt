public void testBag(Model m, Bag bag1, Bag bag2, Bag bag3, String test, int n) {
    int num = 10;
    NodeIterator nIter;
    try {
        {
            boolean[] found = new boolean[num];
            boolean[] pattern = { true, true, true, false, false, false, false, false, true, true };
            for (int i = 0; i < num; i++) {
                bag1.add(i);
            }
            n++;
            nIter = bag1.iterator();
            for (int i = 0; i < num; i++) {
                n++;
                nIter.nextNode();
                n++;
                if (!pattern[i])
                    nIter.remove();
                found[i] = false;
            }
            nIter.close();
            n = (n / 100 + 1) * 100;
            n++;
            nIter = bag1.iterator();
            while (nIter.hasNext()) {
                int v = ((Literal) nIter.nextNode()).getInt();
                n++;
                if (found[v])
                    error(test, n);
                found[v] = true;
            }
            n++;
            nIter.close();
            n = (n / 100 + 1) * 100;
            for (int i = 0; i < num; i++) {
                n++;
                if (!(found[i] == pattern[i]))
                    error(test, n);
            }
        }
        {
            boolean[] found = new boolean[num];
            boolean[] pattern = { false, true, true, false, false, false, false, false, true, false };
            n = (n / 100 + 1) * 100;
            for (int i = 0; i < num; i++) {
                bag2.add(i);
            }
            n++;
            nIter = bag2.iterator();
            for (int i = 0; i < num; i++) {
                n++;
                nIter.nextNode();
                n++;
                if (!pattern[i])
                    nIter.remove();
                found[i] = false;
            }
            n++;
            nIter.close();
            n = (n / 100 + 1) * 100;
            n++;
            nIter = bag2.iterator();
            while (nIter.hasNext()) {
                int v = ((Literal) nIter.nextNode()).getInt();
                n++;
                if (found[v])
                    error(test, n);
                found[v] = true;
            }
            n++;
            nIter.close();
            n = (n / 100 + 1) * 100;
            for (int i = 0; i < num; i++) {
                n++;
                if (!(found[i] == pattern[i]))
                    error(test, n);
            }
        }
        {
            boolean[] found = new boolean[num];
            boolean[] pattern = { false, false, false, false, false, false, false, false, false, false };
            n = (n / 100 + 1) * 100;
            for (int i = 0; i < num; i++) {
                bag3.add(i);
            }
            n++;
            nIter = bag3.iterator();
            for (int i = 0; i < num; i++) {
                n++;
                nIter.nextNode();
                n++;
                if (!pattern[i])
                    nIter.remove();
                found[i] = false;
            }
            n++;
            nIter.close();
            n = (n / 100 + 1) * 100;
            ;
            n++;
            nIter = bag3.iterator();
            while (nIter.hasNext()) {
                int v = ((Literal) nIter.nextNode()).getInt();
                n++;
                if (found[v])
                    error(test, n);
                found[v] = true;
            }
            n++;
            nIter.close();
            n = (n / 100 + 1) * 100;
            for (int i = 0; i < num; i++) {
                n++;
                if (!(found[i] == pattern[i]))
                    error(test, n);
            }
        }
    } catch (Exception e) {
        logger.error("test " + test + "[" + n + "]", e);
        errors = true;
    }
}
