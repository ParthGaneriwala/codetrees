public void buildTemporaryList(DashboardPage page) throws Exception {
    XMLUtils xml = new XMLUtils(page.getXmlDesign());
    // Counter for number of instances on this page
    int falseIdCount = 0;
    // Pages have rows
    ArrayList rows = new ArrayList();
    XMLUtils.getAllChildren(xml.getDocumentElement(), "row", rows);
    Iterator i = rows.iterator();
    while (i.hasNext()) {
        Element rowEl = (Element) i.next();
        // Rows have columns
        ArrayList columns = new ArrayList();
        XMLUtils.getAllChildren(rowEl, "column", columns);
        Iterator j = columns.iterator();
        while (j.hasNext()) {
            Element columnEl = (Element) j.next();
            // Columns have portlets
            ArrayList portlets = new ArrayList();
            XMLUtils.getAllChildren(columnEl, "portlet", portlets);
            Iterator k = portlets.iterator();
            while (k.hasNext()) {
                Element portletEl = (Element) k.next();
                // Give the portlet an instance reference
                ++falseIdCount;
                // Set the portlet information
                DashboardPortlet portlet = new DashboardPortlet();
                portlet.setPageId(page.getId());
                portlet.setName(portletEl.getAttribute("name"));
                if (portletEl.hasAttribute("viewer")) {
                    portlet.setViewer(portletEl.getAttribute("viewer"));
                }
                if (portletEl.hasAttribute("class")) {
                    portlet.setHtmlClass(portletEl.getAttribute("class"));
                }
                if (portletEl.hasAttribute("cache")) {
                    portlet.setCacheTime(Integer.parseInt(portletEl.getAttribute("cache")));
                }
                if (portletEl.hasAttribute("timeout")) {
                    portlet.setTimeout(Integer.parseInt(portletEl.getAttribute("timeout")));
                }
                if (portletEl.hasAttribute("isSensitive")) {
                    portlet.setSensitive(portletEl.getAttribute("isSensitive"));
                }
                // This portlet can temporarily be used
                DashboardPortletItem portletItem = new DashboardPortletItem();
                portletItem.setName(portlet.getName());
                portletItem.setEnabled(true);
                // Portlets could have default preferences specified in the layout
                ArrayList<Element> preferences = new ArrayList<Element>();
                XMLUtils.getAllChildren(portletEl, preferences);
                Iterator l = preferences.iterator();
                while (l.hasNext()) {
                    Element preferenceEl = (Element) l.next();
                    if ("portlet-events".equals(preferenceEl.getNodeName())) {
                        // This is the registration of a generateDataEvent
                        ArrayList<Element> generateDataEvents = new ArrayList<Element>();
                        XMLUtils.getAllChildren(preferenceEl, "generates-data", generateDataEvents);
                        for (Element gde : generateDataEvents) {
                            portlet.addGenerateDataEvent(XMLUtils.getNodeText(gde));
                        }
                        // This is the registration of a consumeDataEvent
                        ArrayList<Element> consumeDataEvents = new ArrayList<Element>();
                        XMLUtils.getAllChildren(preferenceEl, "consumes-data", consumeDataEvents);
                        for (Element cde : consumeDataEvents) {
                            portlet.addConsumeDataEvent(XMLUtils.getNodeText(cde));
                        }
                        // This is the registration of generateSessionData
                        ArrayList<Element> generateSessionData = new ArrayList<Element>();
                        XMLUtils.getAllChildren(preferenceEl, "generates-session-data", generateSessionData);
                        for (Element cde : generateSessionData) {
                            portlet.addGenerateSessionData(XMLUtils.getNodeText(cde));
                        }
                        // This is the registration of consumeSessionData
                        ArrayList<Element> consumeSessionData = new ArrayList<Element>();
                        XMLUtils.getAllChildren(preferenceEl, "consumes-session-data", consumeSessionData);
                        for (Element cde : consumeSessionData) {
                            portlet.addConsumeSessionDataEvent(XMLUtils.getNodeText(cde));
                        }
                        // This is the registration of generateRequestData
                        ArrayList<Element> generateRequestData = new ArrayList<Element>();
                        XMLUtils.getAllChildren(preferenceEl, "generates-request-data", generateRequestData);
                        for (Element cde : generateRequestData) {
                            portlet.addGenerateRequestData(XMLUtils.getNodeText(cde));
                        }
                        // This is the registration of consumeRequestData
                        ArrayList<Element> consumeRequestData = new ArrayList<Element>();
                        XMLUtils.getAllChildren(preferenceEl, "consumes-request-data", consumeRequestData);
                        for (Element cde : consumeRequestData) {
                            portlet.addConsumeRequestDataEvent(XMLUtils.getNodeText(cde));
                        }
                    } else {
                        // Provide the default preference
                        DashboardPortletPrefs prefs = new DashboardPortletPrefs();
                        prefs.setName(preferenceEl.getNodeName());
                        // Check to see if the prefs are provided as an array
                        ArrayList<String> valueList = new ArrayList<String>();
                        ArrayList valueElements = new ArrayList();
                        XMLUtils.getAllChildren(preferenceEl, "value", valueElements);
                        if (valueElements.size() > 0) {
                            // There are <value> nodes
                            Iterator vi = valueElements.iterator();
                            while (vi.hasNext()) {
                                valueList.add(XMLUtils.getNodeText((Element) vi.next()));
                            }
                            prefs.setValues(valueList.toArray(new String[valueList.size()]));
                        } else {
                            // There is a single value
                            prefs.setValues(new String[] { XMLUtils.getNodeText(preferenceEl) });
                        }
                        portlet.addDefaultPreference(prefs.getName(), prefs);
                    }
                }
                portlet.setId(falseIdCount);
                this.add(portlet);
            }
        }
    }
}
