@Test
public void testGetPathToRoot() throws Exception {
    this.jCas.setDocumentText("The cat chased mice.");
    JCas tbView = this.jCas.createView(TreebankConstants.TREEBANK_VIEW);
    tbView.setDocumentText("(S (NP (DT The) (NN cat)) (VP (VBD chased) (NP (NNS mice))) (. .))");
    AnalysisEngine treeAnnotator = AnalysisEngineFactory.createPrimitive(TreebankGoldAnnotator.class, this.typeSystemDescription);
    treeAnnotator.process(this.jCas);
    TopTreebankNode root = JCasUtil.selectSingle(this.jCas, TopTreebankNode.class);
    Assert.assertEquals(Arrays.asList(root), TreebankNodeUtil.getPathToRoot(root));
    TreebankNode np = root.getChildren(0);
    TreebankNode vp = root.getChildren(1);
    TreebankNode period = root.getChildren(2);
    Assert.assertEquals(Arrays.asList(np, root), TreebankNodeUtil.getPathToRoot(np));
    Assert.assertEquals(Arrays.asList(vp, root), TreebankNodeUtil.getPathToRoot(vp));
    Assert.assertEquals(Arrays.asList(period, root), TreebankNodeUtil.getPathToRoot(period));
    TreebankNode the = np.getChildren(0);
    TreebankNode cat = np.getChildren(1);
    Assert.assertEquals(Arrays.asList(the, np, root), TreebankNodeUtil.getPathToRoot(the));
    Assert.assertEquals(Arrays.asList(cat, np, root), TreebankNodeUtil.getPathToRoot(cat));
    TreebankNode chased = vp.getChildren(0);
    TreebankNode np2 = vp.getChildren(1);
    Assert.assertEquals(Arrays.asList(chased, vp, root), TreebankNodeUtil.getPathToRoot(chased));
    Assert.assertEquals(Arrays.asList(np2, vp, root), TreebankNodeUtil.getPathToRoot(np2));
    TreebankNode mice = np2.getChildren(0);
    Assert.assertEquals(Arrays.asList(mice, np2, vp, root), TreebankNodeUtil.getPathToRoot(mice));
}
