private static int writeCharacters(final Label.BitFontLabel theLabel) {
    int indent = 0;
    final int myOriginalY = theLabel.getOffsetY();
    int myY = theLabel.getOffsetY();
    final String myText = theLabel.isToUpperCase() ? theLabel.getText().toUpperCase() : theLabel.getText();
    int myWrap = (theLabel.isMultiline()) ? theLabel.getImage().width : -1;
    int l = myText.length();
    final int[] letters_indent = new int[l];
    final int[] letters_letter = new int[l];
    final boolean[] letters_isHighlight = new boolean[l];
    final int[] letters_lineheight = new int[l];
    int err = 0;
    BitFont f = fonts.get(theLabel.getFontIndex());
    for (int i = 0; i < l; i++) {
        int c = (int) myText.charAt(i);
        if (c != 10) {
            if ((myWrap > 0 && indent > myWrap)) {
                // 0;
                indent = theLabel.getOffsetX();
                myY += theLabel.getLineHeight();
                final int j = i;
                err++;
                while (i > 0 && err < myText.length()) {
                    i--;
                    // in case a word longer than the actual width.
                    if (i == 1) {
                        i = j;
                        break;
                    }
                    // go back until you find a space or a dash.
                    if (myText.charAt(i) == ' ' || myText.charAt(i) == '-') {
                        i++;
                        c = (int) myText.charAt(i);
                        break;
                    }
                }
            }
            if (c >= 127 || c <= 32) {
                c = 32;
            }
            letters_indent[i] = indent;
            letters_letter[i] = c - 32;
            letters_isHighlight[i] = (i == theLabel.getCursorPosition() - 1);
            letters_lineheight[i] = myY;
            indent += f.charWidth[c - 32] + theLabel.getLetterSpacing();
        } else {
            myY += theLabel.getLineHeight();
            indent = 0;
            letters_indent[i] = 0;
            letters_letter[i] = -1;
            letters_isHighlight[i] = false;
            letters_lineheight[i] = 0;
        }
    }
    for (int i = 0; i < l; i++) {
        if (letters_letter[i] != -1) {
            putchar(letters_letter[i], theLabel.getOffsetX() + letters_indent[i], letters_lineheight[i], theLabel.getColor(), letters_isHighlight[i], theLabel.getImage(), theLabel.getImageMask(), f);
        }
    }
    return myY - myOriginalY;
}
