public boolean testEntailment(Model conclusions, InfGraph inf) {
    List queryRoots = listQueryRoots(conclusions);
    Model result = ModelFactory.createDefaultModel();
    for (Iterator i = queryRoots.iterator(); i.hasNext(); ) {
        Resource root = (Resource) i.next();
        for (StmtIterator j = root.listProperties(); j.hasNext(); ) {
            Statement rootQuery = j.nextStatement();
            Resource subject = rootQuery.getSubject();
            RDFNode object = rootQuery.getObject();
            OntModel premises = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM, null);
            premises.setStrictMode(false);
            if (subject.isAnon()) {
                // subject is assumed to be an expression
                addSubGraph(subject, premises);
            }
            if (object instanceof Resource && ((Resource) object).isAnon()) {
                addSubGraph((Resource) object, premises);
            }
            // add the resulting triples to the graph
            try {
                ExtendedIterator k = inf.find(rootQuery.getSubject().asNode(), rootQuery.getPredicate().asNode(), rootQuery.getObject().asNode(), premises.getGraph());
                while (k.hasNext()) {
                    // Triple t = (Triple) k.next();
                    Object x = k.next();
                    Triple t = (Triple) x;
                    LogFactory.getLog(getClass()).debug("testEntailment got triple " + t);
                    result.getGraph().add(t);
                }
                // transcribe the premises into the results
                result.add(premises);
            } catch (DIGErrorResponseException e) {
                LogFactory.getLog(getClass()).error("DIG reasoner returned error: " + e.getMessage());
                return false;
            }
        }
    }
    result.write(System.out, "RDF/XML-ABBREV");
    // now check that the conclusions, framed as a query, holds
    QueryHandler qh = result.queryHandler();
    Query query = WGReasonerTester.graphToQuery(conclusions.getGraph());
    Iterator i = qh.prepareBindings(query, new Node[] {}).executeBindings();
    return i.hasNext();
}
