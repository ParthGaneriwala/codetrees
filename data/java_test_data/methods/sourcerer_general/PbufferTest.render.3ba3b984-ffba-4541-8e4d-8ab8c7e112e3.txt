private void render() {
    if (pbuffer.isBufferLost()) {
        System.out.println("Buffer contents lost - will recreate the buffer");
        pbuffer.destroy();
        try {
            pbuffer = new Pbuffer(512, 512, new PixelFormat(), null, null);
            initPbuffer();
        } catch (LWJGLException e) {
            e.printStackTrace();
        }
    }
    try {
        pbuffer.makeCurrent();
    } catch (LWJGLException e) {
        throw new RuntimeException(e);
    }
    // Pbuffer rendering
    // clear background
    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
    // draw white quad
    GL11.glPushMatrix();
    {
        GL11.glTranslatef(quadPosition.x, quadPosition.y, 0);
        GL11.glRotatef(angle, 0.0f, 0.0f, 1.0f);
        GL11.glColor3f(1.0f, 1.0f, 1.0f);
        for (int i = 0; i < 100000; i++) {
            GL11.glBegin(GL11.GL_QUADS);
            {
                GL11.glVertex2i(-50, -50);
                GL11.glVertex2i(50, -50);
                GL11.glVertex2i(50, 50);
                GL11.glVertex2i(-50, 50);
            }
            GL11.glEnd();
        }
    }
    GL11.glPopMatrix();
    GL11.glCopyTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGB, 0, 0, 512, 512, 0);
    try {
        Display.makeCurrent();
    } catch (LWJGLException e) {
        throw new RuntimeException(e);
    }
    // OpenGL window rendering
    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
    // draw white quad
    GL11.glPushMatrix();
    {
        GL11.glTranslatef(quadPosition.x, quadPosition.y, 0);
        GL11.glRotatef(angle, 0.0f, 0.0f, 1.0f);
        GL11.glColor3f(1.0f, 1.0f, 0.0f);
        GL11.glBegin(GL11.GL_QUADS);
        {
            GL11.glTexCoord2f(0f, 0f);
            GL11.glVertex2i(-50, -50);
            GL11.glTexCoord2f(1f, 0f);
            GL11.glVertex2i(50, -50);
            GL11.glTexCoord2f(1f, 1f);
            GL11.glVertex2i(50, 50);
            GL11.glTexCoord2f(0f, 1f);
            GL11.glVertex2i(-50, 50);
        }
        GL11.glEnd();
    }
    GL11.glPopMatrix();
}
