public ArrayList getAccountEntries(AccountDTO a, int offset, int limit) {
    ArrayList entryList = new ArrayList();
    try {
        Account account = accountSession.getAccount(a.getId());
        List<Entry> entries = transactionSession.getEntries(account, offset, limit);
        for (Entry e : entries) {
            EntryInfo entryInfo = new EntryInfo();
            DTOUtils.EntryToDTO(e, entryInfo.getEntry());
            entryInfo.setDate(new Date(e.getTransaction().getTransactionTime().getTime()));
            entryList.add(entryInfo);
        }
        // get the balance of the last entry
        int listSize = entries.size();
        BigDecimal balance = new BigDecimal("0.00");
        if (listSize > 0) {
            Entry e = entries.get(listSize - 1);
            balance = transactionSession.getAccountBalance(account, e.getId());
            // set the balance of the last entry = lastBalance
            EntryInfo entryInfo = (EntryInfo) entryList.get(listSize - 1);
            entryInfo.setBalance(balance.toString());
            // substract this entry's amount from the balance, so that the next
            // entry gets the correct balance
            balance = balance.subtract(e.getAmount());
        }
        // go backwards and setup the balances of the rest of the entries
        for (int i = listSize - 2; i >= 0; i--) {
            EntryInfo entryInfo = (EntryInfo) entryList.get(i);
            Entry entry = entries.get(i);
            entryInfo.setBalance(balance.toString());
            // substract this entry's amount from the balance, so that the next
            // entry gets the correct balance
            balance = balance.subtract(entry.getAmount());
        }
    } catch (Throwable t) {
        System.out.println("oops");
        t.printStackTrace();
    }
    return entryList;
}
