public boolean analyze() {
    boolean debug = Debug.v().debugDA;
    final DAInfo dai = ((HasDAInfo) Main.v().getAbcExtension()).getDependentAdviceInfo();
    if (Debug.v().debugDA) {
        numEnabledDependentAdviceShadowsBefore = 0;
        // disable all advice applications that belong to "other" dependent advice
        AdviceApplicationVisitor.v().traverse(new AdviceApplicationVisitor.AdviceApplicationHandler() {

            public void adviceApplication(AdviceApplication aa, SootMethod m) {
                boolean isDependent = dai.isDependentAdvice(aa.advice);
                if (isDependent && !NeverMatch.neverMatches(aa.getResidue())) {
                    numEnabledDependentAdviceShadowsBefore++;
                }
            }
        });
    }
    final Set<AdviceDependency> adviceDependencies = new HashSet<AdviceDependency>(dai.getAdviceDependencies());
    // prune dependencies that already fail the quick check; those we don't care about
    for (Iterator<AdviceDependency> depIter = adviceDependencies.iterator(); depIter.hasNext(); ) {
        AdviceDependency ad = (AdviceDependency) depIter.next();
        if (!ad.fulfillsQuickCheck()) {
            depIter.remove();
        }
    }
    if (adviceDependencies.isEmpty())
        return false;
    long before = System.currentTimeMillis();
    if (debug)
        System.err.println("da: Computing points-to sets");
    // perform pointer analysis if necessary
    if (!Scene.v().hasCallGraph() || !Scene.v().hasPointsToAnalysis()) {
        runCGPhase();
    }
    if (debug) {
        System.err.println("da:    Computing points-to sets: " + (System.currentTimeMillis() - before));
        System.err.println("da: Determining reachable and unreachable shadows");
    }
    before = System.currentTimeMillis();
    // compute all active shadows reachable from entry points
    final Set<Shadow> reachableActiveShadows = dai.getReachableActiveShadows();
    // filter out shadows that do not belong to a dependent advice
    filterForDependentAdvice(reachableActiveShadows);
    disableAndFilterShadowsWithEmptyPointsToSet(reachableActiveShadows);
    // compute all active shadows in the program (including unreachable ones)
    final Set<Shadow> allActiveShadows = dai.getAllActiveShadows();
    // filter out shadows that do not belong to a dependent advice
    filterForDependentAdvice(allActiveShadows);
    // disable all unreachable shadows
    Set<Shadow> snapshot = new HashSet<Shadow>(allActiveShadows);
    for (Shadow shadow : snapshot) {
        if (!reachableActiveShadows.contains(shadow)) {
            shadow.disable();
            if (OptionsParser.v().warn_about_individual_shadows())
                warn(shadow, "Shadow disabled because it was deemed unreachable from main method in: " + Scene.v().getMainClass());
        }
    }
    if (debug) {
        System.err.println("da:    Determining reachable and unreachable shadows took: " + (System.currentTimeMillis() - before));
        System.err.println("da:    Number of reachable DA-Shadows with non-empty points-to sets: " + reachableActiveShadows.size());
        System.err.println("da:    Computing Consistent Shadow Groups");
    }
    // compute consistent shadow groups and build the set of shadows to retain
    before = System.currentTimeMillis();
    for (AdviceDependency dep : adviceDependencies) {
        dep.computeConsistentShadowGroups(reachableActiveShadows);
    }
    if (debug) {
        System.err.println("da:    Shadow groups took: " + (System.currentTimeMillis() - before));
        System.err.println("da: Disabling shadows");
    }
    before = System.currentTimeMillis();
    // disable all shadows that have no support by any group
    Bag<AdviceDecl> shadowsDisabledPerAdviceDecl = AdviceDependency.disableShadowsWithNoStrongSupportByAnyGroup(reachableActiveShadows);
    final Map<AdviceDecl, Integer> adviceToNumTotal = new HashMap<AdviceDecl, Integer>();
    for (Shadow shadow : allActiveShadows) {
        // count total number
        Integer num = adviceToNumTotal.get(shadow.getAdviceDecl());
        if (num == null)
            num = 0;
        num++;
        adviceToNumTotal.put(shadow.getAdviceDecl(), num);
    }
    // give warnings
    for (AdviceDecl ad : adviceToNumTotal.keySet()) {
        Integer disabled = shadowsDisabledPerAdviceDecl.countOf(ad);
        if (disabled > 0) {
            Integer total = adviceToNumTotal.get(ad);
            if (!OptionsParser.v().warn_about_individual_shadows()) {
                // generate summary warning
                warn(ad, total, disabled);
            }
        }
    }
    stillActiveDependentAdviceShadows = new HashSet<Shadow>(reachableActiveShadows);
    for (Iterator<Shadow> iter = stillActiveDependentAdviceShadows.iterator(); iter.hasNext(); ) {
        Shadow shadow = iter.next();
        if (!shadow.isEnabled()) {
            iter.remove();
        }
    }
    if (Debug.v().debugDA) {
        int numEnabledDependentAdviceShadowsAfter = 0;
        for (Shadow s : reachableActiveShadows) {
            if (s.isEnabled()) {
                numEnabledDependentAdviceShadowsAfter++;
            }
        }
        System.err.println("da:    Disabling shadows took:            " + (System.currentTimeMillis() - before));
        System.err.println("da:    DA-Shadows enabled before FlowIns: " + numEnabledDependentAdviceShadowsBefore);
        System.err.println("da:    DA-Shadows enabled after  FlowIns: " + numEnabledDependentAdviceShadowsAfter);
        CustomizedDemandCSPointsTo pta = (CustomizedDemandCSPointsTo) Scene.v().getPointsToAnalysis();
        System.err.println("da:    PTA requests: " + pta.requests);
        System.err.println("da:    PTA retries:  " + pta.retry);
        System.err.println("da:    PTA success:  " + pta.success);
        int all = 0, cs = 0;
        for (Shadow s : reachableActiveShadows) {
            for (String var : s.getAdviceFormalNames()) {
                LazyContextSensitivePointsToSet pointsToSetOf = (LazyContextSensitivePointsToSet) s.pointsToSetOf(var);
                all++;
                if (pointsToSetOf.isContextSensitive()) {
                    cs++;
                }
            }
        }
        System.err.println("Points-to sets: " + all);
        System.err.println("Points-to sets for which context was tried to be computed: " + cs);
        if (Debug.v().outputPFGs)
            PFGs.v().dump("after first flow-insensitive stage", stillActiveDependentAdviceShadows, true);
    }
    return false;
}
