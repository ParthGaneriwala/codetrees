public double[][] dwt(double[][] imax2, double[] loD, double[] hiD) {
    a = new double[imax2.length / 2][imax2[0].length / 2];
    h = new double[imax2.length / 2][imax2[0].length / 2];
    v = new double[imax2.length / 2][imax2[0].length / 2];
    d = new double[imax2.length / 2][imax2[0].length / 2];
    y = new double[imax2.length][imax2[0].length + 2];
    // System.out.println((imax2.length)+" "+(imax2[0].length+2));
    // face bine
    y = addCol(imax2);
    z = new double[64][65];
    // System.out.println((z.length)+" "+(z[0].length));
    // face bine
    z = convolutie(y, Lo_D);
    a = convdown(z, Lo_D);
    h = convdown(z, Hi_D);
    z = convolutie(y, Hi_D);
    v = convdown(z, Lo_D);
    d = convdown(z, Hi_D);
    int nrCol = a[0].length + h[0].length;
    int nrRan = a.length + v.length;
    double[][] arr = new double[nrRan][nrCol];
    for (int i = 0; i < a.length; i++) {
        for (int j = 0; j < a[0].length; j++) {
            arr[i][j] = a[i][j];
        }
    }
    for (int i = 0; i < h.length; i++) {
        for (int j = a[0].length; j < h[0].length + a[0].length; j++) {
            arr[i][j] = h[i][j - a[0].length];
        }
    }
    for (int i = a.length; i < v.length + a.length - 1; i++) {
        for (int j = 0; j < v[0].length; j++) {
            arr[i][j] = v[i - a.length][j];
        }
    }
    for (int i = a.length; i < h.length + a.length; i++) {
        for (int j = a[0].length; j < h[0].length + a[0].length; j++) {
            arr[i][j] = d[i - a.length][j - a[0].length];
        }
    }
    return arr;
}
