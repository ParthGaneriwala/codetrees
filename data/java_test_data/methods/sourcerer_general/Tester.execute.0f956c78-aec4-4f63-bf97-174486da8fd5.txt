// addFileSet(FileSet)
// 
// Task methods
// 
public void execute() throws BuildException {
    // check params
    String canonicaldir = fCanonicalDir;
    if (canonicaldir == null) {
        canonicaldir = ".";
        log("Canonical directory not specified. Assuming current directory.", Project.MSG_WARN);
    }
    String outputdir = fOutputDir;
    if (outputdir == null) {
        outputdir = ".";
        log("Output directory not specified. Assuming current directory.", Project.MSG_WARN);
    }
    if (fFileSets.size() == 0) {
        throw new BuildException("must specify at least one fileset");
    }
    // parse input files and produce output files
    log("Parsing test files and generating output...");
    File outdir = new File(outputdir);
    int size = fFileSets.size();
    for (int i = 0; i < size; i++) {
        FileSet fileset = (FileSet) fFileSets.elementAt(i);
        DirectoryScanner dirscanner = fileset.getDirectoryScanner(project);
        File indir = dirscanner.getBasedir();
        String[] files = dirscanner.getIncludedFiles();
        for (int j = 0; j < files.length; j++) {
            File infile = new File(indir, files[j]);
            File outfile = new File(outdir, files[j]);
            log("  " + outfile, Project.MSG_VERBOSE);
            OutputStream out = null;
            try {
                // create filters
                out = new FileOutputStream(outfile);
                XMLDocumentFilter[] filters = { new Writer(out) };
                // create parser
                XMLParserConfiguration parser = new HTMLConfiguration();
                // parser settings
                parser.setProperty("http://cyberneko.org/html/properties/filters", filters);
                String infilename = infile.toString();
                File insettings = new File(infilename + ".settings");
                if (insettings.exists()) {
                    BufferedReader settings = new BufferedReader(new FileReader(insettings));
                    String settingline;
                    while ((settingline = settings.readLine()) != null) {
                        StringTokenizer tokenizer = new StringTokenizer(settingline);
                        String type = tokenizer.nextToken();
                        String id = tokenizer.nextToken();
                        String value = tokenizer.nextToken();
                        if (type.equals("feature")) {
                            parser.setFeature(id, value.equals("true"));
                        } else {
                            parser.setProperty(id, value);
                        }
                    }
                    settings.close();
                }
                // parse
                parser.parse(new XMLInputSource(null, infilename, null));
            } catch (Exception e) {
                log("  error parsing input file, " + infile);
                throw new BuildException(e);
            } finally {
                try {
                    out.close();
                } catch (Exception e) {
                    log("  error closing output file, " + outfile);
                    throw new BuildException(e);
                }
            }
        }
    }
    // compare against canonical output
    log("Comparing parsed output against canonical output...");
    File canondir = new File(canonicaldir);
    int errors = 0;
    for (int i = 0; i < size; i++) {
        FileSet fileset = (FileSet) fFileSets.elementAt(i);
        DirectoryScanner dirscanner = fileset.getDirectoryScanner(project);
        File indir = dirscanner.getBasedir();
        String[] files = dirscanner.getIncludedFiles();
        for (int j = 0; j < files.length; j++) {
            File canonfile = new File(canondir, files[j]);
            if (!canonfile.exists()) {
                errors++;
                log("  canonical file missing, " + canonfile);
                continue;
            }
            File outfile = new File(outdir, files[j]);
            if (!outfile.exists()) {
                errors++;
                log("  output file missing, " + outfile);
                continue;
            }
            log("  comparing " + canonfile + " and " + outfile, Project.MSG_VERBOSE);
            try {
                if (compare(canonfile, outfile)) {
                    errors++;
                }
            } catch (IOException e) {
                errors++;
                log("i/o error");
            }
        }
    }
    // finished
    if (errors > 0) {
        log("Finished with errors.");
        throw new BuildException();
    }
    log("Done.");
}
