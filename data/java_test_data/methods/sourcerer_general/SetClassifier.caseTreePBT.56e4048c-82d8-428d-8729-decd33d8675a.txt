private double[] caseTreePBT(double[][] klassProbs, String[] classNames) {
    // apply the Dempster-Shafer combination operator to each set of probabilities in the
    // klassProbs array.  This could have a problem if we get complete incompatibility.
    // Instead of (((((1+2)+3)+4)+5)+...+n), which is the simple approach,
    // try (((1+2)+(3+4))+...+((n-3+n-2)+(n-1+n))), which I can do recursively.
    BeliefFunction combined = new BeliefFunction(classNames);
    if (klassProbs.length < 2) {
        System.out.println("error!  I shouldn't be combining less than two belief functions");
    } else if (klassProbs.length == 2) {
        BeliefFunction bf1 = new BeliefFunction(classNames);
        BeliefFunction bf2 = new BeliefFunction(classNames);
        bf1.addSingletons(klassProbs[0], classNames);
        bf2.addSingletons(klassProbs[1], classNames);
        combined = ds.combineProportionalBeliefTransfer(bf1, bf2);
    } else if (klassProbs.length == 3) {
        BeliefFunction bf1 = new BeliefFunction(classNames);
        BeliefFunction bf2 = new BeliefFunction(classNames);
        BeliefFunction bf3 = new BeliefFunction(classNames);
        bf1.addSingletons(klassProbs[0], classNames);
        bf2.addSingletons(klassProbs[1], classNames);
        bf3.addSingletons(klassProbs[2], classNames);
        combined = ds.combineProportionalBeliefTransfer(bf1, ds.combineProportionalBeliefTransfer(bf2, bf3));
    } else {
        int middle = (int) Math.round(klassProbs.length / 2);
        double[][] firstHalf = new double[middle][];
        double[][] secondHalf = new double[klassProbs.length - middle][];
        for (int i = 0; i < middle; i++) {
            firstHalf[i] = klassProbs[i];
        }
        for (int i = middle; i < klassProbs.length; i++) {
            secondHalf[i - middle] = klassProbs[i];
        }
        double[] first = caseTreePBT(firstHalf, classNames);
        double[] second = caseTreePBT(secondHalf, classNames);
        // need to remove the last item, THETA
        double[] trimmedFirst = new double[first.length - 1];
        double[] trimmedSecond = new double[second.length - 1];
        for (int i = 0; i < trimmedFirst.length; i++) {
            trimmedFirst[i] = first[i];
        }
        for (int i = 0; i < trimmedSecond.length; i++) {
            trimmedSecond[i] = second[i];
        }
        BeliefFunction bf1 = new BeliefFunction(classNames);
        BeliefFunction bf2 = new BeliefFunction(classNames);
        bf1.addSingletons(trimmedFirst, classNames);
        bf2.addSingletons(trimmedSecond, classNames);
        combined = ds.combineProportionalBeliefTransfer(bf1, bf2);
    }
    // I somehow have to get a double[] out of this.  Just get the singletons, since in
    // this case (but NOT the general case) all non-THETA non-zero masses belong to singletons?
    String[][] nonZeroCombined = combined.getNonZeroMassHypos();
    // the + 1 is for unclassified points
    double[] setProbs = new double[klassProbs[0].length + 1];
    for (int i = 0; i < nonZeroCombined.length; i++) {
        int length = nonZeroCombined[i].length;
        if (length != 1) {
            System.out.print("Whoa!  Length is not one");
            for (int j = 0; j < length; j++) {
                System.out.print(", " + nonZeroCombined[i][j]);
            }
            System.out.println();
        } else {
            String klass = nonZeroCombined[i][0];
            int index = DissUtils.findIndex(classNames, klass);
            if (index != -1) {
                // getBelief and getMass should be equivalent for singletons.
                setProbs[index] = combined.getBelief(nonZeroCombined[i]);
            } else if (klass.equalsIgnoreCase(BeliefFunction.THETA)) {
                // need to use getMass b/c getBelief(THETA) = 1
                setProbs[setProbs.length - 1] = combined.getMass(new String[] { BeliefFunction.THETA });
            } else if (klass.equalsIgnoreCase(BeliefFunction.NULL)) {
                System.out.println("I have the feeling this shouldn't happen--NULL should not have a non-zero mass.");
            }
        }
    }
    return setProbs;
}
