public void doRecover(StorageState curState) throws IOException {
    File curDir = getCurrentDir();
    String rootPath = root.getCanonicalPath();
    switch(curState) {
        case // mv previous.tmp -> previous
        COMPLETE_UPGRADE:
            LOG.info("Completing previous upgrade for storage directory " + rootPath + ".");
            rename(getPreviousTmp(), getPreviousDir());
            return;
        case // mv previous.tmp -> current
        RECOVER_UPGRADE:
            LOG.info("Recovering storage directory " + rootPath + " from previous upgrade.");
            if (curDir.exists())
                deleteDir(curDir);
            rename(getPreviousTmp(), curDir);
            return;
        case // rm removed.tmp
        COMPLETE_ROLLBACK:
            LOG.info("Completing previous rollback for storage directory " + rootPath + ".");
            deleteDir(getRemovedTmp());
            return;
        case // mv removed.tmp -> current
        RECOVER_ROLLBACK:
            LOG.info("Recovering storage directory " + rootPath + " from previous rollback.");
            rename(getRemovedTmp(), curDir);
            return;
        case // rm finalized.tmp
        COMPLETE_FINALIZE:
            LOG.info("Completing previous finalize for storage directory " + rootPath + ".");
            deleteDir(getFinalizedTmp());
            return;
        case // mv lastcheckpoint.tmp -> previous.checkpoint
        COMPLETE_CHECKPOINT:
            LOG.info("Completing previous checkpoint for storage directory " + rootPath + ".");
            File prevCkptDir = getPreviousCheckpoint();
            if (prevCkptDir.exists())
                deleteDir(prevCkptDir);
            rename(getLastCheckpointTmp(), prevCkptDir);
            return;
        case // mv lastcheckpoint.tmp -> current
        RECOVER_CHECKPOINT:
            LOG.info("Recovering storage directory " + rootPath + " from failed checkpoint.");
            if (curDir.exists())
                deleteDir(curDir);
            rename(getLastCheckpointTmp(), curDir);
            return;
        default:
            throw new IOException("Unexpected FS state: " + curState);
    }
}
