public void run() {
    Thread.currentThread().setName("DownloadManagerThread");
    System.out.println("DownloadManagerThread started.");
    while (!dInfo.doShutdown()) {
        count++;
        Iterator it = downloadList.iterator();
        while (it.hasNext()) {
            Download dl = (Download) it.next();
            dl.check(count);
        }
        if (count == 5) {
            synchronized (deletionList) {
                it = deletionList.iterator();
                while (it.hasNext()) {
                    DeletionListEntry dle = (DeletionListEntry) it.next();
                    File file = dle.getFile();
                    if (file.delete())
                        it.remove();
                    else {
                        if (dle.getTries() != 10) {
                            System.out.println("Cannot delete " + file.toString() + "!");
                            it.remove();
                        }
                    }
                }
            }
        }
        if (count == 10) {
            if (researchSources) {
                researchSources = false;
                Iterator iterator = downloadList.iterator();
                while (iterator.hasNext()) {
                    Download dl = (Download) iterator.next();
                    dl.searchSources();
                    dl.getPartFile().saveGapList();
                }
            }
            synchronized (newDownloads) {
                Iterator it2 = newDownloads.iterator();
                while (it2.hasNext()) {
                    Download download = (Download) it2.next();
                    it2.remove();
                    downloadList.add(download);
                }
            }
            count = 0;
        }
        try {
            Thread.currentThread().sleep(100);
        } catch (InterruptedException e) {
        }
    }
    Iterator iter = downloadList.iterator();
    while (iter.hasNext()) {
        Download dl = (Download) iter.next();
        dl.quit();
    }
    System.out.println("DownloadManagerThread end.");
}
