public Exp visit(AllocationExpression n, MJType argu) {
    Temp t1 = new Temp();
    Temp t2 = new Temp();
    Temp t3 = new Temp();
    Label l1 = new Label();
    Label l2 = new Label();
    Label T = new Label();
    Label F = new Label();
    String obj_name = (n.f1).f0.toString();
    MJObj m_obj = (MJObj) ((MJMethod) argu).SearchClass(obj_name);
    String[] met_labels = m_obj.GetMetLabels();
    int sz_f = (m_obj.GetAllocSizeF() + 1) * 4;
    int sz_m = m_obj.GetAllocSizeM() * 4;
    Tree.Stm s4;
    if (sz_f > 4) {
        s4 = (SEQ(SEQ(SEQ(SEQ(SEQ(SEQ(SEQ(SEQ(MOVE(TEMP(t3), CONST(4)), LABEL(l1)), CJUMP(Tree.CJUMP.LT, TEMP(t3), CONST(sz_f), T, F)), LABEL(T)), MOVE(MEM(BINOP(Tree.BINOP.PLUS, TEMP(t2), TEMP(t3))), CONST(0))), MOVE(TEMP(t3), BINOP(Tree.BINOP.PLUS, TEMP(t3), CONST(4)))), JUMP(l1)), LABEL(F)), MOVE(MEM(TEMP(t2)), TEMP(t1))));
    } else {
        s4 = (MOVE(MEM(TEMP(t2)), TEMP(t1)));
    }
    Tree.Stm s3;
    if (sz_m == 0) {
        s3 = MOVE(TEMP(new Temp()), CONST(0));
    } else if (sz_m == 4) {
        Label aux_label = new Label(met_labels[0]);
        s3 = MOVE(MEM(BINOP(Tree.BINOP.PLUS, TEMP(t1), CONST(0))), NAME(aux_label));
    } else if (sz_m == 8) {
        Label aux_label1 = new Label(met_labels[0]);
        Label aux_label2 = new Label(met_labels[0]);
        s3 = SEQ(MOVE(MEM(BINOP(Tree.BINOP.PLUS, TEMP(t1), CONST(0))), NAME(aux_label1)), MOVE(MEM(BINOP(Tree.BINOP.PLUS, TEMP(t1), CONST(4))), NAME(aux_label1)));
    } else {
        int j = 0;
        Label aux_label = new Label(met_labels[j]);
        s3 = MOVE(MEM(BINOP(Tree.BINOP.PLUS, TEMP(t1), CONST(0))), NAME(aux_label));
        for (int i = 4; i < sz_m; i = i + 4) {
            aux_label = new Label(met_labels[j]);
            s3 = SEQ(s3, MOVE(MEM(BINOP(Tree.BINOP.PLUS, TEMP(t1), CONST(i))), NAME(aux_label)));
            j++;
        }
    }
    LinkedList<Tree.Exp> args1 = new LinkedList<Tree.Exp>();
    args1.add(CONST(sz_m));
    LinkedList<Tree.Exp> args2 = new LinkedList<Tree.Exp>();
    args2.add(CONST(sz_f));
    Tree.Stm s1 = MOVE(TEMP(t1), CALL(NAME(new Label("_halloc")), args1));
    Tree.Stm s2 = MOVE(TEMP(t2), CALL(NAME(new Label("_halloc")), args2));
    last_type = m_obj;
    return new Ex(ESEQ(SEQ(SEQ(SEQ(s1, s2), s3), s4), TEMP(t2)));
}
