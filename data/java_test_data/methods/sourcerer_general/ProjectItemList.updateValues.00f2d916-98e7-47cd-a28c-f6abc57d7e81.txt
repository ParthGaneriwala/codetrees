public void updateValues(Connection db, String[] params, String[] names, String table) throws SQLException {
    // Put into something manageable
    ArrayList<String> arrayList = new ArrayList<String>();
    for (int i = 0; i < params.length; i++) {
        System.out.println("LookupItem-> Name: " + names[i]);
        System.out.println("LookupItem-> Param: " + params[i]);
        arrayList.add(params[i]);
    }
    // BEGIN TRANSACTION
    // Iterate through this list
    Iterator items = this.iterator();
    while (items.hasNext()) {
        ProjectItem thisItem = (ProjectItem) items.next();
        // If item is not in the passed array, then disable the entry
        if (!arrayList.contains(String.valueOf(thisItem.getId()))) {
            thisItem.setEnabled(false);
            thisItem.update(db, table);
            items.remove();
        }
    }
    // Iterate through the array
    for (int i = 0; i < params.length; i++) {
        if (System.getProperty("DEBUG") != null) {
            System.out.println("LookupItem-> Name: " + names[i]);
            System.out.println("LookupItem-> Param: " + params[i]);
        }
        if (params[i].startsWith("*")) {
            // Check to see if a previously disabled entry has the same name,
            // and enable it
            ProjectItemList testList = new ProjectItemList();
            testList.setProjectId(projectId);
            testList.setEnabled(Constants.FALSE);
            testList.setName(names[i]);
            testList.buildList(db, table);
            if (testList.size() > 0) {
                // Found old item that can be enabled
                ProjectItem oldItem = testList.get(0);
                updateLevel(db, oldItem.getId(), i + 1, table);
                updateEnabled(db, oldItem.getId(), true, table);
                this.add(oldItem);
            } else {
                // New item, add it at the correct position
                ProjectItem thisItem = new ProjectItem();
                thisItem.setProjectId(projectId);
                thisItem.setName(names[i]);
                thisItem.setLevel(i + 1);
                thisItem.insert(db, table);
                this.add(thisItem);
            }
        } else {
            // Existing item, update the name and position
            updateName(db, Integer.parseInt(params[i]), names[i], table);
            updateLevel(db, Integer.parseInt(params[i]), i + 1, table);
        }
    }
// END TRANSACTION
}
