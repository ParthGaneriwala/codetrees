// $ANTLR start "case_list"
public final MyGrammarParser.case_list_return case_list() throws RecognitionException {
    MyGrammarParser.case_list_return retval = new MyGrammarParser.case_list_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token OU76 = null;
    MyGrammarParser.case_alternative_return case_alternative75 = null;
    MyGrammarParser.case_alternative_return case_alternative77 = null;
    MyGrammarParser.case_else_part_return case_else_part78 = null;
    CommonTree OU76_tree = null;
    RewriteRuleTokenStream stream_OU = new RewriteRuleTokenStream(adaptor, "token OU");
    RewriteRuleSubtreeStream stream_case_alternative = new RewriteRuleSubtreeStream(adaptor, "rule case_alternative");
    RewriteRuleSubtreeStream stream_case_else_part = new RewriteRuleSubtreeStream(adaptor, "rule case_else_part");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:2: ( case_alternative ( OU case_alternative )* ( case_else_part )? -> ^( CASE_LIST ( case_alternative )+ ( case_else_part )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:4: case_alternative ( OU case_alternative )* ( case_else_part )?
        {
            pushFollow(FOLLOW_case_alternative_in_case_list1500);
            case_alternative75 = case_alternative();
            state._fsp--;
            stream_case_alternative.add(case_alternative75.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:22: ( OU case_alternative )*
            loop13: do {
                int alt13 = 2;
                int LA13_0 = input.LA(1);
                if ((LA13_0 == OU)) {
                    alt13 = 1;
                }
                switch(alt13) {
                    case 1:
                        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:23: OU case_alternative
                        {
                            OU76 = (Token) match(input, OU, FOLLOW_OU_in_case_list1504);
                            stream_OU.add(OU76);
                            pushFollow(FOLLOW_case_alternative_in_case_list1506);
                            case_alternative77 = case_alternative();
                            state._fsp--;
                            stream_case_alternative.add(case_alternative77.getTree());
                        }
                        break;
                    default:
                        break loop13;
                }
            } while (true);
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:45: ( case_else_part )?
            int alt14 = 2;
            int LA14_0 = input.LA(1);
            if ((LA14_0 == ELSE)) {
                alt14 = 1;
            }
            switch(alt14) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:46: case_else_part
                    {
                        pushFollow(FOLLOW_case_else_part_in_case_list1511);
                        case_else_part78 = case_else_part();
                        state._fsp--;
                        stream_case_else_part.add(case_else_part78.getTree());
                    }
                    break;
            }
            // AST REWRITE
            // elements: case_alternative, case_else_part
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 202:63: -> ^( CASE_LIST ( case_alternative )+ ( case_else_part )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:66: ^( CASE_LIST ( case_alternative )+ ( case_else_part )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CASE_LIST, "CASE_LIST"), root_1);
                    if (!(stream_case_alternative.hasNext())) {
                        throw new RewriteEarlyExitException();
                    }
                    while (stream_case_alternative.hasNext()) {
                        adaptor.addChild(root_1, stream_case_alternative.nextTree());
                    }
                    stream_case_alternative.reset();
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:202:96: ( case_else_part )?
                    if (stream_case_else_part.hasNext()) {
                        adaptor.addChild(root_1, stream_case_else_part.nextTree());
                    }
                    stream_case_else_part.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
