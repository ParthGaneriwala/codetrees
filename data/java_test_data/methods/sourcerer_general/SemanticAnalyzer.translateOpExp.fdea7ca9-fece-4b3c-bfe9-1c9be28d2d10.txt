public TranslatedExpAndType translateOpExp(OpExp opExpression) {
    int operType = opExpression.getOper();
    TranslatedExpAndType transExpAndTypeLeft = translateExpression(opExpression.getLeft());
    TranslatedExpAndType transExpAndTypeRight = translateExpression(opExpression.getRight());
    TypeEntry tpEntryLeft = transExpAndTypeLeft.getTypeEntry();
    TypeEntry tpEntryRight = transExpAndTypeRight.getTypeEntry();
    TypeEntry retTypeEntry = null;
    boolean typeMismatch = false;
    if (operType == OpExp.PLUS || operType == OpExp.MINUS || operType == OpExp.DIV || operType == OpExp.MUL || operType == OpExp.AND || operType == OpExp.OR) {
        // The left and right operators must be integers
        if (!(tpEntryLeft instanceof IntTypeEntry)) {
            semanticAnalyzerError = true;
            typeMismatch = true;
            errorHandler.addError(opExpression.getPosition(), ErrorHandler.LEFT_OPERAND, opExpression.getOperator(), ErrorHandler.MUST_BE_INT);
        }
        if (!(tpEntryRight instanceof IntTypeEntry)) {
            semanticAnalyzerError = true;
            typeMismatch = true;
            errorHandler.addError(opExpression.getPosition(), ErrorHandler.RIGHT_OPERAND, opExpression.getOperator(), ErrorHandler.MUST_BE_INT);
        }
        if (!typeMismatch)
            retTypeEntry = IntTypeEntry.getInstance();
    } else {
        // All comparison operators now (including, equals, not equals, greater than, etc.
        if (tpEntryLeft != tpEntryRight) {
            // rhs is nil
            if (!(tpEntryLeft instanceof RecordTypeEntry && tpEntryRight instanceof NilTypeEntry)) {
                semanticAnalyzerError = true;
                errorHandler.addError(opExpression.getPosition(), ErrorHandler.TP_MISMATCH_OPER);
            }
        } else {
            // The types of the rhs and lhs are the same
            if (tpEntryLeft instanceof StringTypeEntry) {
                // The rhs and lhs are string types, so result must be int
                retTypeEntry = IntTypeEntry.getInstance();
            } else if (tpEntryLeft instanceof ArrayTypeEntry || tpEntryLeft instanceof RecordTypeEntry) {
                // equals and not equals
                if (!(operType == OpExp.EQ || operType == OpExp.NE)) {
                    semanticAnalyzerError = true;
                    errorHandler.addError(opExpression.getPosition(), ErrorHandler.TP_MISMATCH_OPER);
                } else
                    retTypeEntry = IntTypeEntry.getInstance();
            } else
                retTypeEntry = tpEntryLeft;
        }
    }
    TranslatedExpAndType translatedExpAndType = new TranslatedExpAndType();
    if (!semanticAnalyzerError) {
        // No error during semantic processing - translate it to the intermediate representation
        AssemType assemTypeLeft = transExpAndTypeLeft.getAssemType();
        AssemType assemTypeRight = transExpAndTypeRight.getAssemType();
        translatedExpAndType.setAssemType(translatingMediator.translateOperatorExp(operType, assemTypeLeft, assemTypeRight));
    }
    translatedExpAndType.setEntry(retTypeEntry);
    return translatedExpAndType;
}
