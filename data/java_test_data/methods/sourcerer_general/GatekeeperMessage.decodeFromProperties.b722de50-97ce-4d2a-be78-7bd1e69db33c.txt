public static GatekeeperMessage decodeFromProperties(Map postProperties) {
    log.debug("Decoding GatekeeperMessage from properties");
    GatekeeperMessage gatekeeperMessage = new GatekeeperMessage();
    Map signatureRequestMap = new HashMap();
    Iterator propsIter = postProperties.entrySet().iterator();
    while (propsIter.hasNext()) {
        Map.Entry entry = (Map.Entry) propsIter.next();
        String key = (String) entry.getKey();
        Object value = entry.getValue();
        String propertyValue = null;
        if (value instanceof String[]) {
            propertyValue = ((String[]) value)[0];
        } else {
            propertyValue = (String) value;
        }
        if (key.startsWith("application")) {
            String propertyName = key.substring(key.lastIndexOf(DELIM) + 1);
            gatekeeperMessage.addApplicationProperty(propertyName, propertyValue);
        } else if (key.startsWith("message")) {
            String propertyName = key.substring(key.lastIndexOf(DELIM) + 1);
            gatekeeperMessage.addMessageProperty(propertyName, propertyValue);
        } else if (key.startsWith("request")) {
            StringTokenizer st = new StringTokenizer(key, DELIM);
            // Consume request prefix
            st.nextToken();
            String objectIndexStr = st.nextToken();
            boolean isMetadata = false;
            String propertyName = st.nextToken();
            if (st.hasMoreTokens()) {
                isMetadata = true;
                propertyName = st.nextToken();
            }
            Integer objectIndex = Integer.valueOf(objectIndexStr);
            SignatureRequest request = null;
            if (signatureRequestMap.containsKey(objectIndex)) {
                request = (SignatureRequest) signatureRequestMap.get(objectIndex);
            } else {
                request = new SignatureRequest();
                signatureRequestMap.put(objectIndex, request);
            }
            if (isMetadata) {
                request.addObjectMetadata(propertyName, propertyValue);
            } else {
                if ("signatureType".equals(propertyName)) {
                    request.setSignatureType(propertyValue);
                } else if ("objectKey".equals(propertyName)) {
                    request.setObjectKey(propertyValue);
                } else if ("bucketName".equals(propertyName)) {
                    request.setBucketName(propertyValue);
                } else if ("signedUrl".equals(propertyName)) {
                    request.signRequest(propertyValue);
                } else if ("declineReason".equals(propertyName)) {
                    request.declineRequest(propertyValue);
                } else {
                    log.warn("Ignoring unrecognised SignatureRequest property: " + propertyName);
                }
            }
        } else {
            log.warn("Ignoring unrecognised property name: " + key);
        }
    }
    for (int i = 0; i < signatureRequestMap.size(); i++) {
        Integer objectIndex = new Integer(i);
        SignatureRequest request = (SignatureRequest) signatureRequestMap.get(objectIndex);
        gatekeeperMessage.addSignatureRequest(request);
    }
    return gatekeeperMessage;
}
