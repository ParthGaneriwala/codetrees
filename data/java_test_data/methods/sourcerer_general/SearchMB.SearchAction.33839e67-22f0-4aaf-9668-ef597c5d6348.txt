public String SearchAction() {
    Session session = HibernateUtil.getSession();
    session.beginTransaction();
    Query query = null;
    List<Recipes> recList = new ArrayList<Recipes>();
    try {
        query = session.createQuery("from Recipes");
        recList = query.list();
        List<Recipes> prRecList = new ArrayList<Recipes>();
        for (int i = 0; i < prepTimeList.size(); i++) {
            switch(prepTimeList.get(i).charAt(0)) {
                case '1':
                    query = session.createQuery("from Recipes rec where " + "rec.preparationTime < 10");
                    break;
                case '2':
                    // 10-20
                    query = session.createQuery("from Recipes rec where " + "rec.preparationTime >= 10" + "and rec.preparationTime < 20");
                    break;
                case '3':
                    // 20-35
                    query = session.createQuery("from Recipes rec where " + "rec.preparationTime >= 20" + "and rec.preparationTime < 35");
                    break;
                case '4':
                    query = session.createQuery("from Recipes rec where " + "rec.preparationTime >= 35" + "and rec.preparationTime <= 50");
                    break;
                case '5':
                    query = session.createQuery("from Recipes rec where " + "rec.preparationTime > 50");
                    break;
            }
            if (query != null) {
                // union between all
                prRecList.addAll(query.list());
            }
        }
        // Intersection
        if (prepTimeList.size() > 0) {
            recList.retainAll(prRecList);
        }
        List<Recipes> cookRecList = new ArrayList<Recipes>();
        for (int i = 0; i < cookTimeList.size(); i++) {
            switch(cookTimeList.get(i).charAt(0)) {
                case '1':
                    query = session.createQuery("from Recipes rec where " + "rec.cookingTime < 10");
                    break;
                case '2':
                    // 10-20
                    query = session.createQuery("from Recipes rec where " + "rec.cookingTime >= 10" + "and rec.cookingTime < 20");
                    break;
                case '3':
                    // 20-35
                    query = session.createQuery("from Recipes rec where " + "rec.cookingTime >= 20" + "and rec.cookingTime < 35");
                    break;
                case '4':
                    query = session.createQuery("from Recipes rec where " + "rec.cookingTime >= 35" + "and rec.cookingTime <= 50");
                    break;
                case '5':
                    query = session.createQuery("from Recipes rec where " + "rec.cookingTime > 50");
                    break;
            }
            if (query != null) {
                // union between all
                cookRecList.addAll(query.list());
            }
        }
        // Intersection between cooking and preparation times
        if ((query != null) && (cookTimeList.size() > 0)) {
            recList.retainAll(cookRecList);
        }
        query = session.getNamedQuery("Lists.complexity");
        List<Lists> compL = query.list();
        List<Recipes> totalCompRec = new ArrayList<Recipes>();
        for (int i = 0; i < complexityList.size(); i++) {
            List<Recipes> complTypeRec = new ArrayList<Recipes>();
            for (int j = 0; j < compL.size(); j++) {
                if (new Integer(complexityList.get(i)).intValue() == compL.get(j).getId()) {
                    Query query1 = session.createQuery("from Recipes rec where " + "rec.complexity.id = :complexity");
                    query1.setParameter("complexity", new Integer(compL.get(j).getId()));
                    complTypeRec = query1.list();
                    break;
                }
            }
            // union between all
            totalCompRec.addAll(complTypeRec);
        }
        // Intersection between complexity and times
        if (complexityList.size() > 0) {
            recList.retainAll(totalCompRec);
        }
        query = session.getNamedQuery("Lists.dishType");
        List<Lists> dishL = query.list();
        List<Recipes> totalDishRec = new ArrayList<Recipes>();
        for (int i = 0; i < dishList.size(); i++) {
            List<Recipes> dishlTypeRec = new ArrayList<Recipes>();
            for (int j = 0; j < dishL.size(); j++) {
                if (new Integer(dishList.get(i)).intValue() == dishL.get(j).getId()) {
                    Query query1 = session.createQuery("from Recipes rec where " + "rec.dishType.id = :dishType");
                    query1.setParameter("dishType", new Integer(dishL.get(j).getId()));
                    dishlTypeRec = query1.list();
                    break;
                }
            }
            // union between all
            totalDishRec.addAll(dishlTypeRec);
        }
        // Intersection between dishType and all till now
        if (dishList.size() > 0) {
            recList.retainAll(totalDishRec);
        }
        query = session.getNamedQuery("Lists.cuisine");
        List<Lists> catL = query.list();
        List<Recipes> totalCatRec = new ArrayList<Recipes>();
        for (int i = 0; i < cuisineList.size(); i++) {
            List<Recipes> catlTypeRec = new ArrayList<Recipes>();
            for (int j = 0; j < catL.size(); j++) {
                if (new Integer(cuisineList.get(i)).intValue() == catL.get(j).getId()) {
                    Query query1 = session.createQuery("select recCat.recipe " + "from RecipeCategories recCat where " + "recCat.category.id = :category");
                    query1.setParameter("category", catL.get(j).getId());
                    catlTypeRec = query1.list();
                    break;
                }
            }
            totalCatRec.addAll(catlTypeRec);
        }
        if (cuisineList.size() > 0) {
            recList.retainAll(totalCatRec);
        }
        query = session.getNamedQuery("Ingredients.list");
        List<String> ingList = query.list();
        List<Recipes> totalIngRec = new ArrayList<Recipes>();
        totalIngRec = AddUnique(totalIngRec, (recipesByIngredients(ingredient1, ingList)));
        totalIngRec = AddUnique(totalIngRec, (recipesByIngredients(ingredient2, ingList)));
        totalIngRec = AddUnique(totalIngRec, (recipesByIngredients(ingredient3, ingList)));
        totalIngRec = AddUnique(totalIngRec, (recipesByIngredients(ingredient4, ingList)));
        totalIngRec = AddUnique(totalIngRec, (recipesByIngredients(ingredient5, ingList)));
        // Intersection between ingredients and all above
        if (totalIngRec.size() > 0) {
            List<Integer> temp = new ArrayList<Integer>();
            List<Recipes> tempRec = new ArrayList<Recipes>();
            for (int i = 0; i < recList.size(); i++) {
                for (int j = 0; j < totalIngRec.size(); j++) {
                    if (recList.get(i).getRecipeId() == totalIngRec.get(j).getRecipeId()) {
                        temp.add(i);
                    }
                }
            }
            for (int i = 0; i < temp.size(); i++) {
                tempRec.add(recList.get((temp.get(i))));
            }
            recList = tempRec;
        }
        if (!useDB) {
            List<Favorites> results2 = new ArrayList<Favorites>();
            List<Favorites> results3 = new ArrayList<Favorites>();
            if (useFriends) {
                // get friends users
                query = session.getNamedQuery("Friends.list");
                query.setParameter("user", (Users) (Contexts.getSession().getAttribute("user")));
                List<Users> results = query.list();
                for (int i = 0; i < results.size(); i++) {
                    query = session.getNamedQuery("Favorites.list");
                    query.setParameter("user", results.get(i));
                    results2.addAll(query.list());
                }
            }
            if (useMy) {
                query = session.getNamedQuery("Favorites.list");
                query.setParameter("user", (Users) (Contexts.getSession().getAttribute("user")));
                results3 = query.list();
            }
            results2.addAll(results3);
            List<Recipes> recList1 = new ArrayList<Recipes>();
            ;
            for (int i = 0; i < results2.size(); i++) {
                recList1.add(results2.get(i).getRecipe());
            }
            recList.retainAll(recList1);
        }
        // store found user to session
        Contexts.getSession().setAttribute("recipeList", recList);
    } catch (NoResultException e) {
        // no user found - return failure
        if (session != null)
            session.close();
        Contexts.getSession().setAttribute("recipeList", new ArrayList<Recipes>());
        System.out.println("NO RESULTS");
        return "success";
    }
    // return success
    session.close();
    return "success";
}
