protected Object[] loadPropertyAnnotation(Component comp, String propName, String bindName) {
    ComponentCtrl compCtrl = (ComponentCtrl) comp;
    Annotation ann = compCtrl.getAnnotation(propName, bindName);
    if (ann != null) {
        // (tag, tagExpr)
        final Map attrs = ann.getAttributes();
        List loadWhenEvents = null;
        List saveWhenEvents = null;
        List loadAfterEvents = null;
        List saveAfterEvents = null;
        String access = null;
        String converter = null;
        String expr = null;
        Map args = null;
        for (final Iterator it = attrs.entrySet().iterator(); it.hasNext(); ) {
            Map.Entry entry = (Map.Entry) it.next();
            String tag = (String) entry.getKey();
            String tagExpr = (String) entry.getValue();
            if ("save-when".equals(tag)) {
                saveWhenEvents = parseExpression(tagExpr, ",");
            } else if ("load-after".equals(tag)) {
                loadAfterEvents = parseExpression(tagExpr, ",");
            } else if ("access".equals(tag)) {
                access = tagExpr;
            } else if ("converter".equals(tag)) {
                converter = tagExpr;
            } else if ("load-when".equals(tag)) {
                loadWhenEvents = parseExpression(tagExpr, ",");
            } else if ("save-after".equals(tag)) {
                saveAfterEvents = parseExpression(tagExpr, ",");
            } else if ("value".equals(tag)) {
                expr = tagExpr;
            } else {
                if (args == null) {
                    args = new HashMap();
                }
                args.put(tag, tagExpr);
            }
        }
        return new Object[] { expr, loadWhenEvents, saveWhenEvents, access, converter, args, loadAfterEvents, saveAfterEvents };
    }
    return new Object[8];
}
