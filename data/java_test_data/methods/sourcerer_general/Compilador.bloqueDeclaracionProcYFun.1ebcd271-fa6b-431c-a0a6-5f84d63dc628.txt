private void bloqueDeclaracionProcYFun() throws ErrorLexico, ErrorArchivo, ErrorSintactico, ErrorSemantico, Exception {
    String lex, label;
    sintetizados sintEncab, sintBloque;
    Procedimiento p;
    int longitud;
    entrada entrada;
    Funcion f;
    Parametro param;
    ListIterator itListaFormales, itNuevaLF;
    ArrayList nuevaLF = new ArrayList();
    if (numeroTokenActual == Token.PROCEDURE) {
        match(Token.PROCEDURE);
        lex = tokenActual.getLexema();
        match(Token.IDENTIFICADOR);
        sintEncab = encabezadoProcedimiento();
        longitud = sintEncab.getEspacioS();
        itListaFormales = sintEncab.getListaParametrosFormalesS().listIterator();
        while (itListaFormales.hasNext()) {
            param = (Parametro) itListaFormales.next();
            // se corrige el offset correspondiente a la posicion(-x,-y,..,-z)
            param.setOffSet(-(longitud + 3 - param.getOffSet()));
            nuevaLF.add(param);
        }
        entrada = TS.getEntradaNivelActual(lex);
        if ((entrada == null) || (!(entrada instanceof Procedimiento))) {
            label = generador.genEtiqueta();
            // suma uno al NIVEL porque el bloque del proc corresponde a un NIVEL mï¿½s
            generador.genInst1ArgCte(label, generador.ENPR, TS.getNivelActual() + 1);
            p = new Procedimiento(nuevaLF, label, TS.getNivelActual());
            TS.insertar(lex, p);
            TS.apilarNivel();
            TS.insertarParametros(p.getListaParametrosFormales(), sintEncab.getListaIdsS());
        } else
            throw new ErrorSemantico(ErrorSemantico.ID_DUP, getNumeroLinea(), getNumeroColumna(), lex);
        sintBloque = bloque();
        match(Token.PUNTOCOMA);
        generador.genInst1ArgCte("", generador.LMEM, sintBloque.getEspacioS());
        generador.genInst2ArgCte("", generador.RTPR, TS.getNivelActual(), longitud);
        TS.desapilarNivel();
        bloqueDeclaracionProcYFun();
    } else if (numeroTokenActual == Token.FUNCTION) {
        match(Token.FUNCTION);
        lex = tokenActual.getLexema();
        match(Token.IDENTIFICADOR);
        sintEncab = encabezadoFuncion();
        // longitud = sintEncab.getOffsetS();
        longitud = sintEncab.getEspacioS();
        itListaFormales = sintEncab.getListaParametrosFormalesS().listIterator();
        int pos = 1;
        while (itListaFormales.hasNext()) {
            param = (Parametro) itListaFormales.next();
            // se coloca el offset correspondiente a la posicion(-x,-y,..,-z)
            // param.setOffSet(-(longitud + 3 - pos));
            param.setOffSet(-(longitud + 3 - param.getOffSet()));
            nuevaLF.add(param);
            pos++;
        }
        entrada = TS.getEntradaNivelActual(lex);
        if ((entrada == null) || (!(entrada instanceof Funcion))) {
            label = generador.genEtiqueta();
            generador.genInst1ArgCte(label, generador.ENPR, TS.getNivelActual() + 1);
            f = new Funcion(sintEncab.getRetornoS(), -(longitud + 3), sintEncab.getListaParametrosFormalesS(), label, TS.getNivelActual());
            TS.insertar(lex, f);
            TS.apilarNivel();
            TS.insertarParametros(f.getListaParametrosFormales(), sintEncab.getListaIdsS());
        } else
            throw new ErrorSemantico(ErrorSemantico.ID_DUP, getNumeroLinea(), getNumeroColumna(), lex);
        sintBloque = bloque();
        match(Token.PUNTOCOMA);
        generador.genInst1ArgCte("", generador.LMEM, sintBloque.getEspacioS());
        generador.genInst2ArgCte("", generador.RTPR, TS.getNivelActual(), longitud);
        TS.desapilarNivel();
        bloqueDeclaracionProcYFun();
    }
}
