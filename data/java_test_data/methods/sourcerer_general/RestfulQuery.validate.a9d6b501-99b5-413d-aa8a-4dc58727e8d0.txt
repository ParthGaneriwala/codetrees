public RestfulQuery validate(Database db) throws SQLException {
    DatabaseMetaInfo dbmi = db.getDatabaseMetaInfo();
    /* validate tables and join operations */
    for (int i = tables.size() - 1; i > -1; i--) {
        // iterate tables
        // get current table
        final String table = tables.get(0);
        if (!dbmi.containsTable(table)) {
            // table does not exist in database
            tables.remove(i);
            if (i != 0) {
                joinOperations.remove(i - 1);
            } else {
                joinOperations.remove(0);
            }
        }
    }
    if (tables.isEmpty()) {
        // after all processing, tables is empty
        final SqlExceptionState state = SqlExceptionState.TABLES_DO_NOT_EXIST;
        throw new SQLException("The request you made contains no valid tables.", state.name(), state.code());
    }
    /* validate columns */
    for (int i = columns.size() - 1; i > -1; i--) {
        // iterate columns
        // get current table
        final String table = columns.get(i).getTable();
        // get current column
        final String column = columns.get(i).getName();
        final ResultSetMetaInfo rsmi = db.getResultSetMetaInfo(table);
        if (!dbmi.containsTable(table) || !rsmi.containsColumn(column)) {
            // table does not exist in database or column does not exist in table
            columns.remove(i);
        }
    }
    if (columns.isEmpty()) {
        // after all processing, columns is empty
        if (boundedColumns.size() > 0) {
            // columns are bounded
            final SqlExceptionState state = SqlExceptionState.COLUMNS_DO_NOT_EXIST;
            throw new SQLException("The request you made contains no valid columns.", state.name(), state.code());
        } else {
            // columns are not bounded - fill columns list
            for (int i = 0; i < tables.size(); i++) {
                // iterate tables
                // get current table
                final String table = tables.get(i);
                final ResultSetMetaInfo rsmi = db.getResultSetMetaInfo(table);
                for (int j = 1; j <= rsmi.getColumnCount(); j++) {
                    // iterate columns in current table
                    columns.add(new Column(table, rsmi.getColumn(j)));
                }
            }
        }
    }
    /* validate filters */
    for (int i = filters.size() - 1; i > -1; i--) {
        // iterate filters
        // get current table
        final String table = filters.get(i).getTable();
        // get current column
        final String column = filters.get(i).getColumn();
        final ResultSetMetaInfo rsmi = db.getResultSetMetaInfo(table);
        if (!dbmi.containsTable(table) || !rsmi.containsColumn(column)) {
            // table does not exist in database or column does not exist in table
            filters.remove(i);
        }
    }
    /* validate filter boundaries */
    for (int i = filterBoundaries.size() - 1; i > -1; i--) {
        // iterate filters boundaries
        // get current table
        final String table = filterBoundaries.get(i).getTable();
        // get current column
        final String column = filterBoundaries.get(i).getColumn();
        final ResultSetMetaInfo rsmi = db.getResultSetMetaInfo(table);
        if (!dbmi.containsTable(table) || !rsmi.containsColumn(column)) {
            // table does not exist in database or column does not exist in table
            filterBoundaries.remove(i);
        }
    }
    /* validate orders */
    for (int i = orders.size() - 1; i > -1; i--) {
        // iterate orders
        // get current table
        final String table = orders.get(i).getTable();
        // get current column
        final String column = orders.get(i).getColumn();
        final ResultSetMetaInfo rsmi = db.getResultSetMetaInfo(table);
        if (!dbmi.containsTable(table) || !rsmi.containsColumn(column)) {
            // table does not exist in database or column does not exist in table
            orders.remove(i);
        }
    }
    return this;
}
