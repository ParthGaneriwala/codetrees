private void munchCJumpStm(AssemCJump cjumpStm) {
    Label ifLabel = cjumpStm.getIfTrueLabel();
    Label elseLabel = cjumpStm.getIfFalseLabel();
    AssemExp leftExp = cjumpStm.getLeft();
    AssemExp rightExp = cjumpStm.getRight();
    int leftExpType = leftExp.getExpType();
    int rightExpType = rightExp.getExpType();
    int op = cjumpStm.relop;
    int relop = getRelOp(op);
    Vector srcList = new Vector();
    String branchOnStr = "";
    AssemblyInstruction instr;
    if (leftExpType == AssemExp.CONST) {
        AssemConst constLeft = (AssemConst) leftExp;
        int value = constLeft.getValue();
        if (!(relop == CJump.EQ || relop == CJump.NE))
            // Reverse the condition, since the const is first
            relop = AssemCJump.notRel(relop);
        Temp rhsTemp = null;
        if (rightExpType == AssemExp.TEMP)
            rhsTemp = ((AssemTemp) rightExp).getTemp();
        else
            rhsTemp = munchExp(rightExp);
        srcList.addElement(rhsTemp);
        instr = new CJump(srcList, ifLabel.toString(), elseLabel.toString(), relop, new Integer(value));
    } else {
        Temp lhsTemp = munchExp(leftExp);
        srcList.addElement(lhsTemp);
        if (rightExpType == AssemExp.CONST) {
            AssemConst constRight = (AssemConst) rightExp;
            int val = constRight.getValue();
            instr = new CJump(srcList, ifLabel.toString(), elseLabel.toString(), relop, new Integer(val));
        } else {
            // Neither the left nor the right are const values
            Temp rhsTemp = munchExp(rightExp);
            srcList.addElement(rhsTemp);
            instr = new CJump(srcList, ifLabel.toString(), elseLabel.toString(), relop, null);
        }
    }
    instructionsList.addElement(instr);
}
