private Citation getCitation(Node node) {
    Citation citation = new Citation();
    List<Author> authors = new ArrayList<Author>();
    Node firstChild = node.getFirstChild();
    while (firstChild.getNextSibling() != null) {
        if ("rdf:Description".equals(firstChild.getNodeName())) {
            Node secondChild = firstChild.getFirstChild();
            while (secondChild.getNextSibling() != null) {
                String name = secondChild.getNodeName();
                String text = secondChild.getTextContent();
                if ("citationID".equals(name)) {
                    citation.setCitationId(toLong(text));
                }
                if ("prism:title".equals(name)) {
                    citation.setTitle(text);
                }
                if ("foaf:maker".equals(name)) {
                    authors.add(toAuthor(text));
                }
                if ("dc:date".equals(name)) {
                    citation.setDate(toDate(text));
                }
                if ("journalID".equals(name)) {
                    citation.setJournalId(toLong(text));
                }
                if ("prism:publicationName".equals(name)) {
                    citation.setPublicationName(text);
                }
                if ("prism:issn".equals(name)) {
                    citation.setIssn(text);
                }
                if ("prism:volume".equals(name)) {
                    citation.setVolume(text);
                }
                if ("prism:number".equals(name)) {
                    citation.setNumber(text);
                }
                if ("prism:startingPage".equals(name)) {
                    citation.setStartingPage(text);
                }
                if ("prism:endingPage".equals(name)) {
                    citation.setEndingPage(text);
                }
                if ("doiResolver".equals(name)) {
                    if (secondChild.getAttributes().getLength() > 0) {
                        citation.setDoiResolver(new Reference(secondChild.getAttributes().item(0).getTextContent()));
                    }
                }
                if ("pmidResolver".equals(name)) {
                    if (secondChild.getAttributes().getLength() > 0) {
                        citation.setPmidResolver(new Reference(secondChild.getAttributes().item(0).getTextContent()));
                    }
                }
                if ("dc:identifier".equals(name)) {
                    getIdentifier(secondChild, citation);
                }
                secondChild = secondChild.getNextSibling();
            }
        }
        firstChild = firstChild.getNextSibling();
    }
    citation.setAuthors(authors);
    return citation;
}
