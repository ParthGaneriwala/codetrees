// 
// There are some properties of GOTO table that can be taken advantaged
// of:
// 
// 1. 0 values are never ever referenced, so no need to worry about index
// out of the bound
// 
// 
void compute(short[] base, short[] next, short[] check) {
    m_base = base;
    m_next = next;
    m_check = check;
    m_baseAdd = m_base.length;
    m_base = TableCompressor.resize(m_base, m_base.length + m_dfaCopy.size() + 1, SHORT_MIN);
    m_default = TableCompressor.resize(m_default, m_dfaCopy.size() + 1, SHORT_MIN);
    for (short i = 0; i < m_dfaCopy.size(); ++i) {
        // ignore those empty ones
        int errorCount = getErrorCount(i);
        int rowLength = m_dfa.get(i).length;
        if (// ok, this state is full of 0's
        errorCount == rowLength)
            continue;
        // search the DFA for a nearest state
        int minDiff = Short.MAX_VALUE;
        short minState = i;
        for (short j = 0; j < i; ++j) {
            int diff = getStateDiff(i, j);
            if (diff < minDiff) {
                minDiff = diff;
                minState = j;
                if (diff == 0)
                    break;
            }
        }
        // if found a state like that
        if (minState < i && minDiff < (rowLength - errorCount))
            doInsertState(i, minState);
        else
            doInsertState(i, SHORT_MIN);
    }
    doFillStates();
    // Add an empty state at the end to prevent index out of bound etc
    // and deal with states with all 0's
    short defaultState = (short) (m_baseAdd + m_dfa.size());
    int end;
    for (end = m_next.length - 1; end > 0; --end) {
        if (m_check[end] != SHORT_MIN)
            break;
    }
    ++end;
    m_next = TableCompressor.resize(m_next, end + m_dfa.get(0).length, (short) 0);
    m_check = TableCompressor.resize(m_check, end + m_dfa.get(0).length, defaultState);
    for (int i = end; i < m_check.length; ++i) {
        m_check[i] = defaultState;
        m_next[i] = (short) 0;
    }
    m_base[m_base.length - 1] = (short) end;
    // 
    for (int i = 0; i < m_check.length; ++i) {
        if (m_check[i] == SHORT_MIN)
            m_check[i] = defaultState;
        if (m_next[i] == SHORT_MIN)
            m_next[i] = 0;
    }
    // 
    for (int i = m_baseAdd; i < m_base.length; ++i) {
        if (m_base[i] == SHORT_MIN)
            m_base[i] = (short) end;
    }
    for (int i = 0; i < m_default.length; ++i) {
        if (m_default[i] == SHORT_MIN)
            m_default[i] = defaultState;
    }
}
