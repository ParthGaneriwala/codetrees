public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
            break;
        }
        switch(field.id) {
            case 1:
                if (field.type == TType.STRUCT) {
                    this.path = new Pathname();
                    this.path.read(iprot);
                    this.__isset.path = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 2:
                if (field.type == TType.I16) {
                    this.mode = iprot.readI16();
                    this.__isset.mode = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 3:
                if (field.type == TType.BOOL) {
                    this.overwrite = iprot.readBool();
                    this.__isset.overwrite = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 4:
                if (field.type == TType.I32) {
                    this.bufferSize = iprot.readI32();
                    this.__isset.bufferSize = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 5:
                if (field.type == TType.I16) {
                    this.block_replication = iprot.readI16();
                    this.__isset.block_replication = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            case 6:
                if (field.type == TType.I64) {
                    this.blocksize = iprot.readI64();
                    this.__isset.blocksize = true;
                } else {
                    TProtocolUtil.skip(iprot, field.type);
                }
                break;
            default:
                TProtocolUtil.skip(iprot, field.type);
                break;
        }
        iprot.readFieldEnd();
    }
    iprot.readStructEnd();
}
