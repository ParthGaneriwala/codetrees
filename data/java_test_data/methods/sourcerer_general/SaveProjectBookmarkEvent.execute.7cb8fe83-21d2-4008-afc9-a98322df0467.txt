public boolean execute(ComponentContext context) {
    boolean result = false;
    TaskList taskList = (TaskList) context.getThisObject();
    Connection db = null;
    try {
        db = getConnection(context);
        int owner = -1;
        int projectId = -1;
        int linkItemId = -1;
        StringBuffer sb = new StringBuffer();
        int count = 0;
        Iterator i = taskList.iterator();
        while (i.hasNext()) {
            count++;
            Task thisTask = (Task) i.next();
            // Get the user who entered the task
            User user = UserUtils.loadUser(thisTask.getOwner());
            // Reload the task category, and populate some things that won't be populated
            TaskCategory taskCategory = new TaskCategory(db, thisTask.getCategoryId());
            taskCategory.setLinkModuleId(thisTask.getLinkModuleId());
            taskCategory.setLinkItemId(user.getProfileProjectId());
            // Build the wiki links
            sb.append(WikiLink.generateLink(taskCategory));
            if (i.hasNext()) {
                if (sb.length() > 0) {
                    sb.append(", ");
                }
            }
            // user bookmarking the project
            owner = thisTask.getOwner();
            // project this list belongs to
            projectId = thisTask.getProjectId();
            // project that is being bookmarked
            linkItemId = thisTask.getLinkItemId();
        }
        if (taskList.size() > 0) {
            User user = UserUtils.loadUser(owner);
            Project userProfile = ProjectUtils.loadProject(user.getProfileProjectId());
            Project bookmarkProject = ProjectUtils.loadProject(linkItemId);
            // Prepare the wiki links
            context.setParameter("user", WikiLink.generateLink(userProfile));
            context.setParameter("profile", WikiLink.generateLink(bookmarkProject));
            if (taskList.size() == 1) {
                context.setParameter("list", sb.toString());
            } else {
                context.setParameter("lists", sb.toString());
            }
            // Insert the history
            ProjectHistory history = new ProjectHistory();
            history.setEnteredBy(owner);
            history.setProjectId(projectId);
            history.setLinkObject(ProjectHistoryList.LIST_OBJECT);
            history.setEventType(ProjectHistoryList.BOOKMARK_PROFILE_EVENT);
            history.setLinkItemId(linkItemId);
            if (taskList.size() == 1) {
                history.setDescription(context.getParameter(HISTORY_BOOKMARK_SINGLELIST_TEXT));
            } else {
                history.setDescription(context.getParameter(HISTORY_BOOKMARK_MULTIPLELIST_TEXT));
            }
            history.insert(db);
            result = true;
        }
    } catch (Exception e) {
        e.printStackTrace(System.out);
    } finally {
        freeConnection(context, db);
    }
    return result;
}
