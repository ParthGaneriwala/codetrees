// $ANTLR start "if_statement"
public final Compila_doresParser.if_statement_return if_statement() throws RecognitionException {
    Compila_doresParser.if_statement_return retval = new Compila_doresParser.if_statement_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IF61 = null;
    Token THEN63 = null;
    Token EOL64 = null;
    Token ELSE66 = null;
    Token EOL67 = null;
    Token END69 = null;
    Token IF70 = null;
    Compila_doresParser.expression_return expression62 = null;
    Compila_doresParser.block_if_then_return block_if_then65 = null;
    Compila_doresParser.block_else_return block_else68 = null;
    CommonTree IF61_tree = null;
    CommonTree THEN63_tree = null;
    CommonTree EOL64_tree = null;
    CommonTree ELSE66_tree = null;
    CommonTree EOL67_tree = null;
    CommonTree END69_tree = null;
    CommonTree IF70_tree = null;
    RewriteRuleTokenStream stream_EOL = new RewriteRuleTokenStream(adaptor, "token EOL");
    RewriteRuleTokenStream stream_THEN = new RewriteRuleTokenStream(adaptor, "token THEN");
    RewriteRuleTokenStream stream_END = new RewriteRuleTokenStream(adaptor, "token END");
    RewriteRuleTokenStream stream_IF = new RewriteRuleTokenStream(adaptor, "token IF");
    RewriteRuleTokenStream stream_ELSE = new RewriteRuleTokenStream(adaptor, "token ELSE");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_block_else = new RewriteRuleSubtreeStream(adaptor, "rule block_else");
    RewriteRuleSubtreeStream stream_block_if_then = new RewriteRuleSubtreeStream(adaptor, "rule block_if_then");
    try {
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:2: ( ( IF expression THEN ( EOL )+ ) ( block_if_then ) ( ELSE ( EOL )+ ) ( block_else ) ( END IF ) -> ^( IF expression ^( THEN ( block_if_then )* ) ^( ELSE ( block_else )* ) ) )
        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:4: ( IF expression THEN ( EOL )+ ) ( block_if_then ) ( ELSE ( EOL )+ ) ( block_else ) ( END IF )
        {
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:4: ( IF expression THEN ( EOL )+ )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:5: IF expression THEN ( EOL )+
            {
                IF61 = (Token) match(input, IF, FOLLOW_IF_in_if_statement934);
                stream_IF.add(IF61);
                pushFollow(FOLLOW_expression_in_if_statement936);
                expression62 = expression();
                state._fsp--;
                stream_expression.add(expression62.getTree());
                THEN63 = (Token) match(input, THEN, FOLLOW_THEN_in_if_statement938);
                stream_THEN.add(THEN63);
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:24: ( EOL )+
                int cnt19 = 0;
                loop19: do {
                    int alt19 = 2;
                    int LA19_0 = input.LA(1);
                    if ((LA19_0 == EOL)) {
                        alt19 = 1;
                    }
                    switch(alt19) {
                        case 1:
                            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:24: EOL
                            {
                                EOL64 = (Token) match(input, EOL, FOLLOW_EOL_in_if_statement940);
                                stream_EOL.add(EOL64);
                            }
                            break;
                        default:
                            if (cnt19 >= 1)
                                break loop19;
                            EarlyExitException eee = new EarlyExitException(19, input);
                            throw eee;
                    }
                    cnt19++;
                } while (true);
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:30: ( block_if_then )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:31: block_if_then
            {
                pushFollow(FOLLOW_block_if_then_in_if_statement945);
                block_if_then65 = block_if_then();
                state._fsp--;
                stream_block_if_then.add(block_if_then65.getTree());
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:46: ( ELSE ( EOL )+ )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:47: ELSE ( EOL )+
            {
                ELSE66 = (Token) match(input, ELSE, FOLLOW_ELSE_in_if_statement949);
                stream_ELSE.add(ELSE66);
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:52: ( EOL )+
                int cnt20 = 0;
                loop20: do {
                    int alt20 = 2;
                    int LA20_0 = input.LA(1);
                    if ((LA20_0 == EOL)) {
                        alt20 = 1;
                    }
                    switch(alt20) {
                        case 1:
                            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:52: EOL
                            {
                                EOL67 = (Token) match(input, EOL, FOLLOW_EOL_in_if_statement951);
                                stream_EOL.add(EOL67);
                            }
                            break;
                        default:
                            if (cnt20 >= 1)
                                break loop20;
                            EarlyExitException eee = new EarlyExitException(20, input);
                            throw eee;
                    }
                    cnt20++;
                } while (true);
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:58: ( block_else )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:59: block_else
            {
                pushFollow(FOLLOW_block_else_in_if_statement956);
                block_else68 = block_else();
                state._fsp--;
                stream_block_else.add(block_else68.getTree());
            }
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:71: ( END IF )
            // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:136:72: END IF
            {
                END69 = (Token) match(input, END, FOLLOW_END_in_if_statement960);
                stream_END.add(END69);
                IF70 = (Token) match(input, IF, FOLLOW_IF_in_if_statement962);
                stream_IF.add(IF70);
            }
            // AST REWRITE
            // elements: block_else, THEN, expression, IF, ELSE, block_if_then
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 137:2: -> ^( IF expression ^( THEN ( block_if_then )* ) ^( ELSE ( block_else )* ) )
            {
                // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:137:5: ^( IF expression ^( THEN ( block_if_then )* ) ^( ELSE ( block_else )* ) )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot(stream_IF.nextNode(), root_1);
                    adaptor.addChild(root_1, stream_expression.nextTree());
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:137:21: ^( THEN ( block_if_then )* )
                    {
                        CommonTree root_2 = (CommonTree) adaptor.nil();
                        root_2 = (CommonTree) adaptor.becomeRoot(stream_THEN.nextNode(), root_2);
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:137:28: ( block_if_then )*
                        while (stream_block_if_then.hasNext()) {
                            adaptor.addChild(root_2, stream_block_if_then.nextTree());
                        }
                        stream_block_if_then.reset();
                        adaptor.addChild(root_1, root_2);
                    }
                    // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:137:44: ^( ELSE ( block_else )* )
                    {
                        CommonTree root_2 = (CommonTree) adaptor.nil();
                        root_2 = (CommonTree) adaptor.becomeRoot(stream_ELSE.nextNode(), root_2);
                        // C:\\Documents and Settings\\user\\Meus documentos\\svn [Compila_dores]\\trunk\\grammar\\Compila_dores.g:137:51: ( block_else )*
                        while (stream_block_else.hasNext()) {
                            adaptor.addChild(root_2, stream_block_else.nextTree());
                        }
                        stream_block_else.reset();
                        adaptor.addChild(root_1, root_2);
                    }
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
