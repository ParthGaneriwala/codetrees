/**
 * @author alberto
 * @param order = campo para ordenar , inic = valor onde inicia a pagina ,limit = limite de registrs por parginas
 */
public Vector<Cliente> getListClinte(int valueBusca, String buscar, int order, int inic, int quant) throws ClassNotFoundException, SQLException {
    Connection conexao = Conexao.getInstancia().getConexao();
    String condicao = "";
    if (valueBusca != 0 && buscar != null) {
        if (valueBusca == ClienteDAO.BUSCA_NOME) {
            condicao = " and pe.nome  like '" + buscar + "%'";
        }
    }
    String format = condicao + " order by  pe.nome   limit 0, 10";
    switch(order) {
        case 1:
            format = condicao + " order by  pe.nome  limit " + inic + ", " + quant;
            break;
        case 4:
            format = condicao + " order by  pe.data_cadastro  limit " + inic + " , " + quant;
            break;
        case 3:
            format = condicao + " order by  cli.limite_credito  limit " + inic + " , " + quant;
            break;
        case // / falta emplemetar
        5:
            format = condicao + " order by  cli.ult_venda  limit " + inic + ", " + quant;
            break;
        default:
            // / falta emplemetar
            format = " order by  pe.nome   limit " + inic + " , " + quant;
            break;
    }
    ResultSet result = conexao.createStatement().executeQuery("select cli.idcliente as id," + "cli.profissao as profiss," + "cli.idpessoa as idpessoa," + "cli.nome_pai as pai," + "cli.nome_mae as mae," + "cli.conjuge as conjuge," + "cli.nascido_em as nasc_em," + "cli.limite_credito as credito," + "cli.natural_de as natur," + "cli.ult_venda as ult_venda," + "pe.nome as nome," + "pe.telefone as tel," + "pe.celular as cel," + "pe.logradouro as endereco," + "pe.bairro as bairro," + "pe.data_cadastro as cadast_em," + "pe.contato," + "pe.ie_rg," + "pe.cpf_cnpj," + "pe.cep," + "pe.idestado," + "pe.email," + "pe.municipio," + "pe.fax  " + "from tb_cliente cli,tb_pessoas pe where pe.idpessoa=cli.idpessoa " + format);
    Vector<Cliente> clientes = new Vector<Cliente>();
    while (result.next()) {
        Cliente cliente = new Cliente();
        cliente.setId(result.getInt("idpessoa"));
        cliente.setId(result.getInt("id"));
        cliente.setProfissao(result.getString("profiss"));
        cliente.setNascido(result.getString("nasc_em"));
        cliente.setUltVenda(result.getTimestamp("ult_venda"));
        cliente.setNome(result.getString("nome"));
        cliente.setTelefone(result.getString("tel"));
        cliente.setLimitCred(result.getDouble("credito"));
        cliente.setPai(result.getString("pai"));
        cliente.setMae(result.getString("mae"));
        cliente.setConjugue(result.getString("conjuge"));
        cliente.setNatural(result.getString("natur"));
        cliente.setEndereco(result.getString("endereco"));
        cliente.setBairro(result.getString("bairro"));
        cliente.setCadastro(result.getTimestamp("cadast_em"));
        cliente.setContato(result.getString("contato"));
        Estado estado = new Estado();
        estado.setId(result.getInt("idestado"));
        cliente.setUf(estado);
        cliente.setEmail(result.getString("email"));
        cliente.setMunicipio(result.getString("municipio"));
        cliente.setRgIe(result.getString("ie_rg"));
        cliente.setCnpjCpf(result.getString("cpf_cnpj"));
        cliente.setCelular(result.getString("cel"));
        cliente.setFax(result.getString("fax"));
        clientes.add(cliente);
    }
    return clientes;
}
