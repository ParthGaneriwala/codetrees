public Exp visit(MethodDeclaration n, MJType argu) {
    Exp _ret = null;
    String class_name = ((MJObj) argu).GetClassName();
    String met_name = (n.f2).f0.toString();
    String met_label = class_name + "_" + met_name;
    int arg_number = 0;
    MJMethod m_met = (MJMethod) (((MJObj) argu).SearchMethod(met_name));
    arg_number = m_met.GetArgsNumber();
    Level oldlevel = level;
    LinkedList<Boolean> params = new LinkedList<Boolean>();
    Symbol sym = Symbol.symbol(met_label);
    for (int i = 0; i <= arg_number; i++) params.add(new Boolean(false));
    level = newLevel(sym, false, params);
    Tree.Stm stms;
    Enumeration e = n.f8.elements();
    // Bloco Vazio
    if (!e.hasMoreElements()) {
        stms = null;
        Exp retexp = n.f10.accept(this, m_met);
        procEntryExit(new Ex(ESEQ(stms, retexp.unEx())));
        level = oldlevel;
        return _ret;
    }
    Exp exp = ((Statement) e.nextElement()).accept(this, m_met);
    if (!e.hasMoreElements())
        stms = exp.unNx();
    stms = exp.unNx();
    while (e.hasMoreElements()) {
        exp = ((Statement) e.nextElement()).accept(this, m_met);
        stms = SEQ(stms, exp.unNx());
    }
    Exp retexp = n.f10.accept(this, m_met);
    procEntryExit(new Ex(ESEQ(stms, retexp.unEx())));
    level = oldlevel;
    return _ret;
}
