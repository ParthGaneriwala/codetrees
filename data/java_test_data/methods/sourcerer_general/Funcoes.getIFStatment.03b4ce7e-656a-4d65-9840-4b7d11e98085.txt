public static IFStatment getIFStatment(ArrayList<String> pTokens, int pIndex) {
    IFStatment vStatment = new IFStatment();
    int i = pIndex;
    // Pegando a expressao lï¿½gica do if
    for (; i < pTokens.size(); i++) {
        String vStrToken = pTokens.get(i);
        if (vStrToken.equals(Constantes.DS_STM_THEN)) {
            break;
        }
        vStatment.aStackExpressao.push(vStrToken);
    }
    i++;
    // System.out.println(vStatment.aStackExpressao);
    // Pegando Bloco Verdadeiro
    Stack<String> vStackIF = new Stack<String>();
    Stack<String> vStackWHILE = new Stack<String>();
    Stack<Boolean> vStackWasUltimoIF = new Stack<Boolean>();
    Stack<Boolean> vStackWasUltimoWhile = new Stack<Boolean>();
    boolean haveIF = false, haveWHILE = false;
    for (; i < pTokens.size(); i++) {
        String vStrToken = pTokens.get(i);
        if (vStrToken.equals(Constantes.DS_STM_IF)) {
            vStackIF.push(vStrToken);
            vStackWasUltimoWhile.push(false);
            vStackWasUltimoIF.push(true);
        }
        if (vStrToken.equals(Constantes.DS_STM_WHILE)) {
            vStackWHILE.push(vStrToken);
            vStackWasUltimoWhile.push(true);
            vStackWasUltimoIF.push(false);
        }
        if (vStrToken.equals(Constantes.DS_STM_ELSE) && vStackIF.isEmpty()) {
            vStatment.aStackBlocoVerdadeiro.add(vStrToken);
            break;
        }
        if (vStrToken.equals(Constantes.DS_STM_END)) {
            if (!vStackIF.isEmpty() && vStackWasUltimoIF.pop()) {
                vStackIF.pop();
                haveIF = true;
            }
            if (!vStackWHILE.isEmpty() && vStackWasUltimoWhile.pop()) {
                vStackWHILE.pop();
                haveWHILE = true;
            }
            if (vStackIF.isEmpty() && vStackWHILE.isEmpty()) {
                if (haveIF || haveWHILE) {
                    vStatment.aStackBlocoVerdadeiro.add(vStrToken);
                }
                break;
            }
        }
        vStatment.aStackBlocoVerdadeiro.add(vStrToken);
    }
    if (haveIF) {
        i++;
    }
    if (pTokens.get(i).equals(Constantes.DS_STM_ELSE)) {
        i++;
    }
    // System.out.println(vStatment.aStackBlocoVerdadeiro);
    // Pegando Bloco Else
    vStackIF = new Stack<String>();
    vStackWHILE = new Stack<String>();
    vStackWasUltimoIF = new Stack<Boolean>();
    vStackWasUltimoWhile = new Stack<Boolean>();
    haveIF = false;
    haveWHILE = false;
    for (; i < pTokens.size(); i++) {
        String vStrToken = pTokens.get(i);
        if (vStrToken.equals(Constantes.DS_STM_IF)) {
            vStackIF.push(vStrToken);
            vStackWasUltimoWhile.push(false);
            vStackWasUltimoIF.push(true);
        }
        if (vStrToken.equals(Constantes.DS_STM_WHILE)) {
            vStackWHILE.push(vStrToken);
            vStackWasUltimoWhile.push(true);
            vStackWasUltimoIF.push(false);
        }
        if (vStrToken.equals(Constantes.DS_STM_ELSE) && vStackIF.isEmpty()) {
            vStatment.aStackBlocoFalso.add(vStrToken);
            break;
        }
        if (vStrToken.equals(Constantes.DS_STM_END)) {
            if (!vStackIF.isEmpty() && vStackWasUltimoIF.pop()) {
                vStackIF.pop();
                haveIF = true;
            }
            if (!vStackWHILE.isEmpty() && vStackWasUltimoWhile.pop()) {
                vStackWHILE.pop();
                haveWHILE = true;
            }
            if (vStackIF.isEmpty() && vStackWHILE.isEmpty()) {
                if (haveIF || haveWHILE) {
                    vStatment.aStackBlocoFalso.add(vStrToken);
                }
                break;
            }
        }
        vStatment.aStackBlocoFalso.add(vStrToken);
    }
    // System.out.println(vStatment.aStackBlocoFalso);
    return vStatment;
}
