private void renderModelItem(Listitem listItem, CSPath file) {
    Long timestamp = (Long) listItem.getPage().getAttribute("filemanager-timestamp");
    listItem.setValue(file);
    Listcell imageCell = new Listcell();
    imageCell.setParent(listItem);
    Listcell nameCell = new Listcell();
    nameCell.setParent(listItem);
    Listcell typeCell = new Listcell();
    typeCell.setParent(listItem);
    Listcell sizeCell = new Listcell();
    sizeCell.setParent(listItem);
    Listcell timeCell = new Listcell();
    timeCell.setParent(listItem);
    nameCell.setLabel(file.getName());
    if (file.getPhysicalFile().length() > 1000) {
        sizeCell.setLabel("" + file.getPhysicalFile().length() / 1000 + " KB");
    } else {
        sizeCell.setLabel("" + file.getPhysicalFile().length() + " bytes");
    }
    long lastMod = file.getPhysicalFile().lastModified();
    timeCell.setLabel(formatter.format(new Date(lastMod)));
    if (timestamp != null && lastMod > timestamp) {
        timeCell.setClass(LATE_STYLE_CLASS);
        imageCell.setClass(LATE_STYLE_CLASS);
        nameCell.setClass(LATE_STYLE_CLASS);
        typeCell.setClass(LATE_STYLE_CLASS);
        sizeCell.setClass(LATE_STYLE_CLASS);
    }
    if (file.isDirectory()) {
        if (ProjectSpec.isProjectDirectory(file)) {
            nameCell.setStyle("color: blue;");
        }
        listItem.setDraggable("Directory");
        listItem.setDroppable("Directory, File");
    } else {
        listItem.setDraggable("File");
    }
    String fileType = FileTypes.getFileType(file);
    String fileIcon = FileTypes.getFileIcon(file);
    typeCell.setLabel(fileType);
    Image image = new Image(fileIcon);
    image.setParent(imageCell);
    if (file.isHidden()) {
        image.setStyle(HIDDEN_FILE_STYLE);
        nameCell.setStyle(HIDDEN_FILE_STYLE);
        typeCell.setStyle(HIDDEN_FILE_STYLE);
        timeCell.setStyle(HIDDEN_FILE_STYLE);
        imageCell.setStyle(HIDDEN_FILE_STYLE);
        sizeCell.setStyle(HIDDEN_FILE_STYLE);
    }
    listItem.addEventListener("onDrop", new EventListener() {

        public void onEvent(Event event) throws Exception {
            CSPath destFile = (CSPath) ((Listitem) event.getTarget()).getValue();
            log.trace("In File Grid onDrop");
            DropEvent dropEvent = (DropEvent) event;
            Listitem listItem = (Listitem) dropEvent.getDragged();
            if (!listItem.isSelected()) {
                listItem.setSelected(true);
            }
            Set<Listitem> selectedItems = (Set<Listitem>) listItem.getListbox().getSelectedItems();
            for (Listitem li : selectedItems) {
                CSPath targetFile = (CSPath) li.getValue();
                log.trace("Moving " + targetFile.getName());
                boolean success = targetFile.moveTo(destFile);
                if (success) {
                    if (targetFile.isDirectory()) {
                        Treeitem item = getTreeItem(targetFile);
                        Treeitem destItem = getTreeItem(destFile);
                        moveTreeitem(item, destItem);
                    }
                } else {
                    displayError("Cannot move the file to that directory.  A File with that name already exists there or you do not have the privleges to move that file.");
                }
            }
            updateFileGrid();
            redrawTree();
        }
    });
    listItem.addEventListener("onClick", new EventListener() {

        CSPath lastClicked = null;

        public void onEvent(Event event) throws Exception {
            Listitem clickedItem = (Listitem) event.getTarget();
            CSPath targetFile = (CSPath) clickedItem.getValue();
            if (lastClicked != null && lastClicked.equals(targetFile)) {
                if (targetFile.isDirectory()) {
                    setCurrentDirectory(targetFile);
                } else if (targetFile.isFile()) {
                    openEditor(targetFile);
                }
                lastClicked = null;
            } else {
                lastClicked = targetFile;
            }
        }
    });
}
