@Test
public void testDisable() throws IOException {
    assertFalse(Log.isDisabled());
    Log.print("test test");
    assertEquals("test test", OUTPUT.toString());
    OUTPUT.reset();
    Log.printLine("test test");
    assertEquals("test test" + LINE_SEPARATOR, OUTPUT.toString());
    OUTPUT.reset();
    Log.format("test %s test", "test");
    assertEquals("test test test", OUTPUT.toString());
    OUTPUT.reset();
    Log.formatLine("test %s test", "test");
    assertEquals("test test test" + LINE_SEPARATOR, OUTPUT.toString());
    OUTPUT.reset();
    Log.disable();
    assertTrue(Log.isDisabled());
    Log.print("test test");
    assertEquals("", OUTPUT.toString());
    OUTPUT.reset();
    Log.printLine("test test");
    assertEquals("", OUTPUT.toString());
    OUTPUT.reset();
    Log.format("test %s test", "test");
    assertEquals("", OUTPUT.toString());
    OUTPUT.reset();
    Log.formatLine("test %s test", "test");
    assertEquals("", OUTPUT.toString());
    OUTPUT.reset();
    Log.enable();
    assertFalse(Log.isDisabled());
    Log.print("test test");
    assertEquals("test test", OUTPUT.toString());
    OUTPUT.reset();
    Log.printLine("test test");
    assertEquals("test test" + LINE_SEPARATOR, OUTPUT.toString());
    OUTPUT.reset();
    Log.format("test %s test", "test");
    assertEquals("test test test", OUTPUT.toString());
    OUTPUT.reset();
    Log.formatLine("test %s test", "test");
    assertEquals("test test test" + LINE_SEPARATOR, OUTPUT.toString());
    OUTPUT.reset();
}
