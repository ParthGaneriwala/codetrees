public void initializePackageContents() {
    if (isInitialized)
        return;
    isInitialized = true;
    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    // Obtain other dependent packages
    DomainPackage theDomainPackage = (DomainPackage) EPackage.Registry.INSTANCE.getEPackage(DomainPackage.eNS_URI);
    CorePackage theCorePackage = (CorePackage) EPackage.Registry.INSTANCE.getEPackage(CorePackage.eNS_URI);
    // Create type parameters
    // Set bounds for type parameters
    // Add supertypes to classes
    controlAreaEClass.getESuperTypes().add(theCorePackage.getPowerSystemResource());
    // Initialize classes and features; add operations and parameters
    initEClass(altGeneratingUnitMeasEClass, AltGeneratingUnitMeas.class, "AltGeneratingUnitMeas", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAltGeneratingUnitMeas_Priority(), theDomainPackage.getInteger(), null, "priority", null, 0, 1, AltGeneratingUnitMeas.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(altTieMeasEClass, AltTieMeas.class, "AltTieMeas", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAltTieMeas_Priority(), theDomainPackage.getInteger(), null, "priority", null, 0, 1, AltTieMeas.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(controlAreaEClass, ControlArea.class, "ControlArea", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getControlArea_NetInterchange(), theDomainPackage.getActivePower(), null, "netInterchange", null, 0, 1, ControlArea.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getControlArea_PTolerance(), theDomainPackage.getActivePower(), null, "pTolerance", null, 0, 1, ControlArea.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEAttribute(getControlArea_Type(), this.getControlAreaTypeKind(), "type", null, 0, 1, ControlArea.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(controlAreaGeneratingUnitEClass, ControlAreaGeneratingUnit.class, "ControlAreaGeneratingUnit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(tieFlowEClass, TieFlow.class, "TieFlow", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTieFlow_PositiveFlowIn(), theDomainPackage.getBoolean(), null, "positiveFlowIn", null, 0, 1, TieFlow.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    // Initialize enums and add enum literals
    initEEnum(controlAreaTypeKindEEnum, ControlAreaTypeKind.class, "ControlAreaTypeKind");
    addEEnumLiteral(controlAreaTypeKindEEnum, ControlAreaTypeKind.AGC);
    addEEnumLiteral(controlAreaTypeKindEEnum, ControlAreaTypeKind.FORECAST);
    addEEnumLiteral(controlAreaTypeKindEEnum, ControlAreaTypeKind.INTERCHANGE);
}
