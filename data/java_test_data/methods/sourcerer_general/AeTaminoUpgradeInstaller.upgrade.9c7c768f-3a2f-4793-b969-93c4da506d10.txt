public void upgrade() throws AeStorageException {
    // $NON-NLS-1$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.UPGRADING_TAMINO"));
    // $NON-NLS-1$//$NON-NLS-2$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.URL"), new Object[] { getParams().get("URL") });
    // $NON-NLS-1$//$NON-NLS-2$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.DATABASE"), new Object[] { getParams().get("Database") });
    // $NON-NLS-1$//$NON-NLS-2$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.COLLECTION"), new Object[] { getParams().get("Collection") });
    AeDBVersion desiredVersion = null;
    AeDBVersion currentVersion = new AeDBVersion(getCurrentDBVersion());
    // $NON-NLS-1$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.DATABASE_IS_VERSION"), new Object[] { currentVersion.getVersion() });
    if (currentVersion.isEnterprise()) {
        desiredVersion = new AeDBVersion(getEnterpriseDBVersion());
    } else {
        desiredVersion = new AeDBVersion(getDBVersion());
    }
    // $NON-NLS-1$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.UPGRADING_TO_DB_VERSION"), new Object[] { desiredVersion.getVersion() });
    // Stop if the current version and the desired version are the same.
    if (currentVersion.equals(desiredVersion)) {
        // $NON-NLS-1$
        output(AeMessages.getString("AeTaminoUpgradeInstaller.DATABASE_IS_UPTODATE"));
        return;
    }
    output(// $NON-NLS-1$
    AeMessages.getString("AeTaminoUpgradeInstaller.GETTING_CURRENT_SCHEMA_IN_COLLECTION"), new Object[] { getCollectionName() });
    AeTaminoSchema currentSchema = getCurrentSchema();
    // Get the set of patches found in the patch directory.
    SortedSet patches = loadPatches(getCollectionName(), currentSchema.getSchemaName());
    // Now apply each patch that is in the desired version range.
    for (Iterator iter = patches.iterator(); iter.hasNext(); ) {
        AeTaminoPatch patch = (AeTaminoPatch) iter.next();
        // Only apply the patch if it is greater than the current version.
        if (patch.getVersion().compareTo(currentVersion) > 0) {
            // Only apply the patch if it is less than or equal to the desired version.
            if (patch.getVersion().compareTo(desiredVersion) <= 0) {
                // $NON-NLS-1$
                output(AeMessages.getString("AeTaminoUpgradeInstaller.APPLYING_PATCH"), new Object[] { patch.getVersion().getVersion() });
                patch.apply(getCollectionName(), currentSchema.getSchemaName());
            }
        }
    }
    // $NON-NLS-1$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.ALL_PATCHES_APPLIED"));
    // Set the final schema's collection name (to use whatever collection name is installed).
    // $NON-NLS-1$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.DEFINING_FINAL_SCHEMA"));
    AeTaminoSchema finalSchema = getSchema();
    finalSchema.setCollectionName(getCollectionName());
    finalSchema.setSchemaName(currentSchema.getSchemaName());
    defineSchema(finalSchema);
    // $NON-NLS-1$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.FINAL_SCHEMA_DEFINED"));
    // Final set of the DB version in case the upgrade did not require an iterative patch.
    setCurrentDBVersion(desiredVersion);
    // $NON-NLS-1$
    output(AeMessages.getString("AeTaminoUpgradeInstaller.DATABASE_IS_NOW"), new Object[] { getCurrentDBVersion() });
    // $NON-NLS-1$
    output("All done.");
}
