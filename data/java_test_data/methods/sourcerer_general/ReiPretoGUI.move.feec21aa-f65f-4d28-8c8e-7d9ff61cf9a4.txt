public void move(Casa casaOrigem, Casa casaDestino, Tabuleiro tabuleiro) throws PosicaoInvalidaException {
    if ((x != 4) && (y != 0))
        movimentou = true;
    Vector casasPossiveis = new Vector();
    Vector casasTemp = new Vector();
    // Insere no vetor para logo abaixo, no while, verificar se a casa est� dispon�vel para mover.
    casasTemp.add(tabuleiro.getCasa(x + 1, y + 1));
    casasTemp.add(tabuleiro.getCasa(x + 1, y - 1));
    casasTemp.add(tabuleiro.getCasa(x + 1, y));
    casasTemp.add(tabuleiro.getCasa(x - 1, y + 1));
    casasTemp.add(tabuleiro.getCasa(x - 1, y - 1));
    casasTemp.add(tabuleiro.getCasa(x - 1, y));
    casasTemp.add(tabuleiro.getCasa(x, y + 1));
    casasTemp.add(tabuleiro.getCasa(x, y - 1));
    // Poss�veis posi��es.
    Casa casaTemp = null;
    Iterator it = casasTemp.iterator();
    while (it.hasNext()) {
        casaTemp = (Casa) it.next();
        if (casaTemp != null)
            if (!((CasaGUI) casaTemp).isAtaqueBranco() && !casaTemp.temPeca(Color.BLACK)) {
                casasPossiveis.add(casaTemp);
            }
    }
    // verifica se pode fazer roque do lado direito.
    if ((!isMovimentou()) && (casaDestino.getPosicaoY() == 0) && (casaDestino.getPosicaoX() == 6) && !((TabuleiroGUI) tabuleiro).isChequePreto()) {
        Peca pecaTemp = tabuleiro.getCasa(7, 0).getPeca();
        Casa casa6_0 = tabuleiro.getCasa(6, 0);
        Casa casa5_0 = tabuleiro.getCasa(5, 0);
        if ((pecaTemp != null) && (pecaTemp instanceof TorrePretaGUI) && (!((TorrePretaGUI) pecaTemp).isMovimentou()) && (casa6_0.getPeca() == null) && !((CasaGUI) casa6_0).isAtaqueBranco() && (casa5_0.getPeca() == null) && !((CasaGUI) casa5_0).isAtaqueBranco()) {
            casasPossiveis.add(tabuleiro.getCasa(6, 0));
        }
    }
    // verifica se pode fazer roque do lado esquerdo.
    if ((!isMovimentou()) && (casaDestino.getPosicaoY() == 0) && (casaDestino.getPosicaoX() == 2) && !((TabuleiroGUI) tabuleiro).isChequePreto()) {
        Peca pecaTemp = tabuleiro.getCasa(0, 0).getPeca();
        Casa casa2_0 = tabuleiro.getCasa(2, 0);
        Casa casa3_0 = tabuleiro.getCasa(3, 0);
        Casa casa1_0 = tabuleiro.getCasa(1, 0);
        if ((pecaTemp != null) && (pecaTemp instanceof TorrePretaGUI) && (!((TorrePretaGUI) pecaTemp).isMovimentou()) && (casa2_0.getPeca() == null) && !((CasaGUI) casa2_0).isAtaqueBranco() && (casa3_0.getPeca() == null) && !((CasaGUI) casa3_0).isAtaqueBranco() && (casa1_0.getPeca() == null)) {
            casasPossiveis.add(tabuleiro.getCasa(2, 0));
        }
    }
    if (casasPossiveis.contains(casaDestino)) {
        if (!isMovimentou() && (casaDestino.getPosicaoX() == 6) && (casaDestino.getPosicaoY() == 0)) {
            casaOrigem.removePeca();
            casaDestino.setPeca(this);
            Peca torre = tabuleiro.getCasa(7, 0).getPeca();
            tabuleiro.getCasa(5, 0).setPeca(torre);
            tabuleiro.getCasa(7, 0).removePeca();
            movimentou = true;
            TabuleiroGUI tabuleiroTemp = (TabuleiroGUI) tabuleiro;
            tabuleiroTemp.removeAllAtaques();
            tabuleiroTemp.atualizaAtaqueBranco();
            tabuleiroTemp.atualizaAtaquePreto();
        } else if (!isMovimentou() && (casaDestino.getPosicaoX() == 2) && (casaDestino.getPosicaoY() == 0)) {
            casaOrigem.removePeca();
            casaDestino.setPeca(this);
            Peca torre = tabuleiro.getCasa(0, 0).getPeca();
            tabuleiro.getCasa(3, 0).setPeca(torre);
            tabuleiro.getCasa(0, 0).removePeca();
            movimentou = true;
            TabuleiroGUI tabuleiroTemp = (TabuleiroGUI) tabuleiro;
            tabuleiroTemp.removeAllAtaques();
            tabuleiroTemp.atualizaAtaqueBranco();
            tabuleiroTemp.atualizaAtaquePreto();
        } else {
            Peca pecaTemp = casaDestino.getPeca();
            casaOrigem.removePeca();
            casaDestino.removePeca();
            casaDestino.setPeca(this);
            movimentou = true;
            TabuleiroGUI tabuleiroTemp = (TabuleiroGUI) tabuleiro;
            tabuleiroTemp.removeAllAtaques();
            tabuleiroTemp.atualizaAtaqueBranco();
            tabuleiroTemp.atualizaAtaquePreto();
            if (tabuleiroTemp.isChequeBranco()) {
                casaOrigem.setPeca(this);
                casaDestino.removePeca();
                casaDestino.setPeca(pecaTemp);
                tabuleiroTemp.removeAllAtaques();
                tabuleiroTemp.atualizaAtaqueBranco();
                tabuleiroTemp.atualizaAtaquePreto();
                throw new PosicaoInvalidaException("Rei branco em cheque");
            }
        }
    } else {
        throw new PosicaoInvalidaException("Rei - > Posi��o inv�lida");
    }
}
