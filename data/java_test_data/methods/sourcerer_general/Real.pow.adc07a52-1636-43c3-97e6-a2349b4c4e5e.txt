public void pow(Real a) {
    if ((a.exponent == 0 && a.mantissa == 0)) {
        {
            this.mantissa = ONE.mantissa;
            this.exponent = ONE.exponent;
            this.sign = ONE.sign;
        }
        ;
        return;
    }
    if ((this.exponent < 0 && this.mantissa != 0) || (a.exponent < 0 && a.mantissa != 0)) {
        makeNan();
        return;
    }
    if (a.compare(ONE) == 0)
        return;
    if ((a.exponent < 0 && a.mantissa == 0)) {
        {
            tmp1.mantissa = this.mantissa;
            tmp1.exponent = this.exponent;
            tmp1.sign = this.sign;
        }
        ;
        tmp1.abs();
        int test = tmp1.compare(ONE);
        if (test > 0) {
            if ((a.sign == 0))
                makeInfinity(0);
            else
                makeZero();
        } else if (test < 0) {
            if ((a.sign != 0))
                makeInfinity(0);
            else
                makeZero();
        } else {
            makeNan();
        }
        return;
    }
    if ((this.exponent == 0 && this.mantissa == 0)) {
        if ((this.sign == 0)) {
            if ((a.sign == 0))
                makeZero();
            else
                makeInfinity(0);
        } else {
            if (a.isIntegral() && a.isOdd()) {
                if ((a.sign == 0))
                    makeZero(1);
                else
                    makeInfinity(1);
            } else {
                if ((a.sign == 0))
                    makeZero();
                else
                    makeInfinity(0);
            }
        }
        return;
    }
    if ((this.exponent < 0 && this.mantissa == 0)) {
        if ((this.sign == 0)) {
            if ((a.sign == 0))
                makeInfinity(0);
            else
                makeZero();
        } else {
            if (a.isIntegral()) {
                if (a.isOdd()) {
                    if ((a.sign == 0))
                        makeInfinity(1);
                    else
                        makeZero(1);
                } else {
                    if ((a.sign == 0))
                        makeInfinity(0);
                    else
                        makeZero();
                }
            } else {
                makeNan();
            }
        }
        return;
    }
    if (a.isIntegral() && a.exponent <= 0x4000001e) {
        pow(a.toInteger());
        return;
    }
    byte s = 0;
    if ((this.sign != 0)) {
        if (a.isIntegral()) {
            if (a.isOdd())
                s = 1;
        } else {
            makeNan();
            return;
        }
        sign = 0;
    }
    {
        tmp1.mantissa = a.mantissa;
        tmp1.exponent = a.exponent;
        tmp1.sign = a.sign;
    }
    ;
    if (tmp1.exponent <= 0x4000001e) {
        // For increased accuracy, exponentiate with integer part of
        // exponent by successive squaring
        // (I really don't know why this works)
        {
            tmp2.mantissa = tmp1.mantissa;
            tmp2.exponent = tmp1.exponent;
            tmp2.sign = tmp1.sign;
        }
        ;
        tmp2.floor();
        {
            tmp3.mantissa = this.mantissa;
            tmp3.exponent = this.exponent;
            tmp3.sign = this.sign;
        }
        ;
        tmp3.pow(tmp2.toInteger());
        tmp1.sub(tmp2);
    } else {
        {
            tmp3.mantissa = ONE.mantissa;
            tmp3.exponent = ONE.exponent;
            tmp3.sign = ONE.sign;
        }
        ;
    }
    // Do log2 and maintain accuracy
    int e = lnInternal();
    // log2(e)
    {
        tmp2.sign = (byte) 0;
        tmp2.exponent = 0x40000000;
        tmp2.mantissa = 0x5c551d94ae0bf85dL;
    }
    // log2(e)
    ;
    long extra = mul128(0, tmp2, 0xdf43ff68348e9f44L);
    tmp2.assign(e);
    extra = add128(extra, tmp2, 0);
    // Do exp2 of this multiplied by (fractional part of) exponent
    extra = tmp1.mul128(0, this, extra);
    tmp1.exp2Internal(extra);
    {
        this.mantissa = tmp1.mantissa;
        this.exponent = tmp1.exponent;
        this.sign = tmp1.sign;
    }
    ;
    mul(tmp3);
    if (!(this.exponent < 0 && this.mantissa != 0))
        sign = s;
}
