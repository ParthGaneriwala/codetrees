// $ANTLR start "case_label"
public final MyGrammarParser.case_label_return case_label() throws RecognitionException {
    MyGrammarParser.case_label_return retval = new MyGrammarParser.case_label_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token RET86 = null;
    MyGrammarParser.value_return value85 = null;
    MyGrammarParser.value_return value87 = null;
    CommonTree RET86_tree = null;
    RewriteRuleTokenStream stream_RET = new RewriteRuleTokenStream(adaptor, "token RET");
    RewriteRuleSubtreeStream stream_value = new RewriteRuleSubtreeStream(adaptor, "rule value");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:211:2: ( value ( RET value )? -> ^( CASE_LABEL value ( value )? ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:211:5: value ( RET value )?
        {
            pushFollow(FOLLOW_value_in_case_label1595);
            value85 = value();
            state._fsp--;
            stream_value.add(value85.getTree());
            // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:211:11: ( RET value )?
            int alt17 = 2;
            int LA17_0 = input.LA(1);
            if ((LA17_0 == RET)) {
                alt17 = 1;
            }
            switch(alt17) {
                case 1:
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:211:12: RET value
                    {
                        RET86 = (Token) match(input, RET, FOLLOW_RET_in_case_label1598);
                        stream_RET.add(RET86);
                        pushFollow(FOLLOW_value_in_case_label1600);
                        value87 = value();
                        state._fsp--;
                        stream_value.add(value87.getTree());
                    }
                    break;
            }
            // AST REWRITE
            // elements: value, value
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 211:24: -> ^( CASE_LABEL value ( value )? )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:211:27: ^( CASE_LABEL value ( value )? )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(CASE_LABEL, "CASE_LABEL"), root_1);
                    adaptor.addChild(root_1, stream_value.nextTree());
                    // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:211:46: ( value )?
                    if (stream_value.hasNext()) {
                        adaptor.addChild(root_1, stream_value.nextTree());
                    }
                    stream_value.reset();
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
