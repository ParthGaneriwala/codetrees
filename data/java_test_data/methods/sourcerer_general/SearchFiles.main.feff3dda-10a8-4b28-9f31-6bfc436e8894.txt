public static void main(String[] args) throws Exception {
    IndexReader reader = IndexReader.open("index");
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in, "UTF-8"));
    Searcher searcher = new IndexSearcher(reader);
    Analyzer analyzer = new SnowballAnalyzer("English", STOP_WORDS.toArray(new String[STOP_WORDS.size()]));
    QueryParser parser = new QueryParser("contents", analyzer);
    while (true) {
        System.out.println("Enter query: ");
        System.out.print(">> ");
        String line = br.readLine().trim();
        System.out.println();
        if (line == null || line.length() <= 0)
            break;
        String queryFormat = "";
        while (true) {
            System.out.println("Select Type of Query: ");
            System.out.println("1) Baseline Query ");
            System.out.println("2) pathBoosted Query ");
            System.out.println("3) buildBoostedPathBaselineQuery Query ");
            System.out.println("4) buildPathQuery Query ");
            System.out.print(">> ");
            int queryType;
            try {
                queryType = Integer.parseInt(br.readLine().trim());
                if (queryType < 1 || queryType > 4)
                    throw new Exception("Out of range");
            } catch (Exception e) {
                System.out.println("Please input a valid integer...");
                br.readLine();
                continue;
            }
            System.out.println();
            switch(queryType) {
                case 1:
                    queryFormat = QueryUtils.buildBaselineQuery(line);
                    break;
                case 2:
                    queryFormat = QueryUtils.buildBoostedPathQuery(line);
                    break;
                case 3:
                    queryFormat = QueryUtils.buildBoostedPathBaselineQuery(line);
                    break;
                case 4:
                    queryFormat = QueryUtils.buildPathQuery(line);
                    break;
                default:
                    assert true : "This can't happen";
            }
            break;
        }
        System.out.println(queryFormat);
        Query query = parser.parse(queryFormat);
        QueryUtils.doPagingSearch(br, searcher, query, line, 5);
    }
    reader.close();
    br.close();
    File tempDir = new File("." + FSEP + "tmp");
    if (tempDir.exists())
        FileUtils.removeDir(tempDir);
    System.out.println("Bye!");
}
