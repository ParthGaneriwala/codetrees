// decompose composit cookies values
// e.g. PREF=ID=ec1502047692c217:TM=1256251566:LM=1256251566:S=wfMouMqDAS9maRZa
static List<KeyValuePair> decomposeCookies(List<KeyValuePair> cookies) {
    int i;
    Iterator<KeyValuePair> it = cookies.iterator();
    List<KeyValuePair> result = new LinkedList<KeyValuePair>();
    while (it.hasNext()) {
        KeyValuePair kv = it.next();
        // System.out.println("Original Cookie: "+kv);
        String[] terms = kv.value.split(":");
        if (terms.length == 1)
            terms = kv.value.split("&");
        if (terms.length == 1) {
            // this is a simple cookie
            String v = removeTrailingEqualSigns(kv.value);
            String[] ss = v.split("=", 2);
            KeyValuePair k;
            if (ss.length == 1)
                k = new KeyValuePair(kv.key, ss[0]);
            else
                k = new KeyValuePair(ss[0], ss[1]);
            result.add(k);
            continue;
        }
        // Further check if we have single '=' in each decomposed cookie
        boolean true_composit = true;
        // start from 1 because the first part may just be value
        for (i = 1; i < terms.length; i++) {
            if (terms[i].indexOf('=') == -1) {
                true_composit = false;
            }
        }
        if (!true_composit) {
            // return the simple cookie directly
            result.add(kv);
            continue;
        }
        // for (i=0; i<terms.length; i++)
        // System.out.println("terms " +i+ "=" + terms[i]);
        int start_index = 0;
        if (terms[0].indexOf('=') == -1) {
            result.add(new KeyValuePair(kv.key, terms[0]));
            start_index = 1;
        }
        // here we get truely composit cookies
        for (i = start_index; i < terms.length; i++) {
            String[] ss = terms[i].split("=");
            // some cookie may have empty value
            result.add(new KeyValuePair(ss[0], ss.length > 1 ? ss[1] : ""));
        }
    }
    return result;
}
