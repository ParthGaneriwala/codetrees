public static void packOneBitPixels(byte[] in, int inByte, byte[] out, int base, int outPixel, int len) {
    int src_index = inByte;
    // allow for outPixel >= 8
    base += outPixel / 8;
    outPixel %= 8;
    // number of full bytes to copy, excluding possible partial bytes at the start/end
    int count = outPixel == 0 ? len / 8 : (len - (8 - outPixel)) / 8;
    int work = 0;
    // first index to start filling whole bytes at
    // if the input is not byte-aligned, this will be the second byte
    int start_idx = outPixel == 0 ? 0 : 1;
    int dest_index = base + (outPixel == 0 ? 0 : 1);
    // the number of bits to fill in the leading byte are 'outPixel' and all
    // bits to its right, or the length - whichever is smaller
    int leading_bits = (len < (8 - outPixel)) ? len : 8 - outPixel;
    if (outPixel != 0) {
        // first pixel to set is 'outPixel' bits from the MSB
        int first_pixel = 7 - outPixel;
        // fill in bits in leading byte if the first pixel isn't byte-aligned
        for (int i = 0; i < leading_bits; i++) {
            if (in[src_index++] == 0)
                out[base] &= ~(1 << (first_pixel - i));
            else
                out[base] |= 1 << (first_pixel - i);
        }
    }
    for (int i = start_idx; i < count; i++) {
        work = 0;
        if ((in[src_index++]) != 0) {
            work += 128;
        }
        if ((in[src_index++]) != 0) {
            work += 64;
        }
        if ((in[src_index++]) != 0) {
            work += 32;
        }
        if ((in[src_index++]) != 0) {
            work += 16;
        }
        if ((in[src_index++]) != 0) {
            work += 8;
        }
        if ((in[src_index++]) != 0) {
            work += 4;
        }
        if ((in[src_index++]) != 0) {
            work += 2;
        }
        if ((in[src_index++]) != 0) {
            work += 1;
        }
        out[dest_index + i] = (byte) work;
    }
    // number of pixels beyond the last full byte
    int remainder;
    if (outPixel == 0)
        remainder = len % 8;
    else
        remainder = len - (8 - outPixel) % 8;
    remainder %= 8;
    // index of the last byte to fill in
    int last_index = base + count;
    // fill in bits
    if (remainder > 0) {
        for (int i = 0; i < remainder; i++) {
            if (in[src_index++] == 0)
                out[last_index] &= ~(1 << (7 - i));
            else
                out[last_index] |= 1 << (7 - i);
        }
    }
}
