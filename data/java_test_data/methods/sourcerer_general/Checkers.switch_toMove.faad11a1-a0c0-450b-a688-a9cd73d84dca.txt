public void switch_toMove() {
    int score;
    int[] result = new int[4];
    int[] cMove;
    int[] counter = new int[1];
    Date date;
    counter[0] = 0;
    // black just made his move
    displayBoard();
    if (this.toMove == BLACK && whitePlayer.getSelectedIndex() == 1) {
        this.toMove = WHITE;
        updateMoveLabel();
        date = new Date();
        long time = date.getTime();
        score = Engine.MiniMax(position, 0, getLevel(maxDepth.getSelectedItem()), result, this.toMove, counter);
        date = new Date();
        time = date.getTime() - time;
        print_status(score, counter[0], time);
        if (result[0] == 0 && result[1] == 0)
            loser = WHITE;
        else {
            Move.move_board(position, result);
            if (running && loser == EMPTY && blackPlayer.getSelectedIndex() == 1)
                switch_toMove();
            this.toMove = BLACK;
        }
    } else // white just made his move
    if (this.toMove == WHITE && blackPlayer.getSelectedIndex() == 1) {
        this.toMove = BLACK;
        updateMoveLabel();
        date = new Date();
        long time = date.getTime();
        score = Engine.MiniMax(position, 0, getLevel(maxDepth.getSelectedItem()), result, this.toMove, counter);
        date = new Date();
        time = date.getTime() - time;
        print_status(score, counter[0], time);
        if (result[0] == 0 && result[1] == 0)
            loser = BLACK;
        else {
            Move.move_board(position, result);
            if (running && loser == EMPTY && whitePlayer.getSelectedIndex() == 1)
                switch_toMove();
            this.toMove = WHITE;
        }
    } else {
        if (this.toMove == WHITE)
            this.toMove = BLACK;
        else
            this.toMove = WHITE;
    }
    if (Move.noMovesLeft(position, this.toMove)) {
        if (this.toMove == WHITE)
            loser = WHITE;
        else
            loser = BLACK;
    }
    updateMoveLabel();
    displayBoard();
}
