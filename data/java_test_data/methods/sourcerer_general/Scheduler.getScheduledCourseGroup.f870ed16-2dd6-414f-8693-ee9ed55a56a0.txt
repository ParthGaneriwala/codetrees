private ArrayList<ScheduledCourseGroup> getScheduledCourseGroup(ArrayList<SchedulerCourse> mySemester, int term, String sessionType) {
    Semester semester = new Semester();
    semester.setYear(term);
    semester.setSessionType(sessionType);
    String courseNum;
    String degreeProgram;
    ArrayList<ScheduledCourseGroup> mySchedGroup = new ArrayList<ScheduledCourseGroup>();
    ArrayList<Course> myCourses;
    List<CourseWrapper> myTempC;
    CourseWrapper myCW = null;
    for (SchedulerCourse myCourse : mySemester) {
        myCourses = new ArrayList<Course>();
        for (int x = 0; x < myCourse.numOfClasses; x++) {
            courseNum = myCourse.courseNums[x];
            degreeProgram = myCourse.degreePrograms[x];
            myTempC = CourseWrapper.getCourseWrappers(degreeProgram, courseNum, semester);
            if (myTempC.size() >= 1)
                myCW = myTempC.get(0);
            // Found a course in the database
            if (myCW != null) {
                myCourses.add(myCW.getCourse());
            } else // Create a non existing course not in the database
            // and set courseId to negative one.
            {
                Course myNewCourse = new Course();
                myNewCourse.setCourseId(-1);
                myNewCourse.setCourseNum(courseNum);
                myNewCourse.setCredits(Integer.toString(myCourse.credits[x]));
                myNewCourse.setDegreeProgram(degreeProgram);
                myNewCourse.setDescription("Times for this class is not available");
                myCourses.add(myNewCourse);
            }
            myCW = null;
        }
        ScheduledCourseGroup myNewCourseGroup = new ScheduledCourseGroup(myCourses);
        mySchedGroup.add(myNewCourseGroup);
    }
    return mySchedGroup;
}
