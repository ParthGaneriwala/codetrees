public OnDiskCompactProbTree getProbTree(int clusterid) {
    Ptr ptr = Ptr.fromLong(clusterPointers.get(clusterid));
    if (ptr == null)
        return null;
    int position = ptr.offset;
    // it takes at least two bytes per record
    int maxSize = ptr.length / 2;
    int[] factors = new int[maxSize];
    float[] probs = new float[maxSize];
    int numFactors = 0;
    long totalCount = 0;
    while (position < ptr.offset + ptr.length) {
        int factorIdx = PackedInteger.readInt(data, position);
        int intLen = PackedInteger.getReadIntLength(data, position);
        position += intLen;
        long count = PackedInteger.readLong(data, position);
        intLen = PackedInteger.getReadLongLength(data, position);
        position += intLen;
        factors[numFactors] = descriptor.getCompactFactors(factorIdx);
        probs[numFactors] = count;
        totalCount += count;
        ++numFactors;
    }
    if (numFactors == 0 || totalCount == 0) {
        System.out.print("");
    }
    if (numFactors < maxSize) {
        factors = Arrays.copyOf(factors, numFactors);
        probs = Arrays.copyOf(probs, numFactors);
    }
    long clusterCount = descriptor.getClusterCount(clusterid);
    OnDiskCompactProbTree tree = new OnDiskCompactProbTree(factors, probs, 1.0 / clusterCount);
    tree.normalize();
    return tree;
}
