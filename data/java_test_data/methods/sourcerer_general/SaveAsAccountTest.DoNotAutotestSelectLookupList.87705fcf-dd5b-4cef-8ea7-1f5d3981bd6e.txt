public void DoNotAutotestSelectLookupList() throws Exception {
    int totalToRunCount = 5;
    int maxThreads = 1;
    List<TransactionTask> renderTasks = new ArrayList<TransactionTask>();
    for (int i = 0; i < totalToRunCount; i++) {
        CRMConnection crmConnection = new CRMConnection();
        crmConnection.setUrl(crm.getUrl());
        crmConnection.setId(crm.getId());
        crmConnection.setSystemId(crm.getSystemId());
        crmConnection.setCode(crm.getCode());
        crmConnection.setAutoCommit(false);
        if (i == 1) {
            {
                // Add Meta Info with fields required
                ArrayList<String> meta = new ArrayList<String>();
                meta.add("code");
                meta.add("description");
                crmConnection.setTransactionMeta(meta);
                // Find the lookup stage
                DataRecord record = new DataRecord();
                record.setName("lookupAccountStageList");
                record.setAction(DataRecord.SELECT);
                record.addField("tableName", "lookup_account_stage");
                record.addField("description", "Requested");
                crmConnection.save(record);
            }
        } else if (i == 2) {
            // Add Meta Info with fields required
            ArrayList<String> meta = new ArrayList<String>();
            meta.add("userId");
            meta.add("nameLast");
            crmConnection.setTransactionMeta(meta);
            // Find the sales person
            DataRecord record = new DataRecord();
            record.setName("contactList");
            record.setAction(DataRecord.SELECT);
            record.addField("employeesOnly", "1");
            record.addField("lastName", "ConnectSales");
            crmConnection.save(record);
        } else if (i == 3) {
            // Add Meta Info with fields required
            ArrayList<String> meta = new ArrayList<String>();
            meta.add("orgId");
            // meta.add("name");
            crmConnection.setTransactionMeta(meta);
            // Find the account
            DataRecord record = new DataRecord();
            record.setName("accountList");
            record.setAction(DataRecord.SELECT);
            record.addField("custom1", "49");
            crmConnection.save(record);
        } else if (i == 4) {
            // Add Meta Info with fields required
            ArrayList<String> meta = new ArrayList<String>();
            meta.add("code");
            meta.add("description");
            crmConnection.setTransactionMeta(meta);
            // Find the lookup stage
            DataRecord record = new DataRecord();
            record.setName("lookupAccountTypesList");
            record.setAction(DataRecord.SELECT);
            record.addField("tableName", "lookup_account_types");
            record.addField("description", "Beauty & Fitness");
            crmConnection.save(record);
        } else {
            // Update test...
            int orgId = -1;
            String orgName = null;
            // Add Meta Info with fields required
            ArrayList<String> meta = new ArrayList<String>();
            meta.add("id");
            meta.add("name");
            crmConnection.setTransactionMeta(meta);
            // Find the account id
            DataRecord record = new DataRecord();
            record.setName("accountList");
            record.setAction(DataRecord.SELECT);
            record.addField("custom1", "49");
            crmConnection.save(record);
            orgId = Integer.parseInt(crmConnection.getResponseValue("orgId"));
            orgName = crmConnection.getResponseValue("name");
            assertTrue("An orgId must exist", orgId > -1);
            DataRecord account = new DataRecord();
            account.setAction(DataRecord.UPDATE);
            account.setName("account");
            account.addField("id", orgId);
            account.addField("name", orgName);
            account.addField("enteredBy", "$U{default}");
            account.addField("modifiedBy", "$U{default}");
            // Set the stage of the account
            account.addField("stageName", "Unclaimed");
            // Assumed value... probably need to verify.
            account.addField("stageId", 1);
            crmConnection.save(record);
        }
        renderTasks.add(new TransactionTask(crmConnection));
    }
    ExecutorService executor = Executors.newFixedThreadPool(maxThreads);
    // NOTE: this wrapper fix is for Java 1.5
    final Collection<Callable<CRMConnection>> wrapper = Collections.<Callable<CRMConnection>>unmodifiableCollection(renderTasks);
    System.out.println("Executing...");
    List<Future<CRMConnection>> futures = executor.invokeAll(wrapper);
    // Wait for the results
    Iterator<TransactionTask> taskIterator = renderTasks.iterator();
    for (Future<CRMConnection> f : futures) {
        TransactionTask task = taskIterator.next();
        CRMConnection responseConnection = f.get();
        assertFalse("API reported a transaction error: " + responseConnection.getLastResponse(), responseConnection.hasError());
        System.out.println("SaveAsAccountTest-> ResponseValue <code>: " + responseConnection.getResponseValue("code"));
        System.out.println("SaveAsAccountTest-> ResponseValue <description>: " + responseConnection.getResponseValue("description"));
        System.out.println("SaveAsAccountTest-> ResponseValue <userId>: " + responseConnection.getResponseValue("userId"));
        System.out.println("SaveAsAccountTest-> ResponseValue <orgId>: " + responseConnection.getResponseValue("orgId"));
        System.out.println("SaveAsAccountTest-> ResponseValue <name>: " + responseConnection.getResponseValue("name"));
        System.out.println("");
        assertTrue("Did not get just 1 record, received: " + responseConnection.getRecordCount(), responseConnection.getRecordCount() == 1);
    }
    executor.shutdown();
}
