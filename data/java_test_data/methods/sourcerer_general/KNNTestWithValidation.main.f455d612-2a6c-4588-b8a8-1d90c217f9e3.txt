public static void main(String[] args) {
    // read in file
    File f;
    String[][] training;
    try {
        // this is the training data
        f = new File("C:/z4xNoSpaces/synthData/comparison/GAM/GAMZTraining.csv");
        FileReader in = new FileReader(f);
        CSVParser csvp = new CSVParser(in);
        training = csvp.getAllValues();
    } catch (FileNotFoundException fnfe) {
        throw new RuntimeException("No file!  " + fnfe.getMessage());
    } catch (IOException ioe) {
        throw new RuntimeException("IO Exception!  " + ioe.getMessage());
    }
    // to see if leaving one or two invariants out improves classification (Auroop from ORNL's suggestion)
    boolean[] include = new boolean[] { true, true, true, true, true, true, true };
    int numInvsUsed = 0;
    for (int i = 0; i < include.length; i++) {
        if (include[i]) {
            numInvsUsed++;
        }
    }
    System.out.print("include = {" + include[0]);
    for (int i = 1; i < include.length; i++) {
        System.out.print(", " + include[i]);
    }
    System.out.println("}");
    ClassedArray[] trainingMatrix = new ClassedArray[training.length - 1];
    for (int i = 1; i < training.length; i++) {
        // was values[i].length - 1
        double[] data = new double[numInvsUsed];
        // because I can't assume it will be data[j]--some values of j might be skipped by the include array
        int index = 0;
        for (int j = 0; j < training[i].length - 1; j++) {
            if (include[j]) {
                data[index] = Double.parseDouble(training[i][j]);
                index++;
            }
        }
        ClassedArray ca = new ClassedArray();
        ca.setArray(data);
        ca.setKlass(training[i][training[i].length - 1]);
        trainingMatrix[i - 1] = ca;
    }
    String[] classes = DissUtils.extractClassNames(trainingMatrix);
    String[][] validation;
    try {
        // this is the validation data
        File v = new File("C:/z4xNoSpaces/synthData/comparison/GAM/GAMZValidation.csv");
        FileReader in = new FileReader(v);
        CSVParser csvp = new CSVParser(in);
        validation = csvp.getAllValues();
    } catch (FileNotFoundException fnfe) {
        throw new RuntimeException("No file!  " + fnfe.getMessage());
    } catch (IOException ioe) {
        throw new RuntimeException("IO Exception!  " + ioe.getMessage());
    }
    int maxK = 500;
    // String[][] neighborClasses = new String[validation.length-1][maxK];
    String[][] klasses = new String[validation.length - 1][maxK];
    String[] realClasses = new String[validation.length - 1];
    double[][] accuracyRates = new double[classes.length + 1][maxK];
    int[][][] confusionMatrices = new int[maxK][classes.length][classes.length + 1];
    double[][] probRates = new double[classes.length + 1][maxK];
    double[][][] probabilityMatrices = new double[maxK][classes.length][classes.length];
    // SimpleKNN knn = new SimpleKNN();
    DistanceWeightedKNN knn = new DistanceWeightedKNN();
    knn.setTrainingData(trainingMatrix);
    // for each value of k
    for (int k = 1; k <= maxK; k++) {
        knn.setK(k);
        // for each data point in the validation dataset
        for (int i = 1; i < validation.length; i++) {
            // was values[i].length - 1
            double[] data = new double[numInvsUsed];
            // because I can't assume it will be data[j]--some values of j might be skipped by the include array
            int index = 0;
            for (int j = 0; j < validation[i].length - 1; j++) {
                if (include[j]) {
                    data[index] = Double.parseDouble(validation[i][j]);
                    index++;
                }
            }
            // have the data point
            // String[] myNeighborClasses = knn.neighborClasses(data);
            // neighborClasses[i-1] = myNeighborClasses;
            double[] probabilities = knn.classifyProb(data);
            String myEstimatedClass = knn.classify(data);
            klasses[i - 1][k - 1] = myEstimatedClass;
            String myRealClass = validation[i][validation[i].length - 1];
            realClasses[i - 1] = myRealClass;
            int myEstimatedIndex = findIndex(classes, myEstimatedClass);
            int myRealIndex = findIndex(classes, myRealClass);
            if (myEstimatedIndex != -1) {
                confusionMatrices[k - 1][myRealIndex][myEstimatedIndex]++;
            } else {
                confusionMatrices[k - 1][myRealIndex][classes.length]++;
            }
            for (int z = 0; z < probabilities.length; z++) {
                probabilityMatrices[k - 1][myRealIndex][z] = probabilityMatrices[k - 1][myRealIndex][z] + probabilities[z];
            }
        }
        for (int a = 0; a < probabilityMatrices[k - 1].length; a++) {
            // this loop figures out how many have the real class of row a.
            int count = arraySum(confusionMatrices[k - 1][a]);
            // the average for that cell
            for (int b = 0; b < probabilityMatrices[k - 1][a].length; b++) {
                probabilityMatrices[k - 1][a][b] = probabilityMatrices[k - 1][a][b] / count;
            }
            // now I can update probRates, too
            for (int d = 0; d < classes.length; d++) {
                probRates[d][k - 1] = probabilityMatrices[k - 1][d][d];
            }
        }
        System.out.println("finished k=" + k);
    }
    // finished making the confusion matrices and recording the neighbor classes.  Now calculate accuracy rates.
    for (int k = 0; k < maxK; k++) {
        int totalCorrect = 0;
        int total = 0;
        double probSum = 0;
        for (int c = 0; c < classes.length; c++) {
            int arraysum = arraySum(confusionMatrices[k][c]);
            accuracyRates[c][k] = (double) confusionMatrices[k][c][c] / (double) arraysum;
            totalCorrect = totalCorrect + confusionMatrices[k][c][c];
            total = total + arraysum;
            probRates[c][k] = probabilityMatrices[k][c][c];
            probSum = probSum + (probRates[c][k] * (double) arraysum);
        }
        accuracyRates[classes.length][k] = (double) totalCorrect / (double) total;
        probRates[classes.length][k] = probSum / (double) total;
    }
    printResults(classes, klasses, realClasses, accuracyRates, confusionMatrices, probabilityMatrices, probRates);
}
