public String input() throws ServiceException {
    Lessons lesson = (Lessons) service.get(Lessons.class, lessonid);
    SysGroup mygroup = this.getLoginUser().getSysGroup();
    if (lesson.getOnlinefile() != null && !lesson.getOnlinefile().equals("")) {
        display = "";
        if (lesson.getTeacherid() != 0)
            onlyonline = 2;
    }
    // SysGroupService groupservice = (SysGroupService) this.getBean("sysGroupService");
    // shouldsharedgroupids = groupservice.getAllsharedunion();
    // if (shouldsharedgroupids != null && shouldsharedgroupids.size() != 0) {
    // // 课程共享的时候，去掉自己
    // if (mygroup != null) {
    // for (Object obj : shouldsharedgroupids) {
    // SysGroup group = (SysGroup) obj;
    // if (group.getGroupid() == mygroup.getGroupid()) {
    // shouldsharedgroupids.remove(group);
    // break;
    // }
    // }
    // }
    // }
    // sharedgroupids = new ArrayList();
    // DetachedCriteria dc = DetachedCriteria.forClass(Lessonshared.class);
    // dc.createAlias("lessons", "lessons");
    // dc.add(Restrictions.eq("lessons.lessonid", lessonid));
    // List list = basicService.findAllByCriteria(dc);
    // for (int i = 0; list != null && i < list.size(); i++) {
    // Lessonshared shared = (Lessonshared) list.get(i);
    // // System.out.println("==============="+shared.getGroupid());
    // if (mygroup == null || (mygroup != null && shared.getGroupid() != mygroup.getGroupid()))
    // sharedgroupids.add(shared.getGroupid());
    // }
    String s = df.format(lesson.getLessondate());
    int index = s.indexOf(" ");
    datestart = s.substring(0, index);
    hmstart = s.substring(index + 1);
    if (lesson.getLessondate() != null && !lesson.getLessondate().equals("")) {
        s = df.format(lesson.getLessondate());
        index = s.indexOf(" ");
        dateend = s.substring(0, index);
        hmend = s.substring(index + 1);
    }
    // LessonsUtil.timestamp2str(lesson.getLessonend(), dateend, hmend);
    String attach = lesson.getAttach();
    filelist = new java.util.ArrayList<String>();
    if (attach != null) {
        String[] file = attach.split(",");
        for (String str : file) {
            if (str != null && !"".equals(str.trim()))
                filelist.add(str);
        }
    }
    if (filelist.size() > 0)
        hasattach = true;
    set("lesson", lesson);
    this.deleteflagint = lesson.getDeleteflag() ? 1 : 0;
    if (onlyonline == 2 || onlyonline == 1) {
        // 新增授课律师的课程
        SysUser loginuser = this.getLoginUser();
        SysRole loginrole = loginuser.getSysRole();
        if (loginrole != null && loginrole.getRoleid() == 100) {
            // 授课律师登录
            listall = false;
            lesson.setTeacherid(loginuser.getUserid());
        } else {
            BasicService basicservice = (BasicService) this.getBean("basicService");
            DetachedCriteria dcc = DetachedCriteria.forClass(Teacher.class);
            if (teachername != null && !teachername.equals("")) {
                dcc.add(Restrictions.like("username", teachername, MatchMode.ANYWHERE));
            }
            teacherList = basicservice.findAllByCriteria(dcc);
        }
    }
    if (onlyonline != 0) {
        return "online";
    }
    return "local";
}
