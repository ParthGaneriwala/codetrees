private void writeSectionHeaders() throws IOException {
    int i, j;
    ArrayList<Byte> name;
    SectionHeader sh;
    ArrayList<SectionHeader> sectionHeaders = parser.getSectionHeaders();
    int numSections = sectionHeaders.size();
    int end = 0;
    for (i = 0; i < numSections; i++) {
        sh = sectionHeaders.get(i);
        name = sh.getName();
        if (sh.getNameAsString().equals(CLELConstants.TEXTSECTION_NAME)) {
            Write_RVA = sh.getVirtualAddress();
            end = sh.getPointerToRawData();
        }
        try {
            for (j = 0; j < name.size(); j++) writer.writeByte(name.get(j));
            writer.writeInt(sh.getVirtualSize());
            writer.writeInt(sh.getVirtualAddress());
            writer.writeInt(sh.getSizeOfRawData());
            writer.writeInt(sh.getPointerToRawData());
            writer.writeInt(sh.getPointerToRelocations());
            writer.writeInt(sh.getPointerToLineNumbers());
            writer.writeShort(sh.getNumberOfRelocations());
            writer.writeShort(sh.getNumberOfLineNumbers());
            writer.writeInt(sh.getCharacteristics());
        } catch (IOException ioe) {
            System.out.println("Error: Writing SectionHeaders");
            ioe.printStackTrace();
            throw ioe;
        }
    }
    Write_Offset += (numSections * CLELConstants.SECTIONHEADER_SIZE);
    // write padding
    while (Write_Offset < end) {
        try {
            writer.writeByte((byte) 0);
        } catch (IOException ioe) {
            System.out.println("Error: Writing SectionHeaders Padding");
            ioe.printStackTrace();
            throw ioe;
        }
        Write_Offset++;
    }
}
