public boolean isLegalMove(int from, int to, boolean mustJump) {
    // Is index out of range?
    if ((from < 1) || (from > 32) || (to < 1) || (to > 32)) {
        return false;
    }
    final int fromIndex = from - 1;
    final int toIndex = to - 1;
    int movingColor = blackToMove ? black : white;
    // acting player
    if (((movingColor >>> fromIndex) & 1) == 0) {
        return false;
    }
    // There can't be a piece on the to square
    if ((((black | white) >>> toIndex) & 1) != 0) {
        return false;
    }
    int distance = to - from;
    // rowModifier will be 0 for even rows and 1 for odd rows
    int rowModifier = (fromIndex >>> 2) & 1;
    boolean evenRow = rowModifier == 0;
    boolean isLegalDistance = false;
    boolean movingLeft = true;
    boolean isCapturing = false;
    int capturedSquare = -1;
    switch(distance) {
        case -9:
            // Capturing north west
            isLegalDistance = true;
            isCapturing = true;
            capturedSquare = from - 4;
            break;
        case -7:
            // Capturing north east
            isLegalDistance = true;
            movingLeft = false;
            isCapturing = true;
            capturedSquare = from - 3;
            break;
        case 7:
            // Capturing south west
            isLegalDistance = true;
            isCapturing = true;
            capturedSquare = from + 4;
            break;
        case 9:
            // Capturing south east
            isLegalDistance = true;
            movingLeft = false;
            isCapturing = true;
            capturedSquare = from + 5;
            break;
    }
    capturedSquare -= rowModifier;
    int jumpers = mustJump();
    int modifiedDistance = distance + rowModifier;
    if ((jumpers == 0) && (!isCapturing) && (!mustJump)) {
        switch(modifiedDistance) {
            case -4:
                // Moving north west
                isLegalDistance = true;
                break;
            case -3:
                // Moving north east
                isLegalDistance = true;
                movingLeft = false;
                break;
            case 4:
                // Moving south west
                isLegalDistance = true;
                break;
            case 5:
                // Moving south east
                isLegalDistance = true;
                movingLeft = false;
                break;
        }
    }
    if (!isLegalDistance) {
        return false;
    }
    // A piece can't move from the left edge to the right or vice versa
    int colIndex = fromIndex & 3;
    if ((colIndex == 0) && (!evenRow) && movingLeft) {
        return false;
    }
    if ((colIndex == 0) && evenRow && movingLeft && isCapturing) {
        return false;
    }
    if ((colIndex == 3) && evenRow && (!movingLeft)) {
        return false;
    }
    if ((colIndex == 3) && (!evenRow) && (!movingLeft) && isCapturing) {
        return false;
    }
    boolean isKing = ((kings >>> fromIndex) & 1) == 1;
    // Black men can't move up
    if (blackToMove && (!isKing) && (distance < 0)) {
        return false;
    }
    // White men can't move down
    if ((!blackToMove) && (!isKing) && (distance > 0)) {
        return false;
    }
    if (isCapturing) {
        // A jumping piece should capture a piece of the opposing color
        int capturedColor = blackToMove ? white : black;
        // jump over
        if (((capturedColor >>> (capturedSquare - 1)) & 1) == 0) {
            return false;
        }
    }
    return true;
}
