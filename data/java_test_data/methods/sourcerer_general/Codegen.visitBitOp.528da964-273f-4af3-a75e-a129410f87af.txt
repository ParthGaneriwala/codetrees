private void visitBitOp(Node node, int type, Node child) {
    int childNumberFlag = node.getIntProp(Node.ISNUMBER_PROP, -1);
    generateExpression(child, node);
    // toUint32 instead of toInt32.
    if (type == Token.URSH) {
        addScriptRuntimeInvoke("toUint32", "(Ljava/lang/Object;)J");
        generateExpression(child.getNext(), node);
        addScriptRuntimeInvoke("toInt32", "(Ljava/lang/Object;)I");
        // Looks like we need to explicitly mask the shift to 5 bits -
        // LUSHR takes 6 bits.
        cfw.addPush(31);
        cfw.add(ByteCode.IAND);
        cfw.add(ByteCode.LUSHR);
        cfw.add(ByteCode.L2D);
        addDoubleWrap();
        return;
    }
    if (childNumberFlag == -1) {
        addScriptRuntimeInvoke("toInt32", "(Ljava/lang/Object;)I");
        generateExpression(child.getNext(), node);
        addScriptRuntimeInvoke("toInt32", "(Ljava/lang/Object;)I");
    } else {
        addScriptRuntimeInvoke("toInt32", "(D)I");
        generateExpression(child.getNext(), node);
        addScriptRuntimeInvoke("toInt32", "(D)I");
    }
    switch(type) {
        case Token.BITOR:
            cfw.add(ByteCode.IOR);
            break;
        case Token.BITXOR:
            cfw.add(ByteCode.IXOR);
            break;
        case Token.BITAND:
            cfw.add(ByteCode.IAND);
            break;
        case Token.RSH:
            cfw.add(ByteCode.ISHR);
            break;
        case Token.LSH:
            cfw.add(ByteCode.ISHL);
            break;
        default:
            throw Codegen.badTree();
    }
    cfw.add(ByteCode.I2D);
    if (childNumberFlag == -1) {
        addDoubleWrap();
    }
}
