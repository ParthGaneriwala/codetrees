public void createTest(int depth, int NS, int NI, boolean withProps) {
    // Calculate total store sizes and allocate
    int numClasses = 0;
    int levelSize = 1;
    for (int i = 0; i < depth; i++) {
        levelSize *= NS;
        numClasses += levelSize;
    }
    concepts = new Node[numClasses];
    properties = new Node[numClasses];
    instances = new Node[numClasses * NI];
    logger.info("Classes: " + numClasses + " Instances: " + (numClasses * NI) + (withProps ? " with properties" : ""));
    // Create the tree
    testdata = Factory.createGraphMem();
    // First level
    int conceptPtr = 0;
    int levelStart = 0;
    int levelEnd = 0;
    int instancePtr = 0;
    for (int i = 0; i < depth; i++) {
        // Class tree
        Node property = null;
        if (i == 0) {
            for (int j = 0; j < NS; j++) {
                Node concept = Node.createURI("concept" + conceptPtr);
                if (withProps) {
                    property = Node.createURI("prop" + conceptPtr);
                    properties[conceptPtr] = property;
                }
                concepts[conceptPtr++] = concept;
            }
        } else {
            for (int j = levelStart; j < levelEnd; j++) {
                Node superConcept = concepts[j];
                for (int k = 0; k < NS; k++) {
                    Node concept = Node.createURI("concept" + conceptPtr);
                    if (withProps) {
                        property = Node.createURI("prop" + conceptPtr);
                        properties[conceptPtr] = property;
                    }
                    concepts[conceptPtr++] = concept;
                    testdata.add(new Triple(concept, RDFS.subClassOf.asNode(), superConcept));
                }
            }
        }
        levelStart = levelEnd;
        levelEnd = conceptPtr;
        // Instance data
        for (int j = levelStart; j < levelEnd; j++) {
            Node concept = concepts[j];
            for (int k = 0; k < NI; k++) {
                Node instance = Node.createURI("instance" + instancePtr);
                testdata.add(new Triple(instance, RDF.type.asNode(), concept));
                if (withProps && (k - 1) % 3 == 0) {
                    testdata.add(new Triple(instances[instancePtr - 1], property, instance));
                }
                instances[instancePtr++] = instance;
            }
        }
    }
}
