// fredt@users 20011010 - patch 471710 by fredt - LIMIT rewritten
// SELECT LIMIT n m DISTINCT ... queries and error message
// "SELECT LIMIT n m ..." creates the result set for the SELECT statement then
// discards the first n rows and returns m rows of the remaining result set
// "SELECT LIMIT 0 m" is equivalent to "SELECT TOP m" or "SELECT FIRST m"
// in other RDBMS's
// "SELECT LIMIT n 0" discards the first n rows and returns the remaining rows
private void parseLimit(String token, Select select, boolean isEnd) throws HsqlException {
    if (select.limitCondition != null) {
        return;
    }
    Expression e1 = null;
    Expression e2;
    boolean islimit = false;
    if (isEnd) {
        if (token.equals(Token.T_LIMIT)) {
            islimit = true;
            read();
            e2 = readTerm();
            if (sToken.equals(Token.T_OFFSET)) {
                read();
                e1 = readTerm();
            }
            tokenizer.back();
        } else {
            return;
        }
    } else if (token.equals(Token.T_LIMIT)) {
        read();
        e1 = readTerm();
        e2 = readTerm();
        islimit = true;
        tokenizer.back();
    } else if (token.equals(Token.T_TOP)) {
        read();
        e2 = readTerm();
        tokenizer.back();
    } else {
        return;
    }
    if (e1 == null) {
        e1 = new Expression(Types.INTEGER, ValuePool.getInt(0));
    }
    if (e1.isParam() || (e1.getType() == Expression.VALUE && e1.getDataType() == Types.INTEGER && e1.getValue(null) != null && ((Integer) e1.getValue(null)).intValue() >= 0)) {
        if (e2.isParam() || (e2.getType() == Expression.VALUE && e2.getDataType() == Types.INTEGER && e2.getValue(null) != null && ((Integer) e2.getValue(null)).intValue() >= 0)) {
            // necessary for params
            e1.setDataType(Types.INTEGER);
            e2.setDataType(Types.INTEGER);
            select.limitCondition = new Expression(Expression.LIMIT, e1, e2);
            return;
        }
    }
    int messageid = islimit ? Trace.INVALID_LIMIT_EXPRESSION : Trace.INVALID_TOP_EXPRESSION;
    throw Trace.error(Trace.WRONG_DATA_TYPE, messageid);
}
