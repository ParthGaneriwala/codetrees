// $ANTLR start "guarded_statements"
public final MyGrammarParser.guarded_statements_return guarded_statements() throws RecognitionException {
    MyGrammarParser.guarded_statements_return retval = new MyGrammarParser.guarded_statements_return();
    retval.start = input.LT(1);
    CommonTree root_0 = null;
    Token IF47 = null;
    Token THEN49 = null;
    MyGrammarParser.expression_return expression48 = null;
    MyGrammarParser.statement_sequence_return statement_sequence50 = null;
    CommonTree IF47_tree = null;
    CommonTree THEN49_tree = null;
    RewriteRuleTokenStream stream_THEN = new RewriteRuleTokenStream(adaptor, "token THEN");
    RewriteRuleTokenStream stream_IF = new RewriteRuleTokenStream(adaptor, "token IF");
    RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_statement_sequence = new RewriteRuleSubtreeStream(adaptor, "rule statement_sequence");
    try {
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:179:2: ( IF expression THEN statement_sequence -> ^( GUARDED_STATEMENTS expression statement_sequence ) )
        // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:179:4: IF expression THEN statement_sequence
        {
            IF47 = (Token) match(input, IF, FOLLOW_IF_in_guarded_statements1305);
            stream_IF.add(IF47);
            pushFollow(FOLLOW_expression_in_guarded_statements1307);
            expression48 = expression();
            state._fsp--;
            stream_expression.add(expression48.getTree());
            THEN49 = (Token) match(input, THEN, FOLLOW_THEN_in_guarded_statements1309);
            stream_THEN.add(THEN49);
            pushFollow(FOLLOW_statement_sequence_in_guarded_statements1311);
            statement_sequence50 = statement_sequence();
            state._fsp--;
            stream_statement_sequence.add(statement_sequence50.getTree());
            // AST REWRITE
            // elements: expression, statement_sequence
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", retval != null ? retval.tree : null);
            root_0 = (CommonTree) adaptor.nil();
            // 179:42: -> ^( GUARDED_STATEMENTS expression statement_sequence )
            {
                // E:\\Projetos Eclipse\\MiniModula2\\MyGrammar.g:179:45: ^( GUARDED_STATEMENTS expression statement_sequence )
                {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 = (CommonTree) adaptor.becomeRoot((CommonTree) adaptor.create(GUARDED_STATEMENTS, "GUARDED_STATEMENTS"), root_1);
                    adaptor.addChild(root_1, stream_expression.nextTree());
                    adaptor.addChild(root_1, stream_statement_sequence.nextTree());
                    adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;
        }
        retval.stop = input.LT(-1);
        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
        retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);
    } finally {
    }
    return retval;
}
