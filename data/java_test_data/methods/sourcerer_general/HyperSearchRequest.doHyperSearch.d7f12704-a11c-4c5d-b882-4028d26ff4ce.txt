// }}}
private int doHyperSearch(Buffer buffer, int start, int end, DefaultMutableTreeNode bufferNode) {
    int resultCount = 0;
    JEditTextArea textArea = jEdit.getActiveView().getTextArea();
    int caretLine = textArea.getBuffer() == buffer ? textArea.getCaretLine() : -1;
    try {
        buffer.readLock();
        boolean endOfLine = buffer.getLineEndOffset(buffer.getLineOfOffset(end)) - 1 == end;
        Segment text = new Segment();
        int offset = start;
        HyperSearchResult lastResult = null;
        loop: for (int counter = 0; ; counter++) {
            boolean startOfLine = buffer.getLineStartOffset(buffer.getLineOfOffset(offset)) == offset;
            buffer.getText(offset, end - offset, text);
            SearchMatcher.Match match = matcher.nextMatch(new SegmentCharSequence(text, false), startOfLine, endOfLine, counter == 0, false);
            if (match == null)
                break loop;
            int newLine = buffer.getLineOfOffset(offset + match.start);
            if (lastResult == null || lastResult.line != newLine) {
                lastResult = new HyperSearchResult(buffer, newLine);
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(lastResult, false);
                if (lastResult.line == caretLine)
                    selectNode = child;
                bufferNode.add(child);
            }
            lastResult.addOccur(offset + match.start, offset + match.end);
            offset += match.end;
            if (matcher.isMatchingEOL()) {
                if (offset < buffer.getLength())
                    offset += 1;
                else
                    break loop;
            }
            resultCount++;
        }
    } finally {
        buffer.readUnlock();
    }
    return resultCount;
}
