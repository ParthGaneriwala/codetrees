public void testMeetingCRUD() throws SQLException {
    int projectId;
    // Insert a project
    Project project = new Project();
    project.setTitle("MeetingSQLTest " + System.currentTimeMillis());
    project.setShortDescription("description");
    project.setRequestDate(new java.sql.Timestamp(System.currentTimeMillis()));
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    project.insert(db);
    projectId = project.getId();
    // Insert meeting
    Meeting meeting = new Meeting();
    meeting.setTitle("Meeting SQL Test");
    meeting.setDescription("Meeting SQL Test Description");
    meeting.setEnteredBy(USER_ID);
    meeting.setModifiedBy(USER_ID);
    meeting.setStartDate(new Timestamp(System.currentTimeMillis()));
    meeting.setEndDate(new Timestamp(System.currentTimeMillis() + 3600));
    meeting.setIsTentative(false);
    meeting.setByInvitationOnly(false);
    meeting.setProjectId(projectId);
    meeting.setOwner(USER_ID);
    assertNotNull(meeting);
    boolean result = meeting.insert(db);
    assertTrue("Meeting was not inserted", result);
    assertTrue("Inserted meeting did not have an id", meeting.getId() > -1);
    // Update meeting
    // Try updating without reloading the meeting
    assertNull(meeting.getModified());
    assertTrue("Meeting to update does not have an id", meeting.getId() > -1);
    int updateCount = meeting.update(db);
    assertTrue("The modified field checks for concurrent updates so the modified field must match the load value", updateCount == 0);
    // Reload the meeting, then update
    assertTrue(meeting.getId() > -1);
    meeting = new Meeting(db, meeting.getId());
    meeting.setTitle("Meeting SQL Test Updated Badge");
    updateCount = meeting.update(db);
    assertTrue("The meeting was not updated by the database", updateCount == 1);
    // Find the previously set meeting
    int meetingId = meeting.getId();
    meeting = null;
    MeetingList meetingList = new MeetingList();
    meetingList.setProjectId(projectId);
    meetingList.buildList(db);
    assertTrue(meetingList.size() > 0);
    for (Meeting thisMeeting : meetingList) {
        if (thisMeeting.getId() == meetingId) {
            meeting = thisMeeting;
            break;
        }
    }
    assertNotNull(meeting);
    // Delete the meeting
    meeting.delete(db);
    meetingId = meeting.getId();
    meeting = null;
    // Try to find the previously deleted meeting
    meetingList = new MeetingList();
    meetingList.setProjectId(projectId);
    meetingList.buildList(db);
    for (Meeting thisMeeting : meetingList) {
        if (thisMeeting.getId() == meetingId) {
            assertNull("Meeting exists when it shouldn't", thisMeeting);
        }
    }
    // cleanup data
    project.delete(db, null);
}
