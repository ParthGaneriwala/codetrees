public boolean visitLeave(IfStatementNode node) {
    if (node.getSymbol().isNonterminal(NonterminalGrammarSymbol.IF)) {
        newVoidCode(node);
        int childrenNumber = node.nChildren();
        int i = 0;
        if (childrenNumber == 3) {
            for (ParseNode child : node.getChildren()) {
                // get block child is enough
                if (i == 0) {
                    ASMCodeFragment childCode = removeValueCode(child);
                    code.append(childCode);
                } else {
                    ASMCodeFragment childCode = removeVoidCode(child);
                    code.append(childCode);
                }
                i++;
                if (i == 1 && childrenNumber > 1)
                    // [... ] nothing
                    code.add(JumpFalse, "$-if-statement-else-" + uniIfStatementCounter);
            // ֻ�е�if�������������������ϵĺ���ʱ�����Ҫjumpfalse
            // �������jumpfalseҪ����expr�����֮��
            }
            // only when leave if increment it
            uniIfStatementCounter++;
        } else if (childrenNumber == 2) {
            if (node.child(1).getSymbol().isNonterminal(NonterminalGrammarSymbol.THEN)) {
                for (ParseNode child : node.getChildren()) {
                    // get block child is enough
                    if (i == 0) {
                        ASMCodeFragment childCode = removeValueCode(child);
                        code.append(childCode);
                    } else {
                        ASMCodeFragment childCode = removeVoidCode(child);
                        code.append(childCode);
                    }
                    i++;
                    if (i == 1 && childrenNumber > 1)
                        // [... ] nothing
                        code.add(JumpFalse, "$-if-statement-else-" + uniIfStatementCounter);
                // ֻ�е�if�������������������ϵĺ���ʱ�����Ҫjumpfalse
                // �������jumpfalseҪ����expr�����֮��
                }
                // ��Ϊû��else ����ֱ����if���֮�����һ�� ��ʾ��������statement
                code.add(Label, "$-if-statement-else-" + uniIfStatementCounter);
                code.add(Label, "$-if-statement-else-done-" + uniIfStatementCounter);
                // only when leave if increment it
                uniIfStatementCounter++;
            } else {
                // only else child
                for (ParseNode child : node.getChildren()) {
                    // get block child is enough
                    if (i == 0) {
                        ASMCodeFragment childCode = removeValueCode(child);
                        code.append(childCode);
                    } else {
                        ASMCodeFragment childCode = removeVoidCode(child);
                        code.append(childCode);
                    }
                    i++;
                    if (i == 1 && childrenNumber > 1) {
                        // [... ] nothing
                        code.add(JumpFalse, "$-if-statement-else-" + uniIfStatementCounter);
                        // ֻ�е�if�������������������ϵĺ���ʱ�����Ҫjumpfalse
                        // �������jumpfalseҪ����expr�����֮��
                        code.add(Jump, "$-if-statement-else-done-" + uniIfStatementCounter);
                    }
                }
                // only when leave if increment it
                uniIfStatementCounter++;
            }
        } else if (childrenNumber == 1) {
            uniIfStatementCounter++;
        } else
            assert false : "if statement children number is not correct!!!";
    } else if (node.getSymbol().isNonterminal(NonterminalGrammarSymbol.THEN)) {
        newVoidCode(node);
        for (ParseNode child : node.getChildren()) {
            // get block or if child is enough
            ASMCodeFragment childCode = removeVoidCode(child);
            code.append(childCode);
        }
        // Ҫ�� then����Ķ�append��ȥ��
        code.add(Jump, "$-if-statement-else-done-" + uniIfStatementCounter);
    } else if (node.getSymbol().isNonterminal(NonterminalGrammarSymbol.ELSE)) {
        newVoidCode(node);
        for (ParseNode child : node.getChildren()) {
            // get if child is enough
            ASMCodeFragment childCode = removeVoidCode(child);
            code.add(Label, "$-if-statement-else-" + uniIfStatementCounter);
            // ���ﲻ�ü�����ԭ����else����һ��ֻ��һ��С���� if ����block
            code.append(childCode);
        }
        // Ҫ��
        code.add(Label, "$-if-statement-else-done-" + uniIfStatementCounter);
    } else
        error("if Statement wrong !!! in code generator!!");
    return true;
}
