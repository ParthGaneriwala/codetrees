@Override
protected Result evaluate(final LogicContext context, final Integer patientId, final Map<String, Object> parameters) throws LogicException {
    Result result = new Result();
    ObsWithRestrictionRule obsWithRestrictionRule = new ObsWithStringRestrictionRule();
    parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.CXR_PULMONARY_EFFUSION, EvaluableNameConstants.CXR_MILIARY_CHANGES, EvaluableNameConstants.CXR_INFILTRATE, EvaluableNameConstants.CXR_DIFFUSE_NON_MILIARY_CHANGES, EvaluableNameConstants.CXR_CAVITARY_LESION));
    parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.CXR));
    parameters.put(EvaluableConstants.OBS_FETCH_SIZE, 1);
    Result cxrResults = obsWithRestrictionRule.eval(context, patientId, parameters);
    if (CollectionUtils.isNotEmpty(cxrResults)) {
        Result cxrResult = cxrResults.latest();
        // check the date of the latest result
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.MONTH, -1);
        // if the result is more than 1 month ago, then check the test to see if any was ordered before
        if (cxrResult.getResultDate().before(calendar.getTime())) {
            Boolean displayReminder = Boolean.TRUE;
            parameters.put(EvaluableConstants.OBS_CONCEPT, Arrays.asList(EvaluableNameConstants.TESTS_ORDERED));
            parameters.put(EvaluableConstants.OBS_VALUE_CODED, Arrays.asList(EvaluableNameConstants.CXR));
            Result testOrderedResults = obsWithRestrictionRule.eval(context, patientId, parameters);
            if (CollectionUtils.isNotEmpty(testOrderedResults)) {
                Result testOrderedResult = testOrderedResults.latest();
                // check the test ordered date
                calendar.add(Calendar.MONTH, -5);
                // test ordered after 6 months ago and comes after the latest cxr result
                if (testOrderedResult.getResultDate().after(calendar.getTime()) && testOrderedResult.getResultDate().after(cxrResult.getResultDate()))
                    displayReminder = Boolean.FALSE;
            }
            parameters.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_NONCLINICALMEDICATION));
            TuberculosisRule tuberculosisRule = new TuberculosisRule();
            Result tuberculosisMedicationResults = tuberculosisRule.eval(context, patientId, parameters);
            parameters.put(EvaluableConstants.ENCOUNTER_TYPE, Arrays.asList(EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_INITIAL, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_RETURN, EvaluableNameConstants.ENCOUNTER_TYPE_ADULT_NONCLINICALMEDICATION));
            TuberculosisTreatmentRule tuberculosisTreatmentRule = new TuberculosisTreatmentRule();
            Result tbTreatmentResults = tuberculosisTreatmentRule.eval(context, patientId, parameters);
            if (CollectionUtils.isNotEmpty(tuberculosisMedicationResults) || CollectionUtils.isNotEmpty(tbTreatmentResults))
                displayReminder = Boolean.FALSE;
            if (displayReminder)
                result.add(new Result(String.valueOf(parameters.get(ReminderParameters.DISPLAYED_REMINDER_TEXT))));
        }
    }
    return result;
}
