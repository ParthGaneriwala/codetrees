public static String getChildNodeDataSql(HashMap<String, String> params) throws Exception {
    String sql = "";
    String parentId = params.get("parentId");
    int len = 3;
    if (params.get("nodeIdFieldLength") != null) {
        len = Integer.parseInt(params.get("nodeIdFieldLength"));
    }
    if (parentId == null && params.get("defaultRootId") != null) {
        parentId = params.get("defaultRootId");
    }
    String dbType = params.get("dbType");
    String tableName = params.get("tableName");
    String nodeIdField = params.get("nodeIdField");
    String nodeNameField = params.get("nodeNameField");
    String extendAttrField = params.get("extendAttrField");
    String nodeFilterCondition = params.get("nodeFilterCondition");
    if (dbType == null) {
        dbType = "sybase";
    }
    if (extendAttrField == null) {
        extendAttrField = "''";
    }
    if (nodeFilterCondition == null) {
        nodeFilterCondition = "1=1";
    }
    if (dbType.equals("sybase")) {
        if (parentId == null || parentId.equals("")) {
            sql = "select A." + nodeIdField + " as nodeId, A." + nodeNameField + " as nodeName, " + extendAttrField + " as extendAttr, hasChildren = (select substring(" + nodeIdField + ",1," + len + ") from ";
            sql += tableName + " where " + nodeFilterCondition + " and (char_length(" + nodeIdField + ") > " + len + ") and (substring(" + nodeIdField + ",1," + len + ")=A." + nodeIdField + ") ";
            sql += "group by substring(" + nodeIdField + ",1," + len + ")) ";
            sql += "from " + tableName + " A ";
            sql += "where char_length(" + nodeIdField + ") = " + len + " and " + nodeFilterCondition + " order by " + nodeIdField;
        } else {
            len = parentId.length() + len;
            sql = "select A." + nodeIdField + " as nodeId, A." + nodeNameField + " as nodeName, " + extendAttrField + " as extendAttr, hasChildren = (select substring(" + nodeIdField + ",1," + len + ") from ";
            sql += tableName + " where " + nodeFilterCondition + " and (char_length(" + nodeIdField + ") > " + len + ") and (substring(" + nodeIdField + ",1," + len + ")=A." + nodeIdField + ") ";
            sql += "group by substring(" + nodeIdField + ",1," + len + ")) ";
            sql += "from " + tableName + " A ";
            sql += "where char_length(" + nodeIdField + ") = " + len + " and " + nodeIdField + " like '" + parentId + "%' and " + nodeFilterCondition + " order by " + nodeIdField + "";
        }
    } else if (dbType.equals("oracle") || dbType.equals("mysql") || dbType.equals("db2")) {
        if (parentId == null) {
            sql = "select A." + nodeIdField + " as nodeId, A." + nodeNameField + " as nodeName, " + extendAttrField + " as extendAttr, (select substr(B." + nodeIdField + ",1," + len + ") from ";
            sql += tableName + " B where " + nodeFilterCondition + " and (length(B." + nodeIdField + ") > " + len + ") and (substr(B." + nodeIdField + ",1," + len + ")=A." + nodeIdField + ") ";
            sql += "group by substr(B." + nodeIdField + ",1," + len + ")) as hasChildren ";
            sql += "from " + tableName + " A ";
            sql += "where length(" + nodeIdField + ") = " + len + " and " + nodeFilterCondition + " order by " + nodeIdField;
        } else {
            len = parentId.length() + len;
            sql = "select A." + nodeIdField + " as nodeId, A." + nodeNameField + " as nodeName, " + extendAttrField + " as extendAttr, (select substr(B." + nodeIdField + ",1," + len + ") from ";
            sql += tableName + " B where " + nodeFilterCondition + " and (length(B." + nodeIdField + ") > " + len + ") and (substr(" + nodeIdField + ",1," + len + ")=A." + nodeIdField + ") ";
            sql += "group by substr(B." + nodeIdField + ",1," + len + ")) as hasChildren ";
            sql += "from " + tableName + " A ";
            sql += "where length(" + nodeIdField + ") = " + len + " and " + nodeIdField + " like '" + parentId + "%'  and " + nodeFilterCondition + " order by " + nodeIdField + "";
        }
    }
    return sql;
}
