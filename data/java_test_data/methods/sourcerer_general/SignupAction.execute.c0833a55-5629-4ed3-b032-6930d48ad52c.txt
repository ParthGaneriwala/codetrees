public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    // if it's an HTTP GET, simply forward to jsp
    if (request.getMethod().equals("GET")) {
        return mapping.findForward("failure");
    // user clicked cancel button
    } else if (isCancelled(request)) {
        return new ActionForward("/");
    // run validation
    } else {
        // run validation rules on this form
        ActionMessages errors = form.validate(mapping, request);
        if (!errors.isEmpty()) {
            saveErrors(request, errors);
            return mapping.findForward("failure");
        }
    }
    if (log.isDebugEnabled()) {
        log.debug("registering user...");
    }
    ActionMessages errors = new ActionMessages();
    UserForm userForm = (UserForm) form;
    User user = (User) convert(form);
    // Set the default user role on this new user
    RoleManager roleMgr = (RoleManager) getBean("roleManager");
    user.addRole(roleMgr.getRole(Constants.USER_ROLE));
    try {
        Boolean encrypt = (Boolean) getConfiguration().get(Constants.ENCRYPT_PASSWORD);
        if (encrypt != null && encrypt.booleanValue()) {
            String algorithm = (String) getConfiguration().get(Constants.ENC_ALGORITHM);
            if (algorithm == null) {
                // should only happen for test case
                log.debug("assuming testcase, setting algorigthm to 'SHA'");
                algorithm = "SHA";
            }
            user.setPassword(StringUtil.encodePassword(user.getPassword(), algorithm));
        }
        user.setEnabled(true);
        UserManager mgr = (UserManager) getBean("userManager");
        mgr.saveUser(user);
    } catch (UserExistsException e) {
        log.warn(e.getMessage());
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.existing.user", userForm.getUsername(), userForm.getEmail()));
        saveErrors(request, errors);
        return mapping.getInputForward();
    }
    ActionMessages messages = new ActionMessages();
    MessageResources resources = getResources(request);
    messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("user.registered", userForm.getUsername()));
    saveMessages(request.getSession(), messages);
    request.getSession().setAttribute(Constants.REGISTERED, Boolean.TRUE);
    // log user in automatically
    Authentication auth = new UsernamePasswordAuthenticationToken(user.getUsername(), user.getConfirmPassword());
    try {
        ProviderManager authenticationManager = (ProviderManager) getBean("authenticationManager");
        SecurityContextHolder.getContext().setAuthentication(authenticationManager.doAuthentication(auth));
    } catch (NoSuchBeanDefinitionException n) {
    // ignore, should only happen when testing
    }
    // Send user an e-mail
    if (log.isDebugEnabled()) {
        log.debug("Sending user '" + userForm.getUsername() + "' an account information e-mail");
    }
    SimpleMailMessage message = (SimpleMailMessage) getBean("mailMessage");
    message.setTo(user.getFullName() + "<" + user.getEmail() + ">");
    StringBuffer msg = new StringBuffer();
    msg.append(resources.getMessage("signup.email.message"));
    msg.append("\n\n" + resources.getMessage("userForm.username"));
    msg.append(": " + userForm.getUsername() + "\n");
    msg.append(resources.getMessage("userForm.password") + ": ");
    msg.append(userForm.getPassword());
    msg.append("\n\nLogin at: " + RequestUtil.getAppURL(request));
    message.setText(msg.toString());
    message.setSubject(resources.getMessage("signup.email.subject"));
    MailEngine engine = (MailEngine) getBean("mailEngine");
    engine.send(message);
    return mapping.findForward("success");
}
