@Override
public ActionResult onAction(Control source) {
    Context context = getContext();
    String callbackParam = context.getRequestParameter(CALLBACK);
    TreeCallback callback = TreeCallback.lookup(callbackParam);
    if (callback == null) {
        return null;
    }
    ActionResult actionResult = null;
    switch(callback) {
        case OPEN:
            {
                OpenListener listener = getOpenListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    actionResult = new ActionResult();
                    HtmlStringBuffer buffer = new HtmlStringBuffer();
                    listener.open(nodeId, buffer);
                    actionResult.setContent(buffer.toString());
                }
                break;
            }
        case CLOSE:
            {
                CloseListener listener = getCloseListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    actionResult = listener.close(nodeId);
                }
                break;
            }
        case CREATE:
            {
                CreateListener listener = getCreateListener();
                if (listener != null) {
                    String newValue = context.getRequestParameter(VALUE);
                    actionResult = listener.create(newValue);
                    String newNodeId = listener.getId();
                    // Send created nodeId to browser
                    JQCommand command = new JQCommand(JQTaconite.CUSTOM);
                    command.setName(NODE_ID);
                    command.setValue(newNodeId);
                    ((JQTaconite) actionResult).insert(command, 0);
                }
                break;
            }
        case DELETE:
            {
                DeleteListener listener = getDeleteListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    actionResult = listener.delete(nodeId);
                }
                break;
            }
        case RENAME:
            {
                RenameListener listener = getRenameListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    String newValue = context.getRequestParameter(VALUE);
                    actionResult = listener.rename(nodeId, newValue);
                }
                break;
            }
        case MOVE:
            {
                MoveListener listener = getMoveListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    String refNodeId = context.getRequestParameter(REFERENCE_NODE_ID);
                    String type = context.getRequestParameter(TYPE);
                    actionResult = new JQTaconite();
                    actionResult = listener.move(nodeId, refNodeId, type);
                }
                break;
            }
        case CHANGE:
            {
                ChangeListener listener = getChangeListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    actionResult = listener.change(nodeId);
                }
                break;
            }
        case SELECT:
            {
                SelectListener listener = getSelectListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    actionResult = listener.select(nodeId);
                }
                break;
            }
        case DESELECT:
            {
                DeselectListener listener = getDeselectListener();
                if (listener != null) {
                    String nodeId = context.getRequestParameter(NODE_ID);
                    actionResult = listener.deselect(nodeId);
                }
                break;
            }
    }
    return actionResult;
}
