// end readMessage
public void sendMessage(Message message) {
    try {
        OutputStream outputStream = transfertSocket.getOutputStream();
        DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
        dataOutputStream.write(message.getType());
        dataOutputStream.writeUTF(message.getNickSrc());
        dataOutputStream.writeUTF(message.getNickDest());
        if (message.getType() == Message.FILE) {
            dataOutputStream.writeInt(message.getLength());
            dataOutputStream.write(message.getMessageBytes());
        } else {
            dataOutputStream.writeUTF(message.getMessage());
        }
        System.out.println(this.getName() + ": Message sent.");
    } catch (Exception e) {
        if (e instanceof EOFException) {
            System.out.println(this.getName() + ": ERROR connection lost (" + e.toString() + ").");
            System.out.println(this.getName() + ": Removing client from list.");
            if (server.removeClient(this) == true) {
                System.out.println(this.getName() + ": Sending update messages to everybody.");
                // send update message to everybody
                sendToEverybody(Message.DELETE_CLIENT, "none");
                closeConnection();
            } else {
                System.out.println(this.getName() + ": Sending disconnection message to client.");
                Message disconnectionMessage = new Message(Message.DISCONNECTION, this.getName(), nickname, "ERROR");
                sendMessage(disconnectionMessage);
                System.out.println(this.getName() + ": Closing thread client not connected.");
                closeConnection();
            }
        } else
            System.out.println(this.getName() + ": ERROR class ServerThread method sendMessage" + e.toString());
    }
}
