public ActionForward search(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
    List vips = new ArrayList();
    StringBuffer sqlBuff = new StringBuffer();
    String groupBy = " group by id";
    if (log.isDebugEnabled()) {
        log.debug("Entering 'search' method");
    }
    VisitorForm visitorForm = (VisitorForm) form;
    // Exceptions are caught by ActionExceptionHandler
    VisitorManager mgr = (VisitorManager) getBean("visitorManager");
    if (StringUtils.isEmpty(visitorForm.getAddress()) && StringUtils.isEmpty(visitorForm.getCompany()) && StringUtils.isEmpty(visitorForm.getUserName())) {
        vips = mgr.getVisitors();
        request.setAttribute(Constants.VISITOR_LIST, vips);
    } else {
        String sql = null;
        sqlBuff.append("select id, userName, title, email, mobile, tagId, company from Visitor where ");
        if (StringUtils.isNotEmpty(visitorForm.getAddress())) {
            sqlBuff.append(" address like '%" + visitorForm.getAddress() + "%' and ");
        }
        if (StringUtils.isNotEmpty(visitorForm.getCompany())) {
            sqlBuff.append(" company like '%" + visitorForm.getCompany() + "%' and ");
        }
        if (StringUtils.isNotEmpty(visitorForm.getUserName())) {
            sqlBuff.append(" userName like '%" + visitorForm.getUserName() + "%' and ");
        }
        sql = sqlBuff.toString();
        if (sql.indexOf("=") == -1 && sql.indexOf("<") == -1 && sql.indexOf(">") == -1) {
            sql += " 1 = 1 ";
        }
        if (sql.trim().lastIndexOf("and") == sql.trim().length() - 3) {
            sql = sql.substring(0, sql.lastIndexOf("and"));
        }
        sql += groupBy;
        List vs = mgr.getVisitors(sql);
        if (vs != null && vs.size() > 0) {
            for (int i = 0; vs.size() > i; i++) {
                Object[] o = (Object[]) vs.get(i);
                Visitor v = new Visitor();
                v.setId(Long.parseLong(o[0].toString()));
                v.setUserName(o[1].toString());
                // v.setTitle(o[2].toString());
                if (o[3] != null) {
                    v.setEmail(o[3].toString());
                }
                if (o[4] != null) {
                    v.setMobile(o[4].toString());
                }
                if (o[5] != null) {
                    v.setTagId(o[5].toString());
                }
                v.setCompany(o[6].toString());
                vips.add(v);
            }
        }
    }
    request.setAttribute(Constants.VISITOR_LIST, vips);
    updateFormBean(mapping, request, visitorForm);
    // return a forward to the user list definition
    return mapping.findForward("list");
}
