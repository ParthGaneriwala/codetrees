@Override
public BranchGroup createSceneGraph() {
    System.out.print("Loading scene...");
    BranchGroup objRoot = new BranchGroup();
    TransformGroup objScale = new TransformGroup();
    objRoot.addChild(objScale);
    WorldBounds = new BoundingSphere(origin, (getViewSize() * ROAD_Z) * 2);
    RoverGrp = new TransformGroup();
    RoverGrp.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
    RoverGrp.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
    objScale.addChild(RoverGrp);
    Point3f att = new Point3f(.5f, 0, 0);
    if (LIGHTS) {
        if (SPOTLIGHTS) {
            Vector3f dir = new Vector3f(0, 0, 1);
            float spread = (float) Math.PI / HeadSpreadFactor;
            HeadLights = new SpotLight(true, WHITE, new Point3f(origin), att, dir, spread, 1f);
            HeadLights.setCapability(PointLight.ALLOW_POSITION_READ);
            HeadLights.setCapability(PointLight.ALLOW_POSITION_WRITE);
            HeadLights.setCapability(SpotLight.ALLOW_DIRECTION_READ);
            HeadLights.setCapability(SpotLight.ALLOW_DIRECTION_WRITE);
            HeadLights.setInfluencingBounds(WorldBounds);
            objScale.addChild(HeadLights);
        } else {
            HeadLights = new PointLight(true, WHITE, new Point3f(origin), att);
            HeadLights.setCapability(PointLight.ALLOW_POSITION_WRITE);
            HeadLights.setInfluencingBounds(WorldBounds);
            objScale.addChild(HeadLights);
        }
    }
    TransformGroup[][] RoadGrp = loadRoads(ROAD_X, ROAD_Z);
    for (int x = 0; x < ROAD_X; x++) for (int z = 0; z < ROAD_Z; z++) {
        objScale.addChild(RoadGrp[x][z]);
        System.out.print(".");
    }
    System.out.println();
    System.out.println("loaded.");
    return objRoot;
}
