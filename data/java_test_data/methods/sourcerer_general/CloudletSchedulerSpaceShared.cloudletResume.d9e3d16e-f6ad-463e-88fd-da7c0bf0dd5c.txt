@Override
public double cloudletResume(int cloudletId) {
    boolean found = false;
    int position = 0;
    // look for the cloudlet in the paused list
    for (ResCloudlet rcl : getCloudletPausedList()) {
        if (rcl.getCloudletId() == cloudletId) {
            found = true;
            break;
        }
        position++;
    }
    if (found) {
        ResCloudlet rcl = getCloudletPausedList().remove(position);
        if ((currentCpus - usedPes) >= rcl.getPesNumber()) {
            // it can go to the exec list
            rcl.setCloudletStatus(Cloudlet.INEXEC);
            for (int i = 0; i < rcl.getPesNumber(); i++) {
                rcl.setMachineAndPeId(0, i);
            }
            long size = rcl.getRemainingCloudletLength();
            size *= rcl.getPesNumber();
            rcl.getCloudlet().setCloudletLength(size);
            getCloudletExecList().add(rcl);
            usedPes += rcl.getPesNumber();
            // calculate the expected time for cloudlet completion
            double capacity = 0.0;
            int cpus = 0;
            for (Double mips : getCurrentMipsShare()) {
                capacity += mips;
                if (mips > 0) {
                    cpus++;
                }
            }
            currentCpus = cpus;
            capacity /= cpus;
            long remainingLength = rcl.getRemainingCloudletLength();
            double estimatedFinishTime = CloudSim.clock() + (remainingLength / (capacity * rcl.getPesNumber()));
            return estimatedFinishTime;
        } else {
            // no enough free PEs: go to the waiting queue
            rcl.setCloudletStatus(Cloudlet.QUEUED);
            long size = rcl.getRemainingCloudletLength();
            size *= rcl.getPesNumber();
            rcl.getCloudlet().setCloudletLength(size);
            getCloudletWaitingList().add(rcl);
            return 0.0;
        }
    }
    // not found in the paused list: either it is in in the queue, executing or not exist
    return 0.0;
}
