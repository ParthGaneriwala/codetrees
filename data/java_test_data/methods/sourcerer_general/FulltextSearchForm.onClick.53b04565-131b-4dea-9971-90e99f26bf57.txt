@Override
public void onClick(View paramView) {
    if (paramView == btSystemPicker) {
        alert.show();
    } else if (paramView == img) {
        Intent explicitIntent = new Intent(FulltextSearchForm.this, CheatDatabaseAndroid.class);
        startActivity(explicitIntent);
    } else if (paramView == btSearch) {
        // Selektierte Systeme auslesen und ins korrekte Format bringen
        // (String: 1,34,21,15)
        Iterator<?> it = hmSelectedSystems.entrySet().iterator();
        String[] selSys = new String[hmSelectedSystems.size()];
        String selectedSystemsImplodedString = "";
        int u = 0;
        while (it.hasNext()) {
            Map.Entry<?, ?> pairs = (Map.Entry<?, ?>) it.next();
            selSys[u] = String.valueOf(pairs.getKey());
            u++;
        }
        if (selSys.length == 0) {
            selectedSystemsImplodedString = "";
        } else {
            StringBuffer sb = new StringBuffer();
            sb.append(selSys[0]);
            for (int i = 1; i < selSys.length; i++) {
                sb.append(",");
                sb.append(selSys[i]);
            }
            selectedSystemsImplodedString = sb.toString();
        }
        if (selectedSystemsImplodedString.length() < 1) {
            Toast.makeText(FulltextSearchForm.this, R.string.fulltext_search_error_nosystem_selected, Toast.LENGTH_LONG).show();
        } else {
            // Volltextsuche ausfï¿½hren
            String resultString = "no_internet";
            if (cm.getActiveNetworkInfo() != null) {
                resultString = GetDataFromWeb.fulltextSearchToJSONString(etSearchQuery.getText().toString().trim(), "", "", selectedSystemsImplodedString, searchCheatTitlesToo);
                // Volltext-Suchresultat in Flat-File speichern
                FileOutputStream fos;
                try {
                    fos = openFileOutput(FulltextSearchResult.SEARCHRESULT_FILENAME, Context.MODE_PRIVATE);
                    fos.write(resultString.getBytes());
                    fos.flush();
                    fos.close();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (resultString == null) {
                Toast.makeText(FulltextSearchForm.this, R.string.errorMsgTitle, Toast.LENGTH_LONG).show();
            } else if (resultString.length() < 10) {
                Toast.makeText(FulltextSearchForm.this, R.string.errorMsgTitle, Toast.LENGTH_LONG).show();
            } else if (resultString.equalsIgnoreCase("no_internet")) {
                Toast.makeText(FulltextSearchForm.this, R.string.no_internet, Toast.LENGTH_SHORT).show();
            } else {
                Intent explicitIntent = new Intent(FulltextSearchForm.this, FulltextSearchResult.class);
                startActivity(explicitIntent);
            }
        }
    }
}
