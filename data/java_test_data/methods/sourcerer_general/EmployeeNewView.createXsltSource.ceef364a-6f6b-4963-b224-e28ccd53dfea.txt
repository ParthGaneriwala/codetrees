@SuppressWarnings("unchecked")
public Source createXsltSource(Map model, String rootName, HttpServletRequest request, HttpServletResponse response) {
    Document document = null;
    try {
        document = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    } catch (ParserConfigurationException e) {
        e.printStackTrace();
        return null;
    }
    Element root = document.createElement(rootName);
    logger.info(rootName);
    String errorMessage = (String) model.get("error_message");
    if (errorMessage == null) {
        errorMessage = "";
    }
    Element errorMessageNode = document.createElement("error_message");
    Text errorMessageText = document.createTextNode(errorMessage);
    errorMessageNode.appendChild(errorMessageText);
    root.appendChild(errorMessageNode);
    Element jobsNode = document.createElement("jobs");
    List<Job> jobs = (List<Job>) model.get("jobs");
    logger.info("there are " + jobs.size() + " jobs");
    logger.info(rootName);
    for (Iterator<Job> it = jobs.iterator(); it.hasNext(); ) {
        Job nextJob = (Job) it.next();
        Element jobNode = document.createElement("job");
        // job id
        Element idNode = document.createElement("id");
        Text textNode = document.createTextNode(nextJob.getId());
        idNode.appendChild(textNode);
        jobNode.appendChild(idNode);
        // job title
        Element titleNode = document.createElement("title");
        textNode = document.createTextNode(nextJob.getTitle());
        titleNode.appendChild(textNode);
        jobNode.appendChild(titleNode);
        jobsNode.appendChild(jobNode);
    }
    root.appendChild(jobsNode);
    Source result = new DOMSource(root);
    return result;
}
