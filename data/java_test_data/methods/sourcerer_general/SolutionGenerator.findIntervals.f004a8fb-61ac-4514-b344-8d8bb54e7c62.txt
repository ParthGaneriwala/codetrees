private static HashSet<int[]> findIntervals(int[] ySequence, int indexFirstY, int mult, int y) {
    // stores the index of the first y
    int indexOfFirstY = indexFirstY;
    // records the next y that we are trying to reach
    int indexOfSecondY = 0;
    int multiplicity = mult;
    // used to let the algorithm to perform different tasks in the execution
    int status = 0;
    // used to understand if there is any number n<y between the two y
    boolean seeEachOther = true;
    boolean coveredAtLeastTwoYi = false;
    // stores the interval that we have found
    int[] interval = new int[2];
    // temp variable used for mixed purposes
    int tmpIndex = -1;
    // here we store the set of intervals
    HashSet<int[]> intervalsSet = new HashSet<int[]>();
    while (true) {
        switch(status) {
            case 0:
                coveredAtLeastTwoYi = false;
                seeEachOther = true;
                // try to extend the interval to the left
                tmpIndex = indexOfFirstY;
                while ((tmpIndex > 0) && (ySequence[tmpIndex - 1] >= y)) tmpIndex--;
                // update our interval
                interval[0] = tmpIndex;
                interval[1] = indexOfFirstY;
            case 1:
                // we are proceeding towards the next y. "register" this event
                multiplicity--;
                // find the next occurrence of y and see also if the interval can be created
                // records until which index we arrive, in case !seeEachOther
                tmpIndex = indexOfFirstY;
                // records the index of the next occurrence of Y
                indexOfSecondY = indexOfFirstY + 1;
                for (; indexOfSecondY < ySequence.length; indexOfSecondY++) {
                    if (ySequence[indexOfSecondY] == y)
                        break;
                    if (ySequence[indexOfSecondY] > y && seeEachOther)
                        tmpIndex++;
                    else
                        seeEachOther = false;
                }
                if (seeEachOther) {
                    // we can make the interval between indexOfFirstY and indexOfSecondY
                    if (multiplicity == 0) {
                        // if this was the last y...
                        // ... first let's see if we can go to the right some more
                        tmpIndex = indexOfSecondY;
                        while ((tmpIndex < ySequence.length - 1) && (ySequence[tmpIndex + 1] >= y)) tmpIndex++;
                        interval[1] = tmpIndex;
                        intervalsSet.add(interval);
                        return intervalsSet;
                    } else {
                        coveredAtLeastTwoYi = true;
                        status = 1;
                    }
                } else {
                    // they don't "see" each other
                    if (!coveredAtLeastTwoYi) {
                        if (// only one yi remaining
                        multiplicity == 0)
                            return intervalsSet;
                    } else {
                        interval[1] = tmpIndex;
                        intervalsSet.add(interval);
                        if (multiplicity == 0)
                            return intervalsSet;
                    }
                    status = 0;
                }
                indexOfFirstY = indexOfSecondY;
                break;
        }
    }
}
