@Override
public Object visit(Proc_Call proc_call, Object o) {
    String chamadaProcedimento = (String) o;
    String retorno = "";
    Identifier ident = proc_call.getIdentifier();
    Param_Value pm = proc_call.getParamValue();
    retorno = (String) pm.accept(this, ident);
    if (chamadaProcedimento.equalsIgnoreCase("NAO")) {
        String identificador = ident.getText();
        TypeInformation declaracaoFuncao = tabelaDeSimbolos.GetIdentifierType(ident);
        String tipo = TypeInformation.getValorCodigoGerado(declaracaoFuncao.getTypeIdentifier());
        retorno += "\tcall \t " + tipo + " " + this.nomePrograma + "::" + identificador + "(";
        Iterator<MyGrammarPrimitiveType> iterator = declaracaoFuncao.getTypesParametros().iterator();
        boolean ehOPrimeiro = true;
        while (iterator.hasNext()) {
            MyGrammarPrimitiveType tipoatual = iterator.next();
            if (ehOPrimeiro) {
                retorno += TypeInformation.getValorCodigoGerado(tipoatual);
                ehOPrimeiro = false;
            } else {
                retorno += ", " + TypeInformation.getValorCodigoGerado(tipoatual);
            }
        }
        retorno += ")\n";
    } else if (chamadaProcedimento.equalsIgnoreCase("SIM")) {
        String identificador = ident.getText();
        TypeInformation declaracaoFuncao = tabelaDeSimbolos.GetIdentifierType(ident);
        String tipo = TypeInformation.getValorCodigoGerado(declaracaoFuncao.getTypeIdentifier());
        retorno += "\tcall \t void " + this.nomePrograma + "::" + identificador + "(";
        Iterator<MyGrammarPrimitiveType> iterator = declaracaoFuncao.getTypesParametros().iterator();
        boolean ehOPrimeiro = true;
        while (iterator.hasNext()) {
            MyGrammarPrimitiveType tipoatual = iterator.next();
            if (ehOPrimeiro) {
                retorno += TypeInformation.getValorCodigoGerado(tipoatual);
                ehOPrimeiro = false;
            } else {
                retorno += ", " + TypeInformation.getValorCodigoGerado(tipoatual);
            }
        }
        retorno += ")\n";
    }
    return retorno;
}
