/**
 * FuncÃµes que ja foram definidas no programa fonte sendo analisado.
 */
// protected SemanticFunction[] semanticFunctions;
public void geraCodigo(int semanticFunction, Token t) {
    switch(semanticFunction) {
        case 0:
            break;
        case // BEGIN_MAIN
        1:
            out.print("MAIN ");
            for (String s : globaisUsadas) {
                if (!varScope.contains(s)) {
                    throw new Error("Variavel usada em funcao, como variavel global, mas nao declarada: " + s);
                }
            }
            break;
        case // VAR_DECL
        2:
            var_size = 1;
            var = t;
            if (!varScope.contains(t.getID())) {
                varScope.add(t.getID());
            } else {
                throw new Error("Variavel Ja existe.");
            }
            break;
        case // VAR_SIZE
        26:
            var_size = Integer.parseInt(t.getID());
            break;
        case // VAR
        25:
            if (var_size > 1) {
                for (int i = 0; i < var_size; i++) {
                    out.println(var.getID() + i + "_" + currentScopeNumber + "\t$\t=2");
                }
            } else {
                out.println(var.getID() + currentScopeNumber + "\t$\t=2");
            }
            var_size = 1;
            break;
        case // NOVO_ESCOPO
        3:
            currentScopeNumber++;
            if (t.getID().equals("program")) {
                currentScopeNumber = 0;
            }
            System.out.println("NOVO ESCOPO: " + t.getID());
            varScope = new ArrayList<String>();
            break;
        case // ASSIGNMENT_VAR
        4:
            if (!varScope.contains(t.getID())) {
                throw new Error("Variavel nao declarada: " + t.getID());
            }
            assignment_var = t.getID();
            break;
        case // ASSIGN_VEC_POS
        28:
            assignment_var = assignment_var + Integer.parseInt(t.getID()) + "_";
            break;
        case // ASSIGNMENT_VALUE
        5:
            finalizaCodigoExpressao(t);
            out.println("\tMM\t" + assignment_var + currentScopeNumber + "");
            break;
        case // INT_STACK_EXP
        6:
            t.setTokenType(AnSemantico.OP_INT);
            t.setID("K" + t.getID());
            if (!declaracoesConst.contains(t)) {
                declaracoesConst.push(t);
            }
            operandosExp.push(t);
            break;
        case // OPRT_STACK_EXP
        7:
            t = definePrecedencia(t);
            if (operadoresExp.empty()) {
                operadoresExp.push(t);
            } else {
                geraCodigoExpressao(t);
                operadoresExp.push(t);
            }
            break;
        case // PROGRAM_END
        8:
            out.println("\tHM\t/0000");
            declaraConstantes();
            declaraTemporarias();
            break;
        case // THEN_IF
        9:
            finalizaCodigoExpressao(t);
            ifNumber++;
            elseStack.push(new Token("ELSE", ifNumber));
            out.println("\tJZ\tELSE" + ifNumber);
            break;
        case // IF_SEM_ELSE
        10:
            t = elseStack.pop();
            out.println(t.getID() + t.getTokenType() + "\tJP\tIFEND" + t.getTokenType());
            ifEndStack.push(new Token("IFEND", t.getTokenType()));
        // nao usar o break!!
        case // IFEND
        11:
            t = ifEndStack.pop();
            out.print(t.getID() + t.getTokenType());
            break;
        case // ELSE
        12:
            t = elseStack.pop();
            ifEndStack.push(new Token("IFEND", t.getTokenType()));
            out.println("\tJP\tIFEND" + t.getTokenType());
            out.print(t.getID() + t.getTokenType());
            break;
        case // WHILE
        13:
            whileNumber++;
            out.print("WHILE" + whileNumber);
            t.setID("ENDLOOP");
            t.setTokenType(whileNumber);
            whileStack.push(t);
            break;
        case // LOOP
        14:
            finalizaCodigoExpressao(t);
            out.println("\tJZ\t" + whileStack.peek().getID() + whileStack.peek().getTokenType());
            break;
        case // END_LOOP
        15:
            t = whileStack.pop();
            out.println("\tJP\tWHILE" + t.getTokenType());
            out.print(t.getID() + t.getTokenType());
            break;
        case // FUNC_NAME
        16:
            if (!definedFunctions.contains(t)) {
                definedFunctions.push(t);
            } else {
                throw new Error("Function was defined already: " + t.getID());
            }
            break;
        case // BEGIN_FUNC
        17:
            out.println(definedFunctions.peek().getID() + "\tJP\t/0000");
            break;
        case // FUNC_RETURN
        18:
            finalizaCodigoExpressao(t);
            out.println("\tRS\t" + definedFunctions.peek().getID());
            break;
        case // VAR_STACK_EXP
        19:
            t.setTokenType(AnSemantico.OP_VAR);
            if (!varScope.contains(t.getID())) {
                if (!this.definedFunctions.contains(t)) {
                    if (currentScopeNumber == 0) {
                        throw new Error("Variavel/Funcao nao declarada: " + t.getID());
                    } else {
                        t.setTokenType(AnSemantico.OP_GLOBAL);
                        globaisUsadas.add(t.getID());
                        t.setID(t.getID() + "0");
                    }
                }
            }
            operandosExp.push(t);
            break;
        case // FUNCTION_STACK_EXP
        20:
            Token op = operandosExp.pop();
            op.setTokenType(AnSemantico.OP_FUNCTION);
            operandosExp.push(op);
            break;
        case // VECTOR_STACK_EXP
        27:
            Token vec = operandosExp.pop();
            vec.setTokenType(AnSemantico.OP_VAR);
            vec.setID(vec.getID() + Integer.parseInt(t.getID()) + "_");
            operandosExp.push(vec);
            break;
        case // INPUT
        21:
            isInput = true;
            isOutput = false;
            break;
        case // IO_VAR
        22:
            ioVar = t;
            break;
        case // IO_END
        23:
            isInput = false;
            isOutput = false;
            break;
        case // OUTPUT
        24:
            isInput = false;
            isOutput = true;
            break;
        case // GENERATE_IO
        29:
            if (isInput) {
                out.println("\tGD\t/0000");
                out.println("\tMM\t" + ioVar.getID() + currentScopeNumber);
            } else if (isOutput) {
                out.println("\tLD\t" + ioVar.getID() + currentScopeNumber);
                out.println("\tPD\t/0100");
            }
            break;
        case // INPUT_VEC
        30:
            ioVar.setID(ioVar.getID() + Integer.parseInt(t.getID()) + "_");
            break;
        default:
    }
}
