private void initPreferredSize(Dimension available, Container parent) {
    // If columnCount has changed, we need to remove the extra columns
    while (columns.size() > columnCount) {
        columns.remove(columns.size() - 1);
    }
    // Iterate through children
    Component c;
    TableCell cell;
    int currentColumn = 0;
    int currentRow = 0;
    Dimension d;
    int[] used = new int[columnCount];
    for (int i = 0; i < parent.getComponentCount(); i++) {
        if (currentColumn >= columnCount) {
            currentColumn = 0;
            currentRow++;
        }
        if (used[currentColumn] > 0) {
            used[currentColumn]--;
            currentColumn++;
            continue;
        }
        c = parent.getComponent(i);
        cell = getCell(c);
        d = cell.getPreferredSize(parent);
        if (d.width / cell.getColumnSpan() > getColumn(currentColumn).getPreferredWidth()) {
            getColumn(currentColumn).setPreferredWidth(d.width / cell.getColumnSpan());
        }
        if (d.height / cell.getRowSpan() > getRow(currentRow).getPreferredHeight()) {
            getRow(currentRow).setPreferredHeight(d.height / cell.getRowSpan());
        }
        d = cell.getMinimumSize(parent);
        if (d.width / cell.getColumnSpan() > getColumn(currentColumn).getMinimumWidth()) {
            getColumn(currentColumn).setMinimumWidth(d.width / cell.getColumnSpan());
        }
        if (d.height / cell.getRowSpan() > getRow(currentRow).getMinimumHeight()) {
            getRow(currentRow).setMinimumHeight(d.height / cell.getRowSpan());
        }
        used[currentColumn] = cell.getRowSpan() - 1;
        currentColumn += cell.getColumnSpan();
    }
    int maxPreferredWidth = 0;
    int maxMinimumWidth = 0;
    for (int i = 0; i < columns.size(); i++) {
        if (columns.get(i).isDynamic()) {
            maxPreferredWidth += columns.get(i).getPreferredWidth();
        } else if (columns.get(i).isStatic()) {
            maxPreferredWidth += columns.get(i).getWidth();
        } else if (columns.get(i).isPercent()) {
            maxPreferredWidth += Math.round(columns.get(i).getPercent() * available.width);
        }
        maxMinimumWidth += columns.get(i).getMinimumWidth();
    }
    // Account for border on panel
    if (parent instanceof JComponent) {
        Border border = ((JComponent) parent).getBorder();
        if (border != null) {
            int borderWidth = border.getBorderInsets(parent).left + border.getBorderInsets(parent).right;
            maxPreferredWidth += borderWidth;
            maxMinimumWidth += borderWidth;
        }
    }
    int maxPreferredHeight = 0;
    int maxMinimumHeight = 0;
    for (int i = 0; i < rows.size(); i++) {
        if (rows.get(i).isDynamic()) {
            maxPreferredHeight += rows.get(i).getPreferredHeight();
        } else if (rows.get(i).isStatic()) {
            maxPreferredHeight += rows.get(i).getHeight();
        } else if (rows.get(i).isPercent()) {
            maxPreferredHeight += Math.round(rows.get(i).getPercent() * available.height);
        // System.out.println("Setting height: " + Math.round(rows.get(i).getPercent() * available.height) + ", " + available.height);
        }
        maxMinimumHeight += rows.get(i).getMinimumHeight();
    }
    // Account for border on panel
    if (parent instanceof JComponent) {
        Border border = ((JComponent) parent).getBorder();
        if (border != null) {
            int borderHeight = border.getBorderInsets(parent).top + border.getBorderInsets(parent).bottom;
            maxPreferredHeight += borderHeight;
            maxMinimumHeight += borderHeight;
        }
    }
    minimumSize = new Dimension(maxMinimumWidth, maxMinimumHeight);
    preferredSize = new Dimension(maxPreferredWidth, maxPreferredHeight);
    if (cells.size() > parent.getComponentCount()) {
        clean(parent);
    }
    // If the row count has changed we need to remove
    while (rows.size() > currentRow + 1) {
        rows.remove(rows.size() - 1);
    }
}
