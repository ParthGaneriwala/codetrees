private void renderPointer(Canvas g, int x, int y, double bearing) {
    // This is the "normalized" triangle locator we want to generate.
    // 
    // (x0, y0)
    // *
    // * *
    // *   *
    // *     *
    // (x2, y2) ********* (x1, y1)
    // 
    // It's normalized in the sense that initially it's always upright
    // with the center at (0,0). Then, given theta, we rotate it locally
    // and translate to its world cordinate, (x,y).
    // If the position has changed, update the poly
    // First reset the poly at its initial position
    mVertices = new ArrayList<Point>();
    Point point = new Point(0, -(POLY_HT) / 2);
    mVertices.add(point);
    point = new Point(POLY_BASE / 2, POLY_HT / 2);
    mVertices.add(point);
    point = new Point(-(POLY_BASE) / 2, POLY_HT / 2);
    mVertices.add(point);
    VectorOps.rotate(mVertices.get(0), bearing);
    VectorOps.rotate(mVertices.get(1), bearing);
    VectorOps.rotate(mVertices.get(2), bearing);
    // Translate the poly  to its screen co-ordinates with
    // offset (for the shadow).
    mVertices.get(0).x += x;
    mVertices.get(0).y += y;
    mVertices.get(1).x += x;
    mVertices.get(1).y += y;
    mVertices.get(2).x += x;
    mVertices.get(2).y += y;
    // Render the poly
    // In the android to make shapes or to draw polygons we need to take the
    // help of path here moveTo is the starting point and lineTo is the
    // ending point.
    Path triangle = new Path();
    triangle.moveTo(mVertices.get(0).x, mVertices.get(0).y);
    triangle.lineTo(mVertices.get(1).x, mVertices.get(1).y);
    // triangle.moveTo(m_ver.get(1).x, m_ver.get(1).y);
    triangle.lineTo(mVertices.get(2).x, mVertices.get(2).y);
    // triangle.moveTo(m_ver.get(2).x, m_ver.get(2).y);
    // triangle.lineTo(m_ver.get(0).x, m_ver.get(0).y);
    // Style.FILL -fills the polygon and style.STROKE gives outline
    mPointerBrush.setStyle(Style.FILL_AND_STROKE);
    mOutlinePen.setColor(Color.BLACK);
    mOutlinePen.setStyle(Style.STROKE);
    g.drawPath(triangle, mPointerBrush);
    // Log.v("BrushColor",mPointerBrush.getColor()+""+mPointerBrush.getStyle());
    g.drawPath(triangle, mOutlinePen);
    triangle.close();
}
