private void printJobAnalysis() {
    if (!Values.SUCCESS.name().equals(job.get(Keys.JOB_STATUS))) {
        System.out.println("No Analysis available as job did not finish");
        return;
    }
    Map<String, JobHistory.Task> tasks = job.getAllTasks();
    int finishedMaps = job.getInt(Keys.FINISHED_MAPS);
    int finishedReduces = job.getInt(Keys.FINISHED_REDUCES);
    JobHistory.Task[] mapTasks = new JobHistory.Task[finishedMaps];
    JobHistory.Task[] reduceTasks = new JobHistory.Task[finishedReduces];
    int mapIndex = 0, reduceIndex = 0;
    long avgMapTime = 0;
    long avgReduceTime = 0;
    long avgShuffleTime = 0;
    for (JobHistory.Task task : tasks.values()) {
        Map<String, TaskAttempt> attempts = task.getTaskAttempts();
        for (JobHistory.TaskAttempt attempt : attempts.values()) {
            if (attempt.get(Keys.TASK_STATUS).equals(Values.SUCCESS.name())) {
                long avgFinishTime = (attempt.getLong(Keys.FINISH_TIME) - attempt.getLong(Keys.START_TIME));
                if (Values.MAP.name().equals(task.get(Keys.TASK_TYPE))) {
                    mapTasks[mapIndex++] = attempt;
                    avgMapTime += avgFinishTime;
                } else if (Values.REDUCE.name().equals(task.get(Keys.TASK_TYPE))) {
                    reduceTasks[reduceIndex++] = attempt;
                    avgShuffleTime += (attempt.getLong(Keys.SHUFFLE_FINISHED) - attempt.getLong(Keys.START_TIME));
                    avgReduceTime += (attempt.getLong(Keys.FINISH_TIME) - attempt.getLong(Keys.SHUFFLE_FINISHED));
                }
                break;
            }
        }
    }
    if (finishedMaps > 0) {
        avgMapTime /= finishedMaps;
    }
    if (finishedReduces > 0) {
        avgReduceTime /= finishedReduces;
        avgShuffleTime /= finishedReduces;
    }
    System.out.println("\nAnalysis");
    System.out.println("=========");
    printAnalysis(mapTasks, cMap, "map", avgMapTime, 10);
    printLast(mapTasks, "map", cFinishMapRed);
    if (reduceTasks.length > 0) {
        printAnalysis(reduceTasks, cShuffle, "shuffle", avgShuffleTime, 10);
        printLast(reduceTasks, "shuffle", cFinishShuffle);
        printAnalysis(reduceTasks, cReduce, "reduce", avgReduceTime, 10);
        printLast(reduceTasks, "reduce", cFinishMapRed);
    }
    System.out.println("=========");
}
