private Rule doParseRule(boolean retainVarMap) {
    try {
        // Skip initial '[' if present
        if (peekToken().equals("[")) {
            nextToken();
        }
        // Check for optional name
        String name = null;
        String token = peekToken();
        if (token.endsWith(":")) {
            name = token.substring(0, token.length() - 1);
            nextToken();
        }
        // Start rule parsing with empty variable table
        if (!retainVarMap)
            varMap = new HashMap();
        // Body
        List body = new ArrayList();
        token = peekToken();
        while (!(token.equals("->") || token.equals("<-"))) {
            body.add(parseClause());
            token = peekToken();
        }
        boolean backwardRule = token.equals("<-");
        List head = new ArrayList();
        // skip -> token
        token = nextToken();
        token = peekToken();
        while (!(token.equals(".") || token.equals("]"))) {
            head.add(parseClause());
            token = peekToken();
        }
        // consume the terminating token
        nextToken();
        Rule r = null;
        if (backwardRule) {
            r = new Rule(name, body, head);
        } else {
            r = new Rule(name, head, body);
        }
        r.numVars = varMap.keySet().size();
        r.isBackward = backwardRule;
        return r;
    } catch (NoSuchElementException e) {
        throw new ParserException("Malformed rule", this);
    }
}
