@Override
public void datagramReceived(DatagramEvent evt) {
    Datagram datagram = evt.getDatagram();
    int code = datagram.getId();
    switch(code) {
        case Datagram.DG_NOTIFY_ARRIVED:
            {
                String player = datagram.getString(0);
                processPlayerArrived(player);
                break;
            }
        case Datagram.DG_NOTIFY_LEFT:
            {
                String player = datagram.getString(0);
                processPlayerDeparted(player);
                break;
            }
        case Datagram.DG_NOTIFY_STATE:
            {
                String player = datagram.getString(0);
                String stateCode = datagram.getString(1);
                PlayerState status = PlayerState.forCode(stateCode);
                int game = datagram.getInteger(2);
                processPlayerStateChange(player, status, game);
                break;
            }
        case Datagram.DG_PERSONAL_TELL:
            {
                String teller = datagram.getString(0);
                String titles = datagram.getString(1);
                String message = datagram.getString(2);
                int tellType = datagram.getInteger(3);
                if (tellType == ChessclubConstants.REGULAR_TELL) {
                    processPersonalTell(teller, titles, message, tellType);
                }
                break;
            }
        case Datagram.DG_MY_NOTIFY_LIST:
            {
                break;
            }
        case Datagram.DG_MY_GAME_RESULT:
            {
                int gameNumber = datagram.getInteger(0);
                boolean becomesExamined = datagram.getBoolean(1);
                String gameResultCode = datagram.getString(2);
                String scoreString = datagram.getString(3);
                String descriptionString = datagram.getString(4);
                processMyGameResult(gameNumber, becomesExamined, gameResultCode, scoreString, descriptionString);
                break;
            }
        case Datagram.DG_STARTED_OBSERVING:
            {
                int gameNumber = datagram.getInteger(0);
                String whiteName = datagram.getString(1);
                String blackName = datagram.getString(2);
                int wildNumber = datagram.getInteger(3);
                String ratingCategoryString = datagram.getString(4);
                boolean isRated = datagram.getBoolean(5);
                int whiteInitial = datagram.getInteger(6);
                int whiteIncrement = datagram.getInteger(7);
                int blackInitial = datagram.getInteger(8);
                int blackIncrement = datagram.getInteger(9);
                boolean isPlayedGame = datagram.getBoolean(10);
                String exString = datagram.getString(11);
                int whiteRating = datagram.getInteger(12);
                int blackRating = datagram.getInteger(13);
                long gameID = datagram.getLong(14);
                String whiteTitles = datagram.getString(15);
                String blackTitles = datagram.getString(16);
                boolean isIrregularLegality = datagram.getBoolean(17);
                boolean isIrregularSemantics = datagram.getBoolean(18);
                boolean usesPlunkers = datagram.getBoolean(19);
                String fancyTimeControls = datagram.getString(20);
                processStartedObserving(gameNumber, whiteName, blackName, wildNumber, ratingCategoryString, isRated, whiteInitial, whiteIncrement, blackInitial, blackIncrement, isPlayedGame, exString, whiteRating, blackRating, gameID, whiteTitles, blackTitles, isIrregularLegality, isIrregularSemantics, usesPlunkers, fancyTimeControls);
                break;
            }
        case Datagram.DG_MOVE_LIST:
            {
                int gameNumber = datagram.getInteger(0);
                String initialPosition = datagram.getString(1);
                int numHalfMoves = datagram.getFieldCount() - 2;
                processMoveList(gameNumber, initialPosition, numHalfMoves);
                break;
            }
        case Datagram.DG_SEND_MOVES:
            {
                break;
            }
        case Datagram.DG_PLAYERS_IN_MY_GAME:
            {
                int gameNumber = datagram.getInteger(0);
                String playerHandle = datagram.getString(1);
                String statusSymbol = datagram.getString(2);
                boolean seesKibitz = datagram.getBoolean(3);
                PlayerState status = PlayerState.forCode(statusSymbol);
                processPlayersInMyGame(gameNumber, playerHandle, status, seesKibitz);
                break;
            }
    }
}
