public static String toHtml(CustomFormField field, Wiki wiki, String contextPath) {
    // Return output based on type
    switch(field.getType()) {
        case CustomFormField.TEXTAREA:
            String textAreaValue = StringUtils.replace(field.getValue(), "^", CRLF);
            return StringUtils.toHtml(textAreaValue);
        case CustomFormField.SELECT:
            return StringUtils.toHtml(field.getValue());
        case CustomFormField.CHECKBOX:
            if ("true".equals(field.getValue())) {
                return "Yes";
            } else {
                return "No";
            }
        case CustomFormField.CALENDAR:
            String calendarValue = field.getValue();
            if (StringUtils.hasText(calendarValue)) {
                try {
                    String convertedDate = DateUtils.getUserToServerDateTimeString(null, DateFormat.SHORT, DateFormat.LONG, field.getValue());
                    Timestamp timestamp = DatabaseUtils.parseTimestamp(convertedDate);
                    Locale locale = Locale.getDefault();
                    int dateFormat = DateFormat.SHORT;
                    SimpleDateFormat dateFormatter = (SimpleDateFormat) SimpleDateFormat.getDateInstance(dateFormat, locale);
                    calendarValue = dateFormatter.format(timestamp);
                } catch (Exception e) {
                    LOG.error(e);
                }
            }
            return StringUtils.toHtml(calendarValue);
        case CustomFormField.PERCENT:
            return StringUtils.toHtml(field.getValue()) + "%";
        case CustomFormField.INTEGER:
            // Determine the value to display in the field
            String integerValue = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(integerValue)) {
                try {
                    NumberFormat formatter = NumberFormat.getInstance();
                    integerValue = formatter.format(StringUtils.getIntegerNumber(field.getValue()));
                } catch (Exception e) {
                    LOG.warn("Could not integer format: " + field.getValue());
                }
            }
            return integerValue;
        case CustomFormField.FLOAT:
            // Determine the value to display in the field
            String decimalValue = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(decimalValue)) {
                try {
                    NumberFormat formatter = NumberFormat.getInstance();
                    decimalValue = formatter.format(StringUtils.getDoubleNumber(field.getValue()));
                } catch (Exception e) {
                    LOG.warn("Could not decimal format: " + field.getValue());
                }
            }
            return decimalValue;
        case CustomFormField.CURRENCY:
            // Use a currency for formatting
            String currencyCode = field.getValueCurrency();
            if (currencyCode == null) {
                currencyCode = field.getCurrency();
            }
            if (!StringUtils.hasText(currencyCode)) {
                currencyCode = "USD";
            }
            try {
                NumberFormat formatter = NumberFormat.getCurrencyInstance();
                if (currencyCode != null) {
                    Currency currency = Currency.getInstance(currencyCode);
                    formatter.setCurrency(currency);
                }
                return (StringUtils.toHtml(formatter.format(StringUtils.getDoubleNumber(field.getValue()))));
            } catch (Exception e) {
                LOG.error(e.getMessage());
            }
            return StringUtils.toHtml(field.getValue());
        case CustomFormField.EMAIL:
            return StringUtils.toHtml(field.getValue());
        case CustomFormField.PHONE:
            PhoneNumberBean phone = new PhoneNumberBean();
            phone.setNumber(field.getValue());
            PhoneNumberUtils.format(phone, Locale.getDefault());
            return StringUtils.toHtml(phone.toString());
        case CustomFormField.URL:
            String value = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(value)) {
                if (!value.contains("://")) {
                    value = "http://" + value;
                }
                if (value.contains("://")) {
                    return ("<a href=\"" + StringUtils.toHtml(value) + "\">" + StringUtils.toHtml(value) + "</a>");
                }
            }
            return StringUtils.toHtml(value);
        case CustomFormField.IMAGE:
            String image = StringUtils.toHtmlValue(field.getValue());
            if (StringUtils.hasText(image)) {
                Project project = ProjectUtils.loadProject(wiki.getProjectId());
                return ("<img src=\"" + contextPath + "/show/" + project.getUniqueId() + "/wiki-image/" + image + "\"/>");
            }
            return StringUtils.toHtml(image);
        default:
            return StringUtils.toHtml(field.getValue());
    }
}
