public void nxtValue(String carac) {
    if (carac.compareTo(" ") != 0 && carac.compareTo("\t") != 0 && carac.compareTo("\n") != 0) {
        String Type = "Unknown";
        // Check if is a number
        for (int i = 0; i < dig.length && Type.compareTo("Number") != 0; i++) {
            if (carac.compareTo(dig[i]) == 0) {
                Type = "Number";
            }
        }
        if (Type.compareTo("Number") != 0) {
            // Check if is a letter
            for (int i = 0; i < letra.length && Type.compareTo("Letter") != 0; i++) {
                if (carac.compareTo(letra[i]) == 0) {
                    Type = "Letter";
                }
            }
            if (Type.compareTo("Letter") != 0) {
                // Check if is a symbol
                for (int i = 0; i < symbol.length && Type.compareTo("Symbol") != 0; i++) {
                    if (carac.compareTo(symbol[i]) == 0) {
                        Type = "Symbol";
                    }
                }
            }
        }
        // If no state was found, then an error state is set
        if (Type.compareTo("Unknown") == 0) {
            this.word = word.concat(carac);
            State = "ERROR_UNK_CHAR";
        } else // Defines the type of the token, based on the consumed caracter
        {
            if (Type == "Number") {
                this.word = word.concat(carac);
                if (this.State == "Start") {
                    this.State = "NUM";
                }
                if (this.State == "SYMB") {
                    this.State = "ERROR_UNK_WORD";
                } else if (this.State == "VEC1") {
                    this.State = "E_VEC1";
                }
            } else if (Type == "Letter") {
                this.word = word.concat(carac);
                if (this.State == "Start") {
                    this.State = "ID";
                } else if (this.State == "NUM") {
                    this.State = "ERROR_UNK_WORD";
                } else if (this.State == "SYMB") {
                    this.State = "ERROR_UNK_WORD";
                } else if (this.State == "VEC1") {
                    this.State = "ERROR_UNK_WORD";
                }
            } else if (Type == "Symbol") {
                this.word = word.concat(carac);
                if (this.State == "Start") {
                    this.State = "SYMB";
                } else if (this.State == "ID") {
                    if (carac.compareTo("[") == 0) {
                        this.State = "VEC1";
                    } else {
                        this.State = "ERRO_UNK_WORD";
                    }
                } else if (this.State == "E_VEC1") {
                    if (carac.compareTo("]") == 0) {
                        this.State = "E_VEC";
                    } else {
                        this.State = "ERRO_UNK_WORD";
                    }
                } else if (this.State == "VEC1") {
                    if (carac.compareTo("]") == 0) {
                        this.State = "VEC";
                    } else {
                        this.State = "ERRO_UNK_WORD";
                    }
                } else if (this.State == "NUM") {
                    this.State = "ERRO_UNK_WORD";
                }
            }
        }
    }
    // When a space or page break is received, checks if the word is reserved
    updateState();
}
