public void play(Integer tatumsPerBeat, Float beatsPerMinute, Long segmentStart, Long segmentEnd, Integer lowestMetricLevel) throws InvalidMidiDataException, MidiUnavailableException {
    // Create a MIDI sequence from the notes and play it on the default synthesizer.
    if (segmentStart == null)
        segmentStart = 0l;
    int ticksPerBeat = 144;
    int ticksPerTatum = ticksPerBeat / tatumsPerBeat;
    Sequence sequence = new Sequence(Sequence.PPQ, ticksPerBeat, 1);
    Track track = sequence.getTracks()[0];
    long finalOffsetTime = 0;
    for (Note note : notes) {
        if ((segmentStart == null || note.getOnset() >= segmentStart) && (segmentEnd == null || note.getOnset() < segmentEnd) && (lowestMetricLevel == null || note.getMetricLevel().compareTo(lowestMetricLevel) <= 0)) {
            ShortMessage onMessage = new ShortMessage();
            onMessage.setMessage(ShortMessage.NOTE_ON, note.getMidiNoteNumber(), 96);
            ShortMessage offMessage = new ShortMessage();
            offMessage.setMessage(ShortMessage.NOTE_ON, note.getMidiNoteNumber(), 0);
            long onsetTime = (note.getOnset() - segmentStart) * ticksPerTatum;
            long offsetTime = (note.getOffset() - segmentStart) * ticksPerTatum;
            track.add(new MidiEvent(onMessage, onsetTime));
            track.add(new MidiEvent(offMessage, offsetTime));
            if (offsetTime > finalOffsetTime)
                finalOffsetTime = offsetTime;
        }
    }
    Sequencer sequencer = MidiSystem.getSequencer();
    sequencer.open();
    sequencer.setTempoInBPM(beatsPerMinute);
    Synthesizer synth = MidiSystem.getSynthesizer();
    synth.open();
    sequencer.setSequence(sequence);
    sequencer.start();
    try {
        double ticksPerMinute = ticksPerBeat * beatsPerMinute;
        long msPerTick = 1 + (long) (60000.0 / ticksPerMinute);
        long finalOffsetTimeInMS = finalOffsetTime * msPerTick;
        Thread.sleep(finalOffsetTimeInMS + 1000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    sequencer.stop();
    synth.close();
    sequencer.close();
}
