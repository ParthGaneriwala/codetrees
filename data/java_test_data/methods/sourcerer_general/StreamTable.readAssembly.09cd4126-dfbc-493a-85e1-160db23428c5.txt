private void readAssembly(ArrayList<Byte> file, int off, ArrayList<Integer> all_rows, ArrayList<Integer> heapRows) {
    short majorversion = 0, minorversion = 0, buildnumber = 0, revisionnumber = 0;
    int hashalgld = 0, flags = 0, publickey = 0, name = 0, culture = 0;
    StreamTableRow str;
    int i;
    size = 0;
    for (i = 0; i < numrows; i++) {
        hashalgld = Tools.MakeInt(file, off + size);
        majorversion = Tools.MakeShort(file, off + size + 4);
        minorversion = Tools.MakeShort(file, off + size + 6);
        buildnumber = Tools.MakeShort(file, off + size + 8);
        revisionnumber = Tools.MakeShort(file, off + size + 10);
        flags = Tools.MakeInt(file, off + size + 12);
        size += 16;
        if (heapRows.get(CLELConstants.BLOB_INDEX) < 0xffff) {
            publickey = (int) Tools.MakeShort(file, off + size);
            size += 2;
        } else {
            publickey = Tools.MakeInt(file, off + size);
            size += 4;
        }
        if (heapRows.get(CLELConstants.STRINGS_INDEX) < 0xffff) {
            name = Tools.MakeShort(file, off + size);
            culture = Tools.MakeShort(file, off + size + 2);
            size += 4;
        } else {
            name = Tools.MakeInt(file, off + size);
            culture = Tools.MakeInt(file, off + size + 4);
            size += 8;
        }
        str = new StreamTableRow(CLELConstants.ASSEMBLY_TABLE, hashalgld, majorversion, minorversion, buildnumber, revisionnumber, flags, publickey, name, culture);
        rows.add(str);
    }
}
