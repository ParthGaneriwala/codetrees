// -----------------------the following might be some bugs:
private ParseNode unaryexpr() {
    ParseNode child;
    ParseNode parentUnary;
    if (nowReadingsymbolIsUnaryOperator()) {
        // �������������ҪgetConcreteTypwNode�ĵط�������������������������������������������
        parentUnary = getConcreteTypwNode(new ParseNode(nowReadingsymbol));
        if (nowReadingsymbol.isKeyword(Keyword.LENGTH)) {
            readToken();
            if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
                PunctuationToken colon = PunctuationToken.make(null, ":", PunctuationSymbol.COLON);
                PunctuationSymbolNode colonNode = new PunctuationSymbolNode(new TokenGrammarSymbol(colon));
                readToken();
                if (nowReadingsymbol.isOperator(Operator.MULTIPLY)) {
                    // length [*] id;
                    readToken();
                    assert (nowReadingsymbol.isOperator(Operator.RINDEXING)) : " indexed ID syntax wrong!";
                    readToken();
                    assert (nowReadingsymbol.isTerminal(IdentifierToken.class)) : " indexed ID syntax wrong!";
                    child = new IdentifierNode(nowReadingsymbol);
                    parentUnary.appendChild(child);
                    parentUnary.appendChild(colonNode);
                    // ָ��ֺţ��������� ��������һ�� ��֪���᲻�����������
                    readToken();
                    return parentUnary;
                } else if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                    parentUnary.appendChild(colonNode);
                    // [ or id
                    readToken();
                    while (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
                        // ]
                        readToken();
                        assert (nowReadingsymbol.isOperator(Operator.RINDEXING)) : " indexed ID syntax wrong!";
                        parentUnary.appendChild(colonNode);
                        // [ or id
                        readToken();
                    }
                    assert (nowReadingsymbol.isTerminal(IdentifierToken.class)) : " indexed ID syntax wrong!";
                    child = new IdentifierNode(nowReadingsymbol);
                    parentUnary.appendChild(child);
                    // ָ��ֺţ��������� ��������һ�� ��֪���᲻�����������
                    readToken();
                    return parentUnary;
                } else {
                    error("The indexed Id syntax is wrong!");
                }
            } else {
                // �пտ��԰�ǰ������ֶ��Ĺ��� Ӧ�������д���Ŷ�
                child = braceExpr();
                parentUnary.appendChild(child);
                return parentUnary;
            }
        } else {
            // ��nowReadingsymbolָ��braceExpr�еĵ�һ��token
            readToken();
            // �пտ��԰�ǰ������ֶ��Ĺ��� Ӧ�������д���Ŷ�
            child = braceExpr();
            parentUnary.appendChild(child);
            return parentUnary;
        }
    } else if (nowReadingsymbolIsFactor()) {
        // nowReadingsymbol�Ѿ�ָ����braceExpr�еĵ�һ��token
        return braceExpr();
    } else if (nowReadingsymbol.isOperator(Operator.LBRACKET)) {
        // nowReadingsymbol�Ѿ�ָ����braceExpr�еĵ�һ��token
        return braceExpr();
    // remove get concoret??????????????
    } else {
        error("The expression sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
    }
    return null;
}
