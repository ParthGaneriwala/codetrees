public ArrayList<InstructorVO> listInstructor() throws SjsuUniversiryException {
    ArrayList<InstructorVO> instructorList = new ArrayList<InstructorVO>();
    try {
        MyDBConnection db = new MyDBConnection();
        Connection con = db.getMyConnection();
        Statement smt = con.createStatement();
        String query = "select p.pid,p.firstname,p.lastname,p.address,p.city,p.state,p.zip,p.dept,p.pday,p.pstarttime,p.pendtime,l.building,l.roomno from person p, location l where p.lid=l.lid and p.persontype='Instructor'";
        ResultSet rs = smt.executeQuery(query);
        while (rs.next()) {
            InstructorVO vo = new InstructorVO();
            vo.setEmployeeID(rs.getString("p.pid"));
            vo.setFisrtName(rs.getString("p.firstname"));
            vo.setLastName(rs.getString("p.lastname"));
            vo.setAddress(rs.getString("address"));
            vo.setCity(rs.getString("city"));
            vo.setState(rs.getString("state"));
            vo.setZip(rs.getInt("zip"));
            vo.setDepartment(rs.getString("p.dept"));
            MeetingHrs hrs = new MeetingHrs();
            hrs.setDay(rs.getString("p.pday"));
            hrs.setStartHr(rs.getInt("p.pstarttime"));
            hrs.setEndHr(rs.getInt("p.pendtime"));
            vo.setOfficeHours(hrs);
            LocationVO loc = new LocationVO();
            loc.setBuilding(rs.getString("l.building"));
            loc.setRoom(rs.getInt("l.roomno"));
            vo.setLocation(loc);
            instructorList.add(vo);
        }
        MyDBConnection.close(smt);
        MyDBConnection.close(rs);
    } catch (SQLException e) {
        e.printStackTrace();
        SjsuUniversiryException.raiseException("Error displaying the list of Instructors", e);
    }
    return instructorList;
}
