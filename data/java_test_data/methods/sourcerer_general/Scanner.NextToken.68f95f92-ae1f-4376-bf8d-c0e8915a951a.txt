static Token NextToken() {
    while (ignore.get(ch)) NextCh();
    if (ch == '/' && Comment0() || ch == '/' && Comment1())
        return NextToken();
    t = new Token();
    t.pos = pos;
    t.col = pos - lineStart + 1;
    t.line = line;
    int state = start[ch];
    StringBuffer buf = new StringBuffer(16);
    buf.append(ch);
    NextCh();
    boolean done = false;
    while (!done) {
        switch(state) {
            // NextCh already done /* pdt */
            case -1:
                {
                    t.kind = eofSym;
                    done = true;
                    break;
                }
            // NextCh already done
            case 0:
                {
                    t.kind = noSym;
                    done = true;
                    break;
                }
            case 1:
                if ((ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {
                    buf.append(ch);
                    NextCh();
                    state = 1;
                    break;
                } else {
                    t.kind = 1;
                    t.val = buf.toString();
                    CheckLiteral();
                    return t;
                }
            case 2:
                if ((ch >= '0' && ch <= '9')) {
                    buf.append(ch);
                    NextCh();
                    state = 2;
                    break;
                } else {
                    t.kind = 2;
                    done = true;
                    break;
                }
            case 3:
                {
                    t.kind = 2;
                    done = true;
                    break;
                }
            case 4:
                if (!(ch == '"') && ch != Buffer.EOF) {
                    buf.append(ch);
                    NextCh();
                    state = 4;
                    break;
                } else if (ch == '"') {
                    buf.append(ch);
                    NextCh();
                    state = 5;
                    break;
                } else {
                    t.kind = noSym;
                    done = true;
                    break;
                }
            case 5:
                {
                    t.kind = 3;
                    done = true;
                    break;
                }
            case 6:
                {
                    t.kind = 14;
                    done = true;
                    break;
                }
            case 7:
                {
                    t.kind = 15;
                    done = true;
                    break;
                }
            case 8:
                {
                    t.kind = 16;
                    done = true;
                    break;
                }
            case 9:
                {
                    t.kind = 17;
                    done = true;
                    break;
                }
            case 10:
                {
                    t.kind = 18;
                    done = true;
                    break;
                }
            case 11:
                {
                    t.kind = 19;
                    done = true;
                    break;
                }
            case 12:
                {
                    t.kind = 21;
                    done = true;
                    break;
                }
            case 13:
                {
                    t.kind = 22;
                    done = true;
                    break;
                }
            case 14:
                {
                    t.kind = 23;
                    done = true;
                    break;
                }
            case 15:
                {
                    t.kind = 24;
                    done = true;
                    break;
                }
            case 16:
                {
                    t.kind = 25;
                    done = true;
                    break;
                }
            case 17:
                {
                    t.kind = 26;
                    done = true;
                    break;
                }
            case 18:
                {
                    t.kind = 27;
                    done = true;
                    break;
                }
            case 19:
                {
                    t.kind = 28;
                    done = true;
                    break;
                }
            case 20:
                {
                    t.kind = 29;
                    done = true;
                    break;
                }
            case 21:
                {
                    t.kind = 30;
                    done = true;
                    break;
                }
            case 22:
                {
                    t.kind = 31;
                    done = true;
                    break;
                }
            case 23:
                {
                    t.kind = 33;
                    done = true;
                    break;
                }
            case 24:
                if ((ch == '0')) {
                    buf.append(ch);
                    NextCh();
                    state = 3;
                    break;
                } else if ((ch >= '1' && ch <= '9')) {
                    buf.append(ch);
                    NextCh();
                    state = 2;
                    break;
                } else {
                    t.kind = 20;
                    done = true;
                    break;
                }
            case 25:
                if (!(ch == '"') && ch != Buffer.EOF) {
                    buf.append(ch);
                    NextCh();
                    state = 4;
                    break;
                } else if (ch == '"') {
                    buf.append(ch);
                    NextCh();
                    state = 5;
                    break;
                } else {
                    t.kind = 32;
                    done = true;
                    break;
                }
        }
    }
    t.val = buf.toString();
    return t;
}
