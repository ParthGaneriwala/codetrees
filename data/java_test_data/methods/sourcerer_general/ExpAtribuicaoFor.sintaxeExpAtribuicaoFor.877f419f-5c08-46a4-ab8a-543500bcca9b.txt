public void sintaxeExpAtribuicaoFor(TabelaSimbolos tabelaSimbolos, String escopo) {
    if (tabelaSimbolos.getLookahead().equals("int")) {
        // consome o int
        tabelaSimbolos.soConsome();
    } else if (ehIdentificador(tabelaSimbolos) && tabelaSimbolos.superTipo(1).equals("identificador")) {
        if (!tabelaSimbolos.validaSeForInteiro(escopo, tabelaSimbolos.getLookahead())) {
            System.out.println("ERRO SEMANTICO - Modificar expressão de atribuição");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Modificar expressão de atribuição");
        }
        // consome o tipo de variavel criada pelo usuário
        tabelaSimbolos.soConsome();
    } else {
        if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
            System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada - linha " + tabelaSimbolos.getLinha());
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável não declarada");
        } else if (!tabelaSimbolos.validaSeForInteiro(escopo, tabelaSimbolos.getLookahead())) {
            System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não inteira - linha " + tabelaSimbolos.getLinha());
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Tipo imcompatvítel com o tipo");
        }
    }
    // consome a variável do lado esquerdo da atribuicao
    tabelaSimbolos.soConsome();
    // consome o =
    tabelaSimbolos.soConsome();
    if (ehIdentificador(tabelaSimbolos)) {
        if (tabelaSimbolos.superLookahead(1).equals(";")) {
            if (!tabelaSimbolos.validaNome(escopo, tabelaSimbolos.getLookahead())) {
                System.out.println(" ERRO SEMANTICO - Variável " + tabelaSimbolos.getLookahead() + " não declarada");
                ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Variável não foi declarada");
            }
            // consome identificador
            tabelaSimbolos.soConsome();
            // consome ;
            tabelaSimbolos.soConsome();
        } else if (tabelaSimbolos.superLookahead(1).equals("(")) {
            chamadaFuncao = new chamadaDeFuncao(tabelaSimbolos);
            chamadaFuncao.chamaFuncao(escopo);
        }
    } else if (ehNumero(tabelaSimbolos) && tabelaSimbolos.superLookahead(1).equals(";")) {
        if (!Utils.tipoValor(tabelaSimbolos.getLookahead()).equals("int")) {
            System.out.println("ERRO SEMANTICO - Número " + tabelaSimbolos.getLookahead() + " não é inteiro");
            ErroSemantico.getInstance().getTabelaErros().add("Erro Semântico na linha " + tabelaSimbolos.getLinha() + ". Descrição: Imcompatibilidade de tipo de variavel");
        }
        // consome numero
        tabelaSimbolos.soConsome();
        // consome ;
        tabelaSimbolos.soConsome();
    } else if (verificaExpAritmetica(tabelaSimbolos)) {
        ExpressaoAritmetica expArit = new ExpressaoAritmetica();
        expArit.expAritmetica(tabelaSimbolos, escopo, "int");
        // TEM QUE VER SE REALMENTE PRECISA CONSUMIR O ;
        tabelaSimbolos.soConsome();
    }
}
