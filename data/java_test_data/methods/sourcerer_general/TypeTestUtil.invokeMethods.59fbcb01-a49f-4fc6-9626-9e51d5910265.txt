private static void invokeMethods(Class<?> cls, Type type, TOP top, JCas jcas, String featureName) throws Exception {
    Map<Class<?>, Object> defaultValues = new HashMap<Class<?>, Object>();
    defaultValues.put(int.class, 0);
    defaultValues.put(boolean.class, false);
    defaultValues.put(double.class, 0.0);
    defaultValues.put(JCas.class, jcas);
    String suffix = featureName.substring(0, 1).toUpperCase() + featureName.substring(1);
    for (Method method : cls.getMethods()) {
        String name = method.getName();
        Class<?>[] types = method.getParameterTypes();
        if (name.endsWith(suffix) && types.length == 1) {
            if (types[0].equals(FSArray.class)) {
                FSArray value = new FSArray(jcas, 1);
                Class<?> fsType = findFSType(cls, name);
                Object fs = fsType.getConstructor(JCas.class).newInstance(jcas);
                value.set(0, (FeatureStructure) fs);
                method.invoke(top, new Object[] { value });
                method = top.jcasType.getClass().getMethod("set" + suffix, int.class, int.class);
                method.invoke(top.jcasType, new Object[] { top.getAddress(), value.getAddress() });
            }
            if (types[0].equals(StringArray.class)) {
                StringArray value = new StringArray(jcas, 1);
                value.set(0, "foo");
                method.invoke(top, new Object[] { value });
                method = top.jcasType.getClass().getMethod(name, int.class, int.class);
                method.invoke(top.jcasType, new Object[] { top.getAddress(), value.getAddress() });
            }
        }
    }
    for (Method method : cls.getMethods()) {
        String name = method.getName();
        Class<?>[] types = method.getParameterTypes();
        if (name.equals("get" + suffix) || name.equals("set" + suffix)) {
            if (types.length != 1 || (!types[0].equals(FSArray.class) && !types[0].equals(StringArray.class))) {
                Class<?>[] jcasTypes = new Class<?>[types.length + 1];
                Object[] jcasTypeValues = new Object[types.length + 1];
                Object[] values = new Object[types.length];
                for (int i = 0; i < values.length; i++) {
                    values[i] = defaultValues.get(types[i]);
                    if (TOP.class.isAssignableFrom(types[i])) {
                        jcasTypeValues[i + 1] = values[i] == null ? 0 : ((TOP) values[i]).getAddress();
                        jcasTypes[i + 1] = int.class;
                    } else {
                        jcasTypeValues[i + 1] = values[i];
                        jcasTypes[i + 1] = types[i];
                    }
                }
                method.invoke(top, values);
                jcasTypes[0] = int.class;
                jcasTypeValues[0] = top.getAddress();
                method = top.jcasType.getClass().getMethod(name, jcasTypes);
                method.invoke(top.jcasType, jcasTypeValues);
            }
        }
    }
}
