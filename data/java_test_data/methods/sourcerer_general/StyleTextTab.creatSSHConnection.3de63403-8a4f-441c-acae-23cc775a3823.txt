private void creatSSHConnection() {
    try {
        // JDK > 1.4 ONLY
        /*
			 * Handler fh = new FileHandler("example.log"); fh.setFormatter(new
			 * SimpleFormatter());
			 * Logger.getLogger("com.sshtools").setUseParentHandlers(false);
			 * Logger.getLogger("com.sshtools").addHandler(fh);
			 * Logger.getLogger("com.sshtools").setLevel(Level.ALL);
			 */
        // Configure J2SSH (This will attempt to install the bouncycastle
        // provider
        // under jdk 1.3.1)
        ConfigurationLoader.initialize(false);
        BufferedReader reader = new BufferedReader(new InputStreamReader(pis));
        System.out.print("Connect to host? ");
        String hostname = /* "sdf.lonestar.org"; */
        reader.readLine();
        // Make a client connection
        SshClient ssh = new SshClient();
        ssh.setSocketTimeout(30000);
        SshConnectionProperties properties = new SshConnectionProperties();
        properties.setHost(hostname);
        // properties.setPrefPublicKey("ssh-dss");
        // properties.setPrefPublicKey("ssh-rsa");
        properties.setForwardingAutoStartMode(true);
        // Connect to the host
        ssh.setUseDefaultForwarding(true);
        ssh.connect(properties, new IgnoreHostKeyVerification());
        // Create a password authentication instance
        PasswordAuthenticationClient pwd = new PasswordAuthenticationClient();
        // Get the users name
        System.out.print("Username? ");
        // Read the password
        String username = /* "prabhat"; */
        reader.readLine();
        pwd.setUsername(username);
        // Get the password
        System.out.print("Password? ");
        String password = /* "1981@prabhat"; */
        reader.readLine();
        pwd.setPassword(password);
        // Try the authentication
        int result = ssh.authenticate(pwd);
        // Evaluate the result
        if (result == AuthenticationProtocolState.COMPLETE) {
            // The connection is authenticated we can now do some real work!
            SessionChannelClient session = ssh.openSessionChannel();
            if (!session.requestPseudoTerminal("vt100", 80, 24, 0, 0, ""))
                System.out.println("Failed to allocate a pseudo terminal");
            if (session.startShell()) {
                IOStreamConnector input = new IOStreamConnector();
                IOStreamConnector output = new IOStreamConnector();
                IOStreamConnector error = new IOStreamConnector();
                output.setCloseOutput(false);
                input.setCloseInput(false);
                error.setCloseOutput(false);
                // ByteArrayInputStream bis = new ByteArrayInputStream(new
                // String("\n\n\n").getBytes());
                // input.connect(bis, session.getOutputStream());
                input.connect(pis, session.getOutputStream());
                // input.connect(System.in, session.getOutputStream());
                output.connect(session.getInputStream(), System.out);
                error.connect(session.getStderrInputStream(), System.out);
                // session.getOutputStream().write("\b".getBytes());
                // session.getOutputStream().write("\n".getBytes());
                // System.out.println("Waiting for request...");
                session.getState().waitForState(ChannelState.CHANNEL_CLOSED);
            } else
                System.out.println("Failed to start the users shell");
            ssh.disconnect();
        } else {
            System.out.println("User/Password combination is incorrect");
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
