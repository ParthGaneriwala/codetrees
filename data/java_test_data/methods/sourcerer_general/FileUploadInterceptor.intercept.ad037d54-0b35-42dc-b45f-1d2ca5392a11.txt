public String intercept(ActionInvocation invocation) throws Exception {
    ActionContext ac = invocation.getInvocationContext();
    HttpServletRequest request = (HttpServletRequest) ac.get(ServletActionContext.HTTP_REQUEST);
    if (!(request instanceof MultiPartRequestWrapper)) {
        if (log.isDebugEnabled()) {
            ActionProxy proxy = invocation.getProxy();
            log.debug(getTextMessage("struts.messages.bypass.request", new Object[] { proxy.getNamespace(), proxy.getActionName() }, ActionContext.getContext().getLocale()));
        }
        return invocation.invoke();
    }
    final Object action = invocation.getAction();
    ValidationAware validation = null;
    if (action instanceof ValidationAware) {
        validation = (ValidationAware) action;
    }
    MultiPartRequestWrapper multiWrapper = (MultiPartRequestWrapper) request;
    if (multiWrapper.hasErrors()) {
        for (Iterator errorIter = multiWrapper.getErrors().iterator(); errorIter.hasNext(); ) {
            String error = (String) errorIter.next();
            if (validation != null) {
                validation.addActionError(error);
            }
            log.error(error);
        }
    }
    Map parameters = ac.getParameters();
    // Bind allowed Files
    Enumeration fileParameterNames = multiWrapper.getFileParameterNames();
    while (fileParameterNames != null && fileParameterNames.hasMoreElements()) {
        // get the value of this input tag
        String inputName = (String) fileParameterNames.nextElement();
        // get the content type
        String[] contentType = multiWrapper.getContentTypes(inputName);
        if (isNonEmpty(contentType)) {
            // get the name of the file from the input tag
            String[] fileName = multiWrapper.getFileNames(inputName);
            if (isNonEmpty(fileName)) {
                // Get a File object for the uploaded File
                File[] files = multiWrapper.getFiles(inputName);
                if (files != null) {
                    for (int index = 0; index < files.length; index++) {
                        if (acceptFile(files[index], contentType[index], inputName, validation, ac.getLocale())) {
                            parameters.put(inputName, files);
                            parameters.put(inputName + "ContentType", contentType);
                            parameters.put(inputName + "FileName", fileName);
                        }
                    }
                }
            } else {
                log.error(getTextMessage("struts.messages.invalid.file", new Object[] { inputName }, ActionContext.getContext().getLocale()));
            }
        } else {
            log.error(getTextMessage("struts.messages.invalid.content.type", new Object[] { inputName }, ActionContext.getContext().getLocale()));
        }
    }
    // invoke action
    String result = invocation.invoke();
    // cleanup
    fileParameterNames = multiWrapper.getFileParameterNames();
    while (fileParameterNames != null && fileParameterNames.hasMoreElements()) {
        String inputValue = (String) fileParameterNames.nextElement();
        File[] file = multiWrapper.getFiles(inputValue);
        for (int index = 0; index < file.length; index++) {
            File currentFile = file[index];
            log.info(getTextMessage("struts.messages.removing.file", new Object[] { inputValue, currentFile }, ActionContext.getContext().getLocale()));
            if ((currentFile != null) && currentFile.isFile()) {
                currentFile.delete();
            }
        }
    }
    return result;
}
