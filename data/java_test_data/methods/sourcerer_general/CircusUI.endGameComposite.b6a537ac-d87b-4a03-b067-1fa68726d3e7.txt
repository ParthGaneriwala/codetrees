private void endGameComposite() {
    final Rectangle dispBounds = display.getBounds();
    final Composite composite = new Composite(shell, SWT.NONE);
    composite.setLayout(new FillLayout());
    ImageData clownDat = new ImageData(CircusUI.class.getResourceAsStream("clown loose.jpg")).scaledTo(dispBounds.width, dispBounds.height);
    clownDat.alpha = 170;
    final Image clownImg = new Image(display, clownDat);
    final Font bigFont = new Font(display, "Comic Sans MS", 80, SWT.BOLD);
    final Font medFont = new Font(display, "Comic Sans MS", 50, SWT.BOLD);
    final Image image = new Image(display, 1000, 1000);
    Color blue = display.getSystemColor(SWT.COLOR_BLUE);
    Color yellow = display.getSystemColor(SWT.COLOR_YELLOW);
    Color white = display.getSystemColor(SWT.COLOR_WHITE);
    GC gc = new GC(image);
    gc.setBackground(white);
    gc.setForeground(yellow);
    gc.fillGradientRectangle(0, 0, 1000, 1000, true);
    for (int i = -500; i < 1000; i += 10) {
        gc.setForeground(blue);
        gc.drawLine(i, 0, 500 + i, 1000);
        gc.drawLine(500 + i, 0, i, 1000);
    }
    gc.dispose();
    final Pattern pattern;
    try {
        pattern = new Pattern(display, image);
    } catch (SWTException e) {
        // Advanced Graphics not supported.
        // This new API requires the Cairo Vector engine on GTK and Motif
        // and GDI+ on Windows.
        System.out.println(e.getMessage());
        return;
    }
    final Canvas canvas = new Canvas(composite, SWT.DOUBLE_BUFFERED);
    gc = new GC(canvas);
    if (players.size() == 2)
        gc.setFont(medFont);
    else
        gc.setFont(bigFont);
    final Point pt = gc.stringExtent("Game over     ");
    if (players.size() == 2)
        pt.y *= 3;
    else
        pt.y *= 2;
    final Random gen = new Random();
    int x = Math.abs(gen.nextInt() % (dispBounds.width - pt.x));
    int y = Math.abs(gen.nextInt() % (dispBounds.height - pt.y));
    final Point location = new Point(x, y);
    // animator runnable to animate message movement
    final Runnable mover = new Runnable() {

        boolean right = gen.nextBoolean();

        boolean up = gen.nextBoolean();

        @Override
        public void run() {
            if (right) {
                location.x += 5;
                if (location.x + pt.x >= dispBounds.width - 35)
                    right = false;
            } else {
                location.x -= 5;
                if (location.x <= 0)
                    right = true;
            }
            if (up) {
                location.y -= 5;
                if (location.y <= 0)
                    up = false;
            } else {
                location.y += 5;
                if (location.y + pt.y >= dispBounds.height - 30)
                    up = true;
            }
            canvas.redraw();
            display.timerExec(10, this);
        }
    };
    canvas.addPaintListener(new PaintListener() {

        private Image buffer;

        {
            buffer = new Image(display, pt.x, pt.y);
            GC gc = new GC(buffer);
            if (players.size() == 2)
                gc.setFont(medFont);
            else
                gc.setFont(bigFont);
            gc.setForegroundPattern(pattern);
            String msg = "Game Over\n" + players.get(0).toString();
            if (players.size() == 2)
                msg = "Game Over" + players.get(0).toString() + "\n" + players.get(1).toString();
            gc.drawString(msg, 0, 0);
            ImageData dat = buffer.getImageData();
            dat.transparentPixel = dat.getPixel(0, 0);
            buffer.dispose();
            buffer = new Image(display, dat);
        }

        @Override
        public void paintControl(PaintEvent e) {
            GC gc = e.gc;
            gc.drawImage(clownImg, 0, 0);
            gc.drawImage(buffer, location.x, location.y);
        }
    });
    display.timerExec(10, mover);
    composite.addDisposeListener(new DisposeListener() {

        @Override
        public void widgetDisposed(DisposeEvent e) {
            display.timerExec(-1, mover);
            bigFont.dispose();
            clownImg.dispose();
            pattern.dispose();
            medFont.dispose();
        }
    });
    shell.addTraverseListener(transientTraverser);
    currentComposite = composite;
}
