@SuppressWarnings("deprecation")
@Override
public void run() {
    try {
        // socket = new Socket("187.67.51.138",7000);
        // out = new PrintWriter(socket.getOutputStream(), true);
        // in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        /*soundFile = new FileInputStream("sound/sirene.mp3");
	        as = new AudioStream(soundFile);
	        audioData = as.getData();
	        cas = new ContinuousAudioDataStream(audioData);*/
        ipServer = JOptionPane.showInputDialog(null, "Digite o IP do servidor:", "Entrada de Configuracoes", JOptionPane.QUESTION_MESSAGE);
        while (true) {
            socket = new Socket(ipServer, 7000);
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            System.out.println("Socket aberto! ");
            // busy waiting...
            time = timeGenerator.nextInt(5) + 1;
            System.out.println("TEMPO DE ESPERA: " + (time) + " s");
            sleep(time * 1000);
            out.println(randomPlaca());
            String recebido = in.readLine();
            if (recebido != null) {
                // System.out.println(recebido);
                tokenizer = new StringTokenizer(recebido, "#");
                // id do banco
                tokenizer.nextToken();
                placa = tokenizer.nextToken();
                modelo = tokenizer.nextToken();
                fabricante = tokenizer.nextToken();
                cor = tokenizer.nextToken();
                ano = tokenizer.nextToken();
                ipva = tokenizer.nextToken();
                multa = tokenizer.nextToken();
                roubo = tokenizer.nextToken();
                ClienteResultado.setFoto(modelo, cor);
                ClienteResultado.setPlaca(placa);
                ClienteResultado.setModelo(modelo);
                ClienteResultado.setFabricante(fabricante);
                ClienteResultado.setCor(cor);
                ClienteResultado.setAno(ano);
                ClienteResultado.setIpvaAtrasado(ipva);
                ClienteResultado.setMultado(multa);
                ClienteResultado.setRoubado(roubo);
                if (roubo.equals("1")) {
                    Utils.mensagemAviso("CARRO ROUBADO!\nPare-o imediatamente!");
                } else {
                    if (multa.equals("1")) {
                        Utils.mensagemAviso("Carro com multas atrasadas!\nTomar as atitudes cabiveis.");
                    } else {
                        if (ipva.equals("1")) {
                            Utils.mensagemAviso("Carro com IPVA atrasado!\nEncoste-o e aplique a multa.");
                        }
                    }
                }
            } else {
                System.out.println("RECEBENDO NULL");
            }
        }
    } catch (IOException e) {
        System.out.println("Algum problema ocorreu ao criar ou enviar dados pelo socket.");
    } catch (InterruptedException e) {
        System.out.println("Erro ao fazer a thread dormir");
        e.printStackTrace();
    } finally {
        try {
            socket.close();
            System.out.println("Socket fechado! ");
        } catch (IOException e) {
            System.out.println("Algum problema ocorreu ao encerrar o socket no cliente.");
        }
    }
}
