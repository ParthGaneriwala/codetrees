public void testXSDbasics() {
    String xsdIntURI = "http://www.w3.org/2001/XMLSchema#int";
    // Check int and basic equality processing
    // default map
    Literal l1 = m.createTypedLiteral(42);
    Literal l2 = m.createTypedLiteral("42", XSDDatatype.XSDint);
    // default map
    Literal l4 = m.createTypedLiteral("63");
    assertSameValueAs("Default map failed", l1, l2);
    assertEquals("Value wrong", l1.getValue(), new Integer(42));
    assertEquals("class wrong", l1.getValue().getClass(), Integer.class);
    assertEquals("Value accessor problem", l1.getInt(), 42);
    assertEquals("wrong type name", l2.getDatatypeURI(), xsdIntURI);
    assertEquals("wrong type", l2.getDatatype(), XSDDatatype.XSDint);
    assertDiffer("Not value sensitive", l1, l4);
    checkIllegalLiteral("zap", XSDDatatype.XSDint);
    checkIllegalLiteral("42.1", XSDDatatype.XSDint);
    Literal l5 = m.createTypedLiteral("42", XSDDatatype.XSDnonNegativeInteger);
    assertSameValueAs("type coercion", l2, l5);
    // Check float/double
    // default map
    l1 = m.createTypedLiteral(42.42);
    l2 = m.createTypedLiteral("42.42", XSDDatatype.XSDfloat);
    Literal l3 = m.createTypedLiteral("42.42", XSDDatatype.XSDdouble);
    assertEquals("class wrong", l1.getValue().getClass(), Double.class);
    assertFloatEquals("value wrong", ((Double) (l1.getValue())).floatValue(), 42.42);
    assertEquals("class wrong", l2.getValue().getClass(), Float.class);
    assertFloatEquals("value wrong", ((Float) (l2.getValue())).floatValue(), 42.42);
    assertFloatEquals("Value accessor problem", l1.getFloat(), 42.42);
    assertEquals("wrong type", l2.getDatatype(), XSDDatatype.XSDfloat);
    assertSameValueAs("equality fn", l1, l3);
    // Minimal check on long, short, byte
    checkLegalLiteral("12345", XSDDatatype.XSDlong, Integer.class, new Integer(12345));
    checkLegalLiteral("-12345", XSDDatatype.XSDlong, Integer.class, new Integer(-12345));
    checkIllegalLiteral("2.3", XSDDatatype.XSDlong);
    checkLegalLiteral("1234", XSDDatatype.XSDshort, Integer.class, new Integer((short) 1234));
    checkLegalLiteral("-1234", XSDDatatype.XSDshort, Integer.class, new Integer((short) -1234));
    checkLegalLiteral("32767", XSDDatatype.XSDshort, Integer.class, new Integer((short) 32767));
    checkLegalLiteral("-32768", XSDDatatype.XSDshort, Integer.class, new Integer((short) -32768));
    checkIllegalLiteral("32769", XSDDatatype.XSDshort);
    checkIllegalLiteral("2.3", XSDDatatype.XSDshort);
    checkLegalLiteral("42", XSDDatatype.XSDbyte, Integer.class, new Integer((byte) 42));
    checkLegalLiteral("-42", XSDDatatype.XSDbyte, Integer.class, new Integer((byte) -42));
    checkLegalLiteral("127", XSDDatatype.XSDbyte, Integer.class, new Integer((byte) 127));
    checkLegalLiteral("-128", XSDDatatype.XSDbyte, Integer.class, new Integer((byte) -128));
    checkIllegalLiteral("32769", XSDDatatype.XSDbyte);
    checkIllegalLiteral("128", XSDDatatype.XSDbyte);
    checkIllegalLiteral("2.3", XSDDatatype.XSDbyte);
    // Minimal check on unsigned normal types
    checkLegalLiteral("12345", XSDDatatype.XSDunsignedLong, Integer.class, new Integer(12345));
    checkLegalLiteral("+12345", XSDDatatype.XSDunsignedLong, Integer.class, new Integer(12345));
    checkLegalLiteral("9223372036854775808", XSDDatatype.XSDunsignedLong, BigInteger.class, new BigInteger("9223372036854775808"));
    checkIllegalLiteral("-12345", XSDDatatype.XSDunsignedLong);
    checkLegalLiteral("12345", XSDDatatype.XSDunsignedInt, Integer.class, new Integer(12345));
    checkLegalLiteral("2147483648", XSDDatatype.XSDunsignedInt, Long.class, new Long(2147483648l));
    checkIllegalLiteral("-12345", XSDDatatype.XSDunsignedInt);
    checkLegalLiteral("1234", XSDDatatype.XSDunsignedShort, Integer.class, new Integer(1234));
    checkLegalLiteral("32679", XSDDatatype.XSDunsignedShort, Integer.class, new Integer(32679));
    checkIllegalLiteral("-12345", XSDDatatype.XSDunsignedShort);
    checkLegalLiteral("123", XSDDatatype.XSDunsignedByte, Integer.class, new Integer((short) 123));
    checkLegalLiteral("129", XSDDatatype.XSDunsignedByte, Integer.class, new Integer((short) 129));
    checkIllegalLiteral("-123", XSDDatatype.XSDunsignedByte);
    // Minimal check on the big num types
    checkLegalLiteral("12345", XSDDatatype.XSDinteger, Integer.class, new Integer(12345));
    checkLegalLiteral("0", XSDDatatype.XSDinteger, Integer.class, new Integer(0));
    checkLegalLiteral("-12345", XSDDatatype.XSDinteger, Integer.class, new Integer(-12345));
    checkLegalLiteral("9223372036854775808", XSDDatatype.XSDinteger, BigInteger.class, new BigInteger("9223372036854775808"));
    checkLegalLiteral("12345", XSDDatatype.XSDpositiveInteger, Integer.class, new Integer(12345));
    checkIllegalLiteral("0", XSDDatatype.XSDpositiveInteger);
    checkIllegalLiteral("-12345", XSDDatatype.XSDpositiveInteger);
    checkLegalLiteral("9223372036854775808", XSDDatatype.XSDpositiveInteger, BigInteger.class, new BigInteger("9223372036854775808"));
    checkLegalLiteral("12345", XSDDatatype.XSDnonNegativeInteger, Integer.class, new Integer(12345));
    checkLegalLiteral("0", XSDDatatype.XSDnonNegativeInteger, Integer.class, new Integer(0));
    checkIllegalLiteral("-12345", XSDDatatype.XSDnonNegativeInteger);
    checkLegalLiteral("9223372036854775808", XSDDatatype.XSDnonNegativeInteger, BigInteger.class, new BigInteger("9223372036854775808"));
    checkLegalLiteral("-12345", XSDDatatype.XSDnegativeInteger, Integer.class, new Integer(-12345));
    checkIllegalLiteral("0", XSDDatatype.XSDnegativeInteger);
    checkIllegalLiteral("12345", XSDDatatype.XSDnegativeInteger);
    checkLegalLiteral("-9223372036854775808", XSDDatatype.XSDnegativeInteger, BigInteger.class, new BigInteger("-9223372036854775808"));
    checkLegalLiteral("-12345", XSDDatatype.XSDnonPositiveInteger, Integer.class, new Integer(-12345));
    checkLegalLiteral("0", XSDDatatype.XSDnonPositiveInteger, Integer.class, new Integer(0));
    checkIllegalLiteral("12345", XSDDatatype.XSDnonPositiveInteger);
    checkLegalLiteral("-9223372036854775808", XSDDatatype.XSDnonPositiveInteger, BigInteger.class, new BigInteger("-9223372036854775808"));
    checkLegalLiteral("12345", XSDDatatype.XSDdecimal, Integer.class, new Integer("12345"));
    checkLegalLiteral("0.0", XSDDatatype.XSDdecimal, Integer.class, new Integer("0"));
    checkLegalLiteral("42.45", XSDDatatype.XSDdecimal, BigDecimal.class, new BigDecimal("42.45"));
    checkLegalLiteral("9223372036854775808.1234", XSDDatatype.XSDdecimal, BigDecimal.class, new BigDecimal("9223372036854775808.1234"));
    checkLegalLiteral("123.4", XSDDatatype.XSDdecimal, BigDecimal.class, new BigDecimal("123.4"));
    checkIllegalLiteral("123,4", XSDDatatype.XSDdecimal);
    // Booleans
    checkLegalLiteral("true", XSDDatatype.XSDboolean, Boolean.class, new Boolean(true));
    checkLegalLiteral("false", XSDDatatype.XSDboolean, Boolean.class, new Boolean(false));
    l1 = m.createTypedLiteral(true);
    assertEquals("boolean mapping", XSDDatatype.XSDboolean, l1.getDatatype());
    // String types
    checkLegalLiteral("hello world", XSDDatatype.XSDstring, String.class, "hello world");
    l1 = m.createTypedLiteral("foo bar");
    assertEquals("string mapping", XSDDatatype.XSDstring, l1.getDatatype());
}
