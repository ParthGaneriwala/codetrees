public void testXorRectInterCorner2() {
    Poly p1 = new PolyDefault();
    p1.add(2.0, 2.0);
    p1.add(4.0, 2.0);
    p1.add(4.0, 4.0);
    p1.add(2.0, 4.0);
    Poly p2 = new PolyDefault();
    p2.add(3.0, 1.0);
    p2.add(5.0, 1.0);
    p2.add(5.0, 3.0);
    p2.add(3.0, 3.0);
    // ------------------------------------------------------------------------------------------
    // --- I expected this to give two non-hole inner polygons but it gave one with a hole    ---
    // --- if you look at it, they are equivalent.  Don't have time to figure out difference. ---
    // ------------------------------------------------------------------------------------------
    // Poly exp1 = new PolyDefault();
    // exp1.add( 3.0, 1.0 );
    // exp1.add( 5.0, 1.0 );
    // exp1.add( 5.0, 3.0 );
    // exp1.add( 4.0, 3.0 );
    // exp1.add( 4.0, 2.0 );
    // exp1.add( 3.0, 2.0 );
    // 
    // Poly exp2 = new PolyDefault();
    // exp2.add( 2.0, 2.0 );
    // exp2.add( 3.0, 2.0 );
    // exp2.add( 3.0, 3.0 );
    // exp2.add( 4.0, 3.0 );
    // exp2.add( 4.0, 4.0 );
    // exp2.add( 2.0, 4.0 );
    Poly exp1 = new PolyDefault(true);
    exp1.add(3.0, 2.0);
    exp1.add(3.0, 3.0);
    exp1.add(4.0, 3.0);
    exp1.add(4.0, 2.0);
    Poly exp2 = new PolyDefault();
    exp2.add(2.0, 2.0);
    exp2.add(3.0, 2.0);
    exp2.add(3.0, 1.0);
    exp2.add(5.0, 1.0);
    exp2.add(5.0, 3.0);
    exp2.add(4.0, 3.0);
    exp2.add(4.0, 4.0);
    exp2.add(2.0, 4.0);
    Poly exp = new PolyDefault();
    exp.add(exp2);
    exp.add(exp1);
    PolyDefault result = (PolyDefault) Clip.xor(p1, p2);
    // result.print();
    assertEquals(exp, result);
}
