public boolean updateLogin(Connection db, HttpServletRequest request, ApplicationPrefs prefs, String password) throws SQLException {
    // Update the last login date
    PreparedStatement pst = db.prepareStatement("UPDATE users " + "SET last_login = CURRENT_TIMESTAMP " + "WHERE user_id = ? ");
    pst.setInt(1, id);
    pst.execute();
    pst.close();
    try {
        if (password != null) {
            // Update the permanent password if user is using a temporary password
            pst = db.prepareStatement("UPDATE users " + "SET password = ? " + "WHERE user_id = ? " + "AND password <> ? AND temporary_password = ? ");
            String passwordHash = PasswordHash.encrypt(password);
            pst.setString(1, passwordHash);
            pst.setInt(2, id);
            pst.setString(3, passwordHash);
            pst.setString(4, passwordHash);
            pst.execute();
            pst.close();
            // Update the webdav passwords
            pst = db.prepareStatement("UPDATE users " + "SET webdav_password = ? " + "WHERE user_id = ? " + "AND (webdav_password IS NULL OR webdav_password <> ?) ");
            String webdav = PasswordHash.encrypt(username + ":" + WebdavServlet.USER_REALM + ":" + password);
            pst.setString(1, webdav);
            pst.setInt(2, id);
            pst.setString(3, webdav);
            pst.execute();
            pst.close();
            // Update the htpasswd
            if ("true".equals(prefs.get("HTPASSWD"))) {
                pst = db.prepareStatement("UPDATE users " + "SET htpasswd = ?, htpasswd_date = CURRENT_TIMESTAMP " + "WHERE user_id = ? " + "AND (htpasswd IS NULL OR htpasswd <> ?) ");
                String htpasswd = PasswordHash.htpasswd(username, password);
                pst.setString(1, htpasswd);
                pst.setInt(2, id);
                pst.setString(3, htpasswd);
                pst.execute();
                pst.close();
            }
        }
    } catch (Exception e) {
    // This column might not exist yet so catch the fail
    }
    // Load the user's updated login value
    pst = db.prepareStatement("SELECT last_login " + "FROM users " + "WHERE user_id = ? ");
    pst.setInt(1, id);
    ResultSet rs = pst.executeQuery();
    if (rs.next()) {
        lastLogin = rs.getTimestamp("last_login");
    }
    rs.close();
    pst.close();
    // Record the user login event
    if (System.getProperty("DEBUG") != null) {
        System.out.println("User-> Logging user IP: " + request.getRemoteAddr());
    }
    pst = db.prepareStatement("INSERT INTO user_log (user_id, ip_address, browser) VALUES (?, ?, ?)");
    pst.setInt(1, id);
    pst.setString(2, request.getRemoteAddr());
    pst.setString(3, request.getHeader("USER-AGENT"));
    pst.execute();
    pst.close();
    CacheUtils.invalidateValue(Constants.SYSTEM_USER_CACHE, id);
    return true;
}
