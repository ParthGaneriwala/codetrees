/*
   //--------------------------------------------------------------------------
   private double getChargeContribution(int inCount, double inConcOfHIons, Collection<IonizableGroup> inIonizableGroups)
   {
      double value = 0;

      if (inIonizableGroups != null)
      {
         for (IonizableGroup group : inIonizableGroups)
         {
            value += group.getCharge(inCount, inConcOfHIons);
//            value += getChargeContribution(inCount, inConcOfHIons, group);
         }
      }

      return value;
   }

   //--------------------------------------------------------------------------
   private double getNetChargeOfTermini(double inConcOfHIons, KaSet inKaSet)
   {
      double netCharge = 0;

      if (CollectionUtil.hasValues(mChains))
      {
         for (Protein chain : mChains)
         {
            netCharge += chain.getNetChargeOfTermini(inConcOfHIons, inKaSet);
         }
      }
      else
      {
         if (inKaSet != null)
         {
            IonizableGroup group = inKaSet.getNTerminalKa(residueAt(1));
            if (group != null) netCharge += group.getCharge(1, inConcOfHIons);

            group = inKaSet.getCTerminalKa(residueAt(length()));
            if (group != null) netCharge += group.getCharge(1, inConcOfHIons);
         }
         else
         {
            netCharge += getChargeContribution(1, inConcOfHIons, mAASet.getNTerminalGroup().getKas());
            netCharge += getChargeContribution(1, inConcOfHIons, mAASet.getCTerminalGroup().getKas());
         }
      }

      return netCharge;
   }
*/
private Map<IonizableGroup, Integer> constructIonizableGroupMap(KaSet inKaSet, ProteinAnalysisMode inMode) {
    Map<IonizableGroup, Integer> ionizableGroupMap = new HashMap<IonizableGroup, Integer>();
    if (CollectionUtil.hasValues(mChains)) {
        for (Protein chain : mChains) {
            Map<IonizableGroup, Integer> chainMap = chain.constructIonizableGroupMap(inKaSet, ProteinAnalysisMode.REDUCING);
            for (IonizableGroup group : chainMap.keySet()) {
                Integer oldValue = ionizableGroupMap.get(group);
                int newValue = (oldValue != null ? oldValue : 0) + chainMap.get(group);
                ionizableGroupMap.put(group, newValue);
            }
        }
        if (inMode == ProteinAnalysisMode.NATIVE) {
            // Exclude disulfide-linked cysteines
            IonizableGroup cysGroup = inKaSet.getKa(AminoAcid.CYSTEINE);
            if (cysGroup != null) {
                ionizableGroupMap.put(cysGroup, getTotalNumFreeCysteines());
            }
        }
    } else {
        AminoAcid cTerminalResidue = aminoAcidAt(length());
        Map<AminoAcid, Integer> aaComposition = getAminoAcidComposition();
        for (AminoAcid aa : aaComposition.keySet()) {
            Integer aaCount = aaComposition.get(aa);
            if (aaCount != null && aaCount > 0) {
                if (aa == cTerminalResidue && inKaSet.getCTerminalSidechainKa(cTerminalResidue) != null && getAminoAcidSet().getCTerminalGroup().equals(CTerminalGroup.UNMODIFIED_C_TERMINUS)) {
                    IonizableGroup group = inKaSet.getCTerminalSidechainKa(cTerminalResidue);
                    if (group != null) {
                        ionizableGroupMap.put(group, 1);
                        aaCount--;
                    }
                }
                IonizableGroup group = inKaSet.getKa(aa);
                if (group != null) {
                    // Exclude disulfide-linked cysteines
                    if (aa.equals(AminoAcid.CYSTEINE)) {
                        aaCount = getTotalNumFreeCysteines();
                    }
                    ionizableGroupMap.put(group, aaCount);
                }
            }
        }
        IonizableGroup group = inKaSet.getNTerminalKa(getAminoAcidSet().getNTerminalGroup(), aminoAcidAt(1));
        if (group != null)
            ionizableGroupMap.put(group, 1);
        group = inKaSet.getCTerminalKa(getAminoAcidSet().getCTerminalGroup(), aminoAcidAt(length()));
        if (group != null)
            ionizableGroupMap.put(group, 1);
    }
    return ionizableGroupMap;
}
