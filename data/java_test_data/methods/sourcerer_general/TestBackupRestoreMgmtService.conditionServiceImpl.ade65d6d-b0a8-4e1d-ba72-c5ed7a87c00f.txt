@Test
@DirtiesContext
public void conditionServiceImpl() throws Exception {
    configureMinimalGame();
    System.out.println("**** twoRegUserOneUnregUserAllOffline ****");
    // U1 no real base, second level
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.createUser("U1", "test", "test", "test");
    userService.login("U1", "test");
    Assert.assertEquals(TEST_LEVEL_1_SIMULATED, movableService.getGameInfo().getLevel().getName());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    mgmtService.backup();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    assertBackupSummery(1, 0, 0, 1);
    List<BackupSummary> backupSummaries = mgmtService.getBackupSummary();
    mgmtService.restore(backupSummaries.get(0).getDate());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Verify
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.login("U1", "test");
    Assert.assertEquals(TEST_LEVEL_1_SIMULATED, movableService.getGameInfo().getLevel().getName());
    movableService.sendTutorialProgress(TutorialConfig.TYPE.TUTORIAL, "", "", 0, 0);
    Assert.assertEquals(TEST_LEVEL_2_REAL, movableService.getGameInfo().getLevel().getName());
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
}
