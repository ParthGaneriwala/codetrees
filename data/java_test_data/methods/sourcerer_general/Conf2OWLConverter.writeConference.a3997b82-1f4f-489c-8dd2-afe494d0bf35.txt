public synchronized void writeConference(String filename) {
    try {
        FileInputStream in;
        FileOutputStream out;
        BufferedReader bufread;
        BufferedWriter bufwrite;
        StringBuilder totalText = new StringBuilder();
        String str;
        model.write(new FileOutputStream(filename));
        in = new FileInputStream(filename);
        bufread = new BufferedReader(new InputStreamReader(in));
        totalText.append(Conf2OWLConverter.XML_ENCODING);
        str = bufread.readLine();
        while (str != null) {
            totalText.append(str + "\n");
            str = bufread.readLine();
        }
        bufread.close();
        out = new FileOutputStream(filename);
        bufwrite = new BufferedWriter(new OutputStreamWriter(out));
        bufwrite.write(totalText.toString(), 0, totalText.length());
        bufwrite.close();
        this.callerShell.getDisplay().asyncExec(new Runnable() {

            public void run() {
                if (callerShell != null && !callerShell.isDisposed()) {
                    MessageBox mb = new MessageBox(callerShell, SWT.ICON_WORKING);
                    mb.setText("Save Completed");
                    mb.setMessage("Conference save successful.");
                    mb.open();
                }
            }
        });
    } catch (com.hp.hpl.jena.shared.JenaException je) {
        this.exceptionBuf = je;
        this.callerShell.getDisplay().asyncExec(new Runnable() {

            public void run() {
                if (callerShell != null && !callerShell.isDisposed()) {
                    MessageBox mb = new MessageBox(callerShell, SWT.ICON_ERROR);
                    mb.setText("Error Writing Output");
                    mb.setMessage(exceptionBuf.getLocalizedMessage());
                    mb.open();
                }
            }
        });
    } catch (IOException ie) {
        this.exceptionBuf = ie;
        this.callerShell.getDisplay().asyncExec(new Runnable() {

            public void run() {
                if (callerShell != null && !callerShell.isDisposed()) {
                    MessageBox mb = new MessageBox(callerShell, SWT.ICON_ERROR);
                    mb.setText("Error Writing Output");
                    mb.setMessage(exceptionBuf.getLocalizedMessage());
                    mb.open();
                }
            }
        });
    }
}
