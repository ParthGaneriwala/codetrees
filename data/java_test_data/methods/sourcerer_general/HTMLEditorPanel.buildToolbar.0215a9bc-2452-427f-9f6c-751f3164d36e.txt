private void buildToolbar() {
    loadIcons();
    boldAction = new AbstractAction("Bold", boldIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorActions.get("font-bold").actionPerformed(ae);
            boldButton.setSelected(true);
        }
    };
    boldButton = createToolbarButton(boldAction);
    italicAction = new AbstractAction("Italic", italicIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorActions.get("font-italic").actionPerformed(ae);
            italicButton.setSelected(true);
        }
    };
    italicButton = createToolbarButton(italicAction);
    underlineAction = new AbstractAction("Underline", underlineIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorActions.get("font-underline").actionPerformed(ae);
            underlineButton.setSelected(true);
        }
    };
    underlineButton = createToolbarButton(underlineAction);
    copyAction = new AbstractAction("Copy", copyIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorPane.copy();
        }
    };
    copyButton = createToolbarButton(copyAction);
    cutAction = new AbstractAction("Cut", cutIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorPane.cut();
        }
    };
    cutButton = createToolbarButton(cutAction);
    pasteAction = new AbstractAction("Paste", pasteIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorPane.paste();
        }
    };
    pasteButton = createToolbarButton(pasteAction);
    leftAction = new AbstractAction("Justify Text Left", leftIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorActions.get("left-justify").actionPerformed(ae);
        }
    };
    leftButton = createToolbarButton(leftAction);
    centerAction = new AbstractAction("Justify Text center", centerIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorActions.get("center-justify").actionPerformed(ae);
        }
    };
    centerButton = createToolbarButton(centerAction);
    rightAction = new AbstractAction("Justify Text right", rightIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            editorActions.get("right-justify").actionPerformed(ae);
        }
    };
    rightButton = createToolbarButton(rightAction);
    undoAction = new AbstractAction("Undo ") {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            if (undoManager.canUndo()) {
                undoManager.undo();
            }
        }
    };
    redoAction = new AbstractAction("Undo ") {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
        }
    };
    linkAction = new AbstractAction("Create Hyperlink", linkIcon) {

        private static final long serialVersionUID = 1L;

        public void actionPerformed(ActionEvent ae) {
            try {
                createLink();
            } catch (BadLocationException e) {
                String msg = "Unable to insert hyperlink due to a client error.\nSpecific Error : " + e.getMessage();
                JOptionPane.showMessageDialog(editorPane, msg, "Bad Location Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    };
    linkButton = createToolbarButton(linkAction);
}
