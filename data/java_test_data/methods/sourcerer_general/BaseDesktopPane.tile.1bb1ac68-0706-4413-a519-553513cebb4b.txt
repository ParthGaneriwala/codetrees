public void tile() {
    try {
        Rectangle viewP = this.getVisibleRect();
        int totalNonIconFrames = 0;
        JInternalFrame[] frames = getAllFrames();
        if (this.isMaximum()) {
            for (int i = 0; i < frames.length - 1; i++) {
                if (!frames[i].isIcon()) {
                    // don't include iconified frames...
                    totalNonIconFrames++;
                }
                InternalFrameUI frameUI = frames[i].getUI();
                ((BasicInternalFrameUI) frameUI).setNorthPane(((BaseInternalFrame) frames[i]).getTitlePane());
                frames[i].setBorder((Border) UIManager.get("InternalFrame.border"));
                frames[i].setMaximum(false);
                frames[i].updateUI();
                // Đăng ký đối tượng quản lý sự kiện thay đổi thuộc tính trên JInternalFrame
                frames[i].addVetoableChangeListener(new MDIFrameChangeListener());
            }
            // Cập nhật trạng thái trên cửa sổ chính
            this.setWindowPanelVisible(false);
            this.setMaximun(false);
            this.parent.setDefaultTitle();
        } else {
            for (int i = 0; i < frames.length - 1; i++) {
                if (!frames[i].isIcon()) {
                    // don't include iconified frames...
                    totalNonIconFrames++;
                }
            }
        }
        int curCol = 0;
        int curRow = 0;
        int i = 0;
        if (totalNonIconFrames > 0) {
            // compute number of columns and rows then tile the frames
            int numCols = (int) Math.sqrt(totalNonIconFrames);
            int frameWidth = viewP.width / numCols;
            for (curCol = 0; curCol < numCols; curCol++) {
                int numRows = totalNonIconFrames / numCols;
                int remainder = totalNonIconFrames % numCols;
                if ((numCols - curCol) <= remainder) {
                    // add an extra row for this guy
                    numRows++;
                }
                int frameHeight = viewP.height / numRows;
                for (curRow = 0; curRow < numRows; curRow++) {
                    while (frames[i].isIcon()) {
                        // find the next visible frame
                        i++;
                    }
                    frames[i].setBounds(curCol * frameWidth, curRow * frameHeight, frameWidth, frameHeight);
                    i++;
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
