@Test
public void testExtractFeatures() throws ResourceInitializationException {
    UimaContext context = UimaContextFactory.createUimaContext();
    OutcomeFeatureExtractor ofe = new DefaultOutcomeFeatureExtractor();
    ofe.initialize(context);
    List<Feature> features = ofe.extractFeatures(Arrays.asList(new Object[] { "A", "B", "C", "D" }));
    assertEquals(5, features.size());
    Set<String> featureNames = new HashSet<String>();
    for (Feature feature : features) {
        featureNames.add(feature.getName() + "_" + feature.getValue());
    }
    assertTrue(featureNames.contains("PreviousOutcome_L1_D"));
    assertTrue(featureNames.contains("PreviousOutcome_L2_C"));
    assertTrue(featureNames.contains("PreviousOutcome_L3_B"));
    assertTrue(featureNames.contains("PreviousOutcomes_L1_2gram_L2R_D_C"));
    assertTrue(featureNames.contains("PreviousOutcomes_L1_3gram_L2R_D_C_B"));
    features = ofe.extractFeatures(Arrays.asList(new Object[] { "A", "B" }));
    assertEquals(3, features.size());
    featureNames.clear();
    for (Feature feature : features) {
        featureNames.add(feature.getName() + "_" + feature.getValue());
    }
    assertTrue(featureNames.contains("PreviousOutcome_L1_B"));
    assertTrue(featureNames.contains("PreviousOutcome_L2_A"));
    assertTrue(featureNames.contains("PreviousOutcomes_L1_2gram_L2R_B_A"));
    features = ofe.extractFeatures(Arrays.asList(new Object[0]));
    assertEquals(0, features.size());
    context = UimaContextFactory.createUimaContext(DefaultOutcomeFeatureExtractor.PARAM_MOST_RECENT_OUTCOME, 2, DefaultOutcomeFeatureExtractor.PARAM_LEAST_RECENT_OUTCOME, 3, DefaultOutcomeFeatureExtractor.PARAM_USE4GRAM, true, DefaultOutcomeFeatureExtractor.PARAM_USE_BIGRAM, false);
    ofe = new DefaultOutcomeFeatureExtractor();
    ofe.initialize(context);
    features = ofe.extractFeatures(Arrays.asList(new Object[] { "A", "B", "C", "D" }));
    assertEquals(4, features.size());
    featureNames.clear();
    for (Feature feature : features) {
        featureNames.add(feature.getName() + "_" + feature.getValue());
    }
    assertTrue(featureNames.contains("PreviousOutcome_L2_C"));
    assertTrue(featureNames.contains("PreviousOutcome_L3_B"));
    assertTrue(featureNames.contains("PreviousOutcomes_L1_3gram_L2R_D_C_B"));
    assertTrue(featureNames.contains("PreviousOutcomes_L1_4gram_L2R_D_C_B_A"));
    features = ofe.extractFeatures(Arrays.asList(new Object[] { 1, 3, "CAT", 5.5f }));
    assertEquals(4, features.size());
    featureNames.clear();
    for (Feature feature : features) {
        featureNames.add(feature.getName() + "_" + feature.getValue());
    }
    assertTrue(featureNames.contains("PreviousOutcome_L2_CAT"));
    assertTrue(featureNames.contains("PreviousOutcome_L3_3"));
    assertTrue(featureNames.contains("PreviousOutcomes_L1_3gram_L2R_5.5_CAT_3"));
    assertTrue(featureNames.contains("PreviousOutcomes_L1_4gram_L2R_5.5_CAT_3_1"));
}
