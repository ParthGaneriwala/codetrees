public static void main(String[] args) {
    final int NUM_NGRAMS = 10000000;
    class NgramWrapper {

        @SuppressWarnings("unused")
        public long[] ngram;

        public NgramWrapper(int order) {
            this.ngram = new long[order];
        }
    }
    OptionParser optParser = new OptionParser(Options.class);
    final Options opts = (Options) optParser.parse(args, true);
    final MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();
    MemoryUsage memuse1, memuse2;
    System.gc();
    NgramWrapper[] a = null;
    Ngram[] b = null;
    if (opts.wrapper) {
        a = new NgramWrapper[NUM_NGRAMS];
        memuse1 = memoryBean.getHeapMemoryUsage();
        for (int i = 0; i < NUM_NGRAMS; ++i) {
            a[i] = new NgramWrapper(opts.order);
        }
        System.gc();
        memuse2 = memoryBean.getHeapMemoryUsage();
    } else {
        b = new Ngram[NUM_NGRAMS];
        memuse1 = memoryBean.getHeapMemoryUsage();
        for (int i = 0; i < NUM_NGRAMS; ++i) {
            b[i] = Ngram.makeNgram(opts.order, new long[opts.order - 1], 0);
        }
        System.gc();
        memuse2 = memoryBean.getHeapMemoryUsage();
    }
    System.out.printf("Order %d: %s: %d bytes/ngram\n", opts.order, opts.wrapper ? "wrapper" : "n-gram", (memuse2.getUsed() - memuse1.getUsed()) / NUM_NGRAMS);
    int l = (a == null) ? b.length : a.length;
}
