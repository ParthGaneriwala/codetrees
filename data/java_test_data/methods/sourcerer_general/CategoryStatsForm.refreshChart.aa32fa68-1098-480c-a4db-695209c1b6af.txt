private void refreshChart() {
    ISeriesSet ss = chart.getSeriesSet();
    for (ISeries s : ss.getSeries()) {
        ss.deleteSeries(s.getId());
    }
    if (id.doGetValue() == null) {
        return;
    }
    // DateChooser gives us a time of 00:00:00
    SimpleDate from = SimpleDate.UTC(this.from.getValue());
    SimpleDate to = SimpleDate.UTC(this.to.getValue());
    int diff = to.dayDiff(from);
    LOG.debug("refresh chart category: " + id.doGetValue() + " " + from + " " + to);
    LOG.debug("diff: " + diff);
    TransactionService cs = new TransactionService();
    SimpleDateFormat dateFormat = null;
    List<Date> xseries = new ArrayList<Date>();
    HashMap<Account, List<Object[]>> yl = null;
    HashMap<Account, double[]> ym = new HashMap<Account, double[]>();
    if (diff <= 31) {
        // daily
        dateFormat = new SimpleDateFormat("MM/dd");
        for (SimpleDate l = from; l.compareTo(to) <= 0; l = l.nextDay()) {
            xseries.add(l);
        }
        yl = cs.getDailyAmount((Integer) id.doGetValue(), from, to);
        // Map<Account, List<{String, Long}>> => Map<Account, List<{Date, Long}>>
        for (Account a : yl.keySet()) {
            List<Object[]> l = yl.get(a);
            for (int i = 0; i < l.size(); i++) {
                LOG.debug((String) l.get(i)[0] + " " + SimpleDate.UTC((String) l.get(i)[0]));
                l.get(i)[0] = SimpleDate.UTC((String) l.get(i)[0]);
            }
        }
    } else if (diff <= 186) {
        // weekly
        SimpleDate.resetDateRange(from, to, Calendar.WEEK_OF_YEAR, null);
        dateFormat = new SimpleDateFormat("MM/dd~");
        for (SimpleDate l = from; l.compareTo(to) <= 0; l = l.nextWeek()) {
            xseries.add(l);
        }
        yl = cs.getWeeklyAmount((Integer) id.doGetValue(), from, to);
        // Map<Account, List<{YYYYWW, Long}>> => Map<Account, List<{Date, Long}>>
        for (Account a : yl.keySet()) {
            List<Object[]> l = yl.get(a);
            for (int i = 0; i < l.size(); i++) {
                LOG.debug((String) l.get(i)[0] + " " + SimpleDate.yyyyww((String) l.get(i)[0]));
                l.get(i)[0] = SimpleDate.yyyyww((String) l.get(i)[0]);
            }
        }
    } else {
        // if ( diff <= 1100 ) {
        // monthly
        SimpleDate.resetDateRange(from, to, Calendar.MONTH, null);
        dateFormat = new SimpleDateFormat("yyyy/MM");
        for (SimpleDate l = from; l.compareTo(to) <= 0; l = l.nextMonth()) {
            xseries.add(l);
        }
        yl = cs.getMonthlyAmount((Integer) id.doGetValue(), from, to);
        // Map<Account, List<{YYYYMM, Long}>> => Map<Account, List<{Date, Long}>>
        for (Account a : yl.keySet()) {
            List<Object[]> l = yl.get(a);
            for (int i = 0; i < l.size(); i++) {
                LOG.debug((String) l.get(i)[0] + " " + SimpleDate.yyyymm((String) l.get(i)[0]));
                l.get(i)[0] = SimpleDate.yyyymm((String) l.get(i)[0]);
            }
        }
    /*
		} else {
			// yearly
			SimpleDate.resetDateRange(from, to, Calendar.MONTH, null);
			dateFormat = new SimpleDateFormat("yyyy/MM");

			for ( SimpleDate l = from; l.compareTo(to) <= 0; l = l.nextYear() ) {
				xseries.add(l);
			}

			CategoryService cs = new CategoryService();
			yl = cs.getMonthlyAmount((Integer)id.doGetValue(), from, to);

			// Map<Account, List<{YYYYWW, Long}>> => Map<Account, List<{Date, Long}>>
			for ( Account a : yl.keySet() ) {
				List<Object[]> l = yl.get(a);
				for ( int i = 0; i < l.size(); i++ ) {
					LOG.debug((String)l.get(i)[0] + " " + SimpleDate.yyyymm((String)l.get(i)[0]));
					l.get(i)[0] = SimpleDate.yyyymm((String)l.get(i)[0]);
				}
			}
			*/
    }
    // find max for range
    double max = 1;
    // Map<Account, List<{Date, Long}>> => Map<Account, double[]>
    for (Account a : yl.keySet()) {
        List<Object[]> l = yl.get(a);
        double[] d = new double[xseries.size()];
        for (int i = 0; i < l.size(); i++) {
            int idx = xseries.indexOf((Date) l.get(i)[0]);
            if (idx >= 0) {
                d[idx] = (idx == 0 ? 0 : d[idx - 1]) + ((Number) l.get(i)[1]).doubleValue();
                LOG.debug(d[idx]);
                if (d[idx] > max) {
                    max = d[idx];
                }
            } else {
                LOG.warn("cannot found " + (Date) l.get(i)[0] + " in x axis");
            }
        }
        // make a increasing graph
        for (int i = 1; i < d.length; i++) {
            d[i] += d[i - 1];
        }
        ym.put(a, d);
    }
    // create line series
    int color = 0;
    for (Account a : ym.keySet()) {
        ILineSeries lineSeries = (ILineSeries) ss.createSeries(SeriesType.LINE, a.getName());
        double[] y = ym.get(a);
        lineSeries.setYSeries(y);
        lineSeries.setLineWidth(3);
        // adjust the y-axis range
        chart.getAxisSet().getYAxis(0).setRange(new Range(0, max * 1.1));
        // no 0, no 1=SWT.COLOR_WHITE
        int[] COLORS = { 11, 3, 5, 7, 9, 2, 13, 15, 2, 4, 6, 8, 10, 12, 14, 16 };
        lineSeries.setLineColor(Display.getDefault().getSystemColor(COLORS[color++]));
        if (color == COLORS.length) {
            color = 0;
        }
        // show non-zero labels
        ISeriesLabel seriesLabel = lineSeries.getLabel();
        seriesLabel.setVisible(true);
        String[] formats = new String[y.length];
        for (int i = 0; i < y.length; i++) {
            if (y[i] == 0 || (i > 0 && y[i] == y[i - 1])) {
                formats[i] = "";
            } else {
                formats[i] = "ï¿¥#,###";
            }
        }
        seriesLabel.setFormats(formats);
        IAxis xAxis = chart.getAxisSet().getXAxis(lineSeries.getXAxisId());
        if (diff <= 31) {
            lineSeries.setXDateSeries(xseries.toArray(new Date[] {}));
            xAxis.getTick().setFormat(dateFormat);
            xAxis.setRange(new Range(from.getTime() - SimpleDate.ONE_DAY_MILI + 1, to.getTime() + SimpleDate.ONE_DAY_MILI - 1));
        } else {
            String[] xs = new String[xseries.size()];
            for (int i = 0; i < xs.length; i++) {
                xs[i] = dateFormat.format(xseries.get(i));
            }
            xAxis.setCategorySeries(xs);
            xAxis.adjustRange();
            xAxis.enableCategory(true);
        }
    }
    // redraw
    chart.getPlotArea().update();
    // work for win
    chart.redraw();
}
