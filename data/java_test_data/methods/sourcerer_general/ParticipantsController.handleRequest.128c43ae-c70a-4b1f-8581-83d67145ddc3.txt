public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
    ModelAndView mv = new ModelAndView();
    String eventSid = (String) request.getParameter("sid");
    String clubSid = (String) request.getParameter("clubSid");
    String guideSid = (String) request.getParameter("guideSid");
    String dogSid = (String) request.getParameter("dogSid");
    String heat = (String) request.getParameter("heat");
    String delete = (String) request.getParameter("delete");
    boolean add = Boolean.valueOf((String) request.getParameter("add")).booleanValue();
    String dorsal = (String) request.getParameter("dorsal");
    if (delete != null && delete.length() > 0) {
        // eliminamos
        participantsManager.remove(new Long(delete));
        Locale locale = request.getLocale();
        saveMessage(mv, getText("participants.deleted", locale), SUCCESS_MESSAGES_KEY);
    }
    // Si queremos establecer los dorsales
    if (dorsal != null && Boolean.valueOf(dorsal).booleanValue()) {
        // Se establecen los dorsales ordenados por club
        String hql = "from Participants where event.sid=" + eventSid + " order by dog.guide.club.sid";
        List<Participants> l = participantsManager.findHQL(hql);
        for (int i = 0; i < l.size(); i++) {
            Participants p = l.get(i);
            p.setDorsal(new Long(i + 1));
        }
    // Event e=eventManager.get(Long.valueOf(eventSid));
    // Iterator<Participants> itPart=e.getParticipantses().iterator();
    // List<Long> dorsals=shuffleDorsals(e.getParticipantses().size());
    // int i=0;
    // while(itPart.hasNext())
    // {
    // Participants p=itPart.next();
    // p.setDorsal(dorsals.get(i));
    // this.participantsManager.save(p);
    // i++;
    // }
    }
    if (add) {
        String hql = "from Participants where dog.sid=" + dogSid + " and event.sid=" + eventSid;
        List<Participants> l = participantsManager.findHQL(hql);
        if (l == null || l.size() == 0) {
            // System.out.println("vamos a a�adir un participante");
            // a�ado el participante
            Participants p = new Participants();
            Dog d = dogManager.get(new Long(dogSid));
            p.setDog(d);
            p.setHeat(Boolean.valueOf(heat).booleanValue());
            Event e = eventManager.get(new Long(eventSid));
            p.setEvent(e);
            p.setDorsal(new Long(0));
            Participants psaved = participantsManager.save(p);
            clubSid = "";
            guideSid = "";
            dogSid = "";
            Locale locale = request.getLocale();
            // //a�ado los resultados de las rondas
            // Iterator<Round> itRounds=e.getRounds().iterator();
            // while(itRounds.hasNext())
            // {
            // Round r=itRounds.next();
            // Roundresults rr=new Roundresults();
            // rr.setAbsent(false);
            // rr.setEliminated(false);
            // rr.setParticipants(psaved);
            // rr.setRound(r);
            // rr.setFouls(new Long(0));
            // rr.setReuses(new Long(0));
            // rr.setStartorder(new Long(0));
            // rr.setCategory(psaved.getDog().getCategory());
            // rr.setGrade(psaved.getDog().getGrade());
            // roundresultsManager.save(rr);
            // }
            // 
            saveMessage(mv, getText("participants.added", locale), SUCCESS_MESSAGES_KEY);
        } else {
            Locale locale = request.getLocale();
            saveMessage(mv, getText("participants.exist", locale), ERROR_MESSAGES_KEY);
        }
    }
    if (eventSid != null && eventSid.length() > 0) {
        String hql = "from Participants where event.sid=" + eventSid + " order by dog.guide.club.name";
        mv.addObject("eventsid", eventSid);
        mv.addObject("clubSid", clubSid);
        mv.addObject("guideSid", guideSid);
        mv.addObject("dogSid", dogSid);
        mv.addObject(participantsManager.findHQL(hql));
        // primero meto todos los clubs
        // System.out.println("meto toda la lista de clubs");
        mv.addObject("listadeclubs", clubManager.getAll("name"));
        // luego meto los gu�as del club seleccionado
        if (clubSid != null && clubSid.length() > 0) {
            // System.out.println("meto la lista de gu�as!");
            hql = "from Guide where club.sid=" + clubSid + " order by firstName";
            mv.addObject("listadeguias", guideManager.findHQL(hql));
            mv.addObject("clubName", clubManager.get(new Long(clubSid)).getName());
            // ahora meto los perros del gu�a seleccionado
            if (guideSid != null && guideSid.length() > 0) {
                Guide g = guideManager.get(new Long(guideSid));
                // System.out.println("El Sid del Club2="+new Long(clubSid));
                if (g.getClub().getSid() == new Long(clubSid).longValue()) {
                    // System.out.println("meto la lista de perros!");
                    hql = "from Dog where guide.sid=" + guideSid + " order by name";
                    mv.addObject("listadeperros", dogManager.findHQL(hql));
                    mv.addObject("guideName", g.getFormLabelField());
                    if (dogSid != null && dogSid.length() > 0) {
                        Dog d = dogManager.get(new Long(dogSid));
                        if (d.getGuide().getSid() == new Long(guideSid).longValue()) {
                            mv.addObject("dogName", d.getName());
                        }
                    }
                }
            }
        }
        return mv;
    } else {
        return new ModelAndView().addObject(participantsManager.getAll("dog.guide.club.name"));
    }
}
