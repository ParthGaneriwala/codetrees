public void testRDFSInheritance() {
    Node C1 = Node.createURI("C1");
    Node C2 = Node.createURI("C2");
    Node C3 = Node.createURI("C3");
    Node C4 = Node.createURI("C4");
    Node D = Node.createURI("D");
    Node a = Node.createURI("a");
    Node b = Node.createURI("b");
    Node p = Node.createURI("p");
    Node q = Node.createURI("q");
    Node r = Node.createURI("r");
    Node sC = RDFS.subClassOf.asNode();
    Node ty = RDF.type.asNode();
    Graph tdata = Factory.createGraphMem();
    tdata.add(new Triple(C1, sC, C2));
    tdata.add(new Triple(C2, sC, C3));
    tdata.add(new Triple(p, RDFS.subPropertyOf.asNode(), q));
    tdata.add(new Triple(q, RDFS.subPropertyOf.asNode(), r));
    tdata.add(new Triple(r, RDFS.domain.asNode(), D));
    Graph data = Factory.createGraphMem();
    data.add(new Triple(a, p, b));
    InfGraph igraph = ReasonerRegistry.getRDFSReasoner().bind(new Union(tdata, data));
    TestUtil.assertIteratorValues(this, igraph.find(a, ty, null), new Object[] { new Triple(a, ty, D), new Triple(a, ty, RDFS.Resource.asNode()) });
    // Check if first of these is in the wildcard listing
    boolean ok = false;
    Triple target = new Triple(a, ty, D);
    for (Iterator i = igraph.find(null, ty, null); i.hasNext(); ) {
        Triple t = (Triple) i.next();
        if (t.equals(target)) {
            ok = true;
            break;
        }
    }
    assertTrue(ok);
    igraph = ReasonerRegistry.getRDFSReasoner().bindSchema(tdata).bind(data);
    TestUtil.assertIteratorValues(this, igraph.find(a, ty, null), new Object[] { new Triple(a, ty, D), new Triple(a, ty, RDFS.Resource.asNode()) });
    // Check if first of these is in the wildcard listing
    ok = false;
    target = new Triple(a, ty, D);
    for (Iterator i = igraph.find(null, ty, null); i.hasNext(); ) {
        Triple t = (Triple) i.next();
        if (t.equals(target)) {
            ok = true;
            break;
        }
    }
    assertTrue(ok);
}
