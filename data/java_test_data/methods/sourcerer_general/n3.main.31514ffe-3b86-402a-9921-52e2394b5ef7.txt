// static final String NL = JenaRuntime.getLineSeparator();
// Parse a file (no RDF production)
public static void main(String[] args) {
    String dir = System.getProperty("user.dir");
    String usageMessage = n3.class.getName() + " [-rdf] [-base URI] [filename]";
    CommandLine cmd = new CommandLine();
    cmd.setUsage(usageMessage);
    // cmd.setOutput(System.err) ;
    // cmd.setHook(cmd.trace()) ;
    ArgDecl verboseDecl = new ArgDecl(false, "-v", "--verbose");
    ArgDecl helpDecl = new ArgDecl(false, "-h", "--help");
    ArgDecl rdfDecl = new ArgDecl(false, "-rdf", "--rdf");
    ArgDecl rdfRDFN3Decl = new ArgDecl(false, "--rdf-n3");
    ArgDecl rdfRDFXMLDecl = new ArgDecl(false, "--rdf-xml");
    ArgDecl rdfRDFNTDecl = new ArgDecl(false, "--rdf-nt");
    ArgDecl rdfRDFFormat = new ArgDecl(true, "--format", "--fmt");
    ArgDecl debugDecl = new ArgDecl(false, "-debug");
    ArgDecl baseDecl = new ArgDecl(true, "-base");
    // ArgDecl outputDecl        = new ArgDecl(true, "-output", "-o") ;
    ArgDecl checkDecl = new ArgDecl(false, "-n", "--check");
    cmd.add(verboseDecl);
    cmd.add(helpDecl);
    cmd.add(rdfDecl);
    cmd.add(rdfRDFN3Decl);
    cmd.add(rdfRDFXMLDecl);
    cmd.add(rdfRDFNTDecl);
    cmd.add(rdfRDFFormat);
    cmd.add(debugDecl);
    cmd.add(baseDecl);
    cmd.add(checkDecl);
    try {
        cmd.process(args);
    } catch (IllegalArgumentException illEx) {
        System.exit(1);
    }
    verbose = cmd.contains(verboseDecl);
    if (cmd.contains(helpDecl)) {
        System.out.println(usageMessage);
        System.out.println("Default action: parse an N3 file");
        System.out.println("    --rdf           Read into an RDF and print");
        System.out.println("    --rdf-n3        Read into an RDF and print in N3");
        System.out.println("    --rdf-xml       Read into an RDF and print in XML");
        System.out.println("    --rdf-nt        Read into an RDF and print in N-Triples");
        System.out.println("    --format FMT    Read into an RDF and print in given format");
        System.out.println("    --check | -n    Just check: no output");
        System.out.println("    --base URI      Set the base URI");
        System.exit(0);
    }
    String baseName = null;
    if (cmd.contains(rdfDecl)) {
        doRDF = true;
        printRDF = true;
        printN3 = false;
    }
    if (cmd.contains(rdfRDFN3Decl)) {
        doRDF = true;
        printRDF = true;
        outputLang = "N3";
        printN3 = false;
    }
    if (cmd.contains(rdfRDFXMLDecl)) {
        doRDF = true;
        printRDF = true;
        outputLang = "RDF/XML-ABBREV";
        printN3 = false;
    }
    if (cmd.contains(rdfRDFNTDecl)) {
        doRDF = true;
        printRDF = true;
        outputLang = "N-TRIPLE";
        printN3 = false;
    }
    if (cmd.contains(rdfRDFFormat)) {
        doRDF = true;
        printRDF = true;
        outputLang = cmd.getArg(rdfRDFFormat).getValue();
        printN3 = false;
    }
    if (cmd.contains(debugDecl)) {
        debug = true;
        N3JenaWriter.DEBUG = true;
    }
    if (cmd.contains(checkDecl)) {
        printRDF = false;
        printN3 = false;
    }
    if (cmd.contains(verboseDecl)) {
        verbose = true;
        printN3 = true;
    }
    if (cmd.contains(baseDecl))
        baseName = cmd.getArg(baseDecl).getValue();
    if (cmd.numItems() == 0) {
        if (baseName == null)
            baseName = "stdin:/";
        doOneFile(System.in, System.out, baseName, baseName);
        System.exit(0);
    }
    // for ( Iterator iter = cmd.items().iterator() ; iter.hasNext() ; )
    for (int i = 0; i < cmd.numItems(); i++) {
        // String filename = (String)iter.next() ;
        String filename = cmd.getItem(i);
        InputStream in = null;
        try {
            // DO NOT use a FileReader : it gets default charset
            in = new FileInputStream(filename);
        } catch (FileNotFoundException noEx) {
            System.err.println("File not found: " + filename);
            System.exit(2);
        }
        if (baseName == null) {
            File f = new File(filename);
            baseName = "file:///" + f.getAbsolutePath();
            baseName = baseName.replace('\\', '/');
        }
        doOneFile(in, System.out, baseName, filename);
    }
}
