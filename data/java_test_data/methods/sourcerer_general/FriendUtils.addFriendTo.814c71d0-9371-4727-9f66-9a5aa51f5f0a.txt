public static void addFriendTo(String lastName, String firstName, String friendLastName, String friendFirstName) {
    PersistenceManager pm = PMF.get().getPersistenceManager();
    String meKey = KeyFactory.keyToString(getKeyForName(lastName, firstName));
    String otherKey = KeyFactory.keyToString(getKeyForName(friendLastName, friendFirstName));
    // First create the friend if he doesn't already exist.
    Friend other = null;
    try {
        pm.currentTransaction().begin();
        try {
            other = pm.getObjectById(Friend.class, otherKey);
            List<String> replacementFriends = new ArrayList<String>(other.getFriendKeys());
            replacementFriends.add(meKey);
            other.setFriendKeys(replacementFriends);
        } catch (JDOObjectNotFoundException e) {
            other = new Friend(friendLastName, friendFirstName);
            List<String> replacementFriends = new ArrayList<String>(other.getFriendKeys());
            replacementFriends.add(meKey);
            other.setFriendKeys(replacementFriends);
            pm.makePersistent(other);
        }
        pm.currentTransaction().commit();
    } finally {
        if (pm.currentTransaction().isActive()) {
            pm.currentTransaction().rollback();
        }
    }
    pm.close();
    pm = PMF.get().getPersistenceManager();
    // Then add a reference to the friend to my list.
    Friend me = null;
    try {
        pm.currentTransaction().begin();
        try {
            me = pm.getObjectById(Friend.class, meKey);
            List<String> replacementFriends = new ArrayList<String>(me.getFriendKeys());
            replacementFriends.add(otherKey);
            me.setFriendKeys(replacementFriends);
        } catch (JDOObjectNotFoundException e) {
            me = new Friend(lastName, firstName);
            List<String> replacementFriends = new ArrayList<String>(me.getFriendKeys());
            replacementFriends.add(otherKey);
            me.setFriendKeys(replacementFriends);
            pm.makePersistent(me);
        }
        pm.currentTransaction().commit();
    } finally {
        if (pm.currentTransaction().isActive()) {
            pm.currentTransaction().rollback();
        }
    }
}
