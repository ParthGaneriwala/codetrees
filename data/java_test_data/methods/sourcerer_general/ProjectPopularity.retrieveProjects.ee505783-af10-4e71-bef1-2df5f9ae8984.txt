public static ProjectList retrieveProjects(Connection db, PopularityCriteria popularityCriteria, int categoryId) throws SQLException {
    ArrayList<Integer> projectIds = new ArrayList<Integer>();
    StringBuffer sqlStatement = new StringBuffer();
    StringBuffer sqlOrder = new StringBuffer();
    PagedListInfo pagedListInfo = new PagedListInfo();
    pagedListInfo.setDefaultSort("points", popularityCriteria.getOrder());
    pagedListInfo.setItemsPerPage(popularityCriteria.getLimit());
    pagedListInfo.appendSqlTail(db, sqlOrder);
    pagedListInfo.appendSqlSelectHead(db, sqlStatement);
    // Views
    /*
    sqlStatement.append(" COUNT(*) AS points, v.project_id " +
        "FROM projects_view v, projects " +
        "WHERE v.project_id = projects.project_id " +
        "AND projects.category_id = ? " +
        "AND v.view_date <= ? " +
        "AND v.view_date > ? " +
        (popularityCriteria.getForPublic() == Constants.TRUE ? "AND projects.allow_guests = ? " : "") +
        (popularityCriteria.getForParticipant() == Constants.TRUE ? "AND (projects.allows_user_observers = ? OR projects.allow_guests = ?) " : "") +
        (popularityCriteria.getInstanceId() > -1 ? "AND projects.instance_id = ? " : "") +
        "AND projects.closedate IS NULL " +
        "GROUP BY v.project_id ");
    */
    // Ratings w/optional range
    sqlStatement.append(" SUM(rating) AS points, project_id " + "FROM projects_rating " + "WHERE project_id IN (SELECT project_id FROM projects WHERE category_id = ?) " + "AND entered <= ? " + (popularityCriteria.getStartDate() != null ? "AND entered > ? " : "") + (popularityCriteria.getForPublic() == Constants.TRUE ? "AND project_id IN (SELECT project_id FROM projects WHERE allow_guests = ? AND closedate IS NULL AND approvaldate IS NOT NULL) " : "") + (popularityCriteria.getForParticipant() == Constants.TRUE ? "AND project_id IN (SELECT project_id FROM projects WHERE (allows_user_observers = ? OR allow_guests = ?) AND closedate IS NULL AND approvaldate IS NOT NULL) " : "") + (popularityCriteria.getInstanceId() > -1 ? "AND project_id IN (SELECT project_id FROM projects WHERE instance_id = ?) " : "") + "GROUP BY project_id ");
    // Depth of Content w/optional range
    /*
    sqlStatement.append(" SUM(points) AS points, project_id " +
        "FROM user_contribution_log " +
        "WHERE project_id IN (SELECT project_id FROM projects WHERE category_id = ?) " +
        "AND contribution_date <= ? " +
        (popularityCriteria.getStartDate() != null ? "AND contribution_date > ? " : "") +
        (popularityCriteria.getForPublic() == Constants.TRUE ? "AND project_id IN (SELECT project_id FROM projects WHERE allow_guests = ? AND closedate IS NULL) " : "") +
        (popularityCriteria.getForParticipant() == Constants.TRUE ? "AND project_id IN (SELECT project_id FROM projects WHERE (allows_user_observers = ? OR allow_guests = ?) AND closedate IS NULL) " : "") +
        (popularityCriteria.getInstanceId() > -1 ? "AND project_id IN (SELECT project_id FROM projects WHERE instance_id = ?) " : "") +
        "GROUP BY project_id ");
    */
    ResultSet rs = null;
    PreparedStatement pst = db.prepareStatement(sqlStatement.toString() + sqlOrder.toString());
    int i = 0;
    pst.setInt(++i, categoryId);
    pst.setTimestamp(++i, popularityCriteria.getEndDate());
    if (popularityCriteria.getStartDate() != null) {
        pst.setTimestamp(++i, popularityCriteria.getStartDate());
    }
    if (popularityCriteria.getForPublic() == Constants.TRUE) {
        pst.setBoolean(++i, true);
    }
    if (popularityCriteria.getForParticipant() == Constants.TRUE) {
        pst.setBoolean(++i, true);
        pst.setBoolean(++i, true);
    }
    if (popularityCriteria.getInstanceId() > -1) {
        pst.setInt(++i, popularityCriteria.getInstanceId());
    }
    // System.out.println(pst);
    rs = pst.executeQuery();
    while (rs.next()) {
        int projectId = rs.getInt("project_id");
        projectIds.add(projectId);
    }
    rs.close();
    pst.close();
    // Return a project list
    Iterator<Integer> projectIdItr = projectIds.iterator();
    ProjectList projectList = new ProjectList();
    while (projectIdItr.hasNext()) {
        projectList.add(ProjectUtils.loadProject(projectIdItr.next()));
    }
    return projectList;
}
