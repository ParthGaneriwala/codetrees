public void initializePackageContents() {
    if (isInitialized)
        return;
    isInitialized = true;
    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    // Obtain other dependent packages
    WiresPackage theWiresPackage = (WiresPackage) EPackage.Registry.INSTANCE.getEPackage(WiresPackage.eNS_URI);
    CorePackage theCorePackage = (CorePackage) EPackage.Registry.INSTANCE.getEPackage(CorePackage.eNS_URI);
    DomainPackage theDomainPackage = (DomainPackage) EPackage.Registry.INSTANCE.getEPackage(DomainPackage.eNS_URI);
    // Create type parameters
    // Set bounds for type parameters
    // Add supertypes to classes
    conformLoadEClass.getESuperTypes().add(theWiresPackage.getEnergyConsumer());
    conformLoadGroupEClass.getESuperTypes().add(this.getLoadGroup());
    loadGroupEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    conformLoadScheduleEClass.getESuperTypes().add(this.getSeasonDayTypeSchedule());
    dayTypeEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    energyAreaEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    loadAreaEClass.getESuperTypes().add(this.getEnergyArea());
    loadResponseCharacteristicEClass.getESuperTypes().add(theCorePackage.getIdentifiedObject());
    nonConformLoadEClass.getESuperTypes().add(theWiresPackage.getEnergyConsumer());
    nonConformLoadGroupEClass.getESuperTypes().add(this.getLoadGroup());
    nonConformLoadScheduleEClass.getESuperTypes().add(this.getSeasonDayTypeSchedule());
    powerCutZoneEClass.getESuperTypes().add(theCorePackage.getPowerSystemResource());
    stationSupplyEClass.getESuperTypes().add(theWiresPackage.getEnergyConsumer());
    subLoadAreaEClass.getESuperTypes().add(this.getEnergyArea());
    seasonDayTypeScheduleEClass.getESuperTypes().add(theCorePackage.getRegularIntervalSchedule());
    // Initialize classes and features; add operations and parameters
    initEClass(conformLoadEClass, ConformLoad.class, "ConformLoad", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(conformLoadGroupEClass, ConformLoadGroup.class, "ConformLoadGroup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(loadGroupEClass, LoadGroup.class, "LoadGroup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(conformLoadScheduleEClass, ConformLoadSchedule.class, "ConformLoadSchedule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(dayTypeEClass, DayType.class, "DayType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(energyAreaEClass, EnergyArea.class, "EnergyArea", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(loadAreaEClass, LoadArea.class, "LoadArea", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(loadResponseCharacteristicEClass, LoadResponseCharacteristic.class, "LoadResponseCharacteristic", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLoadResponseCharacteristic_ExponentModel(), theDomainPackage.getBoolean(), null, "exponentModel", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_PConstantCurrent(), theDomainPackage.getFloat(), null, "pConstantCurrent", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_PConstantImpedance(), theDomainPackage.getFloat(), null, "pConstantImpedance", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_PConstantPower(), theDomainPackage.getFloat(), null, "pConstantPower", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_PFrequencyExponent(), theDomainPackage.getFloat(), null, "pFrequencyExponent", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_PVoltageExponent(), theDomainPackage.getFloat(), null, "pVoltageExponent", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_QConstantCurrent(), theDomainPackage.getFloat(), null, "qConstantCurrent", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_QConstantImpedance(), theDomainPackage.getFloat(), null, "qConstantImpedance", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_QConstantPower(), theDomainPackage.getFloat(), null, "qConstantPower", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_QFrequencyExponent(), theDomainPackage.getFloat(), null, "qFrequencyExponent", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getLoadResponseCharacteristic_QVoltageExponent(), theDomainPackage.getFloat(), null, "qVoltageExponent", null, 0, 1, LoadResponseCharacteristic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(nonConformLoadEClass, NonConformLoad.class, "NonConformLoad", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(nonConformLoadGroupEClass, NonConformLoadGroup.class, "NonConformLoadGroup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(nonConformLoadScheduleEClass, NonConformLoadSchedule.class, "NonConformLoadSchedule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(powerCutZoneEClass, PowerCutZone.class, "PowerCutZone", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPowerCutZone_CutLevel1(), theDomainPackage.getPerCent(), null, "cutLevel1", null, 0, 1, PowerCutZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getPowerCutZone_CutLevel2(), theDomainPackage.getPerCent(), null, "cutLevel2", null, 0, 1, PowerCutZone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(seasonEClass, Season.class, "Season", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSeason_EndDate(), theDomainPackage.getAbsoluteDateTime(), null, "endDate", null, 0, 1, Season.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEAttribute(getSeason_Name(), this.getSeasonName(), "name", null, 0, 1, Season.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEReference(getSeason_StartDate(), theDomainPackage.getAbsoluteDateTime(), null, "startDate", null, 0, 1, Season.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);
    initEClass(stationSupplyEClass, StationSupply.class, "StationSupply", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(subLoadAreaEClass, SubLoadArea.class, "SubLoadArea", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(seasonDayTypeScheduleEClass, SeasonDayTypeSchedule.class, "SeasonDayTypeSchedule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    // Initialize enums and add enum literals
    initEEnum(seasonNameEEnum, SeasonName.class, "SeasonName");
    addEEnumLiteral(seasonNameEEnum, SeasonName.WINTER);
    addEEnumLiteral(seasonNameEEnum, SeasonName.SPRING);
    addEEnumLiteral(seasonNameEEnum, SeasonName.SUMMER);
    addEEnumLiteral(seasonNameEEnum, SeasonName.FALL);
}
