@Test
@DirtiesContext
public void testBlogWrite() throws Exception {
    configureMinimalGame();
    // Setup CMS content
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    CrudRootServiceHelper<DbPage> pageCrud = cmsService.getPageCrudRootServiceHelper();
    DbPage dbPage1 = pageCrud.createDbChild();
    dbPage1.setPredefinedType(CmsUtil.CmsPredefinedPage.HOME);
    dbPage1.setName("Home");
    DbContentList dbContentList = new DbContentList();
    dbContentList.init(userService);
    dbPage1.setContentAndAccessWrites(dbContentList);
    dbContentList.setWriteRestricted(DbContent.Access.USER);
    dbContentList.setRowsPerPage(5);
    dbContentList.setSpringBeanName("contentService");
    dbContentList.setContentProviderGetter("blogEntryCrudRootServiceHelper");
    CrudListChildServiceHelper<DbContent> columnCrud = dbContentList.getColumnsCrud();
    DbContentContainer dbContentContentContainer = (DbContentContainer) columnCrud.createDbChild(DbContentContainer.class);
    DbExpressionProperty title = (DbExpressionProperty) dbContentContentContainer.getContentCrud().createDbChild(DbExpressionProperty.class);
    title.setExpression("name");
    DbExpressionProperty date = (DbExpressionProperty) dbContentContentContainer.getContentCrud().createDbChild(DbExpressionProperty.class);
    date.setExpression("timeStamp");
    date.setOptionalType(DbExpressionProperty.Type.DATE_DDMMYYYY_HH_MM_SS);
    DbExpressionProperty html = (DbExpressionProperty) dbContentContentContainer.getContentCrud().createDbChild(DbExpressionProperty.class);
    html.setExpression("html");
    html.setEscapeMarkup(false);
    pageCrud.updateDbChild(dbPage1);
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    // Activate
    beginHttpSession();
    beginHttpRequestAndOpenSessionInViewFilter();
    cmsService.activateCms();
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    beginHttpSession();
    // Create User
    beginHttpRequestAndOpenSessionInViewFilter();
    userService.createUser("test", "test", "test", "");
    userService.login("test", "test");
    User user = userService.getUser();
    DbContentAccessControl control = user.getContentCrud().createDbChild();
    control.setDbContent(dbContentList);
    control.setCreateAllowed(true);
    control.setDeleteAllowed(true);
    control.setWriteAllowed(true);
    endHttpRequestAndOpenSessionInViewFilter();
    // Write
    beginHttpRequestAndOpenSessionInViewFilter();
    tester.startPage(CmsPage.class);
    tester.assertVisible("form:content:edit:edit");
    FormTester formTester = tester.newFormTester("form");
    formTester.submit("content:edit:edit");
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    formTester = tester.newFormTester("form");
    formTester.submit("content:edit:create");
    endHttpRequestAndOpenSessionInViewFilter();
    beginHttpRequestAndOpenSessionInViewFilter();
    formTester = tester.newFormTester("form");
    formTester.setValue("content:table:rows:1:cells:1:cell:container:1:field", "Blog 1");
    formTester.setValue("content:table:rows:1:cells:1:cell:container:3:textArea", "Bla Bla");
    formTester.submit("content:edit:save");
    endHttpRequestAndOpenSessionInViewFilter();
    endHttpSession();
    Collection<DbBlogEntry> blog = contentService.getBlogEntryCrudRootServiceHelper().readDbChildren();
    Assert.assertEquals(1, blog.size());
    DbBlogEntry dbBlogEntry = blog.iterator().next();
    Assert.assertEquals("Blog 1", dbBlogEntry.getName());
    Assert.assertEquals("Bla Bla", dbBlogEntry.getHtml());
}
