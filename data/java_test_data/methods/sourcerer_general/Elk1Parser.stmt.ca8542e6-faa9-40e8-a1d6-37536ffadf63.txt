private ParseNode stmt() {
    // might be a "=" or "!"
    ParseNode parent;
    // right //from idNode to ParseNode will there be something wrong'������������������������
    ParseNode idChild;
    // might be Operator or Keyword  left
    ParseNode exprChild;
    if (nowReadingsymbol.isTerminal(IdentifierToken.class)) {
        idChild = new IdentifierNode(nowReadingsymbol);
        readToken();
        if (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
            // make a id
            IdentifierNode indexedId = new IdentifierNode(new TokenGrammarSymbol(lastEaten));
            ArrayVarNode arrayParent = new ArrayVarNode(NonterminalGrammarSymbol.ARRAY);
            readToken();
            if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                error("The indexed Identifier sytax is wrong!");
            } else {
                // 
                ParseNode expr = expr();
                if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                    arrayParent.appendChild(expr);
                    readToken();
                    while (nowReadingsymbol.isOperator(Operator.LINDEXING)) {
                        readToken();
                        if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                            error("The indexed Identifier sytax is wrong!");
                        } else {
                            expr = expr();
                            if (nowReadingsymbol.isOperator(Operator.RINDEXING)) {
                                arrayParent.appendChild(expr);
                                readToken();
                            } else {
                                error("The indexed Identifier sytax is wrong!");
                            }
                        }
                    }
                    // add id
                    arrayParent.appendChild(indexedId);
                    idChild = arrayParent;
                } else {
                    error("The indexed Identifier sytax is wrong!");
                }
            }
        }
        if (nowReadingsymbol.isOperator(Operator.ASSIGN)) {
            parent = new AssignmentStatementNode(nowReadingsymbol);
            // now the nowReading is the first token in expression
            readToken();
            // ˵��� ��Ĳ���getConcreteTypwNode�� ��������˵
            exprChild = getConcreteTypwNode(expr());
            parent.appendChild(exprChild);
            parent.appendChild(idChild);
            if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                if (!isEndOfFile()) {
                    isEndOfCurrentBlock();
                    isEndOfCurrentLoop();
                }
            } else {
                error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
            }
            // id = expr;
            return parent;
        } else if (nowReadingsymbol.isOperator(Operator.PLUSEQ)) {
            OperatorToken assignToken = OperatorToken.make(null, "=", Operator.ASSIGN);
            parent = new AssignmentStatementNode(new TokenGrammarSymbol(assignToken));
            OperatorToken addToken = OperatorToken.make(null, "+", Operator.ADD);
            ParseNode add = new BinaryOperatorNode(new TokenGrammarSymbol(addToken));
            // now the nowReading is the first token in expression
            readToken();
            // ˵��� ��Ĳ���getConcreteTypwNode�� ��������˵
            exprChild = getConcreteTypwNode(expr());
            add.appendChild(idChild);
            add.appendChild(exprChild);
            parent.appendChild(add);
            parent.appendChild(idChild);
            if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                if (!isEndOfFile()) {
                    isEndOfCurrentBlock();
                    isEndOfCurrentLoop();
                }
            } else {
                error("The plus equal statement sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
            }
            return parent;
        } else if (nowReadingsymbol.isOperator(Operator.MINUSEQ)) {
            OperatorToken assignToken = OperatorToken.make(null, "=", Operator.ASSIGN);
            parent = new AssignmentStatementNode(new TokenGrammarSymbol(assignToken));
            OperatorToken subToken = OperatorToken.make(null, "-", Operator.MINUS);
            ParseNode sub = new BinaryOperatorNode(new TokenGrammarSymbol(subToken));
            // now the nowReading is the first token in expression
            readToken();
            // ˵��� ��Ĳ���getConcreteTypwNode�� ��������˵
            exprChild = getConcreteTypwNode(expr());
            sub.appendChild(idChild);
            sub.appendChild(exprChild);
            parent.appendChild(sub);
            parent.appendChild(idChild);
            if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                if (!isEndOfFile()) {
                    isEndOfCurrentBlock();
                    isEndOfCurrentLoop();
                }
            } else {
                error("The minus equal statement sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
            }
            return parent;
        } else if (nowReadingsymbol.isOperator(Operator.MULTIPLEEQ)) {
            OperatorToken assignToken = OperatorToken.make(null, "=", Operator.ASSIGN);
            parent = new AssignmentStatementNode(new TokenGrammarSymbol(assignToken));
            OperatorToken multiplyToken = OperatorToken.make(null, "*", Operator.MULTIPLY);
            ParseNode multiply = new BinaryOperatorNode(new TokenGrammarSymbol(multiplyToken));
            // now the nowReading is the first token in expression
            readToken();
            // ˵��� ��Ĳ���getConcreteTypwNode�� ��������˵
            exprChild = getConcreteTypwNode(expr());
            multiply.appendChild(idChild);
            multiply.appendChild(exprChild);
            parent.appendChild(multiply);
            parent.appendChild(idChild);
            if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
                if (!isEndOfFile()) {
                    isEndOfCurrentBlock();
                    isEndOfCurrentLoop();
                }
            } else {
                error("The minus equal statement sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
            }
            return parent;
        } else {
            error("The statement sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
        }
    } else if (nowReadingsymbol.isOperator(Operator.PRINT)) {
        parent = new PrintStatementNode(nowReadingsymbol);
        readToken();
        // getConcreteTypwNode(expr());
        ParseNode exprChildren = argList();
        // print ;
        if (exprChildren == null) {
        // return parent;
        } else if (exprChildren.nChildren() == 1 && exprChildren.child(0).getSymbol().isPuctuation(PunctuationSymbol.COLON)) {
            parent.appendChild(exprChildren.child(0));
        // return parent;
        } else {
            for (ParseNode child : exprChildren.getChildren()) {
                parent.appendChild(child);
            }
        }
        if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
            if (!isEndOfFile()) {
                isEndOfCurrentBlock();
                isEndOfCurrentLoop();
            }
        } else {
            error("The declaration sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
        }
        // print expr;
        return parent;
    } else if (nowReadingsymbol.isKeyword(Keyword.CALL)) {
        KeywordNode callParent = new KeywordNode(nowReadingsymbol);
        // !!
        readToken();
        ParseNode callIdChild = rInvocation();
        if (nowReadingsymbol.isPuctuation(PunctuationSymbol.SEMICOLON)) {
            if (!isEndOfFile()) {
                isEndOfCurrentBlock();
                isEndOfCurrentLoop();
            }
        } else {
            error("The call statement sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
        }
        callParent.appendChild(callIdChild);
        return callParent;
    } else if (nowReadingsymbol.isBlockSymbol(BlockSymbol.START)) {
        return blockStmt();
    } else if (nowReadingsymbol.isLoopSymbol(LoopSymbol.LOOPSTART)) {
        return loopStmtWrapper();
    } else if (nowReadingsymbol.isKeyword(Keyword.IF)) {
        return ifStmt();
    } else if (nowReadingsymbol.isOperator(Operator.INC)) {
        return incStmt();
    } else if (nowReadingsymbol.isOperator(Operator.DEC)) {
        return decStmt();
    } else {
        error("The statement sytax is wrong!" + " at line " + nowReading.getLocation().getLineNumber());
    }
    return null;
}
