@Override
public String toString() {
    StringBuffer buf = new StringBuffer();
    try {
        buf.append("Node ");
        buf.append(this.getKey().getValue());
        buf.append(" has P=");
        if (this.predecessor == null) {
            buf.append("null");
        } else {
            buf.append(this.predecessor.getKey());
        }
        buf.append(", S=");
        buf.append(this.successor.getKey());
        buf.append(", FT=[");
        for (int i = 0; i < Key.NB_BITS; i++) {
            Finger finger = fingerTable.getFinger(i);
            try {
                buf.append(finger.getNode().getKey());
            } catch (BodyTerminatedException e) {
                // just ignore it because peer has left and finger
                // table will be update automatically.
                buf.append("?");
            }
            if (i != Key.NB_BITS - 1) {
                buf.append(" ");
            }
        }
        buf.append("]");
        buf.append(", S=[");
        for (int j = 0; j < this.successorsForTolerantFailures.length; j++) {
            try {
                buf.append(this.successorsForTolerantFailures[j].getKey());
            } catch (Exception e) {
                buf.append("?");
            }
            if (j < this.successorsForTolerantFailures.length - 1) {
                buf.append(",");
            }
        }
        buf.append("]");
        buf.append(", E=[");
        int i = 0;
        for (Entry<String> entry : this.entries) {
            buf.append("(");
            buf.append(entry.getKey());
            buf.append(",");
            buf.append(entry.getValue());
            buf.append(")");
            if (i < this.entries.getEntries().size() - 1) {
                buf.append(", ");
            }
            i++;
        }
        buf.append("]");
    } catch (Exception e) {
        buf.append("?]");
    }
    return buf.toString();
}
