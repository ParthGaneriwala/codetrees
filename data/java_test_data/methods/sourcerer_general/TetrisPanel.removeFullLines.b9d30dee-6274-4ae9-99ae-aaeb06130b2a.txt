private void removeFullLines() {
    int[] scores = new int[] { 10, 20, 35, 65, 100, 400 };
    int TETRIS = 4;
    int COMPLETE_TETRIS = 5;
    int scoreType = 0;
    ArrayList<Integer> lines = new ArrayList<Integer>();
    int numLines = 0;
    for (int i = Settings.boardHeight - 1; i >= 0; --i) {
        boolean lineIsFull = true;
        for (int j = 0; j < Settings.boardWidth; ++j) if (shapeAt(j, i) == TetrisShape.NoShape) {
            lineIsFull = false;
            break;
        }
        if (lineIsFull) {
            lines.add(new Integer(i));
            Updatables.linesNoRender[Settings.boardHeight - i - 1] = true;
            numLines++;
        }
    }
    if (numLines > 0) {
        boolean foundBrick = false;
        if (numLines == 4) {
            foundBrick: for (int i = Settings.boardHeight - 1; i >= 0; i--) {
                // Ignore lines to be cleared
                if (Updatables.linesNoRender[Settings.boardHeight - i - 1] == true)
                    continue;
                for (int j = 0; j < Settings.boardWidth; j++) if (shapeAt(j, i) != TetrisShape.NoShape) {
                    foundBrick = true;
                    break foundBrick;
                }
            }
            if (!foundBrick) {
                Renderables.cTetris.start();
                GlobalSettings.completeTetris = true;
            } else {
                Renderables.tetris.start();
                GlobalSettings.tetris = true;
            }
        }
        if (GlobalSettings.completeTetris)
            GlobalSettings.numCombos[4]++;
        else
            GlobalSettings.numCombos[numLines - 1]++;
        for (Integer i : lines) {
            Renderables.linesToRemove.add(new LineToRemove(i.intValue(), numLines < 4 ? scores[scoreType++] : GlobalSettings.completeTetris ? scores[COMPLETE_TETRIS] : scores[TETRIS]));
        }
        Updatables.doTick = false;
        Updatables.isWaitingAfterLine = true;
    }
}
