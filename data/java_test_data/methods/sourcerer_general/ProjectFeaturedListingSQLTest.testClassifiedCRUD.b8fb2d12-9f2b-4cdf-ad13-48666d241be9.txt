public void testClassifiedCRUD() throws SQLException {
    // Insert project so that it can be referred to by the featured project
    Project project = new Project();
    project.setTitle("Project Featured Listing SQL Test");
    project.setShortDescription("Project SQL Test Description");
    project.setRequestDate(new Timestamp(System.currentTimeMillis()));
    project.setEstimatedCloseDate((Timestamp) null);
    project.setRequestedBy("Project SQL Test Requested By");
    project.setRequestedByDept("Project SQL Test Requested By Department");
    project.setBudgetCurrency("USD");
    project.setBudget("10000.75");
    project.setGroupId(GROUP_ID);
    project.setEnteredBy(USER_ID);
    project.setModifiedBy(USER_ID);
    assertNotNull(project);
    boolean projectResult = project.insert(db);
    assertTrue("Project was not inserted", projectResult);
    assertTrue("Inserted project did not have an id", project.getId() > -1);
    // Insert featured project
    ProjectFeaturedListing projectFeaturedListing = new ProjectFeaturedListing();
    projectFeaturedListing.setProjectId(project.getId());
    projectFeaturedListing.setPortletKey("ABCD");
    projectFeaturedListing.setFeaturedDate(new Timestamp(System.currentTimeMillis()));
    assertNotNull(projectFeaturedListing);
    boolean result = projectFeaturedListing.insert(db);
    assertTrue("ProjectFeaturedListing was not inserted", result);
    assertTrue("Inserted ProjectFeaturedListing did not have an id", projectFeaturedListing.getId() > -1);
    // Reload the featured project, then update
    int updateCount = -1;
    assertTrue(projectFeaturedListing.getId() > -1);
    projectFeaturedListing = new ProjectFeaturedListing(db, projectFeaturedListing.getId());
    projectFeaturedListing.setPortletKey("ABCDE");
    updateCount = projectFeaturedListing.update(db);
    assertTrue("The featured project was not updated by the database", updateCount == 1);
    // Find the previously set featured project
    int featuredId = projectFeaturedListing.getId();
    projectFeaturedListing = null;
    ProjectFeaturedListingList projectFeaturedListingList = new ProjectFeaturedListingList();
    projectFeaturedListingList.setProjectId(project.getId());
    projectFeaturedListingList.buildList(db);
    assertTrue(projectFeaturedListingList.size() > 0);
    Iterator<ProjectFeaturedListing> i = projectFeaturedListingList.iterator();
    while (i.hasNext()) {
        ProjectFeaturedListing thisProjectFeaturedListing = i.next();
        if (thisProjectFeaturedListing.getId() == featuredId) {
            projectFeaturedListing = thisProjectFeaturedListing;
            break;
        }
    }
    assertNotNull(projectFeaturedListing);
    // Delete the featured project
    assertNotNull(projectFeaturedListing);
    projectFeaturedListing.delete(db);
    featuredId = projectFeaturedListing.getId();
    projectFeaturedListing = null;
    // Try to find the previously deleted featured project
    projectFeaturedListingList = new ProjectFeaturedListingList();
    projectFeaturedListingList.setId(featuredId);
    projectFeaturedListingList.buildList(db);
    Iterator<ProjectFeaturedListing> ij = projectFeaturedListingList.iterator();
    while (ij.hasNext()) {
        ProjectFeaturedListing thisProjectFeaturedListing = ij.next();
        if (thisProjectFeaturedListing.getId() == featuredId) {
            assertNull("Private message exists when it shouldn't", thisProjectFeaturedListing);
        }
    }
    // Delete test project
    project.delete(db, (String) null);
}
