public static void main(String[] args) {
    try {
        // HashMap al = new HashMap();
        // FileInputStream fileStream = new FileInputStream("c:\\weighttable.ser");
        // BufferedInputStream br = new BufferedInputStream(fileStream);
        // ObjectInputStream in = new ObjectInputStream(br);
        // al = (HashMap)in.readObject();
        // in.close();
        // stemmer
        // StemFace sf = new StemFace();
        // sf.StemStr("c://negativeSeeds.txt");
        ScoreMachine sm = new ScoreMachine();
        String[] featureTerms = features.toString().split(" ");
        for (int m = 0; m < featureTerms.length; m++) {
            String key = featureTerms[m];
            finalMap.put(key, 0);
        }
        String line = new String();
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(tempFile)));
        FileWriter fw = new FileWriter("c:\\camera.csv");
        boolean titleFlag = true;
        // get a full review
        while ((line = reader.readLine()) != null) {
            int finalScore = 0;
            HashMap<String, Integer> subMap = new HashMap<String, Integer>();
            for (int m = 0; m < featureTerms.length; m++) {
                String key = featureTerms[m];
                subMap.put(key, 0);
            }
            if (titleFlag) {
                Iterator iter = subMap.entrySet().iterator();
                while (iter.hasNext()) {
                    Entry entry = (Entry) iter.next();
                    Object key = entry.getKey();
                    fw.write(key.toString() + ",");
                }
                // fw.write("Score,Rating\r\n");
                fw.write("Rating\r\n");
                titleFlag = false;
            }
            String[] reviews = line.split("[|]");
            String[] temp = (reviews[2] + reviews[3] + reviews[4]).split("[.]");
            for (int i = 0; i < temp.length; i++) {
                subMap = sm.scoreFullReview(temp[i], featureTerms, subMap);
            // finalMap = sm.scoreFullReview(reviews[3], featureTerms, subMap);
            }
            // sm.scoreFullReview(reviews[1]+reviews[2]+reviews[3], featureTerms, subMap);
            Iterator iter = subMap.entrySet().iterator();
            int reviewScore = 0;
            while (iter.hasNext()) {
                Entry entry = (Entry) iter.next();
                Object key = entry.getKey();
                Object val = entry.getValue();
                System.out.print(key.toString() + ": " + val.toString() + "  ");
                int tempScore = Integer.parseInt(val.toString());
                // reviewScore = reviewScore+tempScore;
                if (key.equals("quality")) {
                    tempScore = tempScore * 161;
                } else if (key.equals("pictures")) {
                    tempScore = tempScore * 120;
                } else if (key.equals("battery")) {
                    tempScore = tempScore * 100;
                } else if (key.equals("zoom")) {
                    tempScore = tempScore * 72;
                } else if (key.equals("price")) {
                    tempScore = tempScore * 66;
                } else if (key.equals("use")) {
                    tempScore = tempScore * 62;
                } else if (key.equals("life") || key.equals("picture")) {
                    tempScore = tempScore * 54;
                } else if (key.equals("features")) {
                    tempScore = tempScore * 48;
                }
                fw.write(tempScore + ",");
            }
            // fw.write(reviewScore+",");
            if (reviews[1].equals("5") || reviews[1].equals("4")) {
                fw.write("Positive");
            } else if (reviews[1].equals("3")) {
                fw.write("Neutral");
            } else if (reviews[1].equals("2") || reviews[1].equals("1")) {
                fw.write("Negative");
            }
            fw.write("\r\n");
            System.out.println('\n' + "****************");
        }
        fw.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
