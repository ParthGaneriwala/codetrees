@SuppressWarnings("unchecked")
protected void populateChronology(ChronologyData cdata) {
    PersistenceManager pm = PMF.get().getPersistenceManager();
    int sceneCount = 0;
    try {
        // load characters
        HashMap<Long, Person> peopleMapping = new HashMap<Long, Person>();
        Query q = pm.newQuery(Person.class, "chronologyId == " + cdata.getId());
        Collection<Person> people = (Collection<Person>) q.execute();
        for (Person person : people) {
            cdata.characters.add(person);
            peopleMapping.put(person.getId(), person);
        }
        // load locations
        q = pm.newQuery(Location.class, "chronologyId == " + cdata.getId());
        Collection<Location> locations = (Collection<Location>) q.execute();
        for (Location location : locations) {
            cdata.locations.add(location);
            // load scenes
            Query qs = pm.newQuery(PersistentScene.class, "locationId == " + location.getId());
            Collection<PersistentScene> scenes = (Collection<PersistentScene>) qs.execute();
            for (PersistentScene pscene : scenes) {
                sceneCount++;
                Scene scene = pscene.toScene(location);
                location.getScenes().add(scene);
                // load character mapping
                Query qp = pm.newQuery(SceneCharacterMapping.class, "sceneId == " + pscene.getId());
                Collection<SceneCharacterMapping> mapping = (Collection<SceneCharacterMapping>) qp.execute();
                for (SceneCharacterMapping map : mapping) {
                    scene.addPerson(peopleMapping.get(map.characterId));
                }
            }
        }
    } finally {
        pm.close();
        System.out.printf("%d scenes loaded\n", sceneCount);
    }
}
