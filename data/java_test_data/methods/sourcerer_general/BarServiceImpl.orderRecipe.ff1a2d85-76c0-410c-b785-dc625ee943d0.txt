@Override
public boolean orderRecipe(Integer recipeId, Integer partyId) {
    // init return variable
    boolean successful = false;
    try {
        // post data
        String data = URLEncoder.encode("hashCode", "UTF-8") + "=" + URLEncoder.encode(hashCode, "UTF-8");
        data += "&" + URLEncoder.encode("recipe", "UTF-8") + "=" + URLEncoder.encode(recipeId.toString(), "UTF-8");
        data += "&" + URLEncoder.encode("party", "UTF-8") + "=" + URLEncoder.encode(partyId.toString(), "UTF-8");
        data += "&" + URLEncoder.encode("member", "UTF-8") + "=" + URLEncoder.encode(memberId.toString(), "UTF-8");
        data += "&" + URLEncoder.encode("format", "UTF-8") + "=" + URLEncoder.encode("xml", "UTF-8");
        // get content from url
        URL url = new URL(ORDER_URL.replaceAll("/:id", "").replaceAll("/:member", "").replaceAll("/:party", ""));
        URLConnection conn = url.openConnection();
        // enable http post
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(data);
        wr.flush();
        // parse xml content
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(conn.getInputStream());
        // load node rsp node
        Node rsp = doc.getFirstChild();
        if ((rsp.getAttributes().getNamedItem("status").getNodeValue()).equals("ok")) {
            successful = true;
        } else {
            String response = "";
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                response += inputLine;
            }
            in.close();
            System.out.println("could not order: " + url.toString() + " w/ data " + data + " response " + response);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return successful;
}
