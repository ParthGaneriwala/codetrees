public static void processFile(RepositoryType repositoryType, InputStream inputStream, FileDTO fileDTO) throws Exception {
    // prepare io
    OutputStream outputStream = null;
    ReadableByteChannel inputChannel = null;
    WritableByteChannel outputChannel = null;
    int fileSize = 0;
    switch(repositoryType) {
        case FILE_SYSTEM:
            // prepare repository
            File repository = new File(fileDTO.getRepositoryPath());
            String repositoryPath = fileDTO.getRepositoryPath();
            StringBuilder sb = new StringBuilder();
            if (logger.isDebugEnabled()) {
                sb.append("repositoryPath: ").append(repositoryPath);
                sb.append(", repositoryType: ").append(repositoryType);
                sb.append(", repository.exists(): ").append(repository.exists());
                sb.append(", repository.isDirectory(): ").append(repository.isDirectory());
                logger.debug(sb.toString());
            }
            // prepare directory
            File file = new File(repositoryPath);
            if (!file.exists()) {
                boolean mkdirsSuccess = file.mkdirs();
                logger.debug("mkdirs: {}, success: {}", repositoryPath, mkdirsSuccess);
            }
            // prepare stream
            sb.setLength(0);
            sb.append(fileDTO.getRepositoryPath());
            if (!fileDTO.getRepositoryPath().endsWith(File.separator)) {
                sb.append(File.separator);
            }
            sb.append(fileDTO.getUniqueFilename());
            String filename = sb.toString();
            outputStream = new FileOutputStream(filename);
            logger.debug("filename: {}", filename);
            // copy channel
            inputChannel = Channels.newChannel(inputStream);
            outputChannel = Channels.newChannel(outputStream);
            fileSize = ChannelUtils.copy(inputChannel, outputChannel);
            // set vo
            if (StringUtils.isEmpty(fileDTO.getContentType())) {
                fileDTO.setContentType(TikaMimeDetectUtils.getMimeType(filename));
            }
            break;
        case DATABASE:
            // prepare steam
            outputStream = new ByteArrayOutputStream();
            // copy channel
            inputChannel = Channels.newChannel(inputStream);
            outputChannel = Channels.newChannel(outputStream);
            fileSize = ChannelUtils.copy(inputChannel, outputChannel);
            // set vo
            byte[] bytes = ((ByteArrayOutputStream) outputStream).toByteArray();
            fileDTO.setBytes(bytes);
            fileDTO.setRepositoryPath(null);
            if (StringUtils.isEmpty(fileDTO.getContentType())) {
                fileDTO.setContentType(TikaMimeDetectUtils.getMimeType(bytes));
            }
            break;
    }
    fileDTO.setFileSize(fileSize);
    // close io
    inputChannel.close();
    outputChannel.close();
    inputStream.close();
    outputStream.close();
}
