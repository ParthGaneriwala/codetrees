// Construct one Huffman tree and assigns the code bit strings and lengths.
// Update the total bit length for the current block.
// IN assertion: the field freq is set for all tree elements.
// OUT assertions: the fields len and code are set to the optimal bit length
// and corresponding code. The length opt_len is updated; static_len is
void build_tree(Deflate s) {
    short[] tree = dyn_tree;
    short[] stree = stat_desc.static_tree;
    int elems = stat_desc.elems;
    // iterate over heap elements
    int n, m;
    // largest code with non zero frequency
    int max_code = -1;
    // new node being created
    int node;
    // Construct the initial heap, with least frequent element in
    // heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
    // heap[0] is not used.
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE;
    for (n = 0; n < elems; n++) {
        if (tree[n * 2] != 0) {
            s.heap[++s.heap_len] = max_code = n;
            s.depth[n] = 0;
        } else {
            tree[n * 2 + 1] = 0;
        }
    }
    // two codes of non zero frequency.
    while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (stree != null)
            s.static_len -= stree[node * 2 + 1];
    // node is 0 or 1 so it does not have extra bits
    }
    this.max_code = max_code;
    for (n = s.heap_len / 2; n >= 1; n--) s.pqdownheap(tree, n);
    // Construct the Huffman tree by repeatedly combining the least two
    // frequent nodes.
    // next internal node of the tree
    node = elems;
    do {
        // n = node of least frequency
        n = s.heap[1];
        s.heap[1] = s.heap[s.heap_len--];
        s.pqdownheap(tree, 1);
        // m = node of next least frequency
        m = s.heap[1];
        // keep the nodes sorted by frequency
        s.heap[--s.heap_max] = n;
        s.heap[--s.heap_max] = m;
        // Create a new node father of n and m
        tree[node * 2] = (short) (tree[n * 2] + tree[m * 2]);
        s.depth[node] = (byte) (Math.max(s.depth[n], s.depth[m]) + 1);
        tree[n * 2 + 1] = tree[m * 2 + 1] = (short) node;
        // and insert the new node in the heap
        s.heap[1] = node++;
        s.pqdownheap(tree, 1);
    } while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[1];
    // At this point, the fields freq and dad are set. We can now
    // generate the bit lengths.
    gen_bitlen(s);
    // The field len is now set, we can generate the bit codes
    gen_codes(tree, max_code, s.bl_count);
}
