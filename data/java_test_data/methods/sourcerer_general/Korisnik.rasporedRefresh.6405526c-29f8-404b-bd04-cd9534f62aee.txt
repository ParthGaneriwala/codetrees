public String rasporedRefresh() {
    Calendar newCal = new GregorianCalendar();
    newCal.setTime(datum);
    int day = newCal.get(Calendar.DAY_OF_WEEK);
    int fromMonday = day - Calendar.MONDAY;
    Calendar monday = new GregorianCalendar();
    monday.setTime(datum);
    monday.set(Calendar.DAY_OF_MONTH, newCal.get(Calendar.DAY_OF_MONTH) - fromMonday);
    dani = new ArrayList<Dan>(5);
    for (int i = Calendar.MONDAY; i <= Calendar.FRIDAY; i++) {
        Dan dan = new Dan();
        Calendar tmpDate = new GregorianCalendar();
        tmpDate.setTime(monday.getTime());
        tmpDate.set(Calendar.DAY_OF_MONTH, monday.get(Calendar.DAY_OF_MONTH) + i - Calendar.MONDAY);
        dan.setDatum(tmpDate.getTime());
        dan.setNaziv(dan.getImeDana(tmpDate.get(Calendar.DAY_OF_WEEK)));
        NeradniDan neradan = NeradniDan.getDatumNeradan(izabrana, tmpDate.getTime());
        dan.setNeradan(neradan);
        ArrayList<Termin> termini = new ArrayList<Termin>();
        for (int j = 0; j + 8 <= 21; j++) {
            Termin termin = new Termin();
            Calendar tmpCal = new GregorianCalendar();
            tmpCal.set(Calendar.HOUR_OF_DAY, j + 8);
            tmpCal.set(Calendar.MINUTE, 0);
            tmpCal.set(Calendar.MILLISECOND, 0);
            tmpCal.set(0, 0, 0);
            Time tmpTime = new Time(tmpCal.getTimeInMillis());
            termin.setVreme(tmpTime);
            termin.setDan(dan);
            termini.add(termin);
        }
        dan.setTermini(termini);
        dani.add(dan);
    }
    for (Dan d : dani) {
        java.sql.Date date = new java.sql.Date(d.getDatum().getTime());
        List<Rezervacija> rezervacije = Rezervacija.getRezervacijeByDate(izabrana, date);
        for (Termin t : d.getTermini()) {
            for (Rezervacija r : rezervacije) {
                Calendar tmpCal = new GregorianCalendar();
                tmpCal.setTimeInMillis(r.getPocevOd().getTime());
                tmpCal.set(0, 0, 0);
                tmpCal.set(Calendar.MINUTE, 0);
                tmpCal.set(Calendar.MILLISECOND, 0);
                Time rezVreme = new Time(tmpCal.getTimeInMillis());
                tmpCal.set(Calendar.HOUR_OF_DAY, tmpCal.get(Calendar.HOUR_OF_DAY) + r.getTrajanje());
                tmpCal.set(Calendar.MINUTE, 0);
                tmpCal.set(Calendar.MILLISECOND, 0);
                Time rezVremeKraj = new Time(tmpCal.getTimeInMillis());
                if (t.getVreme().equals(rezVreme) || (t.getVreme().after(rezVreme) && t.getVreme().before(rezVremeKraj))) {
                    t.setRezervacija(r);
                    t.setZauzet(true);
                }
            }
        }
    }
    return isAdmin ? ACTION_ADMIN : ACTION_KORISNIK;
}
