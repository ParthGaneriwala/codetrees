void preStep(float invDT, float dt, float damping) {
    float allowedPenetration = 0.01f;
    float biasFactor = 0.8f;
    for (int i = 0; i < numContacts; ++i) {
        Contact c = contacts[i];
        c.normal.normalise();
        Vector2f r1 = new Vector2f(c.position);
        r1.sub(body1.getPosition());
        Vector2f r2 = new Vector2f(c.position);
        r2.sub(body2.getPosition());
        // Precompute normal mass, tangent mass, and bias.
        float rn1 = r1.dot(c.normal);
        float rn2 = r2.dot(c.normal);
        float kNormal = body1.getInvMass() + body2.getInvMass();
        kNormal += body1.getInvI() * (r1.dot(r1) - rn1 * rn1) + body2.getInvI() * (r2.dot(r2) - rn2 * rn2);
        c.massNormal = damping / kNormal;
        Vector2f tangent = MathUtil.cross(c.normal, 1.0f);
        float rt1 = r1.dot(tangent);
        float rt2 = r2.dot(tangent);
        float kTangent = body1.getInvMass() + body2.getInvMass();
        kTangent += body1.getInvI() * (r1.dot(r1) - rt1 * rt1) + body2.getInvI() * (r2.dot(r2) - rt2 * rt2);
        c.massTangent = damping / kTangent;
        // Compute restitution
        // Relative velocity at contact
        Vector2f relativeVelocity = new Vector2f(body2.getVelocity());
        relativeVelocity.add(MathUtil.cross(r2, body2.getAngularVelocity()));
        relativeVelocity.sub(body1.getVelocity());
        relativeVelocity.sub(MathUtil.cross(r1, body1.getAngularVelocity()));
        float combinedRestitution = (body1.getRestitution() * body2.getRestitution());
        float relVel = c.normal.dot(relativeVelocity);
        c.restitution = combinedRestitution * -relVel;
        c.restitution = Math.max(c.restitution, 0);
        float penVel = -c.separation / dt;
        if (c.restitution >= penVel) {
            c.bias = 0;
        } else {
            c.bias = -biasFactor * invDT * Math.min(0.0f, c.separation + allowedPenetration);
        }
        // apply damping
        c.accumulatedNormalImpulse *= damping;
        // Apply normal + friction impulse
        Vector2f impulse = MathUtil.scale(c.normal, c.accumulatedNormalImpulse);
        impulse.add(MathUtil.scale(tangent, c.accumulatedTangentImpulse));
        body1.adjustVelocity(MathUtil.scale(impulse, -body1.getInvMass()));
        body1.adjustAngularVelocity(-body1.getInvI() * MathUtil.cross(r1, impulse));
        body2.adjustVelocity(MathUtil.scale(impulse, body2.getInvMass()));
        body2.adjustAngularVelocity(body2.getInvI() * MathUtil.cross(r2, impulse));
        // rest bias
        c.biasImpulse = 0;
    }
}
