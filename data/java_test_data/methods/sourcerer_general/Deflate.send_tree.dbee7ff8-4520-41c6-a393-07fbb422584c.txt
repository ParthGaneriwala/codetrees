// Send a literal or distance tree in compressed form, using the codes in
// the tree to be sent
void send_tree(// the tree to be sent
short[] tree, // and its largest code of non zero frequency
int max_code) {
    // iterates over all tree elements
    int n;
    // last emitted length
    int prevlen = -1;
    // length of current code
    int curlen;
    // length of next code
    int nextlen = tree[0 * 2 + 1];
    // repeat count of the current code
    int count = 0;
    // max repeat count
    int max_count = 7;
    // min repeat count
    int min_count = 4;
    if (nextlen == 0) {
        max_count = 138;
        min_count = 3;
    }
    for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            do {
                send_code(curlen, bl_tree);
            } while (--count != 0);
        } else if (curlen != 0) {
            if (curlen != prevlen) {
                send_code(curlen, bl_tree);
                count--;
            }
            send_code(REP_3_6, bl_tree);
            send_bits(count - 3, 2);
        } else if (count <= 10) {
            send_code(REPZ_3_10, bl_tree);
            send_bits(count - 3, 3);
        } else {
            send_code(REPZ_11_138, bl_tree);
            send_bits(count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen == 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen == nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
}
