private void cachePmdMetricConfig() {
    String metricName = "initial nothingness";
    pmdMetricList = new ArrayList<Metric>();
    // the metricMap is shared
    if (metricMap == null) {
        metricMap = new HashMap<String, Metric>();
    }
    String ruleSetName = "no name set";
    int i = 0;
    while (true) {
        ruleSetName = pmdXmlConfiguration.getString("ruleset(" + i + ")[@name]");
        if (null == ruleSetName) {
            // from outer i-loop
            break;
        }
        // process individual ruleset
        int j = 0;
        while (true) {
            String metricKey = "ruleset(" + i + ").metric(" + j + ")";
            metricName = pmdXmlConfiguration.getString(metricKey + "[@name]");
            if (null == metricName) {
                // from inner j-loop
                break;
            }
            Metric metric = new Metric();
            metric.setName(metricName);
            metric.setRuleSet(ruleSetName);
            // Metric            .
            // metric.setLabel(pmdXmlConfiguration.getString(metricKey+"[@label]"));
            // 
            metric.setLabel(Constant.PMD_METRIC_LABEL_PREFIX + metricName);
            metric.setDataField("pmd-" + pmdXmlConfiguration.getString(metricKey + "[@data]"));
            metric.setClazz(pmdXmlConfiguration.getString(metricKey + "[@class]"));
            metric.setRegexp(pmdXmlConfiguration.getString(metricKey + "[@regexp]"));
            metric.setRegexpGroup(pmdXmlConfiguration.getInt(metricKey + "[@regexpGroup]"));
            metric.setContainerLowerBoundaries(pmdXmlConfiguration.getString(metricKey + "[@containerLowerBoundaries]"));
            metric.setContainerWeightMultipliers(pmdXmlConfiguration.getString(metricKey + "[@containerWeightMultipliers]"));
            metric.setMetricWeight(pmdXmlConfiguration.getInt(metricKey + "[@metricWeight]"));
            metric.setImpactLevel("impact-" + pmdXmlConfiguration.getString(metricKey + "[@impactLevel]"));
            metric.setRelevant(pmdXmlConfiguration.getBoolean(metricKey + "[@relevant]"));
            pmdMetricList.add(metric);
            metricMap.put(metric.getClazz(), metric);
            j++;
        }
        i++;
    }
    log.info("correctly loaded " + pmdMetricList.size() + " PMD metrics from: " + PMD_CONFIGURATION_FILENAME);
    log.info("ruleset = " + ((Metric) pmdMetricList.iterator().next()).getRuleSet());
}
