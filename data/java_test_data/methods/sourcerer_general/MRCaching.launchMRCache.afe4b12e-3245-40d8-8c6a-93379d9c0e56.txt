public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException {
    String TEST_ROOT_DIR = new Path(System.getProperty("test.build.data", "/tmp")).toString().replace(' ', '+');
    // if (TEST_ROOT_DIR.startsWith("C:")) TEST_ROOT_DIR = "/tmp";
    conf.set("test.build.data", TEST_ROOT_DIR);
    final Path inDir = new Path(indir);
    final Path outDir = new Path(outdir);
    FileSystem fs = FileSystem.get(conf);
    fs.delete(outDir, true);
    if (!fs.mkdirs(inDir)) {
        throw new IOException("Mkdirs failed to create " + inDir.toString());
    }
    {
        System.out.println("HERE:" + inDir);
        DataOutputStream file = fs.create(new Path(inDir, "part-0"));
        file.writeBytes(input);
        file.close();
    }
    conf.setJobName("cachetest");
    // the keys are words (strings)
    conf.setOutputKeyClass(Text.class);
    // the values are counts (ints)
    conf.setOutputValueClass(IntWritable.class);
    conf.setMapperClass(MRCaching.MapClass.class);
    conf.setCombinerClass(MRCaching.ReduceClass.class);
    conf.setReducerClass(MRCaching.ReduceClass.class);
    FileInputFormat.setInputPaths(conf, inDir);
    FileOutputFormat.setOutputPath(conf, outDir);
    conf.setNumMapTasks(1);
    conf.setNumReduceTasks(1);
    conf.setSpeculativeExecution(false);
    Path localPath = new Path("build/test/cache");
    Path txtPath = new Path(localPath, new Path("test.txt"));
    Path jarPath = new Path(localPath, new Path("test.jar"));
    Path zipPath = new Path(localPath, new Path("test.zip"));
    Path tarPath = new Path(localPath, new Path("test.tgz"));
    Path tarPath1 = new Path(localPath, new Path("test.tar.gz"));
    Path tarPath2 = new Path(localPath, new Path("test.tar"));
    Path cachePath = new Path(cacheDir);
    fs.delete(cachePath, true);
    if (!fs.mkdirs(cachePath)) {
        throw new IOException("Mkdirs failed to create " + cachePath.toString());
    }
    fs.copyFromLocalFile(txtPath, cachePath);
    fs.copyFromLocalFile(jarPath, cachePath);
    fs.copyFromLocalFile(zipPath, cachePath);
    fs.copyFromLocalFile(tarPath, cachePath);
    fs.copyFromLocalFile(tarPath1, cachePath);
    fs.copyFromLocalFile(tarPath2, cachePath);
    // setting the cached archives to zip, jar and simple text files
    URI uri1 = fs.getUri().resolve(cachePath + "/test.jar");
    URI uri2 = fs.getUri().resolve(cachePath + "/test.zip");
    URI uri3 = fs.getUri().resolve(cachePath + "/test.txt");
    URI uri4 = fs.getUri().resolve(cachePath + "/test.tgz");
    URI uri5 = fs.getUri().resolve(cachePath + "/test.tar.gz");
    URI uri6 = fs.getUri().resolve(cachePath + "/test.tar");
    DistributedCache.addCacheArchive(uri1, conf);
    DistributedCache.addCacheArchive(uri2, conf);
    DistributedCache.addCacheFile(uri3, conf);
    DistributedCache.addCacheArchive(uri4, conf);
    DistributedCache.addCacheArchive(uri5, conf);
    DistributedCache.addCacheArchive(uri6, conf);
    RunningJob job = JobClient.runJob(conf);
    int count = 0;
    // after the job ran check to see if the the input from the localized cache
    // match the real string. check if there are 3 instances or not.
    Path result = new Path(TEST_ROOT_DIR + "/test.txt");
    {
        BufferedReader file = new BufferedReader(new InputStreamReader(FileSystem.getLocal(conf).open(result)));
        String line = file.readLine();
        while (line != null) {
            if (!testStr.equals(line))
                return new TestResult(job, false);
            count++;
            line = file.readLine();
        }
        file.close();
    }
    if (count != 6)
        return new TestResult(job, false);
    return new TestResult(job, true);
}
