public Node nextNode(boolean quotesmart) throws ParserException {
    int start;
    char ch;
    Node ret;
    // debugging suppport
    if (-1 != mDebugLineTrigger) {
        Page page = getPage();
        int lineno = page.row(mCursor);
        if (mDebugLineTrigger < lineno)
            // trigger on next line too
            mDebugLineTrigger = lineno + 1;
    }
    start = mCursor.getPosition();
    ch = mPage.getCharacter(mCursor);
    switch(ch) {
        case Page.EOF:
            ret = null;
            break;
        case '<':
            ch = mPage.getCharacter(mCursor);
            if (Page.EOF == ch)
                ret = makeString(start, mCursor.getPosition());
            else if ('%' == ch) {
                mPage.ungetCharacter(mCursor);
                ret = parseJsp(start);
            } else if ('?' == ch) {
                mPage.ungetCharacter(mCursor);
                ret = parsePI(start);
            } else if ('/' == ch || '%' == ch || Character.isLetter(ch)) {
                mPage.ungetCharacter(mCursor);
                ret = parseTag(start);
            } else if ('!' == ch) {
                ch = mPage.getCharacter(mCursor);
                if (Page.EOF == ch)
                    ret = makeString(start, mCursor.getPosition());
                else {
                    if (// handle <!>
                    '>' == ch)
                        ret = makeRemark(start, mCursor.getPosition());
                    else {
                        // remark/tag need this char
                        mPage.ungetCharacter(mCursor);
                        if ('-' == ch)
                            ret = parseRemark(start, quotesmart);
                        else {
                            // tag needs prior one too
                            mPage.ungetCharacter(mCursor);
                            ret = parseTag(start);
                        }
                    }
                }
            } else {
                // see bug #1547354 <<tag> parsed as text
                mPage.ungetCharacter(mCursor);
                ret = parseString(start, quotesmart);
            }
            break;
        default:
            // string needs to see leading foreslash
            mPage.ungetCharacter(mCursor);
            ret = parseString(start, quotesmart);
            break;
    }
    return (ret);
}
