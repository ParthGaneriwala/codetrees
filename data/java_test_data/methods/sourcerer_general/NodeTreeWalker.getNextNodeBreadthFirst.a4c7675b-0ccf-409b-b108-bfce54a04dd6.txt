protected Node getNextNodeBreadthFirst() {
    Node traverseNode;
    // see if the mCurrentNode has a sibling after it
    traverseNode = this.mCurrentNode.getNextSibling();
    if (traverseNode != null)
        return (traverseNode);
    int depth = getCurrentNodeDepth();
    // try and find the next Node at the same depth that is not a sibling
    NodeList traverseNodeList;
    // step up to the parent Node to look through its children
    traverseNode = this.mCurrentNode.getParent();
    int currentDepth = depth - 1;
    while (// this is safe as we've tried getNextSibling already
    currentDepth > 0) {
        // keeping a reference to this this saves calling getNextSibling once later
        Node tempNextSibling = null;
        // go to first parent with nextSibling, then to that sibling
        while (// CAN assign traverseNode as root Node
        ((tempNextSibling = traverseNode.getNextSibling()) == null) && (traverseNode != this.mRootNode)) {
            traverseNode = traverseNode.getParent();
            --currentDepth;
        }
        // if have traversed back to the root Node, skip to next part where it finds the first Node at the next depth down
        if (traverseNode == this.mRootNode)
            break;
        traverseNode = tempNextSibling;
        if (traverseNode != null) {
            // go through children of that sibling
            traverseNodeList = traverseNode.getChildren();
            while ((traverseNodeList != null) && (traverseNodeList.size() != 0)) {
                traverseNode = traverseNode.getFirstChild();
                ++currentDepth;
                if (currentDepth == depth)
                    // found the next Node at the current depth
                    return (traverseNode);
                else
                    traverseNodeList = traverseNode.getChildren();
            }
        // while((traverseNodeList != null) && (traverseNodeList.size() != 0))
        }
    // if (traverseNode != null)
    }
    // check first whether we are about to go past max depth
    if (// if -1, then there is no max depth restriction
    this.mMaxDepth != -1) {
        if (depth >= this.mMaxDepth)
            // can't go past max depth
            return (null);
    }
    traverseNode = this.mRootNode.getFirstChild();
    // look for next depth
    ++depth;
    currentDepth = 1;
    while (currentDepth > 0) {
        // go through children of that sibling
        traverseNodeList = traverseNode.getChildren();
        while ((traverseNodeList != null) && (traverseNodeList.size() != 0)) {
            traverseNode = traverseNode.getFirstChild();
            ++currentDepth;
            if (currentDepth == depth)
                // found the next Node at the current depth
                return (traverseNode);
            else
                traverseNodeList = traverseNode.getChildren();
        }
        // go to first parent with nextSibling, then to that sibling
        while ((traverseNode.getNextSibling() == null) && (traverseNode != this.mRootNode)) {
            traverseNode = traverseNode.getParent();
            --currentDepth;
        }
        traverseNode = traverseNode.getNextSibling();
        if (// if null (i.e. reached end of tree), return null
        traverseNode == null)
            return (null);
    }
    // otherwise, finished searching, return null
    return (null);
}
