public Integer[] getLongestCommonSubsequences() {
    int aStart = 0;
    int aEnd = a.length - 1;
    int bStart = 0;
    int bEnd = b.length - 1;
    TreeMap matches = new TreeMap();
    while (aStart <= aEnd && bStart <= bEnd && equals(a[aStart], b[bStart])) {
        matches.put(new Integer(aStart++), new Integer(bStart++));
    }
    while (aStart <= aEnd && bStart <= bEnd && equals(a[aEnd], b[bEnd])) {
        matches.put(new Integer(aEnd--), new Integer(bEnd--));
    }
    Map bMatches = null;
    if (comparator == null) {
        if (a.length > 0 && a[0] instanceof Comparable) {
            // this uses the Comparable interface
            bMatches = new TreeMap();
        } else {
            // this just uses hashCode()
            bMatches = new HashMap();
        }
    } else {
        // we don't really want them sorted, but this is the only Map
        // implementation (as of JDK 1.4) that takes a comparator.
        bMatches = new TreeMap(comparator);
    }
    for (int bi = bStart; bi <= bEnd; ++bi) {
        Object element = b[bi];
        Object key = element;
        List positions = (List) bMatches.get(key);
        if (positions == null) {
            positions = new ArrayList();
            bMatches.put(key, positions);
        }
        positions.add(new Integer(bi));
    }
    thresh = new TreeMap();
    Map links = new HashMap();
    for (int i = aStart; i <= aEnd; ++i) {
        // keygen here.
        Object aElement = a[i];
        List positions = (List) bMatches.get(aElement);
        if (positions != null) {
            Integer k = new Integer(0);
            ListIterator pit = positions.listIterator(positions.size());
            while (pit.hasPrevious()) {
                Integer j = (Integer) pit.previous();
                k = insert(j, k);
                if (k == null) {
                // nothing
                } else {
                    Object value = k.intValue() > 0 ? links.get(new Integer(k.intValue() - 1)) : null;
                    links.put(k, new Object[] { value, new Integer(i), j });
                }
            }
        }
    }
    if (thresh.size() > 0) {
        Integer ti = (Integer) thresh.lastKey();
        Object[] link = (Object[]) links.get(ti);
        while (link != null) {
            Integer x = (Integer) link[1];
            Integer y = (Integer) link[2];
            matches.put(x, y);
            link = (Object[]) link[0];
        }
    }
    return toArray(matches);
}
