public // local name
void startElement(// local name
String namespaceURI, // local name
String lName, // qualified name
String qName, Attributes attrs) throws SAXException {
    String element = qName;
    AddressFactory addressFactory = proxy.getAddressFactory();
    HeaderFactory headerFactory = proxy.getHeaderFactory();
    if (element.compareToIgnoreCase("registrations") == 0) {
        registrations = new Registrations();
        registrationList = new Vector();
    }
    if (element.compareToIgnoreCase("registration") == 0) {
        registration = new Registration();
        String displayName = attrs.getValue("displayName");
        if (displayName != null && !displayName.trim().equals("")) {
            registration.setDisplayName(displayName);
        } else {
            logger.debug("WARNING, XMLRegistrationsParser, startElement()" + " the displayName attribute is not set for the registration tag!!!");
        }
        String uri = attrs.getValue("uri");
        if (uri != null && !uri.trim().equals("")) {
            registration.setKey(uri);
        } else {
            throw new SAXException("ERROR, XMLRegistrationsParser, startElement(), " + "the uri attribute has not been specified for the " + "registration tag.");
        }
    }
    if (element.compareToIgnoreCase("CONTACT") == 0) {
        String uriString = attrs.getValue("uri");
        if (uriString != null && !uriString.trim().equals("")) {
            try {
                URI uri = (URI) addressFactory.createURI(uriString);
                if (uri == null)
                    throw new SAXException("ERROR: " + "the parsed uri is null!");
                Address address = null;
                String displayName = attrs.getValue("displayName");
                if (displayName != null && !displayName.trim().equals("")) {
                    address = addressFactory.createAddress(displayName, uri);
                } else {
                    logger.debug("WARNING, XMLRegistrationsParser, startElement()" + " the displayName attribute is not set for the contact tag!!!");
                    address = addressFactory.createAddress(null, uri);
                }
                if (address == null)
                    throw new SAXException("ERROR: " + "the generated address is null!");
                contactHeader = headerFactory.createContactHeader(address);
                if (contactHeader == null)
                    throw new SAXException("ERROR: " + "the generated contactHeader is null!");
                String expires = attrs.getValue("expires");
                int exp = -1;
                if (expires != null && !expires.trim().equals("")) {
                    try {
                        exp = Integer.valueOf(expires.trim()).intValue();
                        if (exp > Registrar.EXPIRES_TIME_MAX || exp < Registrar.EXPIRES_TIME_MIN) {
                            logger.debug("WARNING, XMLRegistrationsParser, startElement()," + " the contact expires value is not in the good range. Default expires value used:" + Registrar.EXPIRES_TIME_MAX);
                            exp = Registrar.EXPIRES_TIME_MAX;
                        }
                        contactHeader.setExpires(exp);
                    } catch (Exception e) {
                        logger.debug("WARNING, XMLRegistrationsParser, startElement()," + " error parsing the expires value, " + "the contact expires value is not well-formated. Default expires value used:" + Registrar.EXPIRES_TIME_MAX);
                        exp = Registrar.EXPIRES_TIME_MAX;
                        contactHeader.setExpires(exp);
                        e.printStackTrace();
                    }
                } else {
                    logger.debug("WARNING, XMLRegistrationsParser, startElement()," + "the contact expires value is not specified. Default expires value used:" + Registrar.EXPIRES_TIME_MAX);
                    exp = Registrar.EXPIRES_TIME_MAX;
                    contactHeader.setExpires(exp);
                }
            } catch (Exception e) {
                throw new SAXException("ERROR, XMLRegistrationsParser, startElement(), " + "the contact uri attribute has not been parsed correctly: " + e.getMessage());
            }
        } else {
            throw new SAXException("ERROR, XMLRegistrationsParser, startElement(), " + "the uri attribute has not been specified for the contact tag!!!");
        }
    }
}
