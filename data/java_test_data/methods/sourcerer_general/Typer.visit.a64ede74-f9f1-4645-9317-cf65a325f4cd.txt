public void visit(JmmClass n) {
    /* Mise a jour de la classe courante */
    classeCourante = this.tds.getClasse(n.class_id);
    /* ajout de tous les attributs de la classe et des super classes dans la table de symboles */
    String nomClasse = this.classeCourante.getNomClasse();
    TypeDef laClasse = this.classeCourante;
    while (!nomClasse.equals("Object")) {
        laClasse = this.tds.getClasse(nomClasse);
        Vector<UnAttribut> attributs = laClasse.getSesAttributs();
        Iterator it = attributs.iterator();
        while (it.hasNext()) {
            UnAttribut attr = (UnAttribut) it.next();
            this.AjouterIdentifieur(attr.getNom(), attr.getType());
        }
        nomClasse = laClasse.getNomSuperClasse();
    }
    /* visite de tous les 'Fields' de la classe  */
    Iterator it = n.class_fields.iterator();
    while (it.hasNext()) {
        Field f = (Field) it.next();
        f.accept(this);
    }
    /* la visite de la classe est terminï¿½e il faut enlever les attributs de la table de symbole */
    nomClasse = this.classeCourante.getNomClasse();
    laClasse = this.classeCourante;
    while (!nomClasse.equals("Object")) {
        laClasse = this.tds.getClasse(nomClasse);
        Vector<UnAttribut> attributs = laClasse.getSesAttributs();
        it = attributs.iterator();
        while (it.hasNext()) {
            UnAttribut attr = (UnAttribut) it.next();
            this.EnleverIdentifieur(attr.getNom());
        }
        nomClasse = laClasse.getNomSuperClasse();
    }
}
