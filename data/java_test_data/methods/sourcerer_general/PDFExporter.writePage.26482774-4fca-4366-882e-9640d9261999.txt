private void writePage(Legislator legislator) throws DocumentException {
    /* adds the outline */
    PdfContentByte cb = pdfWriter.getDirectContent();
    PdfDestination destination = new PdfDestination(PdfDestination.FITH);
    new PdfOutline(cb.getRootOutline(), destination, getOutlineName(legislator));
    /* writes the title and name */
    doc.add(new Paragraph(legislator.getTitle().toString(), BLUE_MEDIUM_FONT));
    /* writes the name */
    doc.add(new Paragraph(getName(legislator), BIG_FONT));
    /* writes the photo */
    if (includePhotos) {
        if (!StringUtils.isBlank(legislator.getBioguideId())) {
            try {
                Image image = null;
                if (photosZipFile != null) {
                    ZipEntry zipEntry = photosZipFile.getEntry("100x125/" + legislator.getBioguideId() + ".jpg");
                    if (zipEntry != null) {
                        InputStream inStream = null;
                        try {
                            inStream = photosZipFile.getInputStream(zipEntry);
                            image = Image.getInstance(IOUtils.toByteArray(inStream));
                        } catch (IOException e) {
                        } finally {
                            IOUtils.closeQuietly(inStream);
                        }
                    }
                }
                if (image == null) {
                    image = Image.getInstance(new URL("http://bioguide.congress.gov/bioguide/photo/" + legislator.getBioguideId().charAt(0) + "/" + legislator.getBioguideId() + ".jpg"));
                }
                if (image != null) {
                    image.scaleToFit(100, 125);
                    doc.add(image);
                }
            } catch (MalformedURLException e) {
            } catch (IOException e) {
            } catch (BadElementException e) {
            }
        }
    }
    /* writes other information */
    addStringProperty("Party", legislator.getParty().toString());
    addStringProperty("State", legislator.getState().toString());
    addStringProperty("District", legislator.getDistrict().toString());
    addStringProperty("In Office", legislator.isInOffice() ? "Active" : "Inactive");
    addStringProperty("Gender", legislator.getGender().toString());
    addStringProperty("Office Phone", legislator.getPhone().toString());
    addStringProperty("Office Fax", legislator.getFax().toString());
    addURLProperty("Web Site", legislator.getWebSite());
    addURLProperty("Web Contact Form", legislator.getWebContactForm());
    addURLProperty("Email", legislator.getEmail(), true);
    addStringProperty("Office Address", legislator.getCongressOffice());
    addStringProperty("Bioguide ID", legislator.getBioguideId());
    addURLProperty("", getURL("http://bioguide.congress.gov/scripts/biodisplay.pl?index=${id}", legislator.getBioguideId()));
    addStringProperty("Vote Smart ID", legislator.getVoteSmartId());
    addURLProperty("", getURL("http://votesmart.org/bio.php?can_id=${id}", legislator.getVoteSmartId()));
    addStringProperty("FEC ID", legislator.getFecId());
    addURLProperty("", getURL("http://query.nictusa.com/cgi-bin/can_detail/${id}", legislator.getFecId()));
    addStringProperty("GovTrack.us ID", legislator.getGovTrackId());
    addURLProperty("", getURL("http://www.govtrack.us/congress/person.xpd?id=${id}", legislator.getGovTrackId()));
    addStringProperty("CRP ID", legislator.getCrpId());
    addURLProperty("", getURL("http://www.opensecrets.org/politicians/summary.php?cid=${id}", legislator.getCrpId()));
    addStringProperty("Eventful.com ID", legislator.getEventfulId());
    addURLProperty("", getURL("http://eventful.com/performers/${id}", legislator.getEventfulId()));
    addStringProperty("Twitter ID", legislator.getTwitterId());
    addURLProperty("", getURL("http://twitter.com/${id}", legislator.getTwitterId()));
    addURLProperty("Congresspedia URL", legislator.getCongresspediaURL());
    addURLProperty("YouTube URL", legislator.getYouTubeURL());
    /* forces a page break */
    doc.newPage();
}
