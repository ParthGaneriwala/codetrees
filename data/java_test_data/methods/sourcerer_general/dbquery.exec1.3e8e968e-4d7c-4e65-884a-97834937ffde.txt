protected boolean exec1(String arg) {
    if (arg.startsWith("@"))
        arg = FileManager.get().readWholeFileAsUTF8(arg.substring(1));
    boolean timing = false;
    if (getCommandLine().contains(queryTime))
        timing = true;
    // timing = ( getCommandLine().getArg(queryTime).getValue().equalsIgnoreCase("true") ||
    // getCommandLine().getArg(queryTime).getValue().equalsIgnoreCase("on") ) ;
    // GraphRDB g = ((GraphRDB)getRDBModel().getGraph()) ;
    // System.err.println("Reif: "+g.reificationBehavior()) ;
    // System.err.println("OnlyReified:  "+getRDBModel().getQueryOnlyReified()) ;
    // System.err.println("FullReified:  "+getRDBModel().getQueryFullReified()) ;
    // System.err.println("QueryOnly:    "+getRDBModel().getQueryOnlyAsserted()) ;
    // super.getRDBModel().setDoFastpath(true) ;
    // super.getRDBModel().setQueryOnlyReified(false) ;
    // super.getRDBModel().setQueryFullReified(false) ;
    // super.getRDBModel().setQueryOnlyAsserted(true) ;
    // super.getRDBModel().setDoFastpath(true) ;
    // System.err.println("Fastpath: "+getRDBModel().getDoFastpath()) ;
    long totalTime = 0;
    long firstTime = 0;
    ResultsFormat fmt = ResultsFormat.FMT_TEXT;
    int repeat = 1;
    if (getCommandLine().contains(repeatDecl))
        repeat = Integer.parseInt(getCommandLine().getValue(repeatDecl));
    if (timing)
        fmt = ResultsFormat.FMT_NONE;
    // Compile and execute once on empty model (get classes)
    if (timing) {
        long startTime = System.currentTimeMillis();
        Query query = QueryFactory.create(arg);
        Model m = ModelFactory.createDefaultModel();
        QueryExecution qExec = QueryExecutionFactory.create(query, m);
        doQuery(query, qExec, ResultsFormat.FMT_NONE);
        long finishTime = System.currentTimeMillis();
        firstTime = (finishTime - startTime);
    }
    // Query query = QueryFactory.create(arg) ;
    // Creates model - does JDBC.
    long startTimeJDBC = System.currentTimeMillis();
    getRDBModel();
    long jdbcTime = System.currentTimeMillis() - startTimeJDBC;
    for (int i = 0; i < repeat; i++) {
        long startTime = System.currentTimeMillis();
        // getRDBModel().begin() ;
        // fastpath => one SQL query => autocommit is enough
        Query query = QueryFactory.create(arg);
        QueryExecution qExec = QueryExecutionFactory.create(query, super.getRDBModel());
        doQuery(query, qExec, fmt);
        qExec.close();
        // getRDBModel().commit() ;
        long finishTime = System.currentTimeMillis();
        long time = finishTime - startTime;
        totalTime += time;
    }
    if (timing) {
        System.out.println("Query execution time:   " + (totalTime) / (repeat * 1000.0));
        System.out.println("Setup:                  " + (firstTime) / 1000.0);
        System.out.println("JDBC setup:             " + (jdbcTime) / 1000.0);
    }
    return false;
}
