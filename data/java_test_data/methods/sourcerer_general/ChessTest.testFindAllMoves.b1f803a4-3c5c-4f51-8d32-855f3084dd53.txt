@Test
public void testFindAllMoves() {
    int length = chess.getBoard().getGrid().length;
    ArrayList<BoardPoint> allMoves = new ArrayList<BoardPoint>();
    // disables up player 1 pawns
    for (int i = 0; i < length; i++) {
        chess.getBoard().getGrid()[i][1].setOccupied(false);
    }
    chess.getBoard().getGrid()[4][0].setPiece(new King());
    chess.getBoard().getGrid()[4][0].getPiece().setPlayer(true);
    chess.getBoard().getGrid()[4][0].setOccupied(true);
    chess.getBoard().getGrid()[4][3].setPiece(new Queen());
    chess.getBoard().getGrid()[4][3].getPiece().setPlayer(false);
    chess.getBoard().getGrid()[4][3].setOccupied(true);
    chess.getBoard().getGrid()[7][3].setPiece(new Bishop());
    chess.getBoard().getGrid()[7][3].getPiece().setPlayer(false);
    chess.getBoard().getGrid()[7][3].setOccupied(true);
    allMoves = chess.findAllMoves(chess.getBoard().getGrid()[4][0]);
    // queens moves ...
    assertTrue(allMoves.contains(new BoardPoint(4, 0)));
    assertTrue(allMoves.contains(new BoardPoint(4, 1)));
    assertTrue(allMoves.contains(new BoardPoint(4, 2)));
    assertFalse(allMoves.contains(new BoardPoint(4, 3)));
    assertFalse(allMoves.contains(new BoardPoint(4, 4)));
    assertFalse(allMoves.contains(new BoardPoint(3, 3)));
    // bishops moves...
    assertTrue(allMoves.contains(new BoardPoint(6, 2)));
    assertTrue(allMoves.contains(new BoardPoint(5, 1)));
    assertTrue(allMoves.contains(new BoardPoint(4, 0)));
    assertFalse(allMoves.contains(new BoardPoint(6, 4)));
    assertFalse(allMoves.contains(new BoardPoint(7, 4)));
}
