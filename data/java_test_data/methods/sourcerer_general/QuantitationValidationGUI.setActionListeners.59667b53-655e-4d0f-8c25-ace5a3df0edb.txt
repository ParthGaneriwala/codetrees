public void setActionListeners() {
    middleSplitter.setDividerLocation(middleSplitter.getWidth() / 2);
    contentPane.addComponentListener(new ComponentAdapter() {

        public void componentResized(ComponentEvent evt) {
            middleSplitter.setDividerLocation(middleSplitter.getWidth() / 2);
            contentPane.updateUI();
        }
    });
    logButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            LogGui lLogGui = new LogGui();
        }
    });
    filterProteinsButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            FilterFrame filter = new FilterFrame(iProteins, iQuantitativeValidationSingelton.getReferenceSet(), getFrame(), iQuantitativeValidationSingelton.getReferenceSet().getTypes(), iQuantitativeValidationSingelton.getReferenceSet().getComponents());
        }
    });
    tglBtnValid.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            iQuantitativeValidationSingelton.setUseOnlyValidRatioForProteinMean(tglBtnValid.isSelected());
            loadProtein(false);
        }
    });
    tglBtnUnique.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            iQuantitativeValidationSingelton.setUseOnlyUniqueRatioForProteinMean(tglBtnUnique.isSelected());
            loadProtein(false);
        }
    });
    tglBtnLog2.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            iQuantitativeValidationSingelton.setLog2(tglBtnLog2.isSelected());
            if (iQuantitativeValidationSingelton.isLog2()) {
                iQuantitativeValidationSingelton.setLeftGraphBorder(-2);
                iQuantitativeValidationSingelton.setRightGraphBorder(2);
            } else {
                iQuantitativeValidationSingelton.setLeftGraphBorder(0);
                iQuantitativeValidationSingelton.setRightGraphBorder(3);
            }
            loadProtein(false);
        }
    });
    addToSelectionButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            ImageIcon addIcon = new ImageIcon(getClass().getResource("/addSelection.gif"));
            ImageIcon deleteIcon = new ImageIcon(getClass().getResource("/deleteSelection.gif"));
            if (iProtein.getSelected()) {
                // it's in the selection, delete it
                iProtein.setSelected(false);
                iQuantitativeValidationSingelton.getSelectedProteins().remove(iProtein);
                if (iSelectionVizualised) {
                    iFilteredProteins.removeAllElements();
                    for (int i = 0; i < iQuantitativeValidationSingelton.getSelectedProteins().size(); i++) {
                        iFilteredProteins.add(iQuantitativeValidationSingelton.getSelectedProteins().get(i));
                    }
                    iSelectionVizualised = true;
                    proteinList.setSelectedIndex(2);
                    proteinList.updateUI();
                    jpanProteinGraph.removeAll();
                    jpanProteinRatioGroups.removeAll();
                    jpanExtraProteinInfo.removeAll();
                    iChartPanels = null;
                    iProteinBar = null;
                    addToSelectionButton.setVisible(false);
                    goToBrowserButton.setVisible(false);
                    showPossibleIsoformsButton.setVisible(false);
                    setValidatedButton.setVisible(false);
                    lblProteinInfo.setText("No protein selected");
                    update(getGraphics());
                }
                addToSelectionButton.setIcon(addIcon);
                addToSelectionButton.setToolTipText("Add this protein to the selection");
                writeToLog("Deselected protein : " + iProtein);
            } else {
                // it's not in the selection add it
                iProtein.setSelected(true);
                iQuantitativeValidationSingelton.getSelectedProteins().add(iProtein);
                addToSelectionButton.setIcon(deleteIcon);
                addToSelectionButton.setToolTipText("Delete this protein from the selection");
                writeToLog("Selected protein : " + iProtein);
            }
            proteinList.updateUI();
            jLabelSelected.setText("# selected proteins : " + iQuantitativeValidationSingelton.getSelectedProteins().size());
            jLabelValidated.setText("# validated proteins : " + iQuantitativeValidationSingelton.getValidatedProteins().size());
        }
    });
    showSelectionButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            iFilteredProteins.removeAllElements();
            for (int i = 0; i < iQuantitativeValidationSingelton.getSelectedProteins().size(); i++) {
                iFilteredProteins.add(iQuantitativeValidationSingelton.getSelectedProteins().get(i));
            }
            iSelectionVizualised = true;
            proteinList.setSelectedIndex(2);
            proteinList.updateUI();
            jpanProteinGraph.removeAll();
            jpanProteinRatioGroups.removeAll();
            jpanExtraProteinInfo.removeAll();
            iChartPanels = null;
            iProteinBar = null;
            addToSelectionButton.setVisible(false);
            goToBrowserButton.setVisible(false);
            showPossibleIsoformsButton.setVisible(false);
            setValidatedButton.setVisible(false);
            lblProteinInfo.setText("No protein selected");
            update(getGraphics());
        }
    });
    goToBrowserButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.UNIPROT)) {
                showInBrowser("http://www.uniprot.org/uniprot/" + iProtein.getAccession());
            } else if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.IPI)) {
                showInBrowser("http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-id+5X1021Z8Dfm+[ipi-AccNumber:" + iProtein.getAccession() + "]+-e");
            } else if (iQuantitativeValidationSingelton.getDatabaseType().equals(ProteinDatabaseType.NCBI)) {
                showInBrowser("http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&id=" + iProtein.getAccession());
            }
        }
    });
    chbShowOnlyNonValid.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            loadRovFileInfo();
        }
    });
    showRovButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            loadRovFileInfo();
        }
    });
    addAllProteinsInButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            int addCounter = 0;
            for (int i = 0; i < iFilteredProteins.size(); i++) {
                QuantitativeProtein lProtein = iFilteredProteins.get(i);
                // check if this protein is already in the selection
                boolean lProteinInSelection = lProtein.getSelected();
                if (!lProteinInSelection) {
                    // it's not in the selection , add it
                    iQuantitativeValidationSingelton.getSelectedProteins().add(lProtein);
                    lProtein.setSelected(true);
                    writeToLog("Selected protein : " + lProtein);
                    addCounter = addCounter + 1;
                }
            }
            writeToLog("Added " + addCounter + " proteins to the selection.");
            jLabelSelected.setText("# selected proteins : " + iQuantitativeValidationSingelton.getSelectedProteins().size());
            jLabelValidated.setText("# validated proteins : " + iQuantitativeValidationSingelton.getValidatedProteins().size());
            proteinList.updateUI();
        }
    });
    deleteAllProteinsInButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            int deleteCounter = 0;
            for (int i = 0; i < iFilteredProteins.size(); i++) {
                QuantitativeProtein lProtein = iFilteredProteins.get(i);
                // check if this protein is already in the selection
                boolean lProteinInSelection = lProtein.getSelected();
                if (lProteinInSelection) {
                    // it's in the selection , delete it
                    iQuantitativeValidationSingelton.getSelectedProteins().remove(lProtein);
                    lProtein.setSelected(false);
                    writeToLog("Deselected protein : " + lProtein);
                    deleteCounter = deleteCounter + 1;
                }
            }
            writeToLog("Deleted " + deleteCounter + " proteins from the selection.");
            jLabelSelected.setText("# selected proteins : " + iQuantitativeValidationSingelton.getSelectedProteins().size());
            jLabelValidated.setText("# validated proteins : " + iQuantitativeValidationSingelton.getValidatedProteins().size());
            proteinList.updateUI();
        }
    });
    showPossibleIsoformsButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            // Create a vector to store all the possible isoform accessions in
            Vector<String> lAccessions = new Vector<String>();
            Vector<RatioGroup> lRatioGroups = iProtein.getRatioGroups();
            for (int i = 0; i < lRatioGroups.size(); i++) {
                RatioGroup lRatioGroup = lRatioGroups.get(i);
                String[] lRatioGroupAccessions = lRatioGroup.getProteinAccessions();
                for (int j = 0; j < lRatioGroupAccessions.length; j++) {
                    // check if it's a new accessions
                    boolean lNewAccession = true;
                    for (int k = 0; k < lAccessions.size(); k++) {
                        if (lAccessions.get(k).equalsIgnoreCase(lRatioGroupAccessions[j])) {
                            lNewAccession = false;
                        }
                    }
                    if (lNewAccession) {
                        lAccessions.add(lRatioGroupAccessions[j]);
                    }
                }
            }
            // we found the possible isoform accessions, now filter all the proteins and select the possible isoforms
            Vector<QuantitativeProtein> lFilteredProteins = new Vector<QuantitativeProtein>();
            for (int i = 0; i < iProteins.length; i++) {
                QuantitativeProtein lProteinToCheck = iProteins[i];
                for (int j = 0; j < lAccessions.size(); j++) {
                    if (lAccessions.get(j).equalsIgnoreCase(lProteinToCheck.getAccession())) {
                        lFilteredProteins.add(lProteinToCheck);
                    }
                }
            }
            setFilteredProteins(lFilteredProteins);
        }
    });
    showAllProteinsButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            Vector<QuantitativeProtein> lFilteredProteins = new Vector<QuantitativeProtein>();
            for (int i = 0; i < iProteins.length; i++) {
                QuantitativeProtein lProteinToCheck = iProteins[i];
                lFilteredProteins.add(lProteinToCheck);
            }
            setFilteredProteins(lFilteredProteins);
        }
    });
    setValidatedButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (!iProtein.getValidated()) {
                iProtein.setValidated(true);
                iQuantitativeValidationSingelton.addValidatedProtein(iProtein);
                setValidatedButton.setToolTipText("Set not validated");
                setValidatedButton.setIcon(new ImageIcon(getClass().getResource("/setNotValidated.gif")));
                writeToLog("Validated protein : " + iProtein);
            } else {
                iProtein.setValidated(false);
                iQuantitativeValidationSingelton.removeValidatedProtein(iProtein);
                setValidatedButton.setToolTipText("Set validated");
                setValidatedButton.setIcon(new ImageIcon(getClass().getResource("/setValidated.gif")));
                writeToLog("Devalidated protein : " + iProtein);
            }
            jLabelSelected.setText("# selected proteins : " + iQuantitativeValidationSingelton.getSelectedProteins().size());
            jLabelValidated.setText("# validated proteins : " + iQuantitativeValidationSingelton.getValidatedProteins().size());
            proteinList.updateUI();
        }
    });
    exportButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            ExportGui lExportGui = new ExportGui(getFrame(), iProtein, iProteins);
        }
    });
    loadRoverFileButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            // open file chooser
            JFileChooser fc = new JFileChooser();
            if (iQuantitativeValidationSingelton.getFileLocationOpener() != null) {
                fc.setCurrentDirectory(new File(iQuantitativeValidationSingelton.getFileLocationOpener()));
            }
            fc.showOpenDialog(getFrame());
            File iRoverFile = fc.getSelectedFile();
            if (iRoverFile != null) {
                iQuantitativeValidationSingelton.setFileLocationOpener(iRoverFile.getParent());
                RoverFileReader lRoverReader = new RoverFileReader(iRoverFile.getAbsolutePath(), iProteins);
                proteinList.updateUI();
                loadProtein(false);
                // set labels
                jLabelTotaleNumber.setText("# proteins : " + iProteins.length);
                jLabelSelected.setText("# selected proteins : " + iQuantitativeValidationSingelton.getSelectedProteins().size());
                jLabelValidated.setText("# validated proteins : " + iQuantitativeValidationSingelton.getValidatedProteins().size());
            }
        }
    });
    graphExtenderRight.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            iQuantitativeValidationSingelton.setRightGraphBorder(iQuantitativeValidationSingelton.getRightGraphBorder() + 1);
            loadProtein(false);
        }
    });
    graphExtenderLeft.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            iQuantitativeValidationSingelton.setLeftGraphBorder(iQuantitativeValidationSingelton.getLeftGraphBorder() - 1);
            loadProtein(false);
        }
    });
    graphExtenderRightMin.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (iQuantitativeValidationSingelton.isLog2()) {
                if (iQuantitativeValidationSingelton.getRightGraphBorder() - 1 > 0) {
                    iQuantitativeValidationSingelton.setRightGraphBorder(iQuantitativeValidationSingelton.getRightGraphBorder() - 1);
                }
            } else {
                if (iQuantitativeValidationSingelton.getRightGraphBorder() - 1 > 1) {
                    iQuantitativeValidationSingelton.setRightGraphBorder(iQuantitativeValidationSingelton.getRightGraphBorder() - 1);
                }
            }
            loadProtein(false);
        }
    });
    graphExtenderLeftPlus.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (iQuantitativeValidationSingelton.isLog2()) {
                if (iQuantitativeValidationSingelton.getLeftGraphBorder() + 1 < 0) {
                    iQuantitativeValidationSingelton.setLeftGraphBorder(iQuantitativeValidationSingelton.getLeftGraphBorder() + 1);
                }
            } else {
                if (iQuantitativeValidationSingelton.getLeftGraphBorder() + 1 < 1) {
                    iQuantitativeValidationSingelton.setLeftGraphBorder(iQuantitativeValidationSingelton.getLeftGraphBorder() + 1);
                }
            }
            loadProtein(false);
        }
    });
    miscButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            ReferenceSetParameterFrame lReferenceFrame = new ReferenceSetParameterFrame(iProteins, getFrame());
        }
    });
    ActionListener statisticTypeListener = new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            loadProtein(false);
        }
    };
    tglBtnValues.addActionListener(statisticTypeListener);
    tglBtnDistribution.addActionListener(statisticTypeListener);
    proteinList.addMouseListener(new MouseAdapter() {

        @Override
        public void mouseReleased(MouseEvent me) {
            if (me.getButton() == 1) {
                loadProtein(true);
            }
        }
    });
    proteinList.addKeyListener(new KeyAdapter() {

        @Override
        public void keyReleased(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN) {
                loadProtein(true);
            }
        }
    });
    misc_infoButton.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            ReferenceSetInfoFrame lReferenceFrame = new ReferenceSetInfoFrame();
        }
    });
    cmbOrder.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            progressBar1.setIndeterminate(true);
            progressBar1.setVisible(true);
            SwingWorker lStarter = new SwingWorker() {

                public Boolean construct() {
                    String lOrderType = (String) cmbOrder.getSelectedItem();
                    if (lOrderType.equalsIgnoreCase("alphabetical")) {
                        // sort by the protein accession
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByAccession());
                        proteinList.updateUI();
                    }
                    if (lOrderType.equalsIgnoreCase("# peptide ratios")) {
                        // sort by number of ratio groups
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByRatioGroupNumbers());
                        proteinList.updateUI();
                    }
                    if (lOrderType.equalsIgnoreCase("protein ratio")) {
                        // sort by the protein ratio
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByProteinMean((String) cmbRatioTypes.getSelectedItem()));
                        proteinList.updateUI();
                    }
                    if (lOrderType.equalsIgnoreCase("ratio diff between sources")) {
                        // sort by the protein ratio
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByDiffProteinMeans((String) cmbRatioTypes.getSelectedItem()));
                        proteinList.updateUI();
                    }
                    if (lOrderType.equalsIgnoreCase("protein Z-score")) {
                        // sort by the protein ratio
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByProteinZscore((String) cmbRatioTypes.getSelectedItem()));
                        proteinList.updateUI();
                    }
                    return true;
                }

                public void finished() {
                    // 
                    progressBar1.setIndeterminate(true);
                    progressBar1.setVisible(false);
                }
            };
            lStarter.start();
        }
    });
    cmbRatioTypes.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            progressBar1.setIndeterminate(true);
            progressBar1.setVisible(true);
            SwingWorker lStarter = new SwingWorker() {

                public Boolean construct() {
                    // check if protein ratio is selected in the cmbOrder
                    String lOrderType = (String) cmbOrder.getSelectedItem();
                    if (lOrderType.equalsIgnoreCase("protein ratio")) {
                        // sort by the protein ratio
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByProteinMean((String) cmbRatioTypes.getSelectedItem()));
                        proteinList.updateUI();
                    }
                    if (lOrderType.equalsIgnoreCase("ratio diff between sources")) {
                        // sort by the protein ratio
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByDiffProteinMeans((String) cmbRatioTypes.getSelectedItem()));
                        proteinList.updateUI();
                    }
                    if (lOrderType.equalsIgnoreCase("protein Z-score")) {
                        // sort by the protein ratio
                        Collections.sort(iFilteredProteins, new QuantitativeProteinSorterByProteinZscore((String) cmbRatioTypes.getSelectedItem()));
                        proteinList.updateUI();
                    }
                    return true;
                }

                public void finished() {
                    // 
                    progressBar1.setIndeterminate(true);
                    progressBar1.setVisible(false);
                }
            };
            lStarter.start();
        }
    });
    tglBtnOriginal.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            iQuantitativeValidationSingelton.setUseOriginalRatio(tglBtnOriginal.isSelected());
            iQuantitativeValidationSingelton.getReferenceSet().clearCalculateReferenceSet();
            loadProtein(false);
        }
    });
}
