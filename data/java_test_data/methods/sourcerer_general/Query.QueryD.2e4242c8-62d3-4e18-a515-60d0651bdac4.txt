public static Table QueryD(Comparable iComparable, int inMemorySize) throws IOException, RecordException {
    statistics();
    File tmp = new File(Utils.FILEPATH_OUTPUT + "queryD.txt");
    File tmp2 = new File(Utils.FILEPATH_WORKDIR + "join.txt");
    File tmp3 = new File(Utils.FILEPATH_WORKDIR2 + "join.txt");
    File tmp4 = new File(Utils.FILEPATH_WORKDIR + "where.txt");
    File tmp5 = new File(Utils.FILEPATH_WORKDIR + "projection.txt");
    File tmp6 = new File(Utils.FILEPATH_WORKDIR + "projection2.txt");
    File tmp7 = new File(Utils.FILEPATH_WORKDIR + "projection3.txt");
    Table supplier = new Supplier();
    Table nation = new Nation();
    Table region = new Region();
    Table oTable;
    Table tmpT;
    double sum = 0;
    StringBuffer qp = new StringBuffer();
    tmpT = region;
    region = SQL.projection(region, tmp6, new int[] { region.getIndex(Region.FIELD_R_NAME), region.getIndex(Region.FIELD_R_REGIONKEY) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, region, "Projection", new String[] { Region.FIELD_R_NAME, Region.FIELD_R_REGIONKEY }));
    sum += region.getExecutionTime();
    tmpT = region;
    region = SQL.whereEqual(region, tmp4, new int[] { region.getIndex(Region.FIELD_R_NAME) }, new Comparable[] { iComparable }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, region, "Where Equal", new String[] { Region.FIELD_R_NAME }));
    sum += region.getExecutionTime();
    tmpT = nation;
    nation = SQL.projection(nation, tmp5, new int[] { nation.getIndex(Nation.FIELD_N_NAME), nation.getIndex(Nation.FIELD_N_REGIONKEY), nation.getIndex(Nation.FIELD_N_NATIONKEY) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, nation, "Projection", new String[] { Nation.FIELD_N_NAME, Nation.FIELD_N_REGIONKEY, Nation.FIELD_N_NATIONKEY }));
    sum += nation.getExecutionTime();
    tmpT = nation;
    oTable = SQL.sortJoin(region, nation, tmp3, region.getIndex(Region.FIELD_R_REGIONKEY), nation.getIndex(Nation.FIELD_N_REGIONKEY), SQL.JOIN_NATURAL, inMemorySize);
    qp.append(getQPEntry(region, nation, oTable, "Sort Join", new String[] { Region.FIELD_R_REGIONKEY, Nation.FIELD_N_REGIONKEY }));
    sum += oTable.getExecutionTime();
    tmpT = supplier;
    supplier = SQL.projection(supplier, tmp7, new int[] { supplier.getIndex(Supplier.FIELD_S_NATIONKEY), supplier.getIndex(Supplier.FIELD_S_ACCTBAL), supplier.getIndex(Supplier.FIELD_S_NAME), supplier.getIndex(Supplier.FIELD_S_ADDRESS), supplier.getIndex(Supplier.FIELD_S_PHONE), supplier.getIndex(Supplier.FIELD_S_COMMENT) }, inMemorySize);
    qp.append(getQPEntry(tmpT, null, supplier, "Projection", new String[] { Supplier.FIELD_S_NATIONKEY, Supplier.FIELD_S_ACCTBAL }));
    sum += supplier.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.sortJoin(oTable, supplier, tmp2, oTable.getIndex(Nation.FIELD_N_NATIONKEY), supplier.getIndex(Supplier.FIELD_S_NATIONKEY), SQL.JOIN_NATURAL, inMemorySize);
    qp.append(getQPEntry(tmpT, supplier, oTable, "Sort Join", new String[] { Nation.FIELD_N_NATIONKEY, Supplier.FIELD_S_NATIONKEY }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.projection(oTable, tmp5, new int[] { oTable.getIndex(Supplier.FIELD_S_ACCTBAL), oTable.getIndex(Supplier.FIELD_S_NAME), oTable.getIndex(Nation.FIELD_N_NAME), oTable.getIndex(Supplier.FIELD_S_ADDRESS), oTable.getIndex(Supplier.FIELD_S_PHONE), oTable.getIndex(Supplier.FIELD_S_COMMENT) }, Utils.MAX_MEM);
    qp.append(getQPEntry(tmpT, null, oTable, "projection", new String[] { Supplier.FIELD_S_ACCTBAL, Supplier.FIELD_S_NAME, Nation.FIELD_N_NAME, Supplier.FIELD_S_ADDRESS, Supplier.FIELD_S_PHONE, Supplier.FIELD_S_COMMENT }));
    sum += oTable.getExecutionTime();
    tmpT = oTable;
    oTable = SQL.orderBy(oTable, tmp, new int[] { oTable.getIndex(Nation.FIELD_N_NAME) }, TPPMS.DESC, inMemorySize);
    qp.append(getQPEntry(tmpT, null, oTable, "Order By", new String[] { Nation.FIELD_N_NAME }));
    sum += oTable.getExecutionTime();
    qp.append("Total: " + sum);
    copyAndAppend(oTable, new File(Utils.FILEPATH_OUTPUT + "d.out"), qp.toString(), inMemorySize);
    ProjectGUI.getInstance().update("Memory Execution: QueryD done", 0);
    System.out.println("Done D");
    return oTable;
}
