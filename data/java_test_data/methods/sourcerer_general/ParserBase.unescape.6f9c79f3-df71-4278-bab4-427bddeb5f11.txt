private static String unescape(String s, char escape, boolean pointCodeOnly, int line, int column) {
    int i = s.indexOf(escape);
    if (i == -1)
        return s;
    // Dump the initial part straight into the string buffer
    StringBuffer sb = new StringBuffer(s.substring(0, i));
    int len = s.length();
    for (; i < len; i++) {
        char ch = s.charAt(i);
        // Keep line and column numbers.
        switch(ch) {
            case '\n':
            case '\r':
                line++;
                column = 1;
                break;
            default:
                column++;
                break;
        }
        if (ch != escape) {
            sb.append(ch);
            continue;
        }
        // Escape
        if (i >= len - 1)
            throw new TurtleParseException(exMsg("Illegal escape at end of string", line, column));
        char ch2 = s.charAt(i + 1);
        column = column + 1;
        i = i + 1;
        // \\u and \\U
        if (ch2 == 'u') {
            // i points to the \ so i+6 is next character
            if (i + 4 >= len)
                throw new TurtleParseException(exMsg("\\u escape too short", line, column));
            int x = hex(s, i + 1, 4, line, column);
            sb.append((char) x);
            // Jump 1 2 3 4 -- already skipped \ and u
            i = i + 4;
            column = column + 4;
            continue;
        }
        if (ch2 == 'U') {
            // i points to the \ so i+6 is next character
            if (i + 8 >= len)
                throw new TurtleParseException(exMsg("\\U escape too short", line, column));
            int x = hex(s, i + 1, 8, line, column);
            sb.append((char) x);
            // Jump 1 2 3 4 5 6 7 8 -- already skipped \ and u
            i = i + 8;
            column = column + 8;
            continue;
        }
        if (pointCodeOnly) {
            sb.append('\\');
            sb.append(ch2);
            i = i + 1;
            continue;
        }
        // Not just codepoints.  Must be a legal escape.
        char ch3 = 0;
        switch(ch2) {
            case 'n':
                ch3 = '\n';
                break;
            case 't':
                ch3 = '\t';
                break;
            case 'r':
                ch3 = '\r';
                break;
            case 'b':
                ch3 = '\b';
                break;
            case 'f':
                ch3 = '\f';
                break;
            case '\'':
                ch3 = '\'';
                break;
            case '\"':
                ch3 = '\"';
                break;
            case '\\':
                ch3 = '\\';
                break;
            default:
                throw new TurtleParseException(exMsg("Unknown escape: \\" + ch2, line, column));
        }
        sb.append(ch3);
    }
    return sb.toString();
}
