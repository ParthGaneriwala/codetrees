protected void updateFromConfig() {
    // create the component models
    Scene scene = ((Model) _parentScope).getScene(this);
    Model[] omodels = _models;
    _models = new Model[_config.models.length];
    Function getNodeFn = ScopeUtil.resolve(this, "getNode", Function.NULL);
    for (int ii = 0; ii < _models.length; ii++) {
        boolean create = (omodels == null || omodels.length <= ii);
        Model model = create ? new Model(_ctx) : omodels[ii];
        _models[ii] = model;
        ComponentModel component = _config.models[ii];
        Scope node = StringUtil.isBlank(component.node) ? null : (Scope) getNodeFn.call(component.node);
        model.setParentScope(node == null ? this : node);
        model.setConfig(component.model);
        model.getLocalTransform().set(component.transform);
        if (create && scene != null) {
            model.wasAdded(scene);
        }
    }
    if (omodels != null) {
        for (int ii = _models.length; ii < omodels.length; ii++) {
            Model model = omodels[ii];
            if (scene != null) {
                model.willBeRemoved();
            }
            model.dispose();
        }
    }
    // update the influence flags
    _influenceFlags = _config.influences.getFlags();
    // update the tick policy if necessary
    TickPolicy npolicy = _config.tickPolicy;
    if (npolicy == TickPolicy.DEFAULT) {
        npolicy = TickPolicy.NEVER;
        for (Model model : _models) {
            TickPolicy mpolicy = model.getTickPolicy();
            if (mpolicy.ordinal() > npolicy.ordinal()) {
                npolicy = mpolicy;
            }
        }
    }
    if (_tickPolicy != npolicy) {
        ((Model) _parentScope).tickPolicyWillChange(this);
        _tickPolicy = npolicy;
        ((Model) _parentScope).tickPolicyDidChange(this);
    }
    // update the bounds
    updateBounds();
}
