@Override
public String reflechitDeplacement(Case[][] environnement, int ressources, int ressourcesMax, Signature sig, int posx, int posy) {
    boolean retour = limite < (float) ((float) ressources / (float) ressourcesMax);
    int[] tab;
    if (retour) {
        tab = tabRetour;
    } else {
        tab = tabAller;
    }
    int max = 0;
    int[][] tabValuation = new int[3][3];
    String res = "";
    Random rand = new Random();
    int directionX = 0;
    int directionY = 0;
    for (int j = 0; j < 3; j++) {
        for (int i = 0; i < 3; i++) {
            if (!(i == 1 && j == 1)) {
                // si la case n'est pas la case actuelle, on l'évalue (pour que l'individu bouge constemment
                int valCase = evalueDeplacement(environnement[i][j], ressourcesMax, sig, tab);
                if (valCase > 0) {
                    // évalue les cases plus fortement si on s'éloigne de la case d'origine
                    valCase += Math.max(Math.abs(posx - (i - 1)), Math.abs(posy - (j - 1)));
                }
                tabValuation[i][j] = valCase;
            }
        }
    }
    int[] posPhero1 = posOldPhero(environnement, sig, "recherche");
    int[] posPhero2 = posOldPhero(environnement, sig, "retour");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (posPhero1[0] == i && posPhero1[1] == j) {
                tabValuation[i][j] += tab[6];
            }
            if (posPhero2[0] == i && posPhero2[1] == j) {
                tabValuation[i][j] += tab[7];
            }
            if (tabValuation[i][j] >= max && (rand.nextInt(tabValuation[i][j] - max + 2) != 0)) {
                max = tabValuation[i][j];
                directionX = i;
                directionY = j;
            }
        }
    }
    // Resultat sous forme d'une chaine de caracteres
    switch(directionY) {
        case 2:
            switch(directionX) {
                case 0:
                    res = "SudOuest";
                    break;
                case 1:
                    res = "Sud";
                    break;
                case 2:
                    res = "SudEst";
                    break;
            }
            break;
        case 1:
            switch(directionX) {
                case 0:
                    res = "Ouest";
                    break;
                case 1:
                    break;
                case 2:
                    res = "Est";
                    break;
            }
            break;
        case 0:
            switch(directionX) {
                case 0:
                    res = "NordOuest";
                    break;
                case 1:
                    res = "Nord";
                    break;
                case 2:
                    res = "NordEst";
                    break;
            }
            break;
    }
    // System.out.println(" " + res + " ");
    return res;
}
