public void testProduct() throws Exception {
    product = new Product("Word Processor");
    testPlan = new TestPlan("Test Plan");
    testPlanCollection = new TestPlanCollection();
    assertEquals("Original Product name does not match!", "Word Processor", product.getName());
    assertTrue("New Product should be removable!", product.canRemove());
    assertTrue("New Product should not have a Defect assigned!", !product.hasDefectAssigned());
    assertTrue("New Product should not be able to remove a Defect!", !product.removeDefect());
    assertTrue("New Product should not be able to remove a TestPlan", !product.removeTestPlan());
    product.setName("Spreadsheet Program");
    assertEquals("Changed Product name does not match!", "Spreadsheet Program", product.getName());
    product.addDefect();
    assertTrue("After adding a Defect, a Product must have a Defect assigned!", product.hasDefectAssigned());
    assertTrue("With a Defect assigned, a Product must not be removable!", !product.canRemove());
    assertTrue("With a Defect assigned, a Product must be able to remove a Defect!", product.removeDefect());
    assertTrue("After removing the last Defect, a Product should be removable!", product.canRemove());
    assertTrue("After removing the last Defect, a Product should not have a Defect assigned!", !product.hasDefectAssigned());
    assertTrue("Before adding a TestPlan, a Product must have a TestPlan assigned!", !product.hasTestPlanAssigned());
    testPlanCollection.add(testPlan);
    testPlan.setProduct(product);
    assertTrue("After adding a TestPlan, a Product must have a TestPlan assigned!", product.hasTestPlanAssigned());
    assertTrue("With a TestPlan assigned, a Product must not be removable!", !product.canRemove());
    product.addDefect();
    assertTrue("With both a TestPlan and a Defect assigned, a Product must not be removable!", !product.canRemove());
    testPlanCollection.remove(testPlan);
    assertTrue("With a TestPlan assigned, a Product must be able to remove a TestPlan!", !product.removeTestPlan());
    assertTrue("After removing the last TestPlan, a Product may not have a TestPlan assigned!", !product.hasTestPlanAssigned());
    product.removeDefect();
    assertTrue("After removing the last TestPlan, a Product should be removable!", product.canRemove());
    assertTrue("After removing the last TestPlan, a Product should not have a TestPlan assigned!", !product.hasDefectAssigned());
    assertTrue("A Product without a TestPlan cannot remove a TestPlan!", !product.removeTestPlan());
}
