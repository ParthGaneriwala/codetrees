private AstNode unaryExpr() throws IOException {
    AstNode node;
    int tt = peekToken();
    int line = ts.lineno;
    switch(tt) {
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.TYPEOF:
            consumeToken();
            node = new UnaryExpression(tt, ts.tokenBeg, unaryExpr());
            node.setLineno(line);
            return node;
        case Token.ADD:
            consumeToken();
            // Convert to special POS token in parse tree
            node = new UnaryExpression(Token.POS, ts.tokenBeg, unaryExpr());
            node.setLineno(line);
            return node;
        case Token.SUB:
            consumeToken();
            // Convert to special NEG token in parse tree
            node = new UnaryExpression(Token.NEG, ts.tokenBeg, unaryExpr());
            node.setLineno(line);
            return node;
        case Token.INC:
        case Token.DEC:
            consumeToken();
            UnaryExpression expr = new UnaryExpression(tt, ts.tokenBeg, memberExpr(true));
            expr.setLineno(line);
            checkBadIncDec(expr);
            return expr;
        case Token.DELPROP:
            consumeToken();
            node = new UnaryExpression(tt, ts.tokenBeg, unaryExpr());
            node.setLineno(line);
            return node;
        case Token.ERROR:
            consumeToken();
            return makeErrorNode();
        case Token.LT:
            // XML stream encountered in expression.
            if (compilerEnv.isXmlAvailable()) {
                consumeToken();
                return memberExprTail(true, xmlInitializer());
            }
        default:
            AstNode pn = memberExpr(true);
            // Don't look across a newline boundary for a postfix incop.
            tt = peekTokenOrEOL();
            if (!(tt == Token.INC || tt == Token.DEC)) {
                return pn;
            }
            consumeToken();
            UnaryExpression uexpr = new UnaryExpression(tt, ts.tokenBeg, pn, true);
            uexpr.setLineno(line);
            checkBadIncDec(uexpr);
            return uexpr;
    }
}
