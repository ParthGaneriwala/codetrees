public ActionForward insere(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
    ActionMessages mens = new ActionMessages();
    List<String> parametersMessage = new ArrayList<String>();
    try {
        Long idUsuario = (Long) ((LazyValidatorForm) form).get(PROPRIEDADE_ID_USUARIO);
        Usuario usuario = (Usuario) ((LazyValidatorForm) form).get(PROPRIEDADE_USUARIO);
        usuario.setId(idUsuario);
        usuario = (Usuario) this.getUsuarioService().pesquisa(usuario);
        if (validaCampos(mapping, form, request)) {
            Long idGrupo = Long.valueOf((String) ((LazyValidatorForm) form).get(PROPRIEDADE_ID_GRUPO));
            Grupo grupo = (Grupo) ((LazyValidatorForm) form).get(PROPRIEDADE_GRUPO);
            grupo.setId(idGrupo);
            this.getUsuarioService().adicionaGrupo(usuario, grupo);
            parametersMessage.clear();
            parametersMessage.add("gravado");
            mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("mensagem.crud.sucesso", parametersMessage.toArray()));
            request.setAttribute(Constantes.MENSAGEM_SUCESSO, mens);
        }
        limparPropriedadesForm((LazyValidatorForm) form);
        ((LazyValidatorForm) form).set(PROPRIEDADE_USUARIO, usuario);
        ((LazyValidatorForm) form).set(PROPRIEDADE_ID_USUARIO, usuario.getId());
    } catch (EntityExistsServiceException ex) {
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.EntityExistsServiceException.InsertOrUpdate"));
        request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
    } catch (ServiceException ex) {
        Logger.getLogger(UsuarioGrupoAction.class.getName()).log(Level.SEVERE, null, ex);
        parametersMessage.clear();
        parametersMessage.add(ex.getMessage());
        mens.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("erro.fatal", parametersMessage.toArray()));
        request.setAttribute(Constantes.MENSAGEM_ERRO, mens);
    }
    return mapping.findForward(Constantes.FORWARD_SUCESSO);
}
